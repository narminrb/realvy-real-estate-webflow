{"version":3,"file":"pane.js","sources":["../../src/structure/i18n/index.ts","../../src/structure/components/DocTitle.tsx","../../src/structure/components/confirmDeleteDialog/ConfirmDeleteDialogBody.styles.tsx","../../src/structure/components/paneItem/PaneItemPreview.tsx","../../src/structure/components/paneRouter/BackLink.tsx","../../src/structure/components/pane/usePaneLayout.ts","../../src/structure/components/paneRouter/ChildLink.tsx","../../src/structure/components/paneRouter/ParameterizedLink.tsx","../../src/structure/components/paneRouter/ReferenceChildLink.tsx","../../src/structure/components/paneRouter/usePaneRouter.ts","../../src/structure/components/confirmDeleteDialog/ReferencePreviewLink.tsx","../../src/structure/components/confirmDeleteDialog/ConfirmDeleteDialogBody.tsx","../../src/structure/components/confirmDeleteDialog/useReferringDocuments.ts","../../src/structure/components/confirmDeleteDialog/ConfirmDeleteDialog.tsx","../../src/structure/components/confirmDeleteDialog/index.tsx","../../src/structure/components/Delay.tsx","../../src/structure/components/pane/constants.ts","../../src/structure/components/pane/PaneDivider.tsx","../../src/structure/components/pane/Pane.tsx","../../src/structure/components/pane/PaneContent.styles.tsx","../../src/structure/components/pane/usePane.ts","../../src/structure/components/pane/PaneContent.tsx","../../src/structure/components/pane/PaneMenuButtonItem.tsx","../../src/structure/components/pane/PaneContextMenuButton.tsx","../../src/structure/components/pane/PaneFooter.styles.tsx","../../src/structure/components/pane/PaneFooter.tsx","../../src/structure/components/pane/PaneHeader.styles.tsx","../../src/structure/components/pane/PaneHeader.tsx","../../src/structure/components/pane/PaneHeaderActionButton.tsx","../../src/structure/components/pane/PaneLayout.styles.tsx","../../src/structure/components/pane/helpers/_calcPaneResize.ts","../../src/structure/components/pane/helpers/_getDOMPath.ts","../../src/structure/components/pane/helpers/_sortElements.ts","../../src/structure/components/pane/paneLayoutController.ts","../../src/structure/components/pane/PaneLayout.tsx","../../src/structure/menuNodes.ts","../../src/structure/components/IntentButton.tsx","../../src/structure/components/paneHeaderActions/InsufficientPermissionsMessageTooltip.tsx","../../src/structure/components/paneHeaderActions/PaneHeaderCreateButton.tsx","../../src/structure/components/paneHeaderActions/PaneHeaderActions.tsx","../../src/structure/components/MissingSchemaType.tsx","../../src/structure/components/paneItem/PaneItem.tsx","../../src/structure/components/RenderActionCollectionState.tsx","../../src/structure/components/RenderBadgeCollectionState.tsx","../../src/structure/panes/error/ErrorPane.tsx","../../src/structure/panes/loading/getWaitMessages.ts","../../src/structure/panes/loading/LoadingPane.tsx","../../src/structure/panes/document/useDocumentPane.tsx","../../src/structure/panes/document/comments/CommentsWrapper.tsx","../../src/structure/constants.ts","../../src/structure/useStructureTool.ts","../../src/structure/panes/document/constants.ts","../../src/structure/panes/document/DocumentInspectorMenuItemsResolver.tsx","../../src/structure/panes/document/useDocumentTitle.ts","../../src/structure/panes/document/DocumentOperationResults.tsx","../../src/structure/components/paneItem/helpers.tsx","../../src/structure/panes/document/documentInspector/DocumentInspectorHeader.tsx","../../src/structure/panes/document/documentInspector/Resizer.tsx","../../src/structure/panes/document/documentInspector/Resizable.tsx","../../src/structure/panes/document/documentInspector/DocumentInspectorPanel.tsx","../../src/structure/useStructureToolSetting.ts","../../src/structure/panes/document/inspectDialog/constants.ts","../../src/structure/panes/document/inspectDialog/helpers.ts","../../src/structure/panes/document/inspectDialog/InspectDialog.styles.tsx","../../src/structure/panes/document/inspectDialog/Search.tsx","../../src/structure/panes/document/inspectDialog/InspectDialog.tsx","../../src/structure/panes/document/documentPanel/banners/Banner.tsx","../../src/structure/panes/document/documentPanel/banners/DeletedDocumentBanner.tsx","../../src/structure/panes/document/documentPanel/banners/DeprecatedDocumentTypeBanner.tsx","../../src/structure/components/requestPermissionDialog/__telemetry__/RequestPermissionDialog.telemetry.ts","../../src/structure/components/requestPermissionDialog/RequestPermissionDialog.tsx","../../src/structure/components/requestPermissionDialog/useRoleRequestsStatus.tsx","../../src/structure/panes/document/documentPanel/banners/InsufficientPermissionBanner.tsx","../../src/structure/panes/document/documentPanel/banners/ReferenceChangedBanner.tsx","../../src/structure/panes/document/documentPanel/banners/__telemetry__/DraftLiveEditBanner.telemetry.ts","../../src/structure/panes/document/documentPanel/banners/DraftLiveEditBanner.tsx","../../src/structure/panes/document/documentPanel/documentViews/FormHeader.tsx","../../src/structure/panes/document/documentPanel/documentViews/useConditionalToast.ts","../../src/structure/panes/document/documentPanel/documentViews/FormView.tsx","../../src/structure/panes/document/documentPanel/DocumentPanel.tsx","../../src/structure/panes/document/statusBar/dialogs/constants.ts","../../src/structure/panes/document/statusBar/dialogs/ConfirmDialog.tsx","../../src/structure/panes/document/statusBar/dialogs/ModalDialog.tsx","../../src/structure/panes/document/statusBar/dialogs/PopoverDialog.tsx","../../src/structure/panes/document/statusBar/ActionStateDialog.tsx","../../src/structure/panes/document/statusBar/ActionMenuButton.tsx","../../src/structure/documentActions/DeleteAction.tsx","../../src/structure/documentActions/DiscardChangesAction.tsx","../../src/structure/documentActions/DuplicateAction.tsx","../../src/structure/documentActions/HistoryRestoreAction.tsx","../../src/structure/documentActions/__telemetry__/documentActions.telemetry.ts","../../src/structure/documentActions/PublishAction.tsx","../../src/structure/documentActions/UnpublishAction.tsx","../../src/structure/panes/document/statusBar/DocumentStatusBarActions.tsx","../../src/structure/panes/document/documentPanel/header/DocumentHeaderTabs.tsx","../../src/structure/panes/document/documentPanel/header/DocumentHeaderTitle.tsx","../../src/structure/panes/document/documentPanel/header/DocumentPanelHeader.tsx","../../src/structure/components/spacerButton/SpacerButton.tsx","../../src/structure/panes/document/statusBar/DocumentBadges.tsx","../../src/structure/panes/document/statusBar/DocumentStatusPulse/AnimatedStatusIcon.tsx","../../src/structure/panes/document/statusBar/DocumentStatusPulse/DocumentStatusPulse.tsx","../../src/structure/panes/document/statusBar/DocumentStatusLine.tsx","../../src/structure/panes/document/statusBar/RevisionStatusLine.tsx","../../src/structure/panes/document/statusBar/useResizeObserver.ts","../../src/structure/panes/document/statusBar/DocumentStatusBar.tsx","../../src/structure/panes/document/keyboardShortcuts/DocumentActionShortcuts.tsx","../../src/structure/panes/document/menuItems.ts","../../src/structure/panes/document/usePreviewUrl.ts","../../src/structure/panes/document/document-layout/DocumentLayoutError.tsx","../../src/structure/panes/document/document-layout/DocumentLayout.tsx","../../src/structure/panes/document/document-layout/useDocumentLayoutComponent.ts","../../src/structure/panes/document/__telemetry__/documentPanes.telemetry.ts","../../src/structure/panes/document/getInitialValueTemplateOpts.ts","../../src/structure/panes/document/DocumentPaneProvider.tsx","../../src/structure/panes/document/DocumentPane.tsx","../../src/structure/panes/documentList/constants.ts","../../src/structure/panes/documentList/DocumentListPaneContent.tsx","../../src/structure/panes/documentList/helpers.ts","../../src/structure/structureBuilder/util/getExtendedProjection.ts","../../src/structure/panes/documentList/listenSearchQuery.ts","../../src/structure/panes/documentList/useDocumentList.ts","../../src/structure/panes/documentList/DocumentListPane.tsx","../../src/structure/panes/documentList/PaneHeader.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListSelect.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListProvider.tsx","../../src/structure/panes/documentList/sheetList/SheetListCell.tsx","../../src/structure/panes/documentList/sheetList/useDocumentSheetColumns.tsx","../../src/structure/panes/documentList/sheetList/ColumnsControl.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListFilter.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListHeader.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListPaginator.tsx","../../src/structure/panes/documentList/sheetList/useDocumentSheetListStore.ts","../../src/structure/panes/documentList/sheetList/useDocumentSheetList.ts","../../src/structure/panes/documentList/sheetList/DocumentSheetListPane.tsx","../../src/structure/panes/documentList/PaneContainer.tsx","../../src/structure/structureBuilder/SerializeError.ts","../../src/structure/structureBuilder/Sort.ts","../../src/structure/structureBuilder/MenuItem.ts","../../src/structure/structureBuilder/MenuItemGroup.ts","../../src/structure/structureBuilder/util/validateId.ts","../../src/structure/structureBuilder/util/getStructureNodeId.ts","../../src/structure/structureBuilder/Component.ts","../../src/structure/structureBuilder/util/resolveTypeForDocument.ts","../../src/structure/structureBuilder/views/View.ts","../../src/structure/structureBuilder/views/ComponentView.ts","../../src/structure/structureBuilder/views/FormView.ts","../../src/structure/structureBuilder/views/index.ts","../../src/structure/structureBuilder/Document.ts","../../src/structure/structureBuilder/InitialValueTemplateItem.ts","../../src/structure/structureBuilder/Intent.ts","../../src/structure/structureBuilder/Layout.ts","../../src/structure/structureBuilder/GenericList.ts","../../src/structure/structureBuilder/DocumentList.ts","../../src/structure/structureBuilder/List.ts","../../src/structure/structureBuilder/ListItem.ts","../../src/structure/structureBuilder/DocumentListItem.ts","../../src/structure/structureBuilder/DocumentTypeList.ts","../../src/structure/structureBuilder/documentTypeListItems.ts","../../src/structure/structureBuilder/createStructureBuilder.ts","../../src/structure/documentBadges/LiveEditBadge.ts","../../src/structure/getIntentState.ts","../../src/structure/panes/document/timeline/constants.ts","../../src/structure/panes/document/timeline/helpers.ts","../../src/structure/panes/document/timeline/expandableTimelineItemButton.tsx","../../src/structure/panes/document/timeline/timeline.styled.tsx","../../src/structure/panes/document/timeline/timelineI18n.ts","../../src/structure/panes/document/timeline/userAvatarStack.tsx","../../src/structure/panes/document/timeline/timelineItem.tsx","../../src/structure/panes/document/timeline/utils.ts","../../src/structure/panes/document/timeline/timeline.tsx","../../src/structure/panes/document/timeline/TimelineError.tsx","../../src/structure/panes/document/timeline/timelineMenu.tsx","../../src/structure/panes/document/inspectors/changes/ChangesInspector.tsx","../../src/structure/panes/document/inspectors/changes/HistorySelector.tsx","../../src/structure/panes/document/inspectors/changes/ChangesTabs.tsx","../../src/structure/panes/document/inspectors/changes/index.ts","../../src/structure/panes/document/inspectors/validation/getPathTitles.ts","../../src/structure/panes/document/inspectors/validation/ValidationInspector.tsx","../../src/structure/panes/document/inspectors/validation/index.ts","../../src/structure/router.ts","../../src/structure/structureTool.ts","../../src/structure/StructureToolProvider.tsx"],"sourcesContent":["import {defineLocaleResourceBundle} from 'sanity'\n\n/**\n * The locale namespace for the structure tool\n *\n * @public\n */\nexport const structureLocaleNamespace = 'structure' as const\n\n/**\n * The default locale bundle for the structure tool, which is US English.\n *\n * @internal\n */\nexport const structureUsEnglishLocaleBundle = defineLocaleResourceBundle({\n  locale: 'en-US',\n  namespace: structureLocaleNamespace,\n  resources: () => import('./resources'),\n})\n\n/**\n * The locale resource keys for the structure tool.\n *\n * @alpha\n * @hidden\n */\nexport type {StructureLocaleResourceKeys} from './resources'\n","import {type SanityDocumentLike} from '@sanity/types'\nimport {unstable_useValuePreview as useValuePreview, useSchema, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport interface DocTitleProps {\n  document: SanityDocumentLike\n}\n\nexport function DocTitle(props: DocTitleProps) {\n  const {document: documentValue} = props\n  const schema = useSchema()\n  const schemaType = schema.get(documentValue._type)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const {error, value} = useValuePreview({\n    schemaType: schemaType!,\n    value: documentValue,\n  })\n\n  if (!schemaType) {\n    return <code>{t('doc-title.unknown-schema-type.text', {schemaType: documentValue._type})}</code>\n  }\n\n  if (error) {\n    return <>{t('doc-title.error.text', {errorMessage: error.message})}</>\n  }\n\n  return (\n    <>\n      {value?.title || (\n        <span style={{color: 'var(--card-muted-fg-color)'}}>{t('doc-title.fallback.text')}</span>\n      )}\n    </>\n  )\n}\n","import {InfoOutlineIcon} from '@sanity/icons'\nimport {Box, Flex, Inline, rem, Text} from '@sanity/ui'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Tooltip} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\n\nexport const ChevronWrapper = styled(Box)`\n  margin-left: auto;\n`\n\nexport const CrossDatasetReferencesDetails = styled.details`\n  flex: none;\n\n  &[open] ${ChevronWrapper} {\n    transform: rotate(180deg);\n  }\n`\n\nexport const CrossDatasetReferencesSummary = styled.summary`\n  list-style: none;\n\n  &::-webkit-details-marker {\n    display: none;\n  }\n`\n\nexport const Table = styled.table`\n  width: 100%;\n  text-align: left;\n  padding: 0 ${({theme}) => rem(theme.sanity.space[2])};\n  border-collapse: collapse;\n\n  th {\n    padding: ${({theme}) => rem(theme.sanity.space[1])};\n  }\n\n  td {\n    padding: 0 ${({theme}) => rem(theme.sanity.space[1])};\n  }\n\n  tr > *:last-child {\n    text-align: right;\n  }\n`\n\nexport const DocumentIdFlex = styled(Flex)`\n  min-height: 33px;\n`\n\nexport const OtherReferenceCount = (props: {totalCount: number; references: unknown[]}) => {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const difference = props.totalCount - props.references.length\n\n  if (!difference) return null\n\n  return (\n    <Box padding={2}>\n      <Inline space={2}>\n        <Text size={1} muted>\n          {t('confirm-delete-dialog.other-reference-count.title', {count: difference})}\n        </Text>\n\n        <Tooltip\n          portal\n          placement=\"top\"\n          content={t('confirm-delete-dialog.other-reference-count.tooltip')}\n        >\n          <Text size={1} muted>\n            <InfoOutlineIcon />\n          </Text>\n        </Tooltip>\n      </Inline>\n    </Box>\n  )\n}\n","import {type SanityDocument, type SchemaType} from '@sanity/types'\nimport {Flex} from '@sanity/ui'\nimport {isNumber, isString} from 'lodash'\nimport {type ComponentType, isValidElement, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {\n  type DocumentPresence,\n  DocumentPreviewPresence,\n  type DocumentPreviewStore,\n  DocumentStatus,\n  DocumentStatusIndicator,\n  type GeneralPreviewLayoutKey,\n  getPreviewStateObservable,\n  getPreviewValueWithFallback,\n  isRecord,\n  SanityDefaultPreview,\n} from 'sanity'\n\nimport {TooltipDelayGroupProvider} from '../../../ui-components'\n\nexport interface PaneItemPreviewProps {\n  documentPreviewStore: DocumentPreviewStore\n  icon: ComponentType | false\n  layout: GeneralPreviewLayoutKey\n  presence?: DocumentPresence[]\n  schemaType: SchemaType\n  value: SanityDocument\n}\n\n/**\n * Preview component for _documents_ rendered in structure panes.\n *\n * Note that non-document previews are not handled by this component,\n * despite being pane items! Non-document previews bypass this entirely\n * and are rendered by `<SanityDefaultPreview>`.\n */\nexport function PaneItemPreview(props: PaneItemPreviewProps) {\n  const {icon, layout, presence, schemaType, value} = props\n  const title =\n    (isRecord(value.title) && isValidElement(value.title)) ||\n    isString(value.title) ||\n    isNumber(value.title)\n      ? value.title\n      : null\n\n  const previewStateObservable = useMemo(\n    () => getPreviewStateObservable(props.documentPreviewStore, schemaType, value._id, title),\n    [props.documentPreviewStore, schemaType, title, value._id],\n  )\n  const {draft, published, isLoading} = useObservable(previewStateObservable, {\n    draft: null,\n    isLoading: true,\n    published: null,\n  })\n\n  const status = isLoading ? null : (\n    <TooltipDelayGroupProvider>\n      <Flex align=\"center\" gap={3}>\n        {presence && presence.length > 0 && <DocumentPreviewPresence presence={presence} />}\n        <DocumentStatusIndicator draft={draft} published={published} />\n      </Flex>\n    </TooltipDelayGroupProvider>\n  )\n\n  const tooltip = <DocumentStatus draft={draft} published={published} />\n\n  return (\n    <SanityDefaultPreview\n      {...getPreviewValueWithFallback({value, draft, published})}\n      isPlaceholder={isLoading}\n      icon={icon}\n      layout={layout}\n      status={status}\n      tooltip={tooltip}\n    />\n  )\n}\n","import {type ComponentType, type ForwardedRef, forwardRef, useContext, useMemo} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\nimport {type BackLinkProps} from './types'\n\n/**\n * @internal\n */\nexport const BackLink = forwardRef(function BackLink(\n  props: BackLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {routerPanesState, groupIndex} = useContext(PaneRouterContext)\n  const panes = useMemo(() => routerPanesState.slice(0, groupIndex), [groupIndex, routerPanesState])\n  const state = useMemo(() => ({panes}), [panes])\n\n  return <StateLink {...props} ref={ref} state={state} />\n}) as ComponentType<BackLinkProps>\n","import {useContext} from 'react'\nimport {PaneLayoutContext} from 'sanity/_singletons'\n\nimport {type PaneLayoutContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function usePaneLayout(): PaneLayoutContextValue {\n  const pane = useContext(PaneLayoutContext)\n\n  if (!pane) {\n    throw new Error('PaneLayout: missing context value')\n  }\n\n  return pane\n}\n","import {type ForwardedRef, forwardRef, useContext} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\nimport {type ChildLinkProps} from './types'\n\n/**\n * @internal\n */\nexport const ChildLink = forwardRef(function ChildLink(\n  props: ChildLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {childId, childPayload, childParameters, ...rest} = props\n  const {routerPanesState, groupIndex} = useContext(PaneRouterContext)\n\n  return (\n    <StateLink\n      {...rest}\n      ref={ref}\n      state={{\n        panes: [\n          ...routerPanesState.slice(0, groupIndex + 1),\n          [{id: childId, params: childParameters, payload: childPayload}],\n        ],\n      }}\n    />\n  )\n})\n","import {type ForwardedRef, forwardRef, type ReactNode, useContext, useMemo} from 'react'\nimport {useUnique} from 'sanity'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\ninterface ParameterizedLinkProps {\n  params?: Record<string, string>\n  payload?: unknown\n  children?: ReactNode\n}\n\n/**\n * @internal\n */\nexport const ParameterizedLink = forwardRef(function ParameterizedLink(\n  props: ParameterizedLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {routerPanesState: currentPanes, groupIndex, siblingIndex} = useContext(PaneRouterContext)\n  const {params, payload, ...rest} = props\n  const nextParams = useUnique(params)\n  const nextPayload = useUnique(payload)\n\n  const nextState = useMemo(() => {\n    const currentGroup = currentPanes[groupIndex]\n    const currentSibling = currentGroup[siblingIndex]\n\n    const nextSibling = {\n      ...currentSibling,\n      params: nextParams ?? currentSibling.params,\n      payload: nextPayload ?? currentSibling.payload,\n    }\n\n    const nextGroup = [\n      ...currentGroup.slice(0, siblingIndex),\n      nextSibling,\n      ...currentGroup.slice(siblingIndex + 1),\n    ]\n\n    const nextPanes = [\n      ...currentPanes.slice(0, groupIndex),\n      nextGroup,\n      ...currentPanes.slice(groupIndex + 1),\n    ]\n\n    return {panes: nextPanes}\n  }, [currentPanes, groupIndex, nextParams, nextPayload, siblingIndex])\n\n  return <StateLink ref={ref} {...rest} state={nextState} />\n})\n","import {toString as pathToString} from '@sanity/util/paths'\nimport {type ForwardedRef, forwardRef} from 'react'\n\nimport {ChildLink} from './ChildLink'\nimport {type ReferenceChildLinkProps} from './types'\n\nexport const ReferenceChildLink = forwardRef(function ReferenceChildLink(\n  {documentId, documentType, parentRefPath, children, template, ...rest}: ReferenceChildLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  return (\n    <ChildLink\n      {...rest}\n      ref={ref}\n      childId={documentId}\n      childPayload={template?.params}\n      childParameters={{\n        type: documentType,\n        parentRefPath: pathToString(parentRefPath),\n        ...(template && {template: template?.id}),\n      }}\n    >\n      {children}\n    </ChildLink>\n  )\n})\n","import {useContext} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\n\nimport {type PaneRouterContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta\n */\nexport function usePaneRouter(): PaneRouterContextValue {\n  return useContext(PaneRouterContext)\n}\n","import {type SanityDocument, type SchemaType} from '@sanity/types'\nimport {type ReactNode, useCallback} from 'react'\nimport {\n  type FIXME,\n  getPublishedId,\n  PreviewCard,\n  useDocumentPresence,\n  useDocumentPreviewStore,\n} from 'sanity'\n\nimport {PaneItemPreview} from '../paneItem/PaneItemPreview'\nimport {usePaneRouter} from '../paneRouter'\n\nconst EMPTY_ARRAY: [] = []\n\ninterface ReferencePreviewLinkProps {\n  onClick?: () => void\n  type: SchemaType & {icon?: any}\n  value: SanityDocument\n}\n\nexport function ReferencePreviewLink(props: ReferencePreviewLinkProps) {\n  const {onClick, type, value} = props\n  const publishedId = getPublishedId(value?._id)\n  const documentPresence = useDocumentPresence(publishedId)\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {ReferenceChildLink} = usePaneRouter()\n\n  const Link = useCallback(\n    function LinkComponent(linkProps: {children: ReactNode}) {\n      return (\n        <ReferenceChildLink\n          documentId={value?._id}\n          documentType={type?.name}\n          parentRefPath={EMPTY_ARRAY}\n          {...linkProps}\n        />\n      )\n    },\n    [ReferenceChildLink, type?.name, value?._id],\n  )\n\n  return (\n    <PreviewCard __unstable_focusRing as={Link as FIXME} data-as=\"a\" onClick={onClick} radius={2}>\n      <PaneItemPreview\n        documentPreviewStore={documentPreviewStore}\n        icon={type?.icon}\n        layout=\"compact\"\n        presence={documentPresence?.length > 0 ? documentPresence : EMPTY_ARRAY}\n        schemaType={type}\n        value={value}\n      />\n    </PreviewCard>\n  )\n}\n","import {\n  ChevronDownIcon,\n  CopyIcon,\n  DocumentsIcon,\n  UnknownIcon,\n  WarningOutlineIcon,\n} from '@sanity/icons'\nimport {Box, Card, Flex, Stack, Text, useToast} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport CopyToClipboard from 'react-copy-to-clipboard'\nimport {SanityDefaultPreview, Translate, useSchema, useTranslation} from 'sanity'\n\nimport {Button} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {\n  ChevronWrapper,\n  CrossDatasetReferencesDetails,\n  CrossDatasetReferencesSummary,\n  DocumentIdFlex,\n  OtherReferenceCount,\n  Table,\n} from './ConfirmDeleteDialogBody.styles'\nimport {ReferencePreviewLink} from './ReferencePreviewLink'\nimport {type ReferringDocuments} from './useReferringDocuments'\n\ntype DeletionConfirmationDialogBodyProps = Required<ReferringDocuments> & {\n  documentTitle: React.ReactNode\n  action: 'unpublish' | 'delete'\n  onReferenceLinkClick?: () => void\n}\n\n/**\n * The inner part of the `ConfirmDeleteDialog`. This is ran when both the\n * `crossDatasetReferences` and `internalReferences` are loaded.\n */\nexport function ConfirmDeleteDialogBody({\n  crossDatasetReferences,\n  internalReferences,\n  documentTitle,\n  totalCount,\n  action,\n  datasetNames,\n  hasUnknownDatasetNames,\n  onReferenceLinkClick,\n}: DeletionConfirmationDialogBodyProps) {\n  const schema = useSchema()\n  const toast = useToast()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const renderPreviewItem = useCallback(\n    (item: any) => {\n      const type = schema.get(item._type)\n      if (type) {\n        return <ReferencePreviewLink type={type} value={item} onClick={onReferenceLinkClick} />\n      }\n\n      return (\n        // Padding added to match the ReferencePreviewLink styling\n        <Box padding={2}>\n          <SanityDefaultPreview\n            icon={UnknownIcon}\n            title={t('confirm-delete-dialog.preview-item.preview-unavailable.title')}\n            subtitle={t('confirm-delete-dialog.preview-item.preview-unavailable.subtitle', {\n              documentId: item._id,\n            })}\n            layout=\"default\"\n          />\n        </Box>\n      )\n    },\n    [schema, t, onReferenceLinkClick],\n  )\n\n  if (internalReferences?.totalCount === 0 && crossDatasetReferences?.totalCount === 0) {\n    return (\n      <Text as=\"p\" size={1}>\n        <Translate\n          t={t}\n          i18nKey=\"confirm-delete-dialog.confirmation.text\"\n          context={action}\n          components={{DocumentTitle: () => <strong>{documentTitle}</strong>}}\n        />\n      </Text>\n    )\n  }\n\n  // We do some extra checks to handle cases where you have unavailable dataset\n  // name(s) due to permissions, both alone and in combination with known datasets\n\n  // This normalizes one or more undefined dataset names to the catch-all `unavailable`\n  const normalizedDatasetNames = [\n    ...datasetNames,\n    ...(hasUnknownDatasetNames ? ['unavailable'] : []),\n  ]\n\n  const datasetSubtitle = t('confirm-delete-dialog.cdr-summary.subtitle', {\n    count: normalizedDatasetNames.length,\n    datasets: normalizedDatasetNames.join(', '),\n    context: hasUnknownDatasetNames && normalizedDatasetNames.length ? 'unavailable' : '',\n  })\n\n  return (\n    <Flex direction=\"column\" gap={4}>\n      <Card padding={3} radius={2} tone=\"caution\" flex=\"none\">\n        <Flex>\n          <Text aria-hidden=\"true\" size={1}>\n            <WarningOutlineIcon />\n          </Text>\n          <Box flex={1} marginLeft={3}>\n            <Text size={1}>\n              <Translate\n                i18nKey=\"confirm-delete-dialog.referring-document-count.text\"\n                components={{DocumentTitle: () => documentTitle}}\n                t={t}\n                values={{count: totalCount}}\n              />\n            </Text>\n          </Box>\n        </Flex>\n      </Card>\n      <Box flex=\"none\">\n        <Text size={1}>\n          <Translate\n            i18nKey=\"confirm-delete-dialog.referring-documents-descriptor.text\"\n            t={t}\n            context={action}\n            components={{DocumentTitle: () => documentTitle}}\n          />\n        </Text>\n      </Box>\n      <Card radius={2} shadow={1} flex=\"auto\" padding={2}>\n        <Flex direction=\"column\">\n          {internalReferences.totalCount > 0 && (\n            <Stack as=\"ul\" marginBottom={2} space={2} data-testid=\"internal-references\">\n              {internalReferences?.references.map((item) => (\n                <Box as=\"li\" key={item._id}>\n                  {renderPreviewItem(item)}\n                </Box>\n              ))}\n\n              {internalReferences.totalCount > internalReferences.references.length && (\n                <Box as=\"li\" padding={3}>\n                  <OtherReferenceCount {...internalReferences} />\n                </Box>\n              )}\n            </Stack>\n          )}\n\n          {crossDatasetReferences.totalCount > 0 && (\n            <CrossDatasetReferencesDetails\n              data-testid=\"cross-dataset-references\"\n              style={{\n                // only add the border if needed\n                borderTop:\n                  internalReferences.totalCount > 0\n                    ? '1px solid var(--card-shadow-outline-color)'\n                    : undefined,\n              }}\n            >\n              <CrossDatasetReferencesSummary>\n                <Card\n                  as=\"a\"\n                  marginTop={internalReferences.totalCount > 0 ? 2 : 0}\n                  radius={2}\n                  shadow={1}\n                  paddingY={1}\n                >\n                  <Flex align=\"center\" gap={3} paddingX={3} paddingY={1}>\n                    <Text size={1}>\n                      <DocumentsIcon />\n                    </Text>\n                    <Stack space={2}>\n                      <Text textOverflow=\"ellipsis\" size={1}>\n                        {t('confirm-delete-dialog.cdr-summary.title', {\n                          count: normalizedDatasetNames.length,\n                          documentCount: t('confirm-delete-dialog.cdr-summary.document-count', {\n                            count: crossDatasetReferences.totalCount,\n                          }),\n                        })}\n                      </Text>\n                      <Text title={datasetSubtitle} textOverflow=\"ellipsis\" size={1} muted>\n                        {datasetSubtitle}\n                      </Text>\n                    </Stack>\n                    <ChevronWrapper>\n                      <Text muted size={1}>\n                        <ChevronDownIcon />\n                      </Text>\n                    </ChevronWrapper>\n                  </Flex>\n                </Card>\n              </CrossDatasetReferencesSummary>\n\n              <Box overflow=\"auto\" paddingTop={2}>\n                <Table>\n                  <thead>\n                    <tr>\n                      <th>\n                        <Text muted size={1} style={{minWidth: '5rem'}} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.project-id.label')}\n                        </Text>\n                      </th>\n                      <th>\n                        <Text muted size={1} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.dataset.label')}\n                        </Text>\n                      </th>\n                      <th>\n                        <Text muted size={1} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.document-id.label')}\n                        </Text>\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {crossDatasetReferences.references\n                      .filter((reference): reference is Required<typeof reference> => {\n                        return 'projectId' in reference\n                      })\n                      .map(({projectId, datasetName, documentId}, index) => (\n                        // eslint-disable-next-line react/no-array-index-key\n                        <tr key={`${documentId}-${index}`}>\n                          <td>\n                            <Text size={1}>{projectId}</Text>\n                          </td>\n                          <td>\n                            <Text size={1}>{datasetName || 'unavailable'}</Text>\n                          </td>\n                          <td>\n                            <DocumentIdFlex align=\"center\" gap={2} justify=\"flex-end\">\n                              <Text textOverflow=\"ellipsis\" size={1}>\n                                {documentId || 'unavailable'}\n                              </Text>\n                              {documentId && (\n                                <CopyToClipboard\n                                  text={documentId}\n                                  // eslint-disable-next-line react/jsx-no-bind\n                                  onCopy={() => {\n                                    toast.push({\n                                      title: t(\n                                        'confirm-delete-dialog.cdr-table.id-copied-toast.title',\n                                      ),\n                                      status: 'success',\n                                    })\n                                  }}\n                                >\n                                  <Button\n                                    mode=\"bleed\"\n                                    icon={CopyIcon}\n                                    tooltipProps={{\n                                      content: t(\n                                        'confirm-delete-dialog.cdr-table.copy-id-button.tooltip',\n                                      ),\n                                    }}\n                                  />\n                                </CopyToClipboard>\n                              )}\n                            </DocumentIdFlex>\n                          </td>\n                        </tr>\n                      ))}\n                  </tbody>\n                </Table>\n\n                <OtherReferenceCount {...crossDatasetReferences} />\n              </Box>\n            </CrossDatasetReferencesDetails>\n          )}\n        </Flex>\n      </Card>\n      <Box flex=\"none\">\n        <Text size={1}>\n          <Translate\n            i18nKey=\"confirm-delete-dialog.referential-integrity-disclaimer.text\"\n            t={t}\n            context={action}\n            components={{DocumentTitle: () => documentTitle}}\n          />\n        </Text>\n      </Box>\n    </Flex>\n  )\n}\n","import {type ClientError, type SanityClient} from '@sanity/client'\nimport {useMemo} from 'react'\nimport {EMPTY, fromEvent, type Observable, of, timer} from 'rxjs'\nimport {\n  catchError,\n  distinctUntilChanged,\n  map,\n  shareReplay,\n  startWith,\n  switchMap,\n} from 'rxjs/operators'\nimport {\n  type AvailabilityResponse,\n  createHookFromObservableFactory,\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  type DocumentStore,\n  getDraftId,\n  getPublishedId,\n  useClient,\n  useDocumentStore,\n} from 'sanity'\n\n// this is used in place of `instanceof` so the matching can be more robust and\n// won't have any issues with dual packages etc\n// https://nodejs.org/api/packages.html#dual-package-hazard\nfunction isClientError(e: unknown): e is ClientError {\n  if (typeof e !== 'object') return false\n  if (!e) return false\n  return 'statusCode' in e && 'response' in e\n}\n\nconst POLL_INTERVAL = 5000\n\n// only fetches when the document is visible\nlet visiblePoll$: Observable<number>\nconst getVisiblePoll$ = () => {\n  if (!visiblePoll$) {\n    visiblePoll$ = fromEvent(document, 'visibilitychange').pipe(\n      // add empty emission to have this fire on creation\n      startWith(null),\n      map(() => document.visibilityState === 'visible'),\n      distinctUntilChanged(),\n      switchMap((visible) =>\n        visible\n          ? // using timer instead of interval since timer will emit on creation\n            timer(0, POLL_INTERVAL)\n          : EMPTY,\n      ),\n      shareReplay({refCount: true, bufferSize: 1}),\n    )\n  }\n  return visiblePoll$\n}\n\nexport type ReferringDocuments = {\n  isLoading: boolean\n  totalCount: number\n  projectIds: string[]\n  datasetNames: string[]\n  hasUnknownDatasetNames: boolean\n  internalReferences?: {\n    totalCount: number\n    references: Array<{_id: string; _type: string}>\n  }\n  crossDatasetReferences?: {\n    totalCount: number\n    references: Array<{\n      /**\n       * The project ID of the document that is currently referencing the subject\n       * document. Unlike `documentId` and `datasetName`, this should always be\n       * defined.\n       */\n      projectId: string\n      /**\n       * The ID of the document that is currently referencing the subject\n       * document. This will be omitted if there is no access to the current\n       * project and dataset pair (e.g. if no `sanity-project-token` were\n       * configured)\n       */\n      documentId?: string\n      /**\n       * The dataset name that is currently referencing the subject document.\n       * This will be omitted if there is no access to the current project and\n       * dataset pair (e.g. if no `sanity-project-token` were configured)\n       */\n      datasetName?: string\n    }>\n  }\n}\n\nfunction getDocumentExistence(\n  documentId: string,\n  {versionedClient}: {versionedClient: SanityClient},\n): Observable<string | undefined> {\n  const draftId = getDraftId(documentId)\n  const publishedId = getPublishedId(documentId)\n  const requestOptions = {\n    uri: versionedClient.getDataUrl('doc', `${draftId},${publishedId}`),\n    json: true,\n    query: {excludeContent: 'true'},\n    tag: 'use-referring-documents.document-existence',\n  }\n  return versionedClient.observable.request<AvailabilityResponse>(requestOptions).pipe(\n    map(({omitted}) => {\n      const nonExistant = omitted.filter((doc) => doc.reason === 'existence')\n      if (nonExistant.length === 2) {\n        // None of the documents exist\n        return undefined\n      }\n\n      if (nonExistant.length === 0) {\n        // Both exist, so use the published one\n        return publishedId\n      }\n\n      // If the draft does not exist, use the published ID, and vice versa\n      return nonExistant.some((doc) => doc.id === draftId) ? publishedId : draftId\n    }),\n  )\n}\n\n/**\n * fetches the cross-dataset references using the client observable.request\n * method (for that requests can be automatically cancelled)\n */\nfunction fetchCrossDatasetReferences(\n  documentId: string,\n  context: {versionedClient: SanityClient},\n): Observable<ReferringDocuments['crossDatasetReferences']> {\n  const {versionedClient} = context\n\n  return getVisiblePoll$().pipe(\n    switchMap(() => getDocumentExistence(documentId, context)),\n    switchMap((checkDocumentId) => {\n      if (!checkDocumentId) {\n        return of({totalCount: 0, references: []})\n      }\n\n      const currentDataset = versionedClient.config().dataset\n\n      return versionedClient.observable\n        .request({\n          url: `/data/references/${currentDataset}/documents/${checkDocumentId}/to?excludeInternalReferences=true&excludePaths=true`,\n          tag: 'use-referring-documents.external',\n        })\n        .pipe(\n          catchError((e) => {\n            // it's possible that referencing document doesn't exist yet so the\n            // API will return a 404. In those cases, we want to catch and return\n            // a response with no references\n            if (isClientError(e) && e.statusCode === 404) {\n              return of({totalCount: 0, references: []})\n            }\n\n            throw e\n          }),\n        )\n    }),\n  )\n}\n\nconst useInternalReferences = createHookFromObservableFactory(\n  ([documentId, documentStore]: [string, DocumentStore]) => {\n    const referencesClause = '*[references($documentId)][0...100]{_id,_type}'\n    const totalClause = 'count(*[references($documentId)])'\n    const fetchQuery = `{\"references\":${referencesClause},\"totalCount\":${totalClause}}`\n    const listenQuery = '*[references($documentId)]'\n\n    return documentStore.listenQuery(\n      {fetch: fetchQuery, listen: listenQuery},\n      {documentId},\n      {tag: 'use-referring-documents', transitions: ['appear', 'disappear'], throttleTime: 5000},\n    ) as Observable<ReferringDocuments['internalReferences']>\n  },\n)\n\nconst useCrossDatasetReferences = createHookFromObservableFactory(\n  ([documentId, versionedClient]: [string, SanityClient]) => {\n    // (documentId: string, versionedClient: SanityClient) => {\n    return getVisiblePoll$().pipe(\n      switchMap(() =>\n        fetchCrossDatasetReferences(documentId, {\n          versionedClient,\n        }),\n      ),\n    )\n  },\n)\n\nexport function useReferringDocuments(documentId: string): ReferringDocuments {\n  const versionedClient = useClient(DEFAULT_STUDIO_CLIENT_OPTIONS)\n\n  const documentStore = useDocumentStore()\n  const publishedId = getPublishedId(documentId)\n\n  const [internalReferences, isInternalReferencesLoading] = useInternalReferences(\n    useMemo(() => [publishedId, documentStore], [documentStore, publishedId]),\n  )\n\n  const [crossDatasetReferences, isCrossDatasetReferencesLoading] = useCrossDatasetReferences(\n    useMemo(() => [publishedId, versionedClient], [publishedId, versionedClient]),\n  )\n\n  const projectIds = useMemo(() => {\n    return Array.from(\n      new Set(\n        crossDatasetReferences?.references\n          .map((crossDatasetReference) => crossDatasetReference.projectId)\n          .filter(Boolean),\n      ),\n    ).sort()\n  }, [crossDatasetReferences?.references])\n\n  const datasetNames = useMemo(() => {\n    return Array.from(\n      new Set<string>(\n        crossDatasetReferences?.references\n          // .filter((name) => typeof name === 'string')\n          .map((crossDatasetReference) => crossDatasetReference?.datasetName || '')\n          .filter((datasetName) => Boolean(datasetName) && datasetName !== ''),\n      ),\n    ).sort()\n  }, [crossDatasetReferences?.references])\n\n  const hasUnknownDatasetNames = useMemo(() => {\n    return Boolean(\n      crossDatasetReferences?.references.some(\n        (crossDatasetReference) => typeof crossDatasetReference.datasetName !== 'string',\n      ),\n    )\n  }, [crossDatasetReferences?.references])\n\n  return {\n    totalCount: (internalReferences?.totalCount || 0) + (crossDatasetReferences?.totalCount || 0),\n    projectIds,\n    datasetNames,\n    hasUnknownDatasetNames,\n    internalReferences,\n    crossDatasetReferences,\n    isLoading: isInternalReferencesLoading || isCrossDatasetReferencesLoading,\n  }\n}\n","import {Box, Flex} from '@sanity/ui'\nimport {useId, useMemo} from 'react'\nimport {LoadingBlock, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Dialog} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {DocTitle} from '../DocTitle'\nimport {ConfirmDeleteDialogBody} from './ConfirmDeleteDialogBody'\nimport {useReferringDocuments} from './useReferringDocuments'\n\n/** @internal */\nexport const DialogBody = styled(Box)`\n  box-sizing: border-box;\n`\n\n/** @internal */\nexport const LoadingContainer = styled(Flex).attrs({\n  align: 'center',\n  direction: 'column',\n  justify: 'center',\n})`\n  height: 110px;\n`\n\n/** @internal */\nexport interface ConfirmDeleteDialogProps {\n  /**\n   * Incoming document ID used to find other referencing documents. This\n   * field respects draft IDs (e.g. if you pass in a published ID when one\n   * doesn't exist the document title may not show up).\n   */\n  id: string\n  /**\n   * The schema typename of the incoming document\n   */\n  type: string\n  /**\n   * The name of the action being done. (e.g. the `'unpublish'` action requires\n   * the same document deletion confirmation).\n   */\n  action?: 'delete' | 'unpublish'\n  onCancel: () => void\n  onConfirm: () => void\n}\n\n/**\n * A confirmation dialog used to prevent unwanted document deletes. Loads all\n * the referencing internal and cross-data references prior to showing the\n * delete button.\n *\n * @internal\n */\nexport function ConfirmDeleteDialog({\n  id,\n  type,\n  action = 'delete',\n  onCancel,\n  onConfirm,\n}: ConfirmDeleteDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const dialogId = `deletion-confirmation-${useId()}`\n  const {\n    internalReferences,\n    crossDatasetReferences,\n    isLoading,\n    totalCount,\n    projectIds,\n    datasetNames,\n    hasUnknownDatasetNames,\n  } = useReferringDocuments(id)\n  const documentTitle = <DocTitle document={useMemo(() => ({_id: id, _type: type}), [id, type])} />\n  const showConfirmButton = !isLoading\n\n  return (\n    <Dialog\n      width={1}\n      id={dialogId}\n      header={t('confirm-delete-dialog.header.text', {context: action})}\n      footer={{\n        cancelButton: {\n          onClick: onCancel,\n          text: t('confirm-delete-dialog.cancel-button.text'),\n        },\n        confirmButton: showConfirmButton\n          ? {\n              text:\n                totalCount > 0\n                  ? t('confirm-delete-dialog.confirm-anyway-button.text', {context: action})\n                  : t('confirm-delete-dialog.confirm-button.text', {context: action}),\n              onClick: onConfirm,\n            }\n          : undefined,\n      }}\n      onClose={onCancel}\n      onClickOutside={onCancel}\n    >\n      <DialogBody>\n        {crossDatasetReferences && internalReferences && !isLoading ? (\n          <ConfirmDeleteDialogBody\n            crossDatasetReferences={crossDatasetReferences}\n            internalReferences={internalReferences}\n            documentTitle={documentTitle}\n            isLoading={isLoading}\n            totalCount={totalCount}\n            action={action}\n            projectIds={projectIds}\n            datasetNames={datasetNames}\n            hasUnknownDatasetNames={hasUnknownDatasetNames}\n            onReferenceLinkClick={onCancel}\n          />\n        ) : (\n          <LoadingContainer data-testid=\"loading-container\">\n            <LoadingBlock showText title={t('confirm-delete-dialog.loading.text')} />\n          </LoadingContainer>\n        )}\n      </DialogBody>\n    </Dialog>\n  )\n}\n","import {Box, Text} from '@sanity/ui'\nimport {type ComponentProps, useCallback, useId, useState} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {Dialog, ErrorBoundary} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {ConfirmDeleteDialog, type ConfirmDeleteDialogProps} from './ConfirmDeleteDialog'\n\nexport type {ConfirmDeleteDialogProps}\n\ntype ArgType<T> = T extends (arg: infer U) => unknown ? U : never\ntype ErrorInfo = ArgType<ComponentProps<typeof ErrorBoundary>['onCatch']>\n\n/** @internal */\nfunction ConfirmDeleteDialogContainer(props: ConfirmDeleteDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const id = useId()\n  const [error, setError] = useState<ErrorInfo | null>(null)\n  const handleRetry = useCallback(() => setError(null), [])\n\n  return error ? (\n    <Dialog\n      id={`dialog-error-${id}`}\n      data-testid=\"confirm-delete-error-dialog\"\n      header={t('confirm-delete-dialog.error.title.text')}\n      footer={{\n        confirmButton: {\n          text: t('confirm-delete-dialog.error.retry-button.text'),\n          onClick: handleRetry,\n          tone: 'default',\n        },\n      }}\n      onClose={props.onCancel}\n    >\n      <Box padding={4}>\n        <Text size={1}>{t('confirm-delete-dialog.error.message.text')}</Text>\n      </Box>\n    </Dialog>\n  ) : (\n    <ErrorBoundary onCatch={setError}>\n      <ConfirmDeleteDialog {...props} />\n    </ErrorBoundary>\n  )\n}\n\nexport {ConfirmDeleteDialogContainer as ConfirmDeleteDialog}\n","import {type ReactElement, useEffect, useState} from 'react'\n\nexport function Delay({\n  children,\n  ms = 0,\n}: {\n  children?: ReactElement | (() => ReactElement)\n  ms?: number\n}): ReactElement {\n  const [ready, setReady] = useState(ms <= 0)\n\n  useEffect(() => {\n    if (ms <= 0) {\n      return undefined\n    }\n\n    const timeoutId = setTimeout(() => setReady(true), ms)\n\n    return () => {\n      clearTimeout(timeoutId)\n    }\n  }, [ms])\n\n  if (!ready || !children) {\n    return <></>\n  }\n\n  return typeof children === 'function' ? children() : children\n}\n","/**\n * @internal\n */\nexport const PANE_DEBUG = false\n\n/**\n * @internal\n */\nexport const PANE_COLLAPSED_WIDTH = 51\n\n/**\n * @internal\n */\nexport const PANE_DEFAULT_MIN_WIDTH = PANE_COLLAPSED_WIDTH * 4\n","import {Layer} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {styled} from 'styled-components'\n\nimport {usePaneLayout} from './usePaneLayout'\n\nconst Root = styled(Layer)`\n  position: relative;\n  width: 1px;\n  min-width: 1px;\n\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    width: 1px;\n    background-color: var(--card-border-color);\n  }\n\n  &:not([data-disabled]) {\n    cursor: ew-resize;\n    width: 9px;\n    min-width: 9px;\n    margin: 0 -4px;\n\n    &:before {\n      left: 4px;\n    }\n\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 9px;\n      bottom: 0;\n      background-color: var(--card-border-color);\n      opacity: 0;\n      transition: opacity 150ms;\n    }\n\n    &[data-dragging]:after,\n    &:hover:after {\n      opacity: 0.2;\n    }\n  }\n`\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneDivider({\n  disabled,\n  element,\n}: {\n  disabled?: boolean\n  element: HTMLElement | null\n}) {\n  const {resize} = usePaneLayout()\n  const [dragging, setDragging] = useState(false)\n\n  const handleMouseDown = useCallback(\n    (event: any) => {\n      if (!element) return\n\n      setDragging(true)\n\n      event.preventDefault()\n\n      const startX = event.pageX\n\n      resize('start', element, 0)\n\n      const handleMouseMove = (e: MouseEvent) => {\n        e.preventDefault()\n\n        const deltaX = e.pageX - startX\n\n        resize('move', element, deltaX)\n      }\n\n      const handleMouseUp = (e: MouseEvent) => {\n        e.preventDefault()\n\n        setDragging(false)\n\n        window.removeEventListener('mousemove', handleMouseMove)\n        window.removeEventListener('mouseup', handleMouseUp)\n\n        resize('end', element, 0)\n      }\n\n      window.addEventListener('mousemove', handleMouseMove)\n      window.addEventListener('mouseup', handleMouseUp)\n    },\n    [element, resize],\n  )\n\n  return (\n    <Root\n      data-disabled={disabled ? '' : undefined}\n      data-dragging={dragging ? '' : undefined}\n      onMouseDown={handleMouseDown}\n    />\n  )\n}\n","import {BoundaryElementProvider, Card, type CardProps, Code, Flex} from '@sanity/ui'\nimport {\n  type ForwardedRef,\n  forwardRef,\n  type HTMLProps,\n  type ReactNode,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {IsLastPaneProvider, LegacyLayerProvider} from 'sanity'\nimport {PaneContext} from 'sanity/_singletons'\nimport {styled} from 'styled-components'\n\nimport {PANE_COLLAPSED_WIDTH, PANE_DEBUG, PANE_DEFAULT_MIN_WIDTH} from './constants'\nimport {PaneDivider} from './PaneDivider'\nimport {usePaneLayout} from './usePaneLayout'\n\ninterface PaneProps {\n  children?: ReactNode\n  currentMinWidth?: number\n  currentMaxWidth?: number\n  flex?: number\n  id: string\n  minWidth?: number\n  maxWidth?: number\n  selected?: boolean\n}\n\nconst Root = styled(Card)`\n  outline: none;\n\n  // NOTE: This will render a border to the right side of each pane\n  // without taking up physical space.\n  box-shadow: 1px 0 0 var(--card-border-color);\n`\n\n/**\n * @hidden\n * @internal\n */\n// eslint-disable-next-line complexity\nexport const Pane = forwardRef(function Pane(\n  props: PaneProps &\n    Omit<CardProps, 'as' | 'overflow'> &\n    Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'hidden' | 'id' | 'style'>,\n  forwardedRef: ForwardedRef<HTMLDivElement>,\n) {\n  const {\n    children,\n    currentMinWidth: currentMinWidthProp,\n    currentMaxWidth: currentMaxWidthProp,\n    flex: flexProp = 1,\n    id,\n    minWidth: minWidthProp,\n    maxWidth: maxWidthProp,\n    selected = false,\n    ...restProps\n  } = props\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const {\n    collapse,\n    collapsed: layoutCollapsed,\n    expand,\n    expandedElement,\n    mount,\n    panes,\n  } = usePaneLayout()\n  const pane = panes.find((p) => p.element === rootElement)\n  const paneIndex = pane && panes.indexOf(pane)\n  const nextPane = typeof paneIndex === 'number' ? panes[paneIndex + 1] : undefined\n  const isLast = paneIndex === panes.length - 1\n  const expanded = expandedElement === rootElement\n  const collapsed = layoutCollapsed ? false : pane?.collapsed || false\n  const nextCollapsed = nextPane?.collapsed || false\n  const ref = useRef<HTMLDivElement | null>(null)\n  const flex = pane?.flex ?? flexProp\n  const currentMinWidth = pane?.currentMinWidth ?? currentMinWidthProp\n  const currentMaxWidth = pane?.currentMaxWidth ?? currentMaxWidthProp\n\n  // Forward ref to parent\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(forwardedRef, () => ref.current)\n\n  const setRef = useCallback((refValue: HTMLDivElement | null) => {\n    setRootElement(refValue)\n    ref.current = refValue\n  }, [])\n\n  useEffect(() => {\n    if (!rootElement) return undefined\n    return mount(rootElement, {\n      currentMinWidth: currentMinWidthProp,\n      currentMaxWidth: currentMaxWidthProp,\n      flex: flexProp,\n      id,\n      minWidth: minWidthProp,\n      maxWidth: maxWidthProp,\n    })\n  }, [\n    currentMinWidthProp,\n    currentMaxWidthProp,\n    flexProp,\n    id,\n    minWidthProp,\n    maxWidthProp,\n    mount,\n    rootElement,\n  ])\n\n  const handleCollapse = useCallback(() => {\n    if (!rootElement) return\n    collapse(rootElement)\n  }, [collapse, rootElement])\n\n  const handleExpand = useCallback(() => {\n    if (!rootElement) return\n    expand(rootElement)\n  }, [expand, rootElement])\n\n  const contextValue = useMemo(\n    () => ({\n      collapse: handleCollapse,\n      collapsed: layoutCollapsed ? false : collapsed,\n      expand: handleExpand,\n      index: paneIndex,\n      isLast,\n      rootElement,\n    }),\n    [collapsed, handleCollapse, handleExpand, isLast, layoutCollapsed, paneIndex, rootElement],\n  )\n\n  const minWidth = useMemo(() => {\n    if (layoutCollapsed) {\n      return undefined\n    }\n\n    if (collapsed) return PANE_COLLAPSED_WIDTH\n\n    if (currentMinWidth === 0) {\n      return minWidthProp || PANE_DEFAULT_MIN_WIDTH\n    }\n\n    if (isLast) {\n      return minWidthProp || PANE_DEFAULT_MIN_WIDTH\n    }\n\n    return currentMinWidth || minWidthProp || PANE_DEFAULT_MIN_WIDTH\n  }, [collapsed, currentMinWidth, isLast, layoutCollapsed, minWidthProp])\n\n  const maxWidth = useMemo(() => {\n    if (collapsed) return PANE_COLLAPSED_WIDTH\n\n    if (layoutCollapsed && isLast) {\n      return undefined\n    }\n\n    if (isLast) {\n      if (maxWidthProp) {\n        return currentMaxWidth ?? maxWidthProp\n      }\n\n      return undefined\n    }\n\n    return currentMaxWidth ?? maxWidthProp\n  }, [collapsed, currentMaxWidth, isLast, layoutCollapsed, maxWidthProp])\n\n  const hidden = layoutCollapsed && !isLast\n\n  const divider = useMemo(\n    () =>\n      !isLast &&\n      !layoutCollapsed && (\n        <LegacyLayerProvider zOffset=\"paneResizer\">\n          <PaneDivider disabled={collapsed || nextCollapsed} element={rootElement} />\n        </LegacyLayerProvider>\n      ),\n    [collapsed, isLast, layoutCollapsed, nextCollapsed, rootElement],\n  )\n\n  const style = useMemo(\n    () => ({\n      flex,\n      minWidth,\n      maxWidth: maxWidth === Infinity ? undefined : maxWidth,\n    }),\n    [flex, minWidth, maxWidth],\n  )\n\n  return (\n    <>\n      <LegacyLayerProvider zOffset=\"pane\">\n        <PaneContext.Provider value={contextValue}>\n          <IsLastPaneProvider isLastPane={isLast}>\n            <Root\n              data-testid=\"pane\"\n              data-ui=\"Pane\"\n              tone=\"inherit\"\n              hidden={hidden}\n              id={id}\n              overflow={layoutCollapsed ? undefined : 'hidden'}\n              {...restProps}\n              data-pane-collapsed={collapsed ? '' : undefined}\n              data-pane-index={paneIndex}\n              data-pane-selected={selected ? '' : undefined}\n              ref={setRef}\n              style={style}\n            >\n              {PANE_DEBUG && (\n                <Card padding={4} tone={expanded ? 'primary' : 'caution'}>\n                  <Code size={1}>\n                    {[\n                      `#${paneIndex}`,\n                      `collapsed=${collapsed}`,\n                      `currentMinWidth=${currentMinWidth}`,\n                      `currentMaxWidth=${currentMaxWidth}`,\n                      `flex=${flex}`,\n                      `minWidth=${minWidth}`,\n                      `maxWidth=${maxWidth}`,\n                    ].join('\\n')}\n                  </Code>\n                </Card>\n              )}\n\n              <BoundaryElementProvider element={rootElement}>\n                {!hidden && (\n                  <Flex direction=\"column\" height=\"fill\">\n                    {children}\n                  </Flex>\n                )}\n              </BoundaryElementProvider>\n            </Root>\n          </IsLastPaneProvider>\n        </PaneContext.Provider>\n      </LegacyLayerProvider>\n\n      {divider}\n    </>\n  )\n})\n","import {Card} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Card)`\n  position: relative;\n  outline: none;\n`\n\nRoot.displayName = 'PaneContent__root'\n","import {useContext} from 'react'\nimport {PaneContext} from 'sanity/_singletons'\n\nimport {type PaneContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function usePane(): PaneContextValue {\n  const pane = useContext(PaneContext)\n\n  if (!pane) {\n    throw new Error('Pane: missing context value')\n  }\n\n  return pane\n}\n","import {type BoxOverflow} from '@sanity/ui'\nimport {type ElementType, type ForwardedRef, forwardRef, type HTMLProps} from 'react'\n\nimport {Root} from './PaneContent.styles'\nimport {usePane} from './usePane'\nimport {usePaneLayout} from './usePaneLayout'\n\ninterface PaneContentProps {\n  as?: ElementType | keyof JSX.IntrinsicElements\n  overflow?: BoxOverflow\n  padding?: number | number[]\n}\n\n/**\n * @hidden\n * @internal\n */\nexport const PaneContent = forwardRef(function PaneContent(\n  props: PaneContentProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref'>,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {as, children, overflow, padding, ...restProps} = props\n  const {collapsed} = usePane()\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n\n  return (\n    <Root\n      data-testid=\"pane-content\"\n      forwardedAs={as}\n      {...restProps}\n      flex={1}\n      hidden={collapsed}\n      overflow={layoutCollapsed ? undefined : overflow}\n      padding={padding}\n      ref={ref}\n      tone=\"inherit\"\n    >\n      {children}\n    </Root>\n  )\n})\n","import {CheckmarkIcon} from '@sanity/icons'\nimport {MenuDivider, Text} from '@sanity/ui'\nimport {type MouseEvent, useCallback} from 'react'\nimport {TooltipOfDisabled, useGetI18nText, useI18nText} from 'sanity'\nimport {useIntentLink} from 'sanity/router'\n\nimport {MenuGroup, MenuItem, type PopoverProps} from '../../../ui-components'\nimport {type Intent} from '../../structureBuilder'\nimport {type _PaneMenuItem, type _PaneMenuNode} from './types'\n\nconst MENU_GROUP_POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'left-start',\n  portal: true,\n}\n\nexport function PaneMenuButtonItem(props: {\n  disabled?: boolean\n  isAfterGroup: boolean\n  node: _PaneMenuNode\n}) {\n  const {disabled, isAfterGroup, node} = props\n  const getI18nText = useGetI18nText('i18n' in node ? node : undefined)\n\n  if (node.type === 'divider') {\n    return <MenuDivider />\n  }\n\n  const {title} = getI18nText(node)\n\n  if (node.type === 'group') {\n    if (node.children.length === 0) {\n      return null\n    }\n\n    if (node.expanded) {\n      return (\n        <>\n          {isAfterGroup && <MenuDivider />}\n          {node.children.map((child, childIndex) => (\n            <PaneMenuButtonItem\n              disabled={disabled || Boolean(node.disabled)}\n              isAfterGroup={node.children[childIndex - 1]?.type === 'group'}\n              key={child.key}\n              node={child}\n            />\n          ))}\n        </>\n      )\n    }\n\n    return (\n      <>\n        {isAfterGroup && <MenuDivider />}\n        <MenuGroup\n          disabled={disabled}\n          icon={node.icon}\n          popover={MENU_GROUP_POPOVER_PROPS}\n          text={title}\n        >\n          {node.children.map((child, childIndex) => (\n            <PaneMenuButtonItem\n              disabled={disabled || Boolean(node.disabled)}\n              isAfterGroup={node.children[childIndex - 1]?.type === 'group'}\n              key={child.key}\n              node={child}\n            />\n          ))}\n        </MenuGroup>\n      </>\n    )\n  }\n\n  return (\n    <>\n      {isAfterGroup && <MenuDivider />}\n      <PaneContextMenuItemResolver disabled={disabled} node={node} />\n    </>\n  )\n}\n\nfunction PaneContextMenuItemResolver(props: {disabled?: boolean; node: _PaneMenuItem}) {\n  const {node} = props\n\n  if (node.intent) {\n    return <PaneContextIntentMenuItem {...props} intent={node.intent} />\n  }\n\n  return <PaneContextMenuItem {...props} />\n}\n\nfunction PaneContextMenuItem(props: {disabled?: boolean; node: _PaneMenuItem}) {\n  const {disabled, node} = props\n  const tooltipContent = typeof node.disabled === 'object' && (\n    <Text size={1}>{node.disabled.reason}</Text>\n  )\n  const {title} = useI18nText(node)\n\n  return (\n    <TooltipOfDisabled content={tooltipContent} placement=\"left\">\n      <MenuItem\n        disabled={disabled || Boolean(node.disabled)}\n        hotkeys={node.hotkey?.split('+')}\n        icon={node.icon}\n        iconRight={node.iconRight || (node.selected && CheckmarkIcon)}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClick={node.onAction}\n        pressed={node.selected}\n        text={title}\n        tone={node.tone}\n      />\n    </TooltipOfDisabled>\n  )\n}\n\nfunction PaneContextIntentMenuItem(props: {\n  disabled?: boolean\n  intent: Intent\n  node: _PaneMenuItem\n}) {\n  const {disabled, intent, node} = props\n  const tooltipContent = typeof node.disabled === 'object' && (\n    <Text size={1}>{node.disabled.reason}</Text>\n  )\n  const intentLink = useIntentLink({intent: intent.type, params: intent.params})\n\n  const handleClick = useCallback(\n    (event: MouseEvent<HTMLDivElement>) => {\n      intentLink.onClick(event)\n      node.onAction()\n    },\n    [intentLink, node],\n  )\n\n  const {title} = useI18nText(node)\n\n  return (\n    <TooltipOfDisabled content={tooltipContent} placement=\"left\">\n      <MenuItem\n        as=\"a\"\n        disabled={disabled || Boolean(node.disabled)}\n        hotkeys={node.hotkey?.split('+')}\n        href={intentLink.href}\n        icon={node.icon}\n        iconRight={node.selected ? CheckmarkIcon : undefined}\n        onClick={handleClick}\n        pressed={node.selected}\n        text={title}\n        tone={node.tone}\n      />\n    </TooltipOfDisabled>\n  )\n}\n","import {Menu, MenuDivider} from '@sanity/ui'\nimport {type ReactNode, useId} from 'react'\nimport {ContextMenuButton} from 'sanity'\n\nimport {MenuButton, type PopoverProps} from '../../../ui-components'\nimport {PaneMenuButtonItem} from './PaneMenuButtonItem'\nimport {type _PaneMenuItem, type _PaneMenuNode} from './types'\n\ninterface PaneContextMenuButtonProps {\n  nodes: _PaneMenuNode[]\n  actionsNodes?: ReactNode\n}\n\nconst CONTEXT_MENU_POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'bottom',\n  portal: true,\n}\n\nfunction nodesHasTone(nodes: _PaneMenuNode[], tone: NonNullable<_PaneMenuItem['tone']>): boolean {\n  return nodes.some((node) => {\n    return (\n      (node.type === 'item' && node.tone === tone) ||\n      (node.type === 'group' && nodesHasTone(node.children, tone))\n    )\n  })\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneContextMenuButton(props: PaneContextMenuButtonProps) {\n  const {nodes, actionsNodes} = props\n  const id = useId()\n\n  const hasCritical = nodesHasTone(nodes, 'critical')\n  const hasCaution = nodesHasTone(nodes, 'caution')\n\n  return (\n    <MenuButton\n      button={\n        <ContextMenuButton\n          // eslint-disable-next-line no-nested-ternary\n          tone={hasCritical ? 'critical' : hasCaution ? 'caution' : undefined}\n          data-testid=\"pane-context-menu-button\"\n        />\n      }\n      id={id}\n      menu={\n        <Menu>\n          {actionsNodes && (\n            <>\n              {actionsNodes}\n              <MenuDivider />\n            </>\n          )}\n          {nodes.map((node, nodeIndex) => {\n            const isAfterGroup = nodes[nodeIndex - 1]?.type === 'group'\n            return <PaneMenuButtonItem isAfterGroup={isAfterGroup} key={node.key} node={node} />\n          })}\n        </Menu>\n      }\n      popover={CONTEXT_MENU_POPOVER_PROPS}\n    />\n  )\n}\n","import {Card, Layer} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Layer)`\n  position: sticky;\n  bottom: 0;\n\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: -1px;\n    border-bottom: 1px solid var(--card-border-color);\n  }\n`\n\nexport const RootCard = styled(Card)`\n  padding-bottom: env(safe-area-inset-bottom);\n`\n","import {Box} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type ReactNode} from 'react'\nimport {LegacyLayerProvider} from 'sanity'\n\nimport {Root, RootCard} from './PaneFooter.styles'\nimport {usePane} from './usePane'\n\ninterface PaneFooterProps {\n  children?: ReactNode\n  padding?: number | number[]\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport const PaneFooter = forwardRef(function PaneFooter(\n  props: PaneFooterProps,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {children, padding} = props\n  const {collapsed} = usePane()\n\n  return (\n    <LegacyLayerProvider zOffset=\"paneFooter\">\n      <Root data-testid=\"pane-footer\" hidden={collapsed} ref={ref}>\n        <RootCard tone=\"inherit\">\n          <Box padding={padding}>{children}</Box>\n        </RootCard>\n      </Root>\n    </LegacyLayerProvider>\n  )\n})\n","import {Box, Card, Flex, Layer, rgba, Text, TextSkeleton, type Theme} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\ninterface RootProps {\n  $border?: boolean\n}\n\nexport const Root = styled(Layer)<RootProps>(({$border}) => {\n  return css`\n    line-height: 0;\n    position: sticky;\n    top: 0;\n\n    &:not([data-collapsed]):after {\n      content: '';\n      display: block;\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: -1px;\n      border-bottom: 1px solid ${$border ? 'var(--card-border-color)' : 'transparent'};\n      opacity: 1;\n    }\n  `\n})\n\nexport const Layout = styled(Flex)`\n  transform-origin: calc(51px / 2);\n\n  [data-collapsed] > div > & {\n    transform: rotate(90deg);\n  }\n`\n\nexport const TitleCard = styled(Card)(({theme}: {theme: Theme}) => {\n  const {fg, bg} = theme.sanity.color.card.enabled\n\n  // Disable color updates on hover\n  return css`\n    background-color: ${bg};\n\n    [data-ui='Text'] {\n      color: ${fg};\n    }\n  `\n})\n\nexport const TitleTextSkeleton = styled(TextSkeleton)`\n  width: 66%;\n  max-width: 175px;\n`\n\nexport const TitleText = styled(Text)`\n  cursor: default;\n  outline: none;\n`\n\nexport const TabsBox = styled(Box)(({theme}: {theme: Theme}) => {\n  const {color, space} = theme.sanity\n\n  return css`\n    overflow: hidden;\n    overflow: clip;\n    position: relative;\n\n    & > div {\n      white-space: nowrap;\n      overflow: auto;\n      /* Hide scrollbars */\n      scrollbar-width: none;\n      &::-webkit-scrollbar {\n        width: 0;\n        height: 0;\n      }\n    }\n\n    /* right padding */\n    & > div:after {\n      content: '';\n      display: inline-block;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      width: ${space[3]}px;\n      height: 1px;\n    }\n\n    /* Gradient that makes it look like tabs disappear into nothing (looks nicer) */\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      background: linear-gradient(to right, ${rgba(color.base.bg, 0)}, var(--card-bg-color));\n      width: ${space[3]}px;\n      pointer-events: none;\n    }\n  `\n})\n","import {Box, Card, Flex, LayerProvider, useElementRect} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type ReactNode, useCallback, useMemo} from 'react'\nimport {LegacyLayerProvider} from 'sanity'\n\nimport {Layout, Root, TabsBox, TitleCard, TitleText, TitleTextSkeleton} from './PaneHeader.styles'\nimport {usePane} from './usePane'\n\n/**\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport interface PaneHeaderProps {\n  actions?: ReactNode\n  backButton?: ReactNode\n  border?: boolean\n  contentAfter?: ReactNode\n  loading?: boolean\n  subActions?: ReactNode\n  tabIndex?: number\n  tabs?: ReactNode\n  title: ReactNode\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport const PaneHeader = forwardRef(function PaneHeader(\n  props: PaneHeaderProps,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {actions, backButton, border, contentAfter, loading, subActions, tabs, tabIndex, title} =\n    props\n  const {collapse, collapsed, expand, rootElement: paneElement} = usePane()\n  const paneRect = useElementRect(paneElement || null)\n\n  const layoutStyle = useMemo(\n    () => ({\n      width: collapsed ? paneRect?.height || window.innerHeight : undefined,\n    }),\n    [collapsed, paneRect],\n  )\n\n  const handleTitleClick = useCallback(() => {\n    if (collapsed) return\n    collapse()\n  }, [collapse, collapsed])\n\n  const handleLayoutClick = useCallback(() => {\n    if (!collapsed) return\n    expand()\n  }, [collapsed, expand])\n\n  const showTabsOrSubActions = Boolean(!collapsed && (tabs || subActions))\n\n  return (\n    <LayerProvider zOffset={100}>\n      <Root\n        $border={border}\n        data-collapsed={collapsed ? '' : undefined}\n        data-testid=\"pane-header\"\n        ref={ref}\n      >\n        <LegacyLayerProvider zOffset=\"paneHeader\">\n          <Card data-collapsed={collapsed ? '' : undefined} tone=\"inherit\">\n            <Layout\n              gap={1}\n              onClick={handleLayoutClick}\n              padding={3}\n              paddingBottom={collapsed ? 3 : 2}\n              sizing=\"border\"\n              style={layoutStyle}\n            >\n              {backButton && <Box flex=\"none\">{backButton}</Box>}\n\n              <TitleCard\n                __unstable_focusRing\n                flex={1}\n                forwardedAs=\"button\"\n                onClick={handleTitleClick}\n                paddingLeft={backButton ? 1 : 2}\n                padding={2}\n                tabIndex={tabIndex}\n              >\n                {loading && <TitleTextSkeleton animated radius={1} size={1} />}\n                {!loading && (\n                  <TitleText size={1} textOverflow=\"ellipsis\" weight=\"semibold\">\n                    {title}\n                  </TitleText>\n                )}\n              </TitleCard>\n\n              {actions && (\n                <Flex align=\"center\" hidden={collapsed}>\n                  <LegacyLayerProvider zOffset=\"paneHeader\">{actions}</LegacyLayerProvider>\n                </Flex>\n              )}\n            </Layout>\n\n            {showTabsOrSubActions && (\n              <Flex\n                align=\"center\"\n                hidden={collapsed}\n                overflow=\"auto\"\n                paddingBottom={3}\n                paddingX={3}\n              >\n                <TabsBox flex={1} marginRight={subActions ? 3 : 0}>\n                  {tabs}\n                </TabsBox>\n\n                {subActions && subActions}\n              </Flex>\n            )}\n\n            {!collapsed && contentAfter && contentAfter}\n          </Card>\n        </LegacyLayerProvider>\n      </Root>\n    </LayerProvider>\n  )\n})\n","import {UnknownIcon} from '@sanity/icons'\nimport {Menu} from '@sanity/ui'\nimport {type MouseEvent, useCallback, useId} from 'react'\nimport {StatusButton, useI18nText, useTranslation} from 'sanity'\nimport {useIntentLink} from 'sanity/router'\n\nimport {Button, MenuButton} from '../../../ui-components'\nimport {type Intent} from '../../structureBuilder'\nimport {PaneMenuButtonItem} from './PaneMenuButtonItem'\nimport {type _PaneMenuGroup, type _PaneMenuItem} from './types'\n\nfunction getDisabledReason(node: _PaneMenuItem) {\n  if (!node.disabled) {\n    return {disabledReason: undefined, ariaLabel: undefined, isDisabled: false}\n  }\n\n  /**\n   * This component supports receiving a `reason: string | react.ReactNode`.\n   * We are casting it as string, to avoid the ts error, as content will be rendered into the tooltip which only accepts string, but it won't crash if it's a ReactNode.\n   * For the aria label, we want to check if it's actually a string, to avoid generating an aria-label with the value `[object Object]`.\n   */\n  const disabledReason =\n    typeof node.disabled === 'object' ? (node.disabled.reason as string) : undefined\n  const ariaLabel =\n    typeof node.disabled === 'object' && typeof node.disabled?.reason === 'string'\n      ? node.disabled.reason\n      : 'This is disabled'\n\n  return {disabledReason, ariaLabel, isDisabled: Boolean(node.disabled)}\n}\nexport interface PaneHeaderActionButtonProps {\n  node: _PaneMenuItem | _PaneMenuGroup\n}\n\nexport function PaneHeaderActionButton(props: PaneHeaderActionButtonProps) {\n  const {node} = props\n\n  if (node.type === 'item') {\n    return <PaneHeaderMenuItemActionButton node={node} />\n  }\n\n  if (node.type === 'group') {\n    return <PaneHeaderMenuGroupActionButton node={node} />\n  }\n\n  console.warn('unknown menu node (expected `type: \"item\" | \"group\"`):', node)\n\n  return null\n}\n\nexport interface PaneHeaderMenuItemActionButtonProps {\n  node: _PaneMenuItem\n}\n\nexport function PaneHeaderMenuItemActionButton(props: PaneHeaderMenuItemActionButtonProps) {\n  const {node} = props\n  const {title} = useI18nText(node)\n  const {t} = useTranslation()\n\n  if (node.intent) {\n    return <PaneHeaderActionIntentButton {...props} intent={node.intent} />\n  }\n\n  const {disabledReason, ariaLabel, isDisabled} = getDisabledReason(node)\n\n  return (\n    <StatusButton\n      disabled={isDisabled}\n      icon={node.icon}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClick={node.onAction}\n      selected={node.selected}\n      tone={node.tone}\n      aria-label={ariaLabel || title || t('status-button.aria-label')}\n      tooltipProps={{\n        hotkeys: !isDisabled && node.hotkey ? node.hotkey.split('+') : undefined,\n        content: isDisabled ? disabledReason : title,\n      }}\n    />\n  )\n}\n\nfunction PaneHeaderActionIntentButton(props: {intent: Intent; node: _PaneMenuItem}) {\n  const {intent, node} = props\n  const intentLink = useIntentLink({intent: intent.type, params: intent.params})\n  const {t} = useTranslation()\n\n  const handleClick = useCallback(\n    (event: MouseEvent<HTMLButtonElement>) => {\n      intentLink.onClick(event)\n      node.onAction()\n    },\n    [intentLink, node],\n  )\n\n  const {disabledReason, ariaLabel, isDisabled} = getDisabledReason(node)\n\n  return (\n    <StatusButton\n      forwardedAs=\"a\"\n      disabled={isDisabled}\n      href={intentLink.href}\n      icon={node.icon}\n      onClick={handleClick}\n      selected={node.selected}\n      tone={node.tone}\n      aria-label={ariaLabel || node.title || t('status-button.aria-label')}\n      tooltipProps={{\n        hotkeys: !isDisabled && node.hotkey ? node.hotkey.split('+') : undefined,\n        content: isDisabled ? disabledReason : node.title,\n        placement: 'bottom',\n        portal: true,\n      }}\n    />\n  )\n}\n\nexport interface PaneHeaderMenuGroupActionButtonProps {\n  node: _PaneMenuGroup\n}\n\nfunction PaneHeaderMenuGroupActionButton(props: PaneHeaderMenuGroupActionButtonProps) {\n  const {node} = props\n  const {title} = useI18nText(node)\n\n  return (\n    <MenuButton\n      button={\n        <Button\n          disabled={!!node.disabled}\n          icon={node.icon ?? UnknownIcon}\n          label={title}\n          mode=\"bleed\"\n          tooltipProps={{content: node.title, portal: true}}\n        />\n      }\n      id={useId()}\n      menu={\n        <Menu>\n          {node.children.map((child, idx) => {\n            return (\n              <PaneMenuButtonItem\n                disabled={Boolean(node.disabled)}\n                isAfterGroup={node.children[idx - 1]?.type === 'group'}\n                key={child.key}\n                node={child}\n              />\n            )\n          })}\n        </Menu>\n      }\n    />\n  )\n}\n","import {Card} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Card)`\n  transition: opacity 200ms;\n  position: relative;\n  z-index: 1;\n  padding-left: env(safe-area-inset-left);\n  padding-right: env(safe-area-inset-right);\n  opacity: 0;\n\n  &:not([hidden]) {\n    display: flex;\n  }\n\n  &:not([data-collapsed]) {\n    overflow: auto;\n  }\n\n  &[data-mounted] {\n    opacity: 1;\n  }\n\n  &[data-resizing] {\n    pointer-events: none;\n  }\n`\n","import {PANE_DEFAULT_MIN_WIDTH} from '../constants'\nimport {type PaneConfigOpts, type PaneResizeCache} from '../types'\n\nexport function _calcPaneResize(\n  cache: PaneResizeCache,\n  left: PaneConfigOpts,\n  right: PaneConfigOpts,\n  deltaX: number,\n): {leftFlex: number; leftW: number; rightFlex: number; rightW: number} {\n  const sum = {\n    flex: cache.left.flex + cache.right.flex,\n    width: cache.left.width + cache.right.width,\n  }\n\n  const leftMinWidth = left.minWidth ?? PANE_DEFAULT_MIN_WIDTH\n  const rightMinWidth = right.minWidth ?? PANE_DEFAULT_MIN_WIDTH\n\n  const leftMaxWidth = Math.min(left.maxWidth || Infinity, sum.width - rightMinWidth)\n  const rightMaxWidth = Math.min(right.maxWidth || Infinity, sum.width - leftMinWidth)\n\n  // Get min. delta X\n  let minDeltaX = leftMinWidth - cache.left.width\n  const rightMinDeltaX = cache.right.width - rightMaxWidth\n  if (minDeltaX < rightMinDeltaX) {\n    minDeltaX = rightMinDeltaX\n  }\n\n  // Get max. delta X\n  let maxDeltaX = cache.right.width - rightMinWidth\n  const leftMaxDeltaX = leftMaxWidth - cache.left.width\n  if (maxDeltaX > leftMaxDeltaX) {\n    maxDeltaX = leftMaxDeltaX\n  }\n\n  const _deltaX = Math.min(Math.max(deltaX, minDeltaX), maxDeltaX)\n\n  const leftW = cache.left.width + _deltaX\n  const rightW = cache.right.width - _deltaX\n\n  const leftFlex = (leftW / sum.width) * sum.flex\n  const rightFlex = (rightW / sum.width) * sum.flex\n\n  return {leftFlex, leftW, rightFlex, rightW}\n}\n","/**\n * @internal\n */\nexport function _getDOMPath(rootElement: HTMLElement, el: HTMLElement): number[] {\n  const path: number[] = []\n\n  let e = el\n\n  while (e !== rootElement) {\n    const parentElement = e.parentElement\n\n    if (!parentElement) return path\n\n    const children = Array.from(parentElement.childNodes)\n    const index = children.indexOf(e)\n\n    path.unshift(index)\n\n    if (parentElement === rootElement) {\n      return path\n    }\n\n    e = parentElement\n  }\n\n  return path\n}\n","import {_getDOMPath} from './_getDOMPath'\n\nconst EMPTY_PATH: number[] = []\n\n/**\n * @internal\n */\nexport function _sortElements(rootElement: HTMLElement, elements: HTMLElement[]): void {\n  // Create a map containing the DOM path of each pane element.\n  // The DOM path is relative to the `rootElement`, and is used in the next step for sorting.\n  const map = new WeakMap<HTMLElement, number[]>()\n\n  for (const element of elements) {\n    map.set(element, _getDOMPath(rootElement, element))\n  }\n\n  const _sortByElementPath = (a: HTMLElement, b: HTMLElement) => {\n    const _a = map.get(a) || EMPTY_PATH\n    const _b = map.get(b) || EMPTY_PATH\n\n    const len = Math.max(_a.length, _b.length)\n\n    // Loop until there are different indexes\n    for (let i = 0; i < len; i += 1) {\n      const aIndex = _a[i] || -1\n      const bIndex = _b[i] || -1\n\n      if (aIndex !== bIndex) {\n        return aIndex - bIndex\n      }\n    }\n\n    return 0\n  }\n\n  elements.sort(_sortByElementPath)\n}\n","import {PANE_COLLAPSED_WIDTH, PANE_DEFAULT_MIN_WIDTH} from './constants'\nimport {_calcPaneResize, _sortElements} from './helpers'\nimport {\n  type PaneConfigOpts,\n  type PaneData,\n  type PaneResizeCache,\n  type PaneResizeData,\n} from './types'\n\nexport interface PaneLayoutState {\n  expandedElement: HTMLElement | null\n  panes: PaneData[]\n  resizing: boolean\n}\n\nexport type PaneLayoutStateObserver = (state: PaneLayoutState) => void\n\nexport interface PaneLayoutController {\n  collapse: (element: HTMLElement) => void\n  expand: (element: HTMLElement) => void\n  mount: (element: HTMLElement, options: PaneConfigOpts) => () => void\n  resize: (type: 'start' | 'move' | 'end', leftElement: HTMLElement, deltaX: number) => void\n  setRootElement: (nextRootElement: HTMLElement | null) => void\n  setRootWidth: (nextRootWidth: number) => void\n  subscribe: (observer: PaneLayoutStateObserver) => () => void\n}\n\nexport function createPaneLayoutController(): PaneLayoutController {\n  const observers: PaneLayoutStateObserver[] = []\n  const elements: HTMLElement[] = []\n  const optionsMap = new WeakMap<HTMLElement, PaneConfigOpts & {original: PaneConfigOpts}>()\n  const userCollapsedElementSet = new Set<HTMLElement>()\n  const cache: Partial<PaneResizeCache> = {}\n\n  // Mutable internal state\n  let rootElement: HTMLElement | null = null\n  let rootWidth = 0\n  let expandedElement: HTMLElement | null = null\n  let resizeDataMap = new Map<HTMLElement, PaneResizeData>()\n  let resizing = false\n\n  function collapse(element: HTMLElement) {\n    userCollapsedElementSet.add(element)\n\n    if (expandedElement === element) {\n      expandedElement = null\n    }\n\n    _notifyObservers()\n  }\n\n  function expand(element: HTMLElement) {\n    userCollapsedElementSet.delete(element)\n\n    expandedElement = element\n\n    _notifyObservers()\n  }\n\n  function mount(element: HTMLElement, options: PaneConfigOpts) {\n    optionsMap.set(element, {...options, original: options})\n\n    elements.push(element)\n\n    if (rootElement) {\n      _sortElements(rootElement, elements)\n    }\n\n    expand(element)\n\n    return () => {\n      const idx = elements.indexOf(element)\n\n      if (idx > -1) {\n        elements.splice(idx, 1)\n      }\n\n      optionsMap.delete(element)\n\n      _notifyObservers()\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  function resize(type: 'start' | 'move' | 'end', leftElement: HTMLElement, deltaX: number) {\n    const leftIndex = elements.indexOf(leftElement)\n    const leftOptions = optionsMap.get(leftElement)\n\n    if (!leftOptions) return\n\n    const rightElement = elements[leftIndex + 1]\n    const rightOptions = optionsMap.get(rightElement)\n\n    if (!rightOptions) return\n\n    if (type === 'start') {\n      resizing = true\n\n      cache.left = {\n        element: leftElement,\n        flex: leftOptions.flex || 1,\n        width: leftElement.offsetWidth,\n      }\n\n      cache.right = {\n        element: rightElement,\n        flex: rightOptions.flex || 1,\n        width: rightElement.offsetWidth,\n      }\n\n      _notifyObservers()\n    }\n\n    if (type === 'move' && cache.left && cache.right) {\n      resizeDataMap = new Map<HTMLElement, PaneResizeData>()\n\n      const {leftW, rightW, leftFlex, rightFlex} = _calcPaneResize(\n        cache as PaneResizeCache,\n        leftOptions,\n        rightOptions,\n        deltaX,\n      )\n\n      // update resize cache\n      resizeDataMap.set(leftElement, {flex: leftFlex, width: leftW})\n      resizeDataMap.set(rightElement, {flex: rightFlex, width: rightW})\n\n      _notifyObservers()\n    }\n\n    if (type === 'end') {\n      resizing = false\n\n      const leftResizeData = resizeDataMap.get(leftElement)\n      const rightResizeData = resizeDataMap.get(rightElement)\n\n      // Update left options\n      optionsMap.set(leftElement, {\n        ...leftOptions,\n        currentMinWidth: 0,\n        currentMaxWidth: leftOptions.maxWidth ?? Infinity,\n        flex: leftResizeData?.flex ?? leftOptions.flex,\n      })\n\n      // Update right options\n      optionsMap.set(rightElement, {\n        ...rightOptions,\n        currentMinWidth: 0,\n        currentMaxWidth: leftOptions.maxWidth ?? Infinity,\n        flex: rightResizeData?.flex ?? rightOptions.flex,\n      })\n\n      // Reset resize data map\n      resizeDataMap = new Map()\n\n      // Reset cache\n      delete cache.left\n      delete cache.right\n\n      _notifyObservers()\n    }\n  }\n\n  function setRootElement(nextRootElement: HTMLElement | null) {\n    rootElement = nextRootElement\n  }\n\n  function setRootWidth(nextRootWidth: number) {\n    rootWidth = nextRootWidth\n    _notifyObservers()\n  }\n\n  function subscribe(observer: PaneLayoutStateObserver) {\n    observers.push(observer)\n\n    return () => {\n      const idx = observers.push(observer)\n\n      if (idx > -1) {\n        observers.splice(idx, 1)\n      }\n    }\n  }\n\n  return {collapse, expand, mount, resize, setRootElement, setRootWidth, subscribe}\n\n  // eslint-disable-next-line complexity\n  function _notifyObservers() {\n    if (!rootWidth) return\n\n    // Create a reversed array of pane elements, so we can loop over them backwards.\n    // Place the expanded element first (so it has the least chance of being collapsed).\n    const _elements: HTMLElement[] = []\n    for (const element of elements) {\n      if (element !== expandedElement) {\n        _elements.unshift(element)\n      }\n    }\n    if (expandedElement) {\n      _elements.unshift(expandedElement)\n    }\n\n    const dataMap = new WeakMap<HTMLElement, PaneData>()\n    const len = _elements.length\n    const lastElement = _elements[0]\n    const collapsedWidth = (len - 1) * PANE_COLLAPSED_WIDTH\n\n    let remaingWidth = rootWidth - collapsedWidth\n\n    for (const element of _elements) {\n      const options = optionsMap.get(element)\n\n      if (!options) {\n        continue\n      }\n\n      const minWidth = options.currentMinWidth || options.minWidth || PANE_DEFAULT_MIN_WIDTH\n      const isLast = element === lastElement\n\n      // A pane is collapsed if:\n      // - it’s explictly collapsed by the user\n      const userCollapsed = userCollapsedElementSet.has(element)\n      // - it’s minimum width is larger than the remaining width\n      const sizeCollapsed = minWidth > remaingWidth\n      // - if the element is not the last (expanded pane)\n      const collapsed = isLast ? false : userCollapsed || sizeCollapsed\n\n      const resizeData = resizeDataMap.get(element)\n\n      // Collect pane data\n      dataMap.set(element, {\n        element: element,\n        collapsed: collapsed,\n        currentMinWidth: resizeData?.width ?? options.currentMinWidth,\n        currentMaxWidth: resizeData?.width ?? options.currentMaxWidth,\n        flex: resizeData?.flex ?? options.flex ?? 1,\n      })\n\n      // Update remaining width\n      if (collapsed) {\n        remaingWidth -= PANE_COLLAPSED_WIDTH\n      } else {\n        remaingWidth -= minWidth - PANE_COLLAPSED_WIDTH\n      }\n    }\n\n    const panes: PaneData[] = []\n\n    for (const element of elements) {\n      const data = dataMap.get(element)\n\n      if (data) panes.push(data)\n    }\n\n    for (const observer of observers) {\n      observer({\n        expandedElement: expandedElement || elements[elements.length - 1] || null,\n        panes,\n        resizing,\n      })\n    }\n  }\n}\n","import {type CardProps, useElementRect} from '@sanity/ui'\nimport {type HTMLProps, useEffect, useMemo, useState} from 'react'\nimport {PaneLayoutContext} from 'sanity/_singletons'\n\nimport {Root} from './PaneLayout.styles'\nimport {createPaneLayoutController, type PaneLayoutState} from './paneLayoutController'\nimport {type PaneLayoutContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport interface PaneLayoutProps {\n  minWidth?: number\n  onCollapse?: () => void\n  onExpand?: () => void\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneLayout(\n  props: PaneLayoutProps &\n    CardProps &\n    Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref' | 'wrap'>,\n) {\n  const {children, minWidth, onCollapse, onExpand, ...restProps} = props\n  const controller = useMemo(() => createPaneLayoutController(), [])\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const rootRect = useElementRect(rootElement)\n  const width = rootRect?.width || 0\n  const collapsed = width === undefined || !minWidth ? undefined : width < minWidth\n  const [state, setState] = useState<PaneLayoutState>({\n    expandedElement: null,\n    panes: [],\n    resizing: false,\n  })\n\n  // Set root element\n  useEffect(() => controller.setRootElement(rootElement), [controller, rootElement])\n\n  // Set root size\n  useEffect(() => controller.setRootWidth(width), [controller, width])\n\n  // Subscribe to state changes\n  useEffect(() => controller.subscribe(setState), [controller])\n\n  // Call the `onCollapse` and `onExpand` callbacks as the `collapsed` boolean changes\n  useEffect(() => {\n    if (collapsed === undefined) return\n    if (collapsed && onCollapse) onCollapse()\n    if (!collapsed && onExpand) onExpand()\n  }, [collapsed, onCollapse, onExpand])\n\n  // This is the context value that gives each pane the information they need\n  const paneLayout: PaneLayoutContextValue = useMemo(\n    () => ({\n      collapse: controller.collapse,\n      collapsed,\n      expand: controller.expand,\n      expandedElement: state.expandedElement,\n      mount: controller.mount,\n      panes: state.panes,\n      resize: controller.resize,\n      resizing: state.resizing,\n    }),\n    [collapsed, controller, state.expandedElement, state.panes, state.resizing],\n  )\n\n  return (\n    <PaneLayoutContext.Provider value={paneLayout}>\n      <Root\n        data-ui=\"PaneLayout\"\n        {...restProps}\n        data-collapsed={collapsed ? '' : undefined}\n        // The `data-resizing` attribute is used to improve cursor behavior\n        data-resizing={state.resizing ? '' : undefined}\n        // The `data-mounted` attribute is used to fade in the layout and prevent flash of\n        // non-collapsed panes\n        data-mounted={width ? '' : undefined}\n        ref={setRootElement}\n      >\n        {children}\n      </Root>\n    </PaneLayoutContext.Provider>\n  )\n}\n","/* eslint-disable camelcase */\n\nimport {negate} from 'lodash'\n\nimport {type _PaneMenuGroup, type _PaneMenuItem, type _PaneMenuNode} from './components/pane/types'\nimport {type DocumentFieldMenuActionNode, type PaneMenuItem, type PaneMenuItemGroup} from './types'\n\nexport function isMenuNodeButton(node: _PaneMenuNode): node is _PaneMenuItem | _PaneMenuGroup {\n  return (node.type === 'item' || node.type === 'group') && node.renderAsButton\n}\n\nexport const isNotMenuNodeButton = negate(isMenuNodeButton)\n\nexport function resolveMenuNodes(params: {\n  actionHandler: (item: PaneMenuItem) => void\n  fieldActions?: DocumentFieldMenuActionNode[]\n  menuItems: PaneMenuItem[]\n  menuItemGroups: PaneMenuItemGroup[]\n}): _PaneMenuNode[] {\n  const {fieldActions = [], menuItems, menuItemGroups} = params\n\n  const nodes: _PaneMenuNode[] = []\n\n  let keyOffset = 0\n\n  for (let i = 0; i < fieldActions.length; i += 1) {\n    const a = fieldActions[i]\n\n    nodes.push(mapFieldActionToPaneMenuNode(a, `${i}-${a.type}`))\n  }\n\n  keyOffset += nodes.length\n\n  const groups: _PaneMenuGroup[] = []\n\n  for (const itemGroup of menuItemGroups) {\n    const group = groups.find((g) => g.key === itemGroup.id)\n\n    if (!group) {\n      groups.push({\n        type: 'group',\n        key: itemGroup.id,\n\n        children: [],\n        expanded: true,\n        renderAsButton: false,\n        title: itemGroup.title,\n        i18n: itemGroup.i18n,\n      })\n    }\n  }\n\n  const ungroupedItems: _PaneMenuItem[] = []\n\n  for (let i = 0; i < menuItems.length; i += 1) {\n    const item = menuItems[i]\n\n    let group = item.group && groups.find((g) => g.key === item.group)\n\n    if (item.group && !group) {\n      group = {\n        type: 'group',\n        key: item.group,\n\n        expanded: true,\n        icon: item.icon,\n        title: item.group,\n        children: [],\n        renderAsButton: false,\n      }\n      groups.push(group)\n    }\n\n    if (group) {\n      group.children.push({\n        type: 'item',\n        key: `${keyOffset + i}-item`,\n\n        hotkey: item.shortcut,\n        icon: item.icon,\n        intent: item.intent,\n        onAction: () => params.actionHandler(item),\n        renderAsButton: item.showAsAction ?? false,\n        selected: item.selected,\n        title: item.title,\n        i18n: item.i18n,\n        tone: item.tone,\n      })\n    } else {\n      ungroupedItems.push({\n        type: 'item',\n        key: `${keyOffset + i}-item`,\n\n        hotkey: item.shortcut,\n        icon: item.icon,\n        intent: item.intent,\n        onAction: () => params.actionHandler(item),\n        renderAsButton: item.showAsAction ?? false,\n        selected: item.selected,\n        title: item.title,\n        i18n: item.i18n,\n        tone: item.tone,\n      })\n    }\n  }\n\n  return [...ungroupedItems, ...groups, ...nodes]\n}\n\nfunction mapFieldActionToPaneMenuNode(a: DocumentFieldMenuActionNode, key: string): _PaneMenuNode {\n  if (a.type === 'divider') {\n    return {\n      type: 'divider',\n      key,\n    }\n  }\n\n  if (a.type === 'group') {\n    return {\n      type: 'group',\n      key,\n\n      children: a.children.map((child, childIdx) =>\n        mapFieldActionToPaneMenuNode(child, `${key}-${childIdx}-${child.type}`),\n      ),\n      disabled: a.disabled,\n      expanded: a.expanded ?? true,\n      icon: a.icon,\n      title: a.title,\n      i18n: a.i18n,\n      renderAsButton: a.renderAsButton ?? false,\n    }\n  }\n\n  return {\n    type: 'item',\n    key,\n    intent: a.intent,\n    disabled: a.disabled,\n    icon: a.icon,\n    iconRight: a.iconRight,\n    onAction: a.onAction,\n    renderAsButton: a.renderAsButton ?? false,\n    selected: a.selected,\n    title: a.title,\n    i18n: a.i18n,\n    tone: a.tone,\n  }\n}\n","import {type ComponentProps, type ForwardedRef, forwardRef, type ReactNode, useMemo} from 'react'\nimport {IntentLink} from 'sanity/router'\n\nimport {Button, type ButtonProps} from '../../ui-components'\nimport {type PaneMenuItem} from '../types'\n\ntype RouterIntent = NonNullable<PaneMenuItem['intent']>\n\nexport const IntentButton = forwardRef(function IntentButton(\n  props: {\n    intent: RouterIntent\n  } & ButtonProps &\n    Omit<ComponentProps<typeof Button>, 'as' | 'href' | 'type'>,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {intent, ...restProps} = props\n\n  const Link = useMemo(\n    () =>\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      forwardRef(function Link(\n        linkProps: {children: ReactNode},\n        linkRef: ForwardedRef<HTMLAnchorElement>,\n      ) {\n        return (\n          <IntentLink {...linkProps} intent={intent.type} params={intent.params} ref={linkRef} />\n        )\n      }),\n    [intent],\n  )\n\n  return props.disabled ? (\n    <Button {...restProps} as=\"a\" role=\"link\" aria-disabled=\"true\" />\n  ) : (\n    <Button {...restProps} as={Link} data-as=\"a\" ref={ref as ForwardedRef<HTMLButtonElement>} />\n  )\n})\n","import {type ComponentProps, type ReactNode} from 'react'\nimport {InsufficientPermissionsMessage, useCurrentUser, useTranslation} from 'sanity'\n\nimport {Tooltip} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\n\ninterface InsufficientPermissionsMessageTooltipProps {\n  reveal: boolean\n  /**\n   * delegates to `InsufficientPermissionsMessage`'s `context` prop\n   * @see InsufficientPermissionsMessage\n   */\n  context: ComponentProps<typeof InsufficientPermissionsMessage>['context']\n  loading: boolean\n  children: ReactNode\n}\n\nexport function InsufficientPermissionsMessageTooltip({\n  reveal,\n  context,\n  loading,\n  children,\n}: InsufficientPermissionsMessageTooltipProps) {\n  const currentUser = useCurrentUser()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (!reveal) {\n    return <>{children}</>\n  }\n\n  return (\n    <Tooltip\n      content={\n        loading ? (\n          t('insufficient-permissions-message-tooltip.loading-text')\n        ) : (\n          <InsufficientPermissionsMessage context={context} currentUser={currentUser} />\n        )\n      }\n      portal\n    >\n      {/* this wrapping div is to allow mouse events */}\n      {/* while the child element is disabled */}\n      <div>{children}</div>\n    </Tooltip>\n  )\n}\n","import {AddIcon} from '@sanity/icons'\nimport {type Schema} from '@sanity/types'\nimport {Menu} from '@sanity/ui'\nimport {type ComponentProps, type ForwardedRef, forwardRef, useMemo} from 'react'\nimport {\n  type InitialValueTemplateItem,\n  type Template,\n  type TemplatePermissionsResult,\n  useGetI18nText,\n  useSchema,\n  useTemplatePermissions,\n  useTemplates,\n  useTranslation,\n} from 'sanity'\nimport {IntentLink} from 'sanity/router'\n\nimport {Button, MenuButton, MenuItem, type PopoverProps} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {IntentButton} from '../IntentButton'\nimport {InsufficientPermissionsMessageTooltip} from './InsufficientPermissionsMessageTooltip'\n\nexport type PaneHeaderIntentProps = ComponentProps<typeof IntentButton>['intent']\n\nconst POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'bottom',\n  portal: true,\n}\n\nconst getIntent = (\n  schema: Schema,\n  templates: Template[],\n  item: InitialValueTemplateItem,\n): PaneHeaderIntentProps | null => {\n  const typeName = templates.find((t) => t.id === item.templateId)?.schemaType\n  if (!typeName) return null\n\n  const baseParams = {\n    template: item.templateId,\n    type: typeName,\n    id: item.initialDocumentId,\n  }\n\n  return {\n    type: 'create',\n    params: item.parameters ? [baseParams, item.parameters] : baseParams,\n  }\n}\n\ninterface PaneHeaderCreateButtonProps {\n  templateItems: InitialValueTemplateItem[]\n}\n\nexport function PaneHeaderCreateButton({templateItems}: PaneHeaderCreateButtonProps) {\n  const schema = useSchema()\n  const templates = useTemplates()\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const getI18nText = useGetI18nText([...templateItems, ...templates])\n\n  const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions({\n    templateItems,\n  })\n\n  const nothingGranted = useMemo(() => {\n    return (\n      !isTemplatePermissionsLoading &&\n      templatePermissions?.every((permission) => !permission.granted)\n    )\n  }, [isTemplatePermissionsLoading, templatePermissions])\n\n  const permissionsById = useMemo(() => {\n    if (!templatePermissions) return {}\n    return templatePermissions.reduce<Record<string, TemplatePermissionsResult | undefined>>(\n      (acc, permission) => {\n        acc[permission.id] = permission\n        return acc\n      },\n      {},\n    )\n  }, [templatePermissions])\n\n  if (nothingGranted) {\n    return (\n      <InsufficientPermissionsMessageTooltip\n        context=\"create-document-type\"\n        reveal\n        loading={isTemplatePermissionsLoading}\n      >\n        <Button\n          aria-label={t('pane-header.disabled-created-button.aria-label')}\n          icon={AddIcon}\n          data-testid=\"action-intent-button\"\n          disabled\n          mode=\"bleed\"\n          // This button handles the tooltip in a special way, won't reuse the forced tooltip.\n          tooltipProps={null}\n        />\n      </InsufficientPermissionsMessageTooltip>\n    )\n  }\n\n  if (templateItems.length === 1) {\n    const firstItem = templateItems[0]\n    const permissions = permissionsById[firstItem.id]\n    const disabled = !permissions?.granted\n    const intent = getIntent(schema, templates, firstItem)\n    if (!intent) return null\n\n    return (\n      <InsufficientPermissionsMessageTooltip\n        reveal={disabled}\n        loading={isTemplatePermissionsLoading}\n        context=\"create-document-type\"\n      >\n        <IntentButton\n          aria-label={getI18nText(firstItem).title}\n          icon={firstItem.icon || AddIcon}\n          intent={intent}\n          mode=\"bleed\"\n          disabled={disabled}\n          data-testid=\"action-intent-button\"\n          tooltipProps={disabled ? null : {content: t('pane-header.create-new-button.tooltip')}}\n        />\n      </InsufficientPermissionsMessageTooltip>\n    )\n  }\n\n  return (\n    <MenuButton\n      button={\n        <Button\n          icon={AddIcon}\n          mode=\"bleed\"\n          data-testid=\"multi-action-intent-button\"\n          tooltipProps={{content: t('pane-header.create-new-button.tooltip')}}\n        />\n      }\n      id=\"create-menu\"\n      menu={\n        <Menu>\n          {templateItems.map((item, itemIndex) => {\n            const permissions = permissionsById[item.id]\n            const disabled = !permissions?.granted\n            const intent = getIntent(schema, templates, item)\n            const template = templates.find((i) => i.id === item.templateId)\n            if (!template || !intent) return null\n\n            const Link = forwardRef((linkProps, linkRef: ForwardedRef<never>) =>\n              disabled ? (\n                <button type=\"button\" disabled {...linkProps} ref={linkRef} />\n              ) : (\n                <IntentLink\n                  {...linkProps}\n                  intent={intent.type}\n                  params={intent.params}\n                  ref={linkRef}\n                />\n              ),\n            )\n\n            Link.displayName = 'Link'\n\n            const {title} = getI18nText({\n              ...item,\n              // replace the title with the template title\n              title: item.title || getI18nText(template).title,\n            })\n\n            return (\n              <InsufficientPermissionsMessageTooltip\n                context=\"create-document-type\"\n                key={item.id}\n                reveal={disabled}\n                loading={isTemplatePermissionsLoading}\n              >\n                <MenuItem\n                  as={Link}\n                  data-as={disabled ? 'button' : 'a'}\n                  text={title}\n                  aria-label={\n                    disabled ? t('pane-header.disabled-created-button.aria-label') : title\n                  }\n                  disabled={disabled}\n                  data-testid={`action-intent-button-${itemIndex}`}\n                />\n              </InsufficientPermissionsMessageTooltip>\n            )\n          })}\n        </Menu>\n      }\n      popover={POPOVER_PROPS}\n    />\n  )\n}\n","import {Flex} from '@sanity/ui'\nimport {uniqBy} from 'lodash'\nimport {memo, useCallback, useMemo} from 'react'\nimport {EMPTY_ARRAY, EMPTY_OBJECT, type InitialValueTemplateItem, useTemplates} from 'sanity'\n\nimport {isMenuNodeButton, isNotMenuNodeButton, resolveMenuNodes} from '../../menuNodes'\nimport {\n  type PaneMenuItem,\n  type PaneMenuItemGroup,\n  type StructureToolPaneActionHandler,\n} from '../../types'\nimport {PaneContextMenuButton} from '../pane/PaneContextMenuButton'\nimport {PaneHeaderActionButton} from '../pane/PaneHeaderActionButton'\nimport {PaneHeaderCreateButton} from './PaneHeaderCreateButton'\n\nfunction isNonNullable<T>(value: T): value is NonNullable<T> {\n  return value !== null && value !== undefined\n}\n\n/**\n * hashes an object to a string where the order of the keys don't matter\n */\nconst hashObject = (value: unknown) => {\n  const sortObject = (v: unknown): unknown => {\n    if (typeof v !== 'object' || !v) return v\n    if (Array.isArray(v)) return v.map(sortObject)\n    return Object.entries(v).sort(([keyA], [keyB]) => keyA.localeCompare(keyB, 'en'))\n  }\n\n  const normalize = (v: unknown) => JSON.parse(JSON.stringify(v))\n\n  return JSON.stringify(sortObject(normalize(value)))\n}\n\ninterface PaneHeaderActionsProps {\n  initialValueTemplateItems?: InitialValueTemplateItem[]\n  menuItems?: PaneMenuItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  actionHandlers?: Record<string, StructureToolPaneActionHandler>\n}\n\nexport const PaneHeaderActions = memo(function PaneHeaderActions(props: PaneHeaderActionsProps) {\n  const {\n    initialValueTemplateItems: initialValueTemplateItemsFromStructure = EMPTY_ARRAY,\n    menuItems = EMPTY_ARRAY,\n    menuItemGroups = EMPTY_ARRAY,\n    actionHandlers = EMPTY_OBJECT as Record<string, StructureToolPaneActionHandler>,\n  } = props\n\n  const templates = useTemplates()\n\n  const handleAction = useCallback(\n    (item: PaneMenuItem) => {\n      if (typeof item.action === 'string' && !(item.action in actionHandlers)) {\n        console.warn('No handler for action:', item.action)\n        return false\n      }\n\n      const handler =\n        // eslint-disable-next-line no-nested-ternary\n        typeof item.action === 'function'\n          ? item.action\n          : typeof item.action === 'string'\n            ? actionHandlers[item.action]\n            : null\n\n      if (handler) {\n        handler(item.params as Record<string, string>)\n        return true\n      }\n\n      return false\n    },\n    [actionHandlers],\n  )\n\n  const menuNodes = useMemo(\n    () =>\n      resolveMenuNodes({\n        actionHandler: handleAction,\n        menuItemGroups,\n        menuItems: menuItems\n          // remove items with `create` intents because those will get combined\n          // into one action button (see `initialValueTemplateItemFromMenuItems`)\n          .filter((item) => item.intent?.type !== 'create'),\n      }),\n    [handleAction, menuItemGroups, menuItems],\n  )\n\n  const actionNodes = useMemo(() => menuNodes.filter(isMenuNodeButton), [menuNodes])\n  const contextMenuNodes = useMemo(() => menuNodes.filter(isNotMenuNodeButton), [menuNodes])\n\n  const initialValueTemplateItemFromMenuItems = useMemo(() => {\n    return menuItems\n      .map((item, menuItemIndex) => {\n        if (item.intent?.type !== 'create') return null\n\n        const {params} = item.intent\n        if (!params) return null\n\n        const intentParams = Array.isArray(params) ? params[0] : params\n        const templateParams = Array.isArray(params) ? params[1] : undefined\n\n        // fallback to the schema type name as the template ID.\n        // by default, the initial template values are populated from every\n        // document type in the schema\n        const templateId = intentParams.template || intentParams.type\n        if (!templateId) return null\n\n        // eslint-disable-next-line max-nested-callbacks\n        const template = templates.find((t) => t.id === templateId)\n        // the template doesn't exist then the action might be disabled\n        if (!template) return null\n\n        const initialDocumentId = intentParams.id\n\n        return {\n          item,\n          template,\n          templateParams,\n          menuItemIndex,\n          initialDocumentId,\n        }\n      })\n      .filter(isNonNullable)\n      .map(({initialDocumentId, item, template, menuItemIndex, templateParams}) => {\n        const initialValueTemplateItem: InitialValueTemplateItem = {\n          id: `menuItem${menuItemIndex}`,\n          initialDocumentId,\n          templateId: template.id,\n          type: 'initialValueTemplateItem',\n          title: item.title || template.title,\n          i18n: item.i18n || template.i18n,\n          icon: item.icon as InitialValueTemplateItem['icon'],\n          description: template.description,\n          parameters: templateParams,\n          schemaType: template.schemaType,\n        }\n\n        return initialValueTemplateItem\n      })\n  }, [menuItems, templates])\n\n  const combinedInitialValueTemplates = useMemo(() => {\n    // this de-dupes create actions\n    return uniqBy(\n      [...initialValueTemplateItemFromMenuItems, ...initialValueTemplateItemsFromStructure],\n      (item) => hashObject([item.initialDocumentId, item.templateId, item.parameters]),\n    )\n  }, [initialValueTemplateItemFromMenuItems, initialValueTemplateItemsFromStructure])\n\n  return (\n    <Flex gap={1}>\n      {combinedInitialValueTemplates.length > 0 && (\n        <PaneHeaderCreateButton templateItems={combinedInitialValueTemplates} />\n      )}\n\n      {actionNodes.map((node) => (\n        <PaneHeaderActionButton key={node.key} node={node} />\n      ))}\n\n      {contextMenuNodes.length > 0 && <PaneContextMenuButton nodes={contextMenuNodes} />}\n    </Flex>\n  )\n})\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {type SanityDocument} from '@sanity/types'\nimport {type GeneralPreviewLayoutKey, SanityDefaultPreview, Translate, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport interface MissingSchemaTypeProps {\n  layout?: GeneralPreviewLayoutKey\n  value: SanityDocument\n}\n\nexport function MissingSchemaType(props: MissingSchemaTypeProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {layout, value} = props\n\n  return (\n    <SanityDefaultPreview\n      title={\n        <em>\n          <Translate\n            t={t}\n            i18nKey=\"pane-item.missing-schema-type.title\"\n            components={{Code: 'code'}}\n            values={{documentType: value._type}}\n          />\n        </em>\n      }\n      subtitle={\n        <Translate\n          t={t}\n          i18nKey=\"pane-item.missing-schema-type.subtitle\"\n          components={{Code: 'code'}}\n          values={{documentId: value._id}}\n        />\n      }\n      // eslint-disable-next-line react/jsx-no-bind\n      media={() => <WarningOutlineIcon />}\n      layout={layout}\n    />\n  )\n}\n","import {ChevronRightIcon, DocumentIcon, FolderIcon} from '@sanity/icons'\nimport {\n  isSanityDocument,\n  type PreviewValue,\n  type SanityDocument,\n  type SchemaType,\n} from '@sanity/types'\nimport {Box, type CardProps, Text} from '@sanity/ui'\nimport {\n  type ComponentType,\n  type MouseEvent,\n  type ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport {\n  type FIXME,\n  type GeneralPreviewLayoutKey,\n  PreviewCard,\n  SanityDefaultPreview,\n  useDocumentPresence,\n  useDocumentPreviewStore,\n  useSchema,\n} from 'sanity'\n\nimport {MissingSchemaType} from '../MissingSchemaType'\nimport {usePaneRouter} from '../paneRouter'\nimport {PaneItemPreview} from './PaneItemPreview'\n\ninterface PaneItemProps {\n  id: string\n  layout?: GeneralPreviewLayoutKey\n  icon?: ComponentType<any> | false\n  pressed?: boolean\n  selected?: boolean\n  title?: string\n  value?: PreviewValue | SanityDocument\n  schemaType?: SchemaType\n  margin?: CardProps['margin']\n  marginBottom?: CardProps['marginBottom']\n  marginTop?: CardProps['marginTop']\n}\n\n/**\n * Return `false` if we explicitly disable the icon.\n * Otherwise return the passed icon or the schema type icon as a backup.\n */\nexport function getIconWithFallback(\n  icon: ComponentType<any> | false | undefined,\n  schemaType: SchemaType | undefined,\n  defaultIcon: ComponentType<any>,\n): ComponentType<any> | false {\n  if (icon === false) {\n    return false\n  }\n\n  return icon || (schemaType && schemaType.icon) || defaultIcon || false\n}\n\nexport function PaneItem(props: PaneItemProps) {\n  const {\n    icon,\n    id,\n    layout = 'default',\n    pressed,\n    schemaType,\n    selected,\n    title,\n    value,\n    margin,\n    marginBottom,\n    marginTop,\n  } = props\n  const schema = useSchema()\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {ChildLink} = usePaneRouter()\n  const documentPresence = useDocumentPresence(id)\n  const hasSchemaType = Boolean(schemaType && schemaType.name && schema.get(schemaType.name))\n  const [clicked, setClicked] = useState<boolean>(false)\n\n  const preview = useMemo(() => {\n    if (value && isSanityDocument(value)) {\n      if (!schemaType || !hasSchemaType) {\n        return <MissingSchemaType value={value} />\n      }\n\n      return (\n        <PaneItemPreview\n          documentPreviewStore={documentPreviewStore}\n          icon={getIconWithFallback(icon, schemaType, DocumentIcon)}\n          layout={layout}\n          schemaType={schemaType}\n          value={value}\n          presence={documentPresence}\n        />\n      )\n    }\n\n    // Always render non-document values as compact previews\n    return (\n      <SanityDefaultPreview\n        status={\n          <Box style={{opacity: 0.5}}>\n            <Text muted size={1}>\n              <ChevronRightIcon />\n            </Text>\n          </Box>\n        }\n        icon={getIconWithFallback(icon, schemaType, FolderIcon)}\n        layout=\"compact\"\n        title={title}\n      />\n    )\n  }, [\n    documentPreviewStore,\n    hasSchemaType,\n    icon,\n    layout,\n    schemaType,\n    title,\n    value,\n    documentPresence,\n  ])\n\n  const Link = useMemo(\n    () =>\n      function LinkComponent(linkProps: {children: ReactNode}) {\n        return <ChildLink {...linkProps} childId={id} />\n      },\n    [ChildLink, id],\n  )\n\n  const handleClick = useCallback((e: MouseEvent<HTMLElement>) => {\n    if (e.metaKey) {\n      setClicked(false)\n      return\n    }\n\n    setClicked(true)\n  }, [])\n\n  // Reset `clicked` state when `selected` prop changes\n  useEffect(() => setClicked(false), [selected])\n\n  return (\n    <PreviewCard\n      data-testid={`pane-item-${title}`}\n      __unstable_focusRing\n      as={Link as FIXME}\n      data-as=\"a\"\n      margin={margin}\n      marginBottom={marginBottom}\n      marginTop={marginTop}\n      onClick={handleClick}\n      pressed={pressed}\n      radius={2}\n      selected={selected || clicked}\n      sizing=\"border\"\n      tabIndex={-1}\n      tone=\"inherit\"\n    >\n      {preview}\n    </PreviewCard>\n  )\n}\n","import {memo, type ReactNode} from 'react'\nimport {\n  type DocumentActionDescription,\n  type DocumentActionGroup,\n  type DocumentActionProps,\n  GetHookCollectionState,\n} from 'sanity'\n\n/** @internal */\nexport interface Action<Args, Description> {\n  (args: Args): Description | null\n}\n\n/** @internal */\nexport interface RenderActionCollectionProps {\n  actions: Action<DocumentActionProps, DocumentActionDescription>[]\n  actionProps: Omit<DocumentActionProps, 'onComplete'>\n  children: (props: {states: DocumentActionDescription[]}) => ReactNode\n  onActionComplete?: () => void\n  group?: DocumentActionGroup\n}\n\n/** @internal */\nexport const RenderActionCollectionState = memo((props: RenderActionCollectionProps) => {\n  const {actions, children, actionProps, onActionComplete, group} = props\n\n  return (\n    <GetHookCollectionState<Omit<DocumentActionProps, 'onComplete'>, DocumentActionDescription>\n      onReset={onActionComplete}\n      hooks={actions}\n      args={actionProps}\n      group={group}\n    >\n      {children}\n    </GetHookCollectionState>\n  )\n})\nRenderActionCollectionState.displayName = 'Memo(RenderActionCollectionState)'\n","import {memo, type ReactNode} from 'react'\nimport {\n  type DocumentBadgeDescription,\n  type DocumentBadgeProps,\n  type EditStateFor,\n  GetHookCollectionState,\n} from 'sanity'\n\n/** @internal */\nexport interface Badge<Args, Description> {\n  (args: Args): Description | null\n}\n\n/** @internal */\nexport interface RenderBadgeCollectionProps {\n  badges: Badge<DocumentBadgeProps, DocumentBadgeDescription>[]\n  badgeProps: EditStateFor\n  children: (props: {states: DocumentBadgeDescription[]}) => ReactNode\n}\n\n/** @internal */\nexport const RenderBadgeCollectionState = memo((props: RenderBadgeCollectionProps) => {\n  const {badges, children, badgeProps} = props\n\n  return (\n    <GetHookCollectionState<EditStateFor, DocumentBadgeDescription>\n      hooks={badges}\n      args={badgeProps}\n    >\n      {children}\n    </GetHookCollectionState>\n  )\n})\nRenderBadgeCollectionState.displayName = 'Memo(RenderBadgeCollectionState)'\n","import {Box, type CardTone} from '@sanity/ui'\n\nimport {Pane, PaneContent, PaneHeader} from '../../components/pane'\n\n/**\n * @internal\n */\nexport function ErrorPane(props: {\n  children?: React.ReactNode\n  currentMinWidth?: number\n  flex?: number\n  minWidth?: number\n  paneKey: string\n  title?: React.ReactNode\n  tone?: CardTone\n}) {\n  const {\n    children,\n    currentMinWidth,\n    flex,\n    minWidth,\n    paneKey,\n    title = 'Error',\n    tone = 'critical',\n  } = props\n\n  return (\n    <Pane\n      currentMinWidth={currentMinWidth}\n      flex={flex}\n      id={paneKey}\n      minWidth={minWidth}\n      tone={tone}\n    >\n      <PaneHeader title={title} />\n      <PaneContent overflow=\"auto\">\n        <Box paddingX={4} paddingY={5}>\n          {children}\n        </Box>\n      </PaneContent>\n    </Pane>\n  )\n}\n","import {merge, type Observable, of} from 'rxjs'\nimport {delay, mapTo} from 'rxjs/operators'\nimport {isDev} from 'sanity'\n\n/**\n * @internal\n */\nexport type WaitMessage = {messageKey: string} | {message: string}\n\n/**\n * @internal\n */\nexport function getWaitMessages(path: string[]): Observable<WaitMessage> {\n  const thresholds: (WaitMessage & {ms: number})[] = [\n    {ms: 300, messageKey: 'panes.resolving.default-message'},\n    {ms: 5000, messageKey: 'panes.resolving.slow-resolve-message'},\n  ]\n\n  if (isDev) {\n    const message = [\n      'Check console for errors?',\n      'Is your observable/promise resolving?',\n      path.length > 0 ? `Structure path: ${path.join(' ➝ ')}` : '',\n    ]\n\n    thresholds.push({\n      ms: 10000,\n      message: message.join('\\n'),\n    })\n  }\n\n  const src = of(null)\n\n  return merge(\n    ...thresholds.map((threshold) =>\n      src.pipe(\n        mapTo(\n          'messageKey' in threshold\n            ? {messageKey: threshold.messageKey}\n            : {message: threshold.message},\n        ),\n        delay(threshold.ms),\n      ),\n    ),\n  )\n}\n","import {_raf2, type CardTone, Flex} from '@sanity/ui'\nimport {memo, useEffect, useMemo, useState} from 'react'\nimport {type Observable} from 'rxjs'\nimport {LoadingBlock, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Delay} from '../../components/Delay'\nimport {Pane, PaneContent} from '../../components/pane'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {getWaitMessages, type WaitMessage} from './getWaitMessages'\n\ninterface LoadingPaneProps {\n  delay?: number\n  flex?: number\n  message?: string | ((p: string[]) => string | Observable<WaitMessage>)\n  minWidth?: number\n  paneKey: string\n  path?: string\n  selected?: boolean\n  title?: string\n  tone?: CardTone\n}\n\nconst DELAY = false\nconst DEFAULT_MESSAGE_KEY = 'panes.resolving.default-message'\n\nconst Content = styled(Flex)`\n  opacity: 0;\n  transition: opacity 200ms;\n\n  &[data-mounted] {\n    opacity: 1;\n  }\n`\n\n/**\n * @internal\n */\nexport const LoadingPane = memo((props: LoadingPaneProps) => {\n  const {\n    delay = 300,\n    flex,\n    message: messageProp = getWaitMessages,\n    minWidth,\n    paneKey,\n    path,\n    selected,\n    title,\n    tone,\n  } = props\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const resolvedMessage = useMemo(() => {\n    if (typeof messageProp === 'function') {\n      return messageProp(path ? path.split(';') : [])\n    }\n\n    return messageProp\n  }, [messageProp, path])\n\n  const [currentMessage, setCurrentMessage] = useState<string | null>(() => {\n    if (typeof resolvedMessage === 'string') return resolvedMessage\n    return t(DEFAULT_MESSAGE_KEY)\n  })\n\n  useEffect(() => {\n    if (typeof resolvedMessage !== 'object') return undefined\n    if (typeof resolvedMessage.subscribe !== 'function') return undefined\n\n    const sub = resolvedMessage.subscribe((message) => {\n      setCurrentMessage('messageKey' in message ? t(message.messageKey) : message.message)\n    })\n\n    return () => sub.unsubscribe()\n  }, [resolvedMessage, t])\n\n  const [contentElement, setContentElement] = useState<HTMLDivElement | null>(null)\n  const [mounted, setMounted] = useState(false)\n\n  useEffect(() => {\n    if (!contentElement) return undefined\n    return _raf2(() => setMounted(true))\n  }, [contentElement])\n\n  const content = (\n    <Content\n      align=\"center\"\n      data-mounted={mounted ? '' : undefined}\n      direction=\"column\"\n      height=\"fill\"\n      justify=\"center\"\n      ref={setContentElement}\n    >\n      <LoadingBlock showText title={title || currentMessage} />\n    </Content>\n  )\n\n  return (\n    <Pane flex={flex} id={paneKey} minWidth={minWidth} selected={selected} tone={tone}>\n      <PaneContent>{DELAY ? <Delay ms={delay}>{content}</Delay> : content}</PaneContent>\n    </Pane>\n  )\n})\n\nLoadingPane.displayName = 'Memo(LoadingPane)'\n","import {useContext} from 'react'\nimport {DocumentPaneContext} from 'sanity/_singletons'\n\nimport {type DocumentPaneContextValue} from './DocumentPaneContext'\n\n/** @internal */\nexport function useDocumentPane(): DocumentPaneContextValue {\n  const documentPane = useContext(DocumentPaneContext)\n\n  if (!documentPane) {\n    throw new Error('DocumentPane: missing context value')\n  }\n\n  return documentPane\n}\n","import {useCallback, useLayoutEffect, useRef} from 'react'\nimport {\n  COMMENTS_INSPECTOR_NAME,\n  CommentsEnabledProvider,\n  CommentsProvider,\n  useCommentsEnabled,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../../components'\nimport {useDocumentPane} from '../useDocumentPane'\n\ninterface CommentsWrapperProps {\n  children: React.ReactNode\n  documentId: string\n  documentType: string\n}\n\n/**\n * @internal\n * A wrapper that conditionally wraps the document layout in a comments provider\n * if the feature is enabled for the project and the current document.\n */\nexport function CommentsWrapper(props: CommentsWrapperProps) {\n  const {children, documentId, documentType} = props\n\n  return (\n    <CommentsEnabledProvider documentId={documentId} documentType={documentType}>\n      <CommentsProviderWrapper documentId={documentId} documentType={documentType}>\n        {children}\n      </CommentsProviderWrapper>\n    </CommentsEnabledProvider>\n  )\n}\n\nfunction CommentsProviderWrapper(props: CommentsWrapperProps) {\n  const {children, documentId, documentType} = props\n\n  const {enabled} = useCommentsEnabled()\n  const {connectionState, onPathOpen, inspector, openInspector} = useDocumentPane()\n  const {params, setParams, createPathWithParams} = usePaneRouter()\n\n  const selectedCommentId = params?.comment\n  const paramsRef = useRef(params)\n\n  useLayoutEffect(() => {\n    paramsRef.current = params\n  }, [params])\n\n  const getCommentLink = useCallback(\n    (commentId: string) => {\n      // Generate a path based on the current pane params.\n      // We force a value for `inspect` to ensure that this is included in URLs when comments\n      // are created outside of the inspector context (i.e. directly on the field)\n      // @todo: consider filtering pane router params and culling all non-active RHS panes prior to generating this link\n      const path = createPathWithParams({\n        ...paramsRef.current,\n        comment: commentId,\n        inspect: COMMENTS_INSPECTOR_NAME,\n      })\n      return `${window.location.origin}${path}`\n    },\n    [createPathWithParams],\n  )\n\n  const handleClearSelectedComment = useCallback(() => {\n    setParams({...paramsRef.current, comment: undefined})\n  }, [setParams])\n\n  const handleOpenCommentsInspector = useCallback(() => {\n    if (inspector?.name === COMMENTS_INSPECTOR_NAME) return\n\n    openInspector(COMMENTS_INSPECTOR_NAME)\n  }, [inspector?.name, openInspector])\n\n  // If comments are not enabled, render the default document layout\n  if (!enabled) {\n    return <>{children}</>\n  }\n\n  return (\n    <CommentsProvider\n      documentId={documentId}\n      documentType={documentType}\n      getCommentLink={getCommentLink}\n      isCommentsOpen={inspector?.name === COMMENTS_INSPECTOR_NAME}\n      isConnecting={connectionState === 'connecting'}\n      onClearSelectedComment={handleClearSelectedComment}\n      onCommentsOpen={handleOpenCommentsInspector}\n      onPathOpen={onPathOpen}\n      selectedCommentId={selectedCommentId}\n      sortOrder=\"desc\"\n      type=\"field\"\n    >\n      {children}\n    </CommentsProvider>\n  )\n}\n","/**\n * @internal\n */\nexport const _DEBUG = false\n\nexport const EMPTY_PARAMS = {}\nexport const LOADING_PANE = Symbol('LOADING_PANE')\n\nexport const DOCUMENT_PANEL_PORTAL_ELEMENT = 'documentPanelPortalElement'\n","import {useContext} from 'react'\nimport {StructureToolContext} from 'sanity/_singletons'\n\nimport {type StructureToolContextValue} from './types'\n\n/** @internal */\nexport function useStructureTool(): StructureToolContextValue {\n  const structureTool = useContext(StructureToolContext)\n\n  if (!structureTool) throw new Error(`StructureTool: missing context value`)\n\n  return structureTool\n}\n","import {type PaneRouterContextValue} from '../../components'\nimport {type PaneMenuItemGroup} from '../../types'\n\nexport const DOCUMENT_PANEL_MIN_WIDTH = 320\nexport const DOCUMENT_PANEL_INITIAL_MIN_WIDTH = 600\n\nexport const DOCUMENT_INSPECTOR_MIN_WIDTH = 320\nexport const DOCUMENT_INSPECTOR_MAX_WIDTH = 540\n\nexport const EMPTY_PARAMS: NonNullable<PaneRouterContextValue['params']> = {}\n\nexport const INSPECT_ACTION_PREFIX = 'inspect:'\n\nexport const DEFAULT_MENU_ITEM_GROUPS: PaneMenuItemGroup[] = [{id: 'inspectors'}, {id: 'links'}]\n\n// inspectors\nexport const HISTORY_INSPECTOR_NAME = 'sanity/structure/history'\nexport const VALIDATION_INSPECTOR_NAME = 'sanity/structure/validation'\n","import {memo, useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport {type DocumentInspector, type DocumentInspectorMenuItem, useUnique} from 'sanity'\n\ninterface DocumentInspectorMenuItemsResolverProps {\n  documentId: string\n  documentType: string\n  inspectors: DocumentInspector[]\n  onMenuItems: (items: DocumentInspectorMenuItem[]) => void\n}\n\n// The menu item in a document inspector are resolved in a React hook (`useMenuItem`).\n// This means that the menu item needs to be resolved in a React component (in accordance with the rules of hooks).\n// In this component, we map over the configured inspectors and render a `InspectorMenuItem` for each.\n// The `InspectorMenuItem` will resolve the menu item in a React hook and call the `setMenuItem` callback\n// with the resolved menu item and the index of the inspector.\n// Finally, we call the `onMenuItems` callback with the resolved menu items.\nexport function DocumentInspectorMenuItemsResolver(props: DocumentInspectorMenuItemsResolverProps) {\n  const {documentId, documentType, inspectors, onMenuItems} = props\n\n  const len = inspectors.length\n  const lenRef = useRef(len)\n\n  const [menuItems, setMenuItems] = useState<DocumentInspectorMenuItem[]>(() =>\n    Array.from(new Array(len)),\n  )\n\n  const menuItemsRef = useRef(menuItems)\n\n  useEffect(() => {\n    if (lenRef.current !== len) {\n      const newFieldActions = Array.from(new Array(len))\n\n      for (let i = 0; i < len; i++) {\n        newFieldActions[i] = menuItemsRef.current[i]\n      }\n\n      lenRef.current = len\n\n      setMenuItems(() => {\n        menuItemsRef.current = newFieldActions\n        return newFieldActions\n      })\n    }\n  }, [len])\n\n  const setMenuItem = useCallback((index: number, node: DocumentInspectorMenuItem) => {\n    setMenuItems((prev) => {\n      const next = [...prev]\n      next[index] = node\n      menuItemsRef.current = next\n      return next\n    })\n  }, [])\n\n  useEffect(() => {\n    onMenuItems(menuItems.filter(Boolean))\n  }, [menuItems, onMenuItems])\n\n  const InspectorMenuItems = useMemo(() => {\n    return inspectors.map((inspector, index) => {\n      return inspector.useMenuItem\n        ? ([\n            defineInspectorMenuItemComponent({\n              documentId,\n              documentType,\n              index,\n              setMenuItem,\n              useMenuItem: inspector.useMenuItem,\n            }),\n            inspector.name,\n          ] as const)\n        : ([() => null, ''] as const)\n    })\n  }, [documentId, documentType, inspectors, setMenuItem])\n\n  return (\n    <>\n      {InspectorMenuItems.map(([InspectorMenuItem, key]) => key && <InspectorMenuItem key={key} />)}\n    </>\n  )\n}\n\nfunction defineInspectorMenuItemComponent({\n  documentId,\n  documentType,\n  index,\n  setMenuItem,\n  useMenuItem,\n}: {\n  documentId: string\n  documentType: string\n  index: number\n  setMenuItem: (index: number, node: DocumentInspectorMenuItem) => void\n  useMenuItem: NonNullable<DocumentInspector['useMenuItem']>\n}) {\n  return memo(function InspectorMenuItem() {\n    const menuItem = useMenuItem({\n      documentId,\n      documentType,\n    })\n    const node = useUnique(menuItem)\n\n    useEffect(() => {\n      setMenuItem(index, node)\n    }, [node])\n\n    return null\n  })\n}\n","import {unstable_useValuePreview as useValuePreview} from 'sanity'\n\nimport {useDocumentPane} from './useDocumentPane'\n\n/**\n * useDocumentTitle hook return type.\n *\n * @beta\n * @hidden\n */\ninterface UseDocumentTitle {\n  error?: string\n  title?: string\n}\n\n/**\n * React hook that returns the document title for the current document in the document pane.\n *\n * @beta\n * @hidden\n *\n * @returns The document title or error. See {@link UseDocumentTitle}\n */\nexport function useDocumentTitle(): UseDocumentTitle {\n  const {connectionState, schemaType, title, editState} = useDocumentPane()\n  const documentValue = editState?.draft || editState?.published\n  const subscribed = Boolean(documentValue)\n\n  const {error, value} = useValuePreview({\n    enabled: subscribed,\n    schemaType,\n    value: documentValue,\n  })\n\n  if (connectionState === 'connecting' && !subscribed) {\n    return {error: undefined, title: undefined}\n  }\n\n  if (title) {\n    return {error: undefined, title}\n  }\n\n  if (!documentValue) {\n    return {error: undefined, title: `New ${schemaType?.title || schemaType?.name}`}\n  }\n\n  if (error) {\n    return {error: `Error: ${error.message}`, title: undefined}\n  }\n\n  return {error: undefined, title: value?.title}\n}\n","import {useToast} from '@sanity/ui'\nimport {memo, useEffect, useMemo, useRef} from 'react'\nimport {Translate, useDocumentOperationEvent, useTranslation} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {useDocumentPane} from './useDocumentPane'\nimport {useDocumentTitle} from './useDocumentTitle'\n\nconst IGNORE_OPS = ['patch', 'commit']\n\nexport const DocumentOperationResults = memo(function DocumentOperationResults() {\n  const {push: pushToast} = useToast()\n  const {documentId, documentType, value: documentPaneValue} = useDocumentPane()\n  const documentTitleInfo = useDocumentTitle()\n  const titleError = documentTitleInfo.error\n  const event: any = useDocumentOperationEvent(documentId, documentType)\n  const prevEvent = useRef(event)\n  const paneRouter = usePaneRouter()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const title = useMemo(() => {\n    // If title isn't set from document preview, use the title from the document pane value\n    if (\n      !documentTitleInfo.title &&\n      !titleError &&\n      !IGNORE_OPS.includes(event?.op) &&\n      typeof documentPaneValue.title === 'string' &&\n      event?.type === 'success'\n    ) {\n      return documentPaneValue.title\n    }\n    return documentTitleInfo.title\n  }, [documentTitleInfo.title, titleError, event, documentPaneValue.title])\n  //Truncate the document title and add \"...\" if it is over 25 characters\n  const documentTitleBase = title || t('panes.document-operation-results.operation-undefined-title')\n  const documentTitle =\n    documentTitleBase.length > 25 ? `${documentTitleBase.slice(0, 25)}...` : documentTitleBase\n\n  useEffect(() => {\n    if (!event || event === prevEvent.current) return\n\n    let cleanupId: number | undefined\n\n    if (event.type === 'error') {\n      pushToast({\n        closable: true,\n        duration: 30000, // 30s\n        status: 'error',\n        title: t('panes.document-operation-results.operation-error', {context: event.op}),\n        description: (\n          <details>\n            <summary>{t('panes.document-operation-results.error.summary.title')}</summary>\n            {event.error.message}\n          </details>\n        ),\n      })\n    }\n\n    if (event.type === 'success' && !IGNORE_OPS.includes(event.op)) {\n      pushToast({\n        closable: true,\n        status: 'success',\n        title: (\n          <Translate\n            context={event.op}\n            i18nKey=\"panes.document-operation-results.operation-success\"\n            t={t}\n            values={{\n              op: event.op,\n              title: documentTitle,\n            }}\n            components={{\n              Strong: 'strong',\n            }}\n          />\n        ),\n      })\n    }\n\n    /**\n     * If the document was deleted successfully, close the pane.\n     */\n    if (event.type === 'success' && event.op === 'delete') {\n      // Wait until next tick to allow deletion toasts to appear first\n      cleanupId = setTimeout(() => paneRouter.closeCurrentAndAfter(), 0) as any as number\n    }\n\n    prevEvent.current = event\n\n    // eslint-disable-next-line consistent-return\n    return () => clearTimeout(cleanupId)\n  }, [event, paneRouter, pushToast, t, documentTitle])\n\n  return null\n})\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {type PreviewValue, type SanityDocument, type SchemaType} from '@sanity/types'\nimport {assignWith} from 'lodash'\nimport {type ReactNode} from 'react'\nimport {combineLatest, type Observable, of} from 'rxjs'\nimport {map, startWith} from 'rxjs/operators'\nimport {type DocumentPreviewStore, getDraftId, getPublishedId} from 'sanity'\n\nimport {type PaneItemPreviewState} from './types'\n\nexport const isLiveEditEnabled = (schemaType: SchemaType) => schemaType.liveEdit === true\n\nexport const getMissingDocumentFallback = (item: SanityDocument) => ({\n  title: <em>{item.title ? String(item.title) : 'Missing document'}</em>,\n  subtitle: <em>{item.title ? `Missing document ID: ${item._id}` : `Document ID: ${item._id}`}</em>,\n  media: () => <WarningOutlineIcon />,\n})\n\nexport const getValueWithFallback = ({\n  value,\n  draft,\n  published,\n}: {\n  value: SanityDocument\n  draft?: Partial<SanityDocument> | PreviewValue | null\n  published?: Partial<SanityDocument> | PreviewValue | null\n}) => {\n  const snapshot = draft || published\n\n  if (!snapshot) {\n    return getMissingDocumentFallback(value)\n  }\n\n  return assignWith({}, snapshot, value, (objValue, srcValue) => {\n    return typeof srcValue === 'undefined' ? objValue : srcValue\n  })\n}\n\nexport function getPreviewStateObservable(\n  documentPreviewStore: DocumentPreviewStore,\n  schemaType: SchemaType,\n  documentId: string,\n  title: ReactNode,\n): Observable<PaneItemPreviewState> {\n  const draft$ = isLiveEditEnabled(schemaType)\n    ? of({snapshot: null})\n    : documentPreviewStore.observeForPreview(\n        {_type: 'reference', _ref: getDraftId(documentId)},\n        schemaType,\n      )\n\n  const published$ = documentPreviewStore.observeForPreview(\n    {_type: 'reference', _ref: getPublishedId(documentId)},\n    schemaType,\n  )\n\n  return combineLatest([draft$, published$]).pipe(\n    map(([draft, published]) => ({\n      draft: draft.snapshot ? {title, ...(draft.snapshot || {})} : null,\n      isLoading: false,\n      published: published.snapshot ? {title, ...(published.snapshot || {})} : null,\n    })),\n    startWith({draft: null, isLoading: true, published: null}),\n  )\n}\n","import {CloseIcon} from '@sanity/icons'\nimport {Box, Card, type CardProps, Flex, Text} from '@sanity/ui'\nimport {type HTMLProps, type ReactNode} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\n\nexport interface DocumentInspectorHeaderProps {\n  as?: CardProps['as']\n  closeButtonLabel: string\n  flex?: CardProps['flex']\n  onClose: () => void\n  title: ReactNode\n}\n\nconst Root = styled(Card)({\n  position: 'relative',\n  zIndex: 1,\n  lineHeight: 0,\n})\n\n/** @internal */\nexport function DocumentInspectorHeader(\n  props: DocumentInspectorHeaderProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref'>,\n) {\n  const {as: forwardedAs, children, closeButtonLabel, onClose, title, ...restProps} = props\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Root {...restProps} as={forwardedAs}>\n      <Flex padding={2}>\n        <Box flex={1} padding={3}>\n          <Text as=\"h1\" size={1} weight=\"medium\">\n            {title}\n          </Text>\n        </Box>\n        <Box flex=\"none\" padding={1}>\n          <Button\n            aria-label={closeButtonLabel}\n            icon={CloseIcon}\n            mode=\"bleed\"\n            onClick={onClose}\n            tooltipProps={{content: t('document-inspector.close-button.tooltip')}}\n          />\n        </Box>\n      </Flex>\n      {children}\n    </Root>\n  )\n}\n","import {type MouseEvent, useCallback, useRef} from 'react'\nimport {styled} from 'styled-components'\n\nconst Root = styled.div`\n  position: absolute;\n  top: 0;\n  left: -4px;\n  bottom: 0;\n  width: 9px;\n  z-index: 201;\n  cursor: ew-resize;\n\n  /* Border */\n  & > span:nth-child(1) {\n    display: block;\n    border-left: 1px solid var(--card-border-color);\n    position: absolute;\n    top: 0;\n    left: 4px;\n    bottom: 0;\n    transition: opacity 200ms;\n  }\n\n  /* Hover effect */\n  & > span:nth-child(2) {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 9px;\n    bottom: 0;\n    background-color: var(--card-border-color);\n    opacity: 0;\n    transition: opacity 150ms;\n  }\n\n  @media (hover: hover) {\n    &:hover > span:nth-child(2) {\n      opacity: 0.2;\n    }\n  }\n`\n\nexport function Resizer(props: {onResize: (delta: number) => void; onResizeStart: () => void}) {\n  const {onResize, onResizeStart} = props\n\n  const mouseXRef = useRef(0)\n\n  const handleMouseDown = useCallback(\n    (event: MouseEvent) => {\n      event.preventDefault()\n\n      mouseXRef.current = event.pageX\n\n      onResizeStart()\n\n      const handleMouseMove = (e: globalThis.MouseEvent) => {\n        e.preventDefault()\n        onResize(e.pageX - mouseXRef.current)\n      }\n\n      const handleMouseUp = () => {\n        window.removeEventListener('mousemove', handleMouseMove)\n        window.removeEventListener('mouseup', handleMouseUp)\n      }\n\n      window.addEventListener('mousemove', handleMouseMove)\n      window.addEventListener('mouseup', handleMouseUp)\n    },\n    [onResize, onResizeStart],\n  )\n\n  return (\n    <Root onMouseDown={handleMouseDown}>\n      {/* Hover effect */}\n      <span />\n\n      {/* Border */}\n      <span />\n    </Root>\n  )\n}\n","import {Box, type BoxProps} from '@sanity/ui'\nimport {type HTMLProps, useCallback, useMemo, useRef, useState} from 'react'\nimport {styled} from 'styled-components'\n\nimport {Resizer} from './Resizer'\n\nexport interface ResizableProps {\n  minWidth: number\n  maxWidth: number\n}\n\nconst Root = styled(Box)`\n  position: relative;\n  flex: 1;\n  padding-left: 1px;\n`\n\nexport function Resizable(\n  props: ResizableProps & BoxProps & Omit<HTMLProps<HTMLDivElement>, 'as'>,\n) {\n  const {as: forwardedAs, children, minWidth, maxWidth, ...restProps} = props\n  const [element, setElement] = useState<HTMLDivElement | null>(null)\n  const elementWidthRef = useRef<number>()\n  const [targetWidth, setTargetWidth] = useState<number>()\n\n  const handleResizeStart = useCallback(() => {\n    elementWidthRef.current = element?.offsetWidth\n  }, [element])\n\n  const handleResize = useCallback(\n    (deltaX: number) => {\n      const w = elementWidthRef.current\n\n      if (!w) return\n\n      setTargetWidth(Math.min(Math.max(w - deltaX, minWidth), maxWidth))\n    },\n    [minWidth, maxWidth],\n  )\n\n  const style = useMemo(\n    () => (targetWidth ? {flex: 'none', width: targetWidth} : {minWidth, maxWidth}),\n    [minWidth, maxWidth, targetWidth],\n  )\n\n  return (\n    <Root as={forwardedAs} {...restProps} ref={setElement} style={style}>\n      {children}\n      <Resizer onResize={handleResize} onResizeStart={handleResizeStart} />\n    </Root>\n  )\n}\n","import {Box} from '@sanity/ui'\nimport {createElement, type ReactElement, useCallback} from 'react'\n\nimport {usePane} from '../../../components'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {DOCUMENT_INSPECTOR_MAX_WIDTH, DOCUMENT_INSPECTOR_MIN_WIDTH} from '../constants'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {Resizable} from './Resizable'\n\ninterface DocumentInspectorPanelProps {\n  documentId: string\n  documentType: string\n  flex?: number | number[]\n}\n\nexport function DocumentInspectorPanel(props: DocumentInspectorPanelProps): ReactElement | null {\n  const {documentId, documentType, flex} = props\n  const {collapsed} = usePane()\n  const {closeInspector, inspector} = useDocumentPane()\n  const {features} = useStructureTool()\n\n  const handleClose = useCallback(() => {\n    if (inspector) closeInspector(inspector.name)\n  }, [closeInspector, inspector])\n\n  if (collapsed || !inspector) return null\n\n  const element = createElement(inspector.component, {\n    onClose: handleClose,\n    documentId,\n    documentType,\n  })\n\n  if (features.resizablePanes) {\n    return (\n      <Resizable\n        as=\"aside\"\n        data-ui=\"DocumentInspectorPanel\"\n        flex={flex}\n        maxWidth={DOCUMENT_INSPECTOR_MAX_WIDTH}\n        minWidth={DOCUMENT_INSPECTOR_MIN_WIDTH}\n      >\n        {element}\n      </Resizable>\n    )\n  }\n\n  return (\n    <Box as=\"aside\" data-ui=\"DocumentInspectorPanel\" flex={flex}>\n      {element}\n    </Box>\n  )\n}\n","import {useCallback, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {map} from 'rxjs/operators'\nimport {useKeyValueStore} from 'sanity'\n\nconst STRUCTURE_TOOL_NAMESPACE = 'studio.structure-tool'\n\n/**\n * @internal\n */\nexport function useStructureToolSetting<ValueType>(\n  namespace: string,\n  key: string | null,\n  defaultValue?: ValueType,\n): [ValueType | undefined, (_value: ValueType) => void] {\n  const keyValueStore = useKeyValueStore()\n\n  const keyValueStoreKey = [STRUCTURE_TOOL_NAMESPACE, namespace, key].filter(Boolean).join('.')\n\n  const value$ = useMemo(() => {\n    return keyValueStore\n      .getKey(keyValueStoreKey)\n      .pipe(map((value) => (value === null ? defaultValue : value)))\n  }, [defaultValue, keyValueStore, keyValueStoreKey])\n\n  const value = useObservable(value$, defaultValue) as ValueType\n  const set = useCallback(\n    (newValue: ValueType) => {\n      if (newValue !== value) {\n        keyValueStore.setKey(keyValueStoreKey, newValue as string)\n      }\n    },\n    [keyValueStore, keyValueStoreKey, value],\n  )\n\n  return useMemo(() => [value, set], [set, value])\n}\n","export const VIEW_MODE_PARSED = {id: 'parsed', title: 'document-inspector.view-mode.parsed'}\nexport const VIEW_MODE_RAW = {id: 'raw', title: 'document-inspector.view-mode.raw-json'}\nexport const VIEW_MODES = [VIEW_MODE_PARSED, VIEW_MODE_RAW]\n","import {type SanityDocumentLike} from '@sanity/types'\nimport LRU from 'quick-lru'\nimport {isRecord, isString} from 'sanity'\n\nconst lru = new LRU({maxSize: 1000})\n\nexport function isExpanded(keyPath: any, value: any): any {\n  const cached = lru.get(keyPath)\n\n  if (cached === undefined) {\n    lru.set(keyPath, Array.isArray(value) || isRecord(value))\n    return isExpanded(keyPath, value)\n  }\n\n  return cached\n}\n\nexport function toggleExpanded(event: any): void {\n  const {path} = event\n  const current = lru.get(path)\n\n  if (current === undefined) {\n    // something is wrong\n    return\n  }\n\n  lru.set(path, !current)\n}\n\nexport function selectElement(element: HTMLElement): void {\n  const sel = window.getSelection()\n\n  if (sel) {\n    const range = document.createRange()\n\n    sel.removeAllRanges()\n    range.selectNodeContents(element)\n    sel.addRange(range)\n  }\n}\n\nexport function select(event: any): void {\n  selectElement(event.currentTarget)\n}\n\nexport function maybeSelectAll(event: any): void {\n  const selectAll = event.keyCode === 65 && (event.metaKey || event.ctrlKey)\n\n  if (!selectAll) {\n    return\n  }\n\n  event.preventDefault()\n\n  selectElement(event.currentTarget)\n}\n\nexport function isDocumentLike(value: unknown): value is SanityDocumentLike {\n  return isRecord(value) && isString(value._id) && isString(value._type)\n}\n","import {rem, type Theme} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\nexport const JSONInspectorWrapper = styled.div(({theme}: {theme: Theme}) => {\n  const {color, fonts, space} = theme.sanity\n\n  return css`\n    & .json-inspector,\n    & .json-inspector .json-inspector__selection {\n      font-family: ${fonts.code.family};\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n      color: var(--card-code-fg-color);\n    }\n\n    & .json-inspector .json-inspector__leaf {\n      padding-left: ${rem(space[4])};\n    }\n\n    & .json-inspector .json-inspector__leaf.json-inspector__leaf_root {\n      padding-top: ${rem(space[3])};\n      padding-left: 0;\n    }\n\n    & .json-inspector > .json-inspector__leaf_root > .json-inspector__line > .json-inspector__key {\n      display: none;\n    }\n\n    & .json-inspector .json-inspector__line {\n      display: block;\n      position: relative;\n      cursor: default;\n    }\n\n    & .json-inspector .json-inspector__line::after {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: -200px;\n      right: -50px;\n      bottom: 0;\n      z-index: -1;\n      pointer-events: none;\n    }\n\n    & .json-inspector .json-inspector__line:hover::after {\n      background: var(--card-code-bg-color);\n    }\n\n    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line {\n      cursor: pointer;\n    }\n\n    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line::before {\n      content: '▸ ';\n      margin-left: calc(0 - ${rem(space[4])} + 3px);\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n    }\n\n    &\n      .json-inspector\n      .json-inspector__leaf_expanded.json-inspector__leaf_composite\n      > .json-inspector__line::before {\n      content: '▾ ';\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n    }\n\n    & .json-inspector .json-inspector__radio,\n    & .json-inspector .json-inspector__flatpath {\n      display: none;\n    }\n\n    & .json-inspector .json-inspector__value {\n      margin-left: ${rem(space[4] / 2)};\n    }\n\n    &\n      .json-inspector\n      > .json-inspector__leaf_root\n      > .json-inspector__line\n      > .json-inspector__key\n      + .json-inspector__value {\n      margin: 0;\n    }\n\n    & .json-inspector .json-inspector__key {\n      color: ${color.syntax.property};\n    }\n\n    & .json-inspector .json-inspector__value_helper,\n    & .json-inspector .json-inspector__value_null {\n      color: ${color.syntax.constant};\n    }\n\n    & .json-inspector .json-inspector__not-found {\n      padding-top: ${rem(space[3])};\n    }\n\n    & .json-inspector .json-inspector__value_string {\n      color: ${color.syntax.string};\n    }\n\n    & .json-inspector .json-inspector__value_boolean {\n      color: ${color.syntax.boolean};\n    }\n\n    & .json-inspector .json-inspector__value_number {\n      color: ${color.syntax.number};\n    }\n\n    & .json-inspector .json-inspector__show-original {\n      display: inline-block;\n      padding: 0 6px;\n      cursor: pointer;\n    }\n\n    & .json-inspector .json-inspector__show-original:hover {\n      color: inherit;\n    }\n\n    & .json-inspector .json-inspector__show-original::before {\n      content: '↔';\n    }\n\n    & .json-inspector .json-inspector__show-original:hover::after {\n      content: ' expand';\n    }\n  `\n})\n","import {SearchIcon} from '@sanity/icons'\nimport {TextInput} from '@sanity/ui'\nimport {type ChangeEvent, useCallback} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../i18n'\n\nexport function Search(props: {onChange: (q: string) => void; query: string}) {\n  const {onChange, query} = props\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => onChange(event.target.value),\n    [onChange],\n  )\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <TextInput\n      icon={SearchIcon}\n      onChange={handleChange}\n      placeholder={t('document-inspector.search.placeholder')}\n      radius={2}\n      value={query || ''}\n    />\n  )\n}\n","import JSONInspector from '@rexxars/react-json-inspector'\nimport {type SanityDocument} from '@sanity/types'\nimport {Card, Code, Flex, TabList, TabPanel} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {Translate, useTranslation} from 'sanity'\n\nimport {Dialog, Tab} from '../../../../ui-components'\nimport {DocTitle} from '../../../components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {useStructureToolSetting} from '../../../useStructureToolSetting'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {VIEW_MODE_PARSED, VIEW_MODE_RAW, VIEW_MODES} from './constants'\nimport {isDocumentLike, isExpanded, maybeSelectAll, select, toggleExpanded} from './helpers'\nimport {JSONInspectorWrapper} from './InspectDialog.styles'\nimport {Search} from './Search'\n\ninterface InspectDialogProps {\n  value: Partial<SanityDocument> | null\n}\n\nexport function InspectDialog(props: InspectDialogProps) {\n  const {value} = props\n  const {onInspectClose, paneKey} = useDocumentPane()\n  const dialogIdPrefix = `${paneKey}_inspect_`\n\n  /* this creates a view mode (the default that it opens with is the parsed tab) that is saved based on the paneKey\n  where the inspect dialog lives.\n  This also means that when a page is loaded, the state of the tabs remains and doesn't revert to the pane tab */\n  const [viewModeId, onViewModeChange] = useStructureToolSetting(\n    'inspect-view-mode',\n    null,\n    'parsed',\n  )\n\n  /* based on the view mode it shows the right tab content */\n  const viewMode = VIEW_MODES.find((mode) => mode.id === viewModeId)\n\n  const setParsedViewMode = useCallback(() => {\n    onViewModeChange(VIEW_MODE_PARSED.id)\n  }, [onViewModeChange])\n\n  const setRawViewMode = useCallback(() => {\n    onViewModeChange(VIEW_MODE_RAW.id)\n  }, [onViewModeChange])\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Dialog\n      bodyHeight=\"fill\"\n      id={`${dialogIdPrefix}dialog`}\n      header={\n        isDocumentLike(value) ? (\n          <Translate\n            t={t}\n            i18nKey=\"document-inspector.dialog.title\"\n            components={{\n              DocumentTitle: () => (\n                <em>\n                  <DocTitle document={value} />\n                </em>\n              ),\n            }}\n          />\n        ) : (\n          <em>{t('document-inspector.dialog.title-no-value')}</em>\n        )\n      }\n      onClose={onInspectClose}\n      onClickOutside={onInspectClose}\n      padding={false}\n      width={2}\n    >\n      <Flex direction=\"column\" height=\"fill\">\n        <Card\n          padding={3}\n          paddingTop={0}\n          shadow={1}\n          style={{position: 'sticky', bottom: 0, zIndex: 3}}\n        >\n          <TabList space={1}>\n            <Tab\n              aria-controls={`${dialogIdPrefix}tabpanel`}\n              id={`${dialogIdPrefix}tab-${VIEW_MODE_PARSED.id}`}\n              label={t(VIEW_MODE_PARSED.title)}\n              onClick={setParsedViewMode}\n              selected={viewMode === VIEW_MODE_PARSED}\n            />\n            <Tab\n              aria-controls={`${dialogIdPrefix}tabpanel`}\n              id={`${dialogIdPrefix}tab-${VIEW_MODE_RAW.id}`}\n              label={t(VIEW_MODE_RAW.title)}\n              onClick={setRawViewMode}\n              selected={viewMode === VIEW_MODE_RAW}\n            />\n          </TabList>\n        </Card>\n\n        <TabPanel\n          aria-labelledby={`${dialogIdPrefix}tab-${viewModeId}`}\n          flex={1}\n          id={`${dialogIdPrefix}tabpanel`}\n          overflow=\"auto\"\n          padding={4}\n          style={{outline: 'none'}}\n        >\n          {viewMode === VIEW_MODE_PARSED && (\n            <JSONInspectorWrapper>\n              <JSONInspector\n                data={value}\n                isExpanded={isExpanded}\n                onClick={toggleExpanded}\n                search={Search}\n                filterOptions={{ignoreCase: true}}\n              />\n            </JSONInspectorWrapper>\n          )}\n\n          {viewMode === VIEW_MODE_RAW && (\n            <Code\n              language=\"json\"\n              tabIndex={0}\n              onKeyDown={maybeSelectAll}\n              onDoubleClick={select}\n              onFocus={select}\n              size={1}\n            >\n              {JSON.stringify(value, null, 2)}\n            </Code>\n          )}\n        </TabPanel>\n      </Flex>\n    </Dialog>\n  )\n}\n","import {type ButtonMode, type ButtonTone, Card, type CardTone, Flex, Text} from '@sanity/ui'\nimport {type ComponentType, type ElementType, type JSX, type ReactNode} from 'react'\n\nimport {Button} from '../../../../../ui-components'\n\ninterface BannerProps {\n  action?: {\n    as?: ElementType | keyof JSX.IntrinsicElements\n    icon?: ComponentType\n    onClick?: () => void\n    text: string\n    tone?: ButtonTone\n    disabled?: boolean\n    mode?: ButtonMode\n  }\n  content: ReactNode\n  icon?: ComponentType\n  tone?: CardTone\n}\n\nexport function Banner(props: BannerProps) {\n  const {action, content, icon: Icon, tone = 'transparent', ...rest} = props\n\n  return (\n    <Card borderBottom paddingX={4} paddingY={2} tone={tone} {...rest}>\n      <Flex align=\"center\" gap={3}>\n        {Icon && (\n          <Text size={0}>\n            <Icon />\n          </Text>\n        )}\n\n        <Flex align=\"center\" flex={1} gap={2} paddingY={3}>\n          {content}\n        </Flex>\n\n        {action && (\n          <Button {...action} mode={action.mode || 'ghost'} tone={action.tone || 'default'} />\n        )}\n      </Flex>\n    </Card>\n  )\n}\n","import {ReadOnlyIcon} from '@sanity/icons'\nimport {Text} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {useDocumentOperation, useTranslation} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {Banner} from './Banner'\n\ninterface DeletedDocumentBannerProps {\n  revisionId?: string | null\n}\n\nexport function DeletedDocumentBanner({revisionId}: DeletedDocumentBannerProps) {\n  const {documentId, documentType} = useDocumentPane()\n  const {restore} = useDocumentOperation(documentId, documentType)\n  const {navigateIntent} = useRouter()\n  const handleRestore = useCallback(() => {\n    if (revisionId) {\n      restore.execute(revisionId)\n      navigateIntent('edit', {id: documentId, type: documentType})\n    }\n  }, [documentId, documentType, navigateIntent, restore, revisionId])\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Banner\n      action={\n        revisionId\n          ? {\n              onClick: handleRestore,\n              text: t('banners.deleted-document-banner.restore-button.text'),\n            }\n          : undefined\n      }\n      content={\n        <Text size={1} weight=\"medium\">\n          {t('banners.deleted-document-banner.text')}\n        </Text>\n      }\n      data-testid=\"deleted-document-banner\"\n      icon={ReadOnlyIcon}\n    />\n  )\n}\n","import {ErrorOutlineIcon} from '@sanity/icons'\nimport {Text} from '@sanity/ui'\nimport {isDeprecatedSchemaType, Translate, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {Banner} from './Banner'\n\nexport function DeprecatedDocumentTypeBanner() {\n  const {schemaType} = useDocumentPane()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (!isDeprecatedSchemaType(schemaType)) {\n    return null\n  }\n\n  return (\n    <Banner\n      content={\n        <Text size={1} weight=\"medium\">\n          <Translate t={t} i18nKey=\"banners.deprecated-document-type-banner.text\" />{' '}\n          {schemaType.deprecated.reason}\n        </Text>\n      }\n      data-testid=\"deprecated-document-type-banner\"\n      icon={ErrorOutlineIcon}\n    />\n  )\n}\n","import {defineEvent} from '@sanity/telemetry'\n\n/** @internal */\nexport const AskToEditDialogOpened = defineEvent({\n  name: 'Ask To Edit Dialog Opened',\n  version: 1,\n  description: 'User clicked the \"Ask to edit\" button in the document permissions banner',\n})\n\n/** @internal */\nexport const AskToEditRequestSent = defineEvent({\n  name: 'Ask To Edit Request Sent',\n  version: 1,\n  description: 'User sent a role change request from the dialog',\n})\n","import {useTelemetry} from '@sanity/telemetry/react'\nimport {Box, Card, DialogProvider, Flex, Stack, Text, TextInput, useToast} from '@sanity/ui'\nimport {useId, useMemo, useState} from 'react'\nimport {useObservable} from 'react-rx'\nimport {catchError, map, type Observable, of, startWith} from 'rxjs'\nimport {type Role, useClient, useProjectId, useTranslation, useZIndex} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Dialog} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {AskToEditRequestSent} from './__telemetry__/RequestPermissionDialog.telemetry'\nimport {type AccessRequest} from './useRoleRequestsStatus'\n\nconst MAX_NOTE_LENGTH = 150\n\n/** @internal */\nexport const DialogBody = styled(Box)`\n  box-sizing: border-box;\n`\n\n/** @internal */\nexport const LoadingContainer = styled(Flex).attrs({\n  align: 'center',\n  direction: 'column',\n  justify: 'center',\n})`\n  height: 110px;\n`\n\n/** @internal */\nexport interface RequestPermissionDialogProps {\n  onClose?: () => void\n  onRequestSubmitted?: () => void\n}\n\n/**\n * A dialog that enables the user to request permission to change their\n * member role from \"Viewer\" to \"Editor\" or \"Admin\" depending on the\n * project's available roles.\n *\n * @internal\n */\nexport function RequestPermissionDialog({\n  onClose,\n  onRequestSubmitted,\n}: RequestPermissionDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const telemtry = useTelemetry()\n  const dialogId = `request-permissions-${useId()}`\n  const projectId = useProjectId()\n  const client = useClient({apiVersion: '2024-09-26'})\n  const toast = useToast()\n  const zOffset = useZIndex()\n\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  const [note, setNote] = useState('')\n\n  const [msgError, setMsgError] = useState<string | undefined>()\n  const [hasTooManyRequests, setHasTooManyRequests] = useState<boolean>(false)\n  const [hasBeenDenied, setHasBeenDenied] = useState<boolean>(false)\n\n  const requestedRole$: Observable<'administrator' | 'editor'> = useMemo(() => {\n    const adminRole = 'administrator' as const\n    if (!projectId || !client) return of(adminRole)\n    return client.observable\n      .request<(Role & {appliesToUsers?: boolean})[]>({url: `/projects/${projectId}/roles`})\n      .pipe(\n        map((roles) => {\n          const hasEditor = roles\n            .filter((role) => role?.appliesToUsers)\n            .find((role) => role.name === 'editor')\n          return hasEditor ? 'editor' : adminRole\n        }),\n        startWith(adminRole),\n        catchError(() => of(adminRole)),\n      )\n  }, [projectId, client])\n\n  const requestedRole = useObservable(requestedRole$)\n\n  const onSubmit = () => {\n    setIsSubmitting(true)\n    client\n      .request<AccessRequest | null>({\n        url: `/access/project/${projectId}/requests`,\n        method: 'post',\n        body: {note, requestUrl: window?.location.href, requestedRole, type: 'role'},\n      })\n      .then((request) => {\n        if (request) {\n          if (onRequestSubmitted) onRequestSubmitted()\n          telemtry.log(AskToEditRequestSent)\n          toast.push({title: 'Edit access requested'})\n        }\n      })\n      .catch((err) => {\n        const statusCode = err?.response?.statusCode\n        const errMessage = err?.response?.body?.message\n        if (statusCode === 429) {\n          // User is over their cross-project request limit\n          setHasTooManyRequests(true)\n          setMsgError(errMessage)\n        }\n        if (statusCode === 409) {\n          // If we get a 409, user has been denied on this project or has a valid pending request\n          // valid pending request should be handled by GET request above\n          setHasBeenDenied(true)\n          setMsgError(errMessage)\n        } else {\n          toast.push({\n            title: 'There was a problem submitting your request.',\n            status: 'error',\n          })\n        }\n      })\n      .finally(() => {\n        setIsSubmitting(false)\n      })\n  }\n\n  return (\n    <DialogProvider position={'fixed'} zOffset={zOffset.fullscreen}>\n      <Dialog\n        width={1}\n        id={dialogId}\n        header={t('request-permission-dialog.header.text')}\n        footer={{\n          cancelButton: {\n            onClick: onClose,\n            text: t('confirm-dialog.cancel-button.fallback-text'),\n          },\n          confirmButton: {\n            onClick: onSubmit,\n            loading: isSubmitting,\n            disabled: hasTooManyRequests || hasBeenDenied,\n            text: t('request-permission-dialog.confirm-button.text'),\n            tone: 'primary',\n            type: 'submit',\n          },\n        }}\n        onClose={onClose}\n        onClickOutside={onClose}\n      >\n        <DialogBody>\n          <Stack space={4}>\n            <Text>{t('request-permission-dialog.description.text')}</Text>\n            {hasTooManyRequests || hasBeenDenied ? (\n              <Card tone={'caution'} padding={3} radius={2} shadow={1}>\n                <Text size={1}>\n                  {hasTooManyRequests && (\n                    <>{msgError ?? t('request-permission-dialog.warning.limit-reached.text')}</>\n                  )}\n                  {hasBeenDenied && (\n                    <>{msgError ?? t('request-permission-dialog.warning.denied.text')}</>\n                  )}\n                </Text>\n              </Card>\n            ) : (\n              <Stack space={3} paddingBottom={0}>\n                <TextInput\n                  placeholder={t('request-permission-dialog.note-input.placeholder.text')}\n                  disabled={isSubmitting}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter') onSubmit()\n                  }}\n                  maxLength={MAX_NOTE_LENGTH}\n                  value={note}\n                  onChange={(e) => {\n                    setNote(e.currentTarget.value)\n                  }}\n                />\n\n                <Text align=\"right\" muted size={1}>{`${note.length}/${MAX_NOTE_LENGTH}`}</Text>\n              </Stack>\n            )}\n          </Stack>\n        </DialogBody>\n      </Dialog>\n    </DialogProvider>\n  )\n}\n","import {addWeeks, isAfter, isBefore} from 'date-fns'\nimport {useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {of} from 'rxjs'\nimport {catchError, map, startWith} from 'rxjs/operators'\nimport {type SanityClient, useClient, useProjectId} from 'sanity'\n\n/** @internal */\nexport interface AccessRequest {\n  id: string\n  status: 'pending' | 'accepted' | 'declined'\n  resourceId: string\n  resourceType: 'project'\n  createdAt: string\n  updatedAt: string\n  updatedByUserId: string\n  requestedByUserId: string\n  requestedRole: string\n  type: 'access' | 'role'\n  note: string\n}\n\nconst LOADING_STATE = {loading: true, error: false, status: undefined}\nconst EMPTY_STATE = {loading: false, error: false, status: 'none'}\nconst DECLINED_STATE = {loading: false, error: false, status: 'declined'}\nconst PENDING_STATE = {loading: false, error: false, status: 'pending'}\nconst EXPIRED_STATE = {loading: false, error: false, status: 'expired'}\n\n/** @internal */\nexport const useRoleRequestsStatus = () => {\n  const client = useClient({apiVersion: '2024-07-01'})\n  const projectId = useProjectId()\n\n  const checkRoleRequests$ = useMemo(() => {\n    if (!client || !projectId) {\n      return of(EMPTY_STATE)\n    }\n\n    return checkRoleRequests(client, projectId)\n  }, [client, projectId])\n\n  const {loading, error, status} = useObservable(checkRoleRequests$, LOADING_STATE)\n  return {data: status, loading, error}\n}\n\nfunction checkRoleRequests(client: SanityClient, projectId: string) {\n  return client.observable\n    .request<AccessRequest[] | null>({\n      url: '/access/requests/me',\n      tag: 'use-role-requests-status',\n    })\n    .pipe(\n      map((requests) => {\n        if (!requests || requests.length === 0) {\n          return EMPTY_STATE\n        }\n\n        // Filter requests for the specific project and where type is 'role'\n        const projectRequests = requests.filter(\n          (request) => request.resourceId === projectId && request.type === 'role',\n        )\n\n        const declinedRequest = projectRequests.find((request) => request.status === 'declined')\n        if (\n          declinedRequest &&\n          isAfter(addWeeks(new Date(declinedRequest.createdAt), 2), new Date())\n        ) {\n          return DECLINED_STATE\n        }\n\n        const pendingRequest = projectRequests.find(\n          (request) =>\n            request.status === 'pending' &&\n            isAfter(addWeeks(new Date(request.createdAt), 2), new Date()),\n        )\n        if (pendingRequest) {\n          return PENDING_STATE\n        }\n\n        const oldPendingRequest = projectRequests.find(\n          (request) =>\n            request.status === 'pending' &&\n            isBefore(addWeeks(new Date(request.createdAt), 2), new Date()),\n        )\n\n        return oldPendingRequest ? EXPIRED_STATE : EMPTY_STATE\n      }),\n      catchError((err) => {\n        console.error('Failed to fetch access requests', err)\n        return of({loading: false, error: true, status: undefined})\n      }),\n      startWith(LOADING_STATE), // Start with loading state\n    )\n}\n","import {ReadOnlyIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {Text} from '@sanity/ui'\nimport {useMemo, useState} from 'react'\nimport {Translate, useCurrentUser, useListFormat, useTranslation} from 'sanity'\n\nimport {\n  RequestPermissionDialog,\n  useRoleRequestsStatus,\n} from '../../../../components/requestPermissionDialog'\nimport {AskToEditDialogOpened} from '../../../../components/requestPermissionDialog/__telemetry__/RequestPermissionDialog.telemetry'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {Banner} from './Banner'\n\ninterface InsufficientPermissionBannerProps {\n  requiredPermission: 'update' | 'create'\n}\n\nexport function InsufficientPermissionBanner({\n  requiredPermission,\n}: InsufficientPermissionBannerProps) {\n  const currentUser = useCurrentUser()\n\n  const {\n    data: roleRequestStatus,\n    loading: requestStatusLoading,\n    error: requestStatusError,\n  } = useRoleRequestsStatus()\n  const [requestSent, setRequestSent] = useState(false)\n  const requestPending = useMemo(\n    () => roleRequestStatus === 'pending' || roleRequestStatus === 'declined' || requestSent,\n    [roleRequestStatus, requestSent],\n  )\n  const currentUserRoles = currentUser?.roles || []\n  const isOnlyViewer = currentUserRoles.length === 1 && currentUserRoles[0].name === 'viewer'\n  const [showRequestPermissionDialog, setShowRequestPermissionDialog] = useState(false)\n\n  const listFormat = useListFormat({style: 'short'})\n  const {t} = useTranslation(structureLocaleNamespace)\n  const telemetry = useTelemetry()\n\n  const roleTitles = currentUserRoles.map((role) => role.title)\n  const roles = listFormat\n    .formatToParts(roleTitles)\n    .map((part) =>\n      part.type === 'element' ? <code key={part.value}>{part.value}</code> : part.value,\n    )\n\n  return (\n    <>\n      <Banner\n        content={\n          <Text size={1} weight=\"medium\">\n            <Translate\n              t={t}\n              i18nKey=\"banners.permission-check-banner.missing-permission\"\n              components={{Roles: () => <>{roles}</>}}\n              values={{count: roles.length, roles: roleTitles}}\n              context={requiredPermission}\n            />\n          </Text>\n        }\n        action={\n          isOnlyViewer && roleRequestStatus && !requestStatusError && !requestStatusLoading\n            ? {\n                onClick: requestPending\n                  ? undefined\n                  : () => {\n                      setShowRequestPermissionDialog(true)\n                      telemetry.log(AskToEditDialogOpened)\n                    },\n                text: requestPending\n                  ? t('banners.permission-check-banner.request-permission-button.sent')\n                  : t('banners.permission-check-banner.request-permission-button.text'),\n                tone: requestPending ? 'default' : 'primary',\n                disabled: requestPending,\n                mode: requestPending ? 'bleed' : undefined,\n              }\n            : undefined\n        }\n        data-testid=\"permission-check-banner\"\n        icon={ReadOnlyIcon}\n      />\n      {showRequestPermissionDialog && (\n        <RequestPermissionDialog\n          onClose={() => setShowRequestPermissionDialog(false)}\n          onRequestSubmitted={() => {\n            setRequestSent(true)\n            setShowRequestPermissionDialog(false)\n          }}\n        />\n      )}\n    </>\n  )\n}\n","import {CloseIcon, SyncIcon, WarningOutlineIcon} from '@sanity/icons'\nimport {type KeyedSegment, type Reference} from '@sanity/types'\nimport {Text} from '@sanity/ui'\nimport {fromString as pathFromString, get as pathGet} from '@sanity/util/paths'\nimport {memo, useCallback, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {concat, type Observable, of} from 'rxjs'\nimport {debounceTime, map} from 'rxjs/operators'\nimport {\n  type DocumentAvailability,\n  getPublishedId,\n  useDocumentPreviewStore,\n  useTranslation,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../../../components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {type RouterPaneGroup} from '../../../../types'\nimport {Banner} from './Banner'\n\ninterface ParentReferenceInfo {\n  loading: boolean\n  result?: {\n    availability: {draft: DocumentAvailability; published: DocumentAvailability}\n    refValue: string | undefined\n  }\n}\n\nexport const ReferenceChangedBanner = memo(() => {\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {params, groupIndex, routerPanesState, replaceCurrent, BackLink} = usePaneRouter()\n  const routerReferenceId = routerPanesState[groupIndex]?.[0].id\n  const parentGroup = routerPanesState[groupIndex - 1] as RouterPaneGroup | undefined\n  const parentSibling = parentGroup?.[0]\n  const parentId = parentSibling?.id\n  const hasHistoryOpen = Boolean(parentSibling?.params?.rev)\n  const parentRefPath = useMemo(() => {\n    return (params?.parentRefPath && pathFromString(params.parentRefPath)) || null\n  }, [params?.parentRefPath])\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  /**\n   * Loads information regarding the reference field of the parent pane. This\n   * is only applicable to child references (aka references-in-place).\n   *\n   * It utilizes the pane ID of the parent pane (which is a document ID) along\n   * with the `parentRefPath` router param on the current pane to find the\n   * current value of the reference field on the parent document.\n   *\n   * This is used to compare with the current pane's document ID. If the IDs\n   * don't match then this banner should reveal itself\n   */\n  const referenceInfoObservable = useMemo((): Observable<ParentReferenceInfo> => {\n    const parentRefPathSegment = parentRefPath?.[0] as string | undefined\n\n    // short-circuit: this document pane is not a child reference pane\n    if (!parentId || !parentRefPathSegment || !parentRefPath) {\n      return of({loading: false})\n    }\n\n    const publishedId = getPublishedId(parentId)\n    const path = pathFromString(parentRefPathSegment)\n\n    // note: observePaths doesn't support keyed path segments, so we need to select the nearest parent\n    const keyedSegmentIndex = path.findIndex(\n      (p): p is KeyedSegment => typeof p == 'object' && '_key' in p,\n    )\n\n    return concat(\n      // emit a loading state instantly\n      of({loading: true}),\n      // then emit the values from watching the published ID's path\n      documentPreviewStore\n        .unstable_observePathsDocumentPair(\n          publishedId,\n          (keyedSegmentIndex === -1 ? path : path.slice(0, keyedSegmentIndex)) as string[][],\n        )\n        .pipe(\n          // this debounce time is needed to prevent flashing banners due to\n          // the router state updating faster than the content-lake state. we\n          // debounce to wait for more emissions because the value pulled\n          // initially could be stale.\n          debounceTime(750),\n          map(\n            ({draft, published}): ParentReferenceInfo => ({\n              loading: false,\n              result: {\n                availability: {\n                  draft: draft.availability,\n                  published: published.availability,\n                },\n                refValue: pathGet<Reference>(draft.snapshot || published.snapshot, parentRefPath)\n                  ?._ref,\n              },\n            }),\n          ),\n        ),\n    )\n  }, [documentPreviewStore, parentId, parentRefPath])\n  const referenceInfo = useObservable(referenceInfoObservable, {loading: true})\n\n  const handleReloadReference = useCallback(() => {\n    if (referenceInfo.loading) return\n\n    if (referenceInfo.result?.refValue) {\n      replaceCurrent({\n        id: referenceInfo.result.refValue,\n        params: params as Record<string, string>,\n      })\n    }\n  }, [referenceInfo.loading, referenceInfo.result, replaceCurrent, params])\n\n  const shouldHide =\n    // if `parentId` or `parentRefPath` is not present then this banner is n/a\n    !parentId ||\n    !parentRefPath ||\n    // if viewing this pane via history, then hide\n    hasHistoryOpen ||\n    // if loading, hide\n    referenceInfo.loading ||\n    // if the parent document is not available (e.g. due to permission denied or\n    // not found) we don't want to display a warning here, but instead rely on the\n    // parent view to display the appropriate message\n    (!referenceInfo.result?.availability.draft.available &&\n      !referenceInfo.result?.availability.published.available) ||\n    // if the references are the same, then hide the reference changed banner\n    referenceInfo.result?.refValue === routerReferenceId\n\n  if (shouldHide) return null\n\n  return (\n    <Banner\n      action={\n        referenceInfo.result?.refValue\n          ? {\n              onClick: handleReloadReference,\n              icon: SyncIcon,\n              text: t('banners.reference-changed-banner.reason-changed.reload-button.text'),\n            }\n          : {\n              as: BackLink,\n              icon: CloseIcon,\n              text: t('banners.reference-changed-banner.reason-removed.close-button.text'),\n            }\n      }\n      data-testid=\"reference-changed-banner\"\n      content={\n        <Text size={1} weight=\"medium\">\n          {referenceInfo.result?.refValue\n            ? t('banners.reference-changed-banner.reason-changed.text')\n            : t('banners.reference-changed-banner.reason-removed.text')}\n        </Text>\n      }\n      icon={WarningOutlineIcon}\n      tone=\"caution\"\n    />\n  )\n})\n\nReferenceChangedBanner.displayName = 'Memo(ReferenceChangedBanner)'\n","import {defineEvent} from '@sanity/telemetry'\n\ninterface TypeInfo {\n  liveEditResolveType: 'publish' | 'discard'\n}\n\n/**\n * When a draft in a live edit document is published\n * @internal\n */\nexport const ResolvedLiveEdit = defineEvent<TypeInfo>({\n  name: 'Resolved LiveEdit Draft',\n  version: 1,\n  description: 'User resolved a draft of a live edit document to continue editing',\n})\n","import {type SanityDocument} from '@sanity/client'\nimport {ErrorOutlineIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {Flex, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useState} from 'react'\nimport {\n  isDraftId,\n  type ObjectSchemaType,\n  Translate,\n  useDocumentOperation,\n  useTranslation,\n} from 'sanity'\n\nimport {Button} from '../../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {ResolvedLiveEdit} from './__telemetry__/DraftLiveEditBanner.telemetry'\nimport {Banner} from './Banner'\n\ninterface DraftLiveEditBannerProps {\n  displayed: Partial<SanityDocument> | null\n  documentId: string\n  schemaType: ObjectSchemaType\n}\n\nexport function DraftLiveEditBanner({\n  displayed,\n  documentId,\n  schemaType,\n}: DraftLiveEditBannerProps): JSX.Element | null {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const [isPublishing, setPublishing] = useState(false)\n  const [isDiscarding, setDiscarding] = useState(false)\n  const telemetry = useTelemetry()\n\n  const {publish, discardChanges} = useDocumentOperation(documentId, displayed?._type || '')\n\n  const handlePublish = useCallback(() => {\n    publish.execute()\n    setPublishing(true)\n    telemetry.log(ResolvedLiveEdit, {liveEditResolveType: 'publish'})\n  }, [publish, telemetry])\n\n  const handleDiscard = useCallback(() => {\n    discardChanges.execute()\n    setDiscarding(true)\n    telemetry.log(ResolvedLiveEdit, {liveEditResolveType: 'discard'})\n  }, [discardChanges, telemetry])\n\n  useEffect(() => {\n    return () => {\n      setPublishing(false)\n      setDiscarding(false)\n    }\n  })\n\n  if (displayed && displayed._id && !isDraftId(displayed._id)) {\n    return null\n  }\n\n  return (\n    <Banner\n      content={\n        <Flex align=\"center\" justify=\"space-between\" gap={1}>\n          <Text size={1} weight=\"medium\">\n            <Translate\n              t={t}\n              i18nKey={'banners.live-edit-draft-banner.text'}\n              values={{schemaType: schemaType.title}}\n            />\n          </Text>\n          <Button\n            onClick={handlePublish}\n            text={t('action.publish.live-edit.label')}\n            tooltipProps={{content: t('banners.live-edit-draft-banner.publish.tooltip')}}\n            loading={isPublishing}\n          />\n\n          <Button\n            onClick={handleDiscard}\n            text={t('banners.live-edit-draft-banner.discard.tooltip')}\n            tooltipProps={{content: t('banners.live-edit-draft-banner.discard.tooltip')}}\n            loading={isDiscarding}\n          />\n        </Flex>\n      }\n      data-testid=\"live-edit-type-banner\"\n      icon={ErrorOutlineIcon}\n    />\n  )\n}\n","import {type ObjectSchemaType} from '@sanity/types'\nimport {Heading, Stack, Text} from '@sanity/ui'\nimport {useTranslation} from 'react-i18next'\nimport {css, styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\n\ninterface DocumentHeaderProps {\n  documentId: string\n  schemaType: ObjectSchemaType\n  title?: string\n}\n\n/**\n * Use CSS container queries to conditionally render headings at different sizes.\n * We hide this entire container (including the document type) if container queries\n * not supported in the current browser.\n *\n * Note that usage of container queries in `styled-components` is only supported in `6.x`.\n * As such, studios that include `\"styled-components\": \"<6\"` as a dependency will only see\n * the largest heading size here, even if their browser supports it!\n */\n\nexport const TitleContainer = styled(Stack)`\n  ${({theme}) => {\n    return css`\n      @supports not (container-type: inline-size) {\n        display: none !important;\n      }\n\n      container-type: inline-size;\n\n      [data-heading] {\n        font-size: ${theme.sanity.fonts.heading.sizes[4].fontSize}px;\n        line-height: ${theme.sanity.fonts.heading.sizes[4].lineHeight}px;\n        overflow-wrap: break-word;\n        text-wrap: pretty;\n      }\n\n      @container (max-width: 560px) {\n        [data-heading] {\n          font-size: ${theme.sanity.fonts.heading.sizes[3].fontSize}px;\n          line-height: ${theme.sanity.fonts.heading.sizes[3].lineHeight}px;\n        }\n      }\n\n      @container (max-width: 420px) {\n        [data-heading] {\n          font-size: ${theme.sanity.fonts.heading.sizes[2].fontSize}px;\n          line-height: ${theme.sanity.fonts.heading.sizes[2].lineHeight}px;\n        }\n      }\n    `\n  }}\n`\n\n/**\n * Header containing current document title and type.\n * Document type is hidden if the document `_id` matches the current document `_type`.\n * The entire header is hidden if container queries are not supported.\n */\nexport const FormHeader = ({documentId, schemaType, title}: DocumentHeaderProps) => {\n  const isSingleton = documentId === schemaType.name\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (schemaType.__experimental_formPreviewTitle === false) {\n    return null\n  }\n\n  return (\n    <TitleContainer marginBottom={6} space={4}>\n      {!isSingleton && (\n        <Text muted size={1}>\n          {schemaType.title ?? schemaType.name}\n        </Text>\n      )}\n\n      <Heading as=\"h2\" data-heading muted={!title} data-testid=\"document-panel-document-title\">\n        {title ?? t('document-view.form-view.form-title-fallback')}\n      </Heading>\n    </TitleContainer>\n  )\n}\n","import {type ToastParams, useToast} from '@sanity/ui'\nimport {useEffect} from 'react'\n\n// https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#maximum_delay_value\nconst LONG_ENOUGH_BUT_NOT_TOO_LONG = 1000 * 60 * 60 * 24 * 24\n\n/**\n * Workaround to support conditional toast (e.g. a toast that is visible as long as a condition holds true)\n */\nexport function useConditionalToast(params: ToastParams & {id: string; enabled?: boolean}) {\n  const toast = useToast()\n\n  // note1: there's a `duration || 0` in Sanity UI's pushToast(), so make it non-falsey\n  // note2: cannot use `Infinity` as duration, since it exceeds setTimeout's maximum delay value\n  useEffect(() => {\n    if (params.enabled) {\n      toast.push({...params, duration: LONG_ENOUGH_BUT_NOT_TOO_LONG})\n    }\n    return () => {\n      if (params.enabled) {\n        toast.push({\n          ...params,\n          // Note: @sanity/ui fallbacks to the default duration of 4s in case of falsey values\n          duration: 0.01,\n        })\n      }\n    }\n  }, [params, toast])\n}\n","/* eslint-disable no-nested-ternary */\nimport {Box, Container, Flex, focusFirstDescendant, Spinner, Text} from '@sanity/ui'\nimport {type FormEvent, forwardRef, useCallback, useEffect, useMemo, useState} from 'react'\nimport {tap} from 'rxjs/operators'\nimport {\n  createPatchChannel,\n  type DocumentMutationEvent,\n  type DocumentRebaseEvent,\n  FormBuilder,\n  type FormDocumentValue,\n  fromMutationPatches,\n  type PatchMsg,\n  PresenceOverlay,\n  useDocumentPresence,\n  useDocumentStore,\n  useTranslation,\n} from 'sanity'\n\nimport {Delay} from '../../../../components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {useDocumentTitle} from '../../useDocumentTitle'\nimport {FormHeader} from './FormHeader'\nimport {useConditionalToast} from './useConditionalToast'\n\ninterface FormViewProps {\n  hidden: boolean\n  margins: [number, number, number, number]\n}\n\nconst preventDefault = (ev: FormEvent) => ev.preventDefault()\n\nexport const FormView = forwardRef<HTMLDivElement, FormViewProps>(function FormView(props, ref) {\n  const {hidden, margins} = props\n\n  const {\n    collapsedFieldSets,\n    collapsedPaths,\n    displayed: value,\n    editState,\n    documentId,\n    documentType,\n    fieldActions,\n    onChange,\n    validation,\n    ready,\n    formState,\n    onFocus,\n    connectionState,\n    onBlur,\n    onSetCollapsedPath,\n    onPathOpen,\n    onSetCollapsedFieldSet,\n    onSetActiveFieldGroup,\n    openPath,\n  } = useDocumentPane()\n  const documentStore = useDocumentStore()\n  const presence = useDocumentPresence(documentId)\n  const {title} = useDocumentTitle()\n\n  // The `patchChannel` is an INTERNAL publish/subscribe channel that we use to notify form-builder\n  // nodes about both remote and local patches.\n  // - Used by the Portable Text input to modify selections.\n  // - Used by `withDocument` to reset value.\n  const patchChannel = useMemo(() => createPatchChannel(), [])\n\n  const isLocked = editState?.transactionSyncLock?.enabled\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const conditionalToastParams = useMemo(\n    () => ({\n      id: `sync-lock`,\n      status: 'warning' as const,\n      enabled: isLocked,\n      title: t('document-view.form-view.sync-lock-toast.title'),\n      description: t('document-view.form-view.sync-lock-toast.description'),\n      closable: true,\n    }),\n    [isLocked, t],\n  )\n\n  useConditionalToast(conditionalToastParams)\n\n  useEffect(() => {\n    const sub = documentStore.pair\n      .documentEvents(documentId, documentType)\n      .pipe(\n        tap((event) => {\n          if (event.type === 'mutation') {\n            patchChannel.publish(prepareMutationEvent(event))\n          }\n\n          if (event.type === 'rebase') {\n            patchChannel.publish(prepareRebaseEvent(event))\n          }\n        }),\n      )\n      .subscribe()\n\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [documentId, documentStore, documentType, patchChannel])\n\n  const hasRev = Boolean(value?._rev)\n  useEffect(() => {\n    if (hasRev) {\n      // this is a workaround for an issue that caused the document pushed to withDocument to get\n      // stuck at the first initial value.\n      // This effect is triggered only when the document goes from not having a revision, to getting one\n      // so it will kick in as soon as the document is received from the backend\n      patchChannel.publish({\n        type: 'mutation',\n        patches: [],\n        snapshot: value,\n      })\n    }\n    // React to changes in hasRev only\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [hasRev])\n\n  const [formRef, setFormRef] = useState<null | HTMLDivElement>(null)\n\n  // We only want to run it on first mount\n  const [focusedFirstDescendant, setFocusedFirstDescendant] = useState(false)\n  useEffect(() => {\n    // Only focus on the first descendant if there is not already a focus path\n    // This is to avoid stealing focus from intent links\n    if (!focusedFirstDescendant && ready && !formState?.focusPath.length && formRef) {\n      setFocusedFirstDescendant(true)\n      focusFirstDescendant(formRef)\n    }\n  }, [focusedFirstDescendant, formRef, formState?.focusPath.length, ready])\n\n  const setRef = useCallback(\n    (node: HTMLDivElement | null) => {\n      setFormRef(node)\n      if (typeof ref === 'function') {\n        ref(node)\n      } else if (ref) {\n        ref.current = node\n      }\n    },\n    [ref],\n  )\n\n  // const after = useMemo(\n  //   () =>\n  //     Array.isArray(afterEditorComponents) &&\n  //     afterEditorComponents.map(\n  //       (AfterEditorComponent: ComponentType<{documentId: string}>, idx: number) => (\n  //         <AfterEditorComponent key={String(idx)} documentId={documentId} />\n  //       )\n  //     ),\n  //   [documentId]\n  // )\n\n  return (\n    <Container\n      hidden={hidden}\n      paddingX={4}\n      paddingTop={5}\n      paddingBottom={9}\n      sizing=\"border\"\n      width={1}\n    >\n      <PresenceOverlay margins={margins}>\n        <Box as=\"form\" onSubmit={preventDefault} ref={setRef}>\n          {connectionState === 'connecting' && !editState?.draft && !editState?.published ? (\n            <Delay ms={300}>\n              {/* TODO: replace with loading block */}\n              <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n                <Spinner muted />\n                <Box marginTop={3}>\n                  <Text align=\"center\" muted size={1}>\n                    {t('document-view.form-view.loading')}\n                  </Text>\n                </Box>\n              </Flex>\n            </Delay>\n          ) : formState === null || hidden ? (\n            <Box padding={2}>\n              <Text>{t('document-view.form-view.form-hidden')}</Text>\n            </Box>\n          ) : (\n            <>\n              <FormHeader documentId={documentId} schemaType={formState.schemaType} title={title} />\n              <FormBuilder\n                __internal_fieldActions={fieldActions}\n                __internal_patchChannel={patchChannel}\n                changed={formState.changed}\n                collapsedFieldSets={collapsedFieldSets}\n                collapsedPaths={collapsedPaths}\n                focused={formState.focused}\n                focusPath={formState.focusPath}\n                groups={formState.groups}\n                id=\"root\"\n                members={formState.members}\n                onChange={onChange}\n                onFieldGroupSelect={onSetActiveFieldGroup}\n                onPathBlur={onBlur}\n                onPathFocus={onFocus}\n                onPathOpen={onPathOpen}\n                onSetFieldSetCollapsed={onSetCollapsedFieldSet}\n                onSetPathCollapsed={onSetCollapsedPath}\n                openPath={openPath}\n                presence={presence}\n                readOnly={\n                  connectionState === 'reconnecting' || formState.readOnly || !editState?.ready\n                }\n                schemaType={formState.schemaType}\n                validation={validation}\n                value={\n                  // note: the form state doesn't have a typed concept of a \"document\" value\n                  // but these should be compatible\n                  formState.value as FormDocumentValue\n                }\n              />\n            </>\n          )}\n        </Box>\n      </PresenceOverlay>\n    </Container>\n  )\n})\n\nfunction prepareMutationEvent(event: DocumentMutationEvent): PatchMsg {\n  const patches = event.mutations.map((mut) => mut.patch).filter(Boolean)\n\n  return {\n    type: 'mutation',\n    snapshot: event.document,\n    patches: fromMutationPatches(event.origin, patches),\n  }\n}\n\nfunction prepareRebaseEvent(event: DocumentRebaseEvent): PatchMsg {\n  const remotePatches = event.remoteMutations.map((mut) => mut.patch).filter(Boolean)\n  const localPatches = event.localMutations.map((mut) => mut.patch).filter(Boolean)\n\n  return {\n    type: 'rebase',\n    snapshot: event.document,\n    patches: fromMutationPatches('remote', remotePatches).concat(\n      fromMutationPatches('local', localPatches),\n    ),\n  }\n}\n","import {BoundaryElementProvider, Box, Flex, PortalProvider, usePortal} from '@sanity/ui'\nimport {createElement, useEffect, useMemo, useRef, useState} from 'react'\nimport {ScrollContainer, useTimelineSelector, VirtualizerScrollInstanceProvider} from 'sanity'\nimport {css, styled} from 'styled-components'\n\nimport {PaneContent, usePane, usePaneLayout} from '../../../components'\nimport {isLiveEditEnabled} from '../../../components/paneItem/helpers'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {DocumentInspectorPanel} from '../documentInspector'\nimport {InspectDialog} from '../inspectDialog'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {\n  DeletedDocumentBanner,\n  DeprecatedDocumentTypeBanner,\n  InsufficientPermissionBanner,\n  ReferenceChangedBanner,\n} from './banners'\nimport {DraftLiveEditBanner} from './banners/DraftLiveEditBanner'\nimport {FormView} from './documentViews'\n\ninterface DocumentPanelProps {\n  footerHeight: number | null\n  headerHeight: number | null\n  isInspectOpen: boolean\n  rootElement: HTMLDivElement | null\n  setDocumentPanelPortalElement: (el: HTMLElement | null) => void\n}\n\nconst DocumentBox = styled(Box)({\n  position: 'relative',\n})\n\nconst Scroller = styled(ScrollContainer)<{$disabled: boolean}>(({$disabled}) => {\n  if ($disabled) {\n    return {height: '100%'}\n  }\n\n  return css`\n    height: 100%;\n    overflow: auto;\n    position: relative;\n    scroll-behavior: smooth;\n    outline: none;\n  `\n})\n\nexport const DocumentPanel = function DocumentPanel(props: DocumentPanelProps) {\n  const {footerHeight, headerHeight, isInspectOpen, rootElement, setDocumentPanelPortalElement} =\n    props\n  const {\n    activeViewId,\n    displayed,\n    documentId,\n    editState,\n    inspector,\n    value,\n    views,\n    ready,\n    schemaType,\n    permissions,\n    isPermissionsLoading,\n    isDeleting,\n    isDeleted,\n    timelineStore,\n  } = useDocumentPane()\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const {collapsed} = usePane()\n  const parentPortal = usePortal()\n  const {features} = useStructureTool()\n  const portalRef = useRef<HTMLDivElement | null>(null)\n  const [documentScrollElement, setDocumentScrollElement] = useState<HTMLDivElement | null>(null)\n  const formContainerElement = useRef<HTMLDivElement | null>(null)\n\n  const requiredPermission = value._createdAt ? 'update' : 'create'\n\n  const activeView = useMemo(\n    () => views.find((view) => view.id === activeViewId) || views[0] || {type: 'form'},\n    [activeViewId, views],\n  )\n\n  // Use a local portal container when split panes is supported\n  const portalElement: HTMLElement | null = features.splitPanes\n    ? portalRef.current || parentPortal.element\n    : parentPortal.element\n\n  // Calculate the height of the header\n  const margins: [number, number, number, number] = useMemo(() => {\n    if (layoutCollapsed) {\n      return [headerHeight || 0, 0, footerHeight ? footerHeight + 2 : 2, 0]\n    }\n\n    return [0, 0, 2, 0]\n  }, [layoutCollapsed, footerHeight, headerHeight])\n\n  const formViewHidden = activeView.type !== 'form'\n\n  const activeViewNode = useMemo(\n    () =>\n      activeView.type === 'component' &&\n      activeView.component &&\n      createElement(activeView.component, {\n        document: {\n          draft: editState?.draft || null,\n          displayed: displayed || value,\n          historical: displayed,\n          published: editState?.published || null,\n        },\n        documentId,\n        options: activeView.options,\n        schemaType,\n      }),\n    [activeView, displayed, documentId, editState?.draft, editState?.published, schemaType, value],\n  )\n\n  const lastNonDeletedRevId = useTimelineSelector(\n    timelineStore,\n    (state) => state.lastNonDeletedRevId,\n  )\n\n  const isLiveEdit = isLiveEditEnabled(schemaType)\n\n  // Scroll to top as `documentId` changes\n  useEffect(() => {\n    if (!documentScrollElement?.scrollTo) return\n    documentScrollElement.scrollTo(0, 0)\n  }, [documentId, documentScrollElement])\n\n  // Pass portal element to `DocumentPane`\n  useEffect(() => {\n    if (portalElement) {\n      setDocumentPanelPortalElement(portalElement)\n    }\n  }, [portalElement, setDocumentPanelPortalElement])\n\n  const inspectDialog = useMemo(() => {\n    return isInspectOpen ? <InspectDialog value={displayed || value} /> : null\n  }, [isInspectOpen, displayed, value])\n\n  const showInspector = Boolean(!collapsed && inspector)\n\n  return (\n    <PaneContent>\n      <Flex height=\"fill\">\n        {(features.resizablePanes || !showInspector) && (\n          <DocumentBox flex={2} overflow=\"hidden\">\n            <PortalProvider\n              element={portalElement}\n              __unstable_elements={{documentScrollElement: documentScrollElement}}\n            >\n              <BoundaryElementProvider element={documentScrollElement}>\n                <VirtualizerScrollInstanceProvider\n                  scrollElement={documentScrollElement}\n                  containerElement={formContainerElement}\n                >\n                  {activeView.type === 'form' && isLiveEdit && ready && (\n                    <DraftLiveEditBanner\n                      displayed={displayed}\n                      documentId={documentId}\n                      schemaType={schemaType}\n                    />\n                  )}\n\n                  {activeView.type === 'form' && !isPermissionsLoading && ready && (\n                    <>\n                      {!permissions?.granted && (\n                        <InsufficientPermissionBanner requiredPermission={requiredPermission} />\n                      )}\n                      {!isDeleting && isDeleted && (\n                        <DeletedDocumentBanner revisionId={lastNonDeletedRevId} />\n                      )}\n                      <ReferenceChangedBanner />\n                      <DeprecatedDocumentTypeBanner />\n                    </>\n                  )}\n\n                  <Scroller\n                    $disabled={layoutCollapsed || false}\n                    data-testid=\"document-panel-scroller\"\n                    ref={setDocumentScrollElement}\n                  >\n                    <FormView\n                      hidden={formViewHidden}\n                      margins={margins}\n                      ref={formContainerElement}\n                    />\n                    {activeViewNode}\n                  </Scroller>\n\n                  {inspectDialog}\n\n                  <div data-testid=\"document-panel-portal\" ref={portalRef} />\n                </VirtualizerScrollInstanceProvider>\n              </BoundaryElementProvider>\n            </PortalProvider>\n          </DocumentBox>\n        )}\n\n        {showInspector && (\n          <BoundaryElementProvider element={rootElement}>\n            <DocumentInspectorPanel\n              documentId={documentId}\n              documentType={schemaType.name}\n              flex={1}\n            />\n          </BoundaryElementProvider>\n        )}\n      </Flex>\n    </PaneContent>\n  )\n}\n","import {type Placement} from '@sanity/ui'\n\nimport {type DialogProps} from '../../../../../ui-components'\n\nexport const POPOVER_FALLBACK_PLACEMENTS: Placement[] = ['left', 'bottom']\n\nexport const DIALOG_WIDTH_TO_UI_WIDTH: {[key: string]: DialogProps['width']} = {\n  small: 0,\n  medium: 1,\n  large: 2,\n  full: 'auto',\n}\n","import {\n  Box,\n  Button, // eslint-disable-line no-restricted-imports\n  Flex,\n  Grid,\n  Popover, // eslint-disable-line no-restricted-imports\n  Text,\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useLayer,\n} from '@sanity/ui'\nimport {useCallback, useRef} from 'react'\nimport {type DocumentActionConfirmDialogProps, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {POPOVER_FALLBACK_PLACEMENTS} from './constants'\n\nexport function ConfirmDialog(props: {\n  dialog: DocumentActionConfirmDialogProps\n  referenceElement: HTMLElement | null\n}) {\n  const {dialog, referenceElement} = props\n\n  return (\n    <Popover\n      content={<ConfirmDialogContent dialog={dialog} />}\n      fallbackPlacements={POPOVER_FALLBACK_PLACEMENTS}\n      open\n      placement=\"top\"\n      portal\n      preventOverflow\n      referenceElement={referenceElement}\n    />\n  )\n}\n\n/**\n * Dialog rendered by custom document actions of dialog type `confirm`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nfunction ConfirmDialogContent(props: {dialog: DocumentActionConfirmDialogProps}) {\n  const {dialog} = props\n  const {\n    cancelButtonIcon,\n    cancelButtonText,\n    confirmButtonIcon,\n    confirmButtonText,\n    // color,\n    message,\n    onCancel,\n    onConfirm,\n    tone,\n  } = dialog\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {isTopLayer} = useLayer()\n  const ref = useRef<HTMLDivElement | null>(null)\n\n  const handleGlobalKeyDown = useCallback(\n    (event: any) => {\n      if (event.key === 'Escape' && isTopLayer) onCancel()\n    },\n    [isTopLayer, onCancel],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(isTopLayer && onCancel, () => [ref.current])\n\n  return (\n    <Flex direction=\"column\" ref={ref} style={{minWidth: 320 - 16, maxWidth: 400}}>\n      <Box flex={1} overflow=\"auto\" padding={4}>\n        <Text>{message}</Text>\n      </Box>\n      <Box paddingX={4} paddingY={3} style={{borderTop: '1px solid var(--card-border-color)'}}>\n        <Grid columns={2} gap={2}>\n          <Button\n            data-testid=\"confirm-dialog-cancel-button\"\n            icon={cancelButtonIcon}\n            onClick={onCancel}\n            mode=\"ghost\"\n            text={cancelButtonText || t('confirm-dialog.cancel-button.fallback-text')}\n          />\n          <Button\n            data-testid=\"confirm-dialog-confirm-button\"\n            icon={confirmButtonIcon}\n            onClick={onConfirm}\n            text={confirmButtonText || t('confirm-dialog.confirm-button.fallback-text')}\n            tone={tone}\n          />\n        </Grid>\n      </Box>\n    </Flex>\n  )\n}\n","import {\n  Box,\n  Dialog, // eslint-disable-line no-restricted-imports\n} from '@sanity/ui'\nimport {useId} from 'react'\nimport {type DocumentActionModalDialogProps, LegacyLayerProvider} from 'sanity'\n\nimport {DIALOG_WIDTH_TO_UI_WIDTH} from './constants'\n\n/**\n * Dialog rendered by custom document actions of dialog type `dialog`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nexport function ModalDialog(props: {dialog: DocumentActionModalDialogProps}) {\n  const {dialog} = props\n  const dialogId = useId()\n\n  const footer = dialog.footer && (\n    <Box paddingX={4} paddingY={3}>\n      {dialog.footer}\n    </Box>\n  )\n\n  return (\n    <LegacyLayerProvider zOffset=\"fullscreen\">\n      <Dialog\n        animate\n        __unstable_hideCloseButton={dialog.showCloseButton === false}\n        footer={footer}\n        header={dialog.header}\n        id={dialogId}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClose={dialog.onClose}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClickOutside={dialog.onClose}\n        width={dialog.width === undefined ? 1 : DIALOG_WIDTH_TO_UI_WIDTH[dialog.width]}\n      >\n        <Box padding={4}>{dialog.content}</Box>\n      </Dialog>\n    </LegacyLayerProvider>\n  )\n}\n","import {\n  Popover, // eslint-disable-line no-restricted-imports\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useLayer,\n} from '@sanity/ui'\nimport {useCallback, useRef} from 'react'\nimport {type DocumentActionPopoverDialogProps} from 'sanity'\n\nimport {POPOVER_FALLBACK_PLACEMENTS} from './constants'\n\nexport function PopoverDialog(props: {\n  dialog: DocumentActionPopoverDialogProps\n  referenceElement: HTMLElement | null\n}) {\n  const {dialog, referenceElement} = props\n\n  return (\n    <Popover\n      content={<PopoverDialogContent dialog={dialog} />}\n      fallbackPlacements={POPOVER_FALLBACK_PLACEMENTS}\n      open\n      placement=\"top\"\n      portal\n      preventOverflow\n      referenceElement={referenceElement}\n    />\n  )\n}\n\n/**\n * Popover rendered by custom document actions of dialog type `popover`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nfunction PopoverDialogContent(props: {dialog: DocumentActionPopoverDialogProps}) {\n  const {dialog} = props\n  const {content, onClose} = dialog\n  const {isTopLayer} = useLayer()\n  const ref = useRef<HTMLDivElement | null>(null)\n\n  const handleGlobalKeyDown = useCallback(\n    (event: any) => {\n      if (event.key === 'Escape' && isTopLayer) onClose()\n    },\n    [isTopLayer, onClose],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(isTopLayer && onClose, () => [ref.current])\n\n  return <div ref={ref}>{content}</div>\n}\n","import {PortalProvider, Text, usePortal} from '@sanity/ui'\nimport {type ReactNode, useId} from 'react'\nimport {type DocumentActionDialogProps} from 'sanity'\n\nimport {Dialog} from '../../../../ui-components'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {ConfirmDialog} from './dialogs/ConfirmDialog'\nimport {ModalDialog} from './dialogs/ModalDialog'\nimport {PopoverDialog} from './dialogs/PopoverDialog'\n\nexport interface ActionStateDialogProps {\n  dialog: DocumentActionDialogProps\n  referenceElement?: HTMLElement | null\n}\n\n// A portal provider that uses the document panel portal element if it exists\n// as the portal element so that dialogs are scoped to the document panel\nfunction DocumentActionPortalProvider(props: {children: ReactNode}) {\n  const {children} = props\n  const {element, elements} = usePortal()\n  const portalElement = elements?.[DOCUMENT_PANEL_PORTAL_ELEMENT] || element\n\n  return <PortalProvider element={portalElement}>{children}</PortalProvider>\n}\n\nexport function ActionStateDialog(props: ActionStateDialogProps) {\n  const {dialog, referenceElement = null} = props\n  const modalId = useId()\n\n  if (dialog.type === 'confirm') {\n    return <ConfirmDialog dialog={dialog} referenceElement={referenceElement} />\n  }\n\n  if (dialog.type === 'popover') {\n    return <PopoverDialog dialog={dialog} referenceElement={referenceElement} />\n  }\n\n  if (dialog.type === 'dialog' || !dialog.type) {\n    return (\n      <DocumentActionPortalProvider>\n        <ModalDialog dialog={dialog} />\n      </DocumentActionPortalProvider>\n    )\n  }\n\n  if (dialog.type === 'custom') {\n    return <DocumentActionPortalProvider>{dialog?.component}</DocumentActionPortalProvider>\n  }\n\n  // @todo: add validation?\n  const unknownModal: any = dialog\n\n  // eslint-disable-next-line no-console\n  console.warn(`Unsupported modal type ${unknownModal.type}`)\n\n  return (\n    <Dialog\n      id={modalId}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClose={unknownModal.onClose}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClickOutside={unknownModal.onClose}\n      width={1}\n    >\n      {unknownModal.content || (\n        // eslint-disable-next-line i18next/no-literal-string\n        <Text size={1}>\n          Unexpected modal type (<code>{unknownModal.type}</code>)\n        </Text>\n      )}\n    </Dialog>\n  )\n}\n","import {Menu} from '@sanity/ui'\nimport {memo, type ReactNode, useCallback, useId, useMemo, useState} from 'react'\nimport {\n  ContextMenuButton,\n  type DocumentActionDescription,\n  LegacyLayerProvider,\n  useTranslation,\n} from 'sanity'\n\nimport {MenuButton, MenuItem, type PopoverProps} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {ActionStateDialog} from './ActionStateDialog'\n\nexport interface ActionMenuButtonProps {\n  actionStates: DocumentActionDescription[]\n  disabled: boolean\n}\n\n/**\n * @internal\n */\nexport const ActionDialogWrapper = memo(function ActionDialogWrapper({\n  actionStates,\n  children,\n  referenceElement,\n}: {\n  actionStates: DocumentActionDescription[]\n  children: ({handleAction}: {handleAction: (idx: number) => void}) => ReactNode\n  referenceElement?: HTMLElement | null\n}) {\n  const [actionIndex, setActionIndex] = useState(-1)\n  const currentAction = useMemo(() => actionStates[actionIndex], [actionIndex, actionStates])\n\n  const handleAction = useCallback((idx: number) => {\n    setActionIndex(idx)\n  }, [])\n\n  const result = useMemo(() => children({handleAction}), [children, handleAction])\n\n  return (\n    <>\n      {currentAction && currentAction.dialog && (\n        <LegacyLayerProvider zOffset=\"paneFooter\">\n          <ActionStateDialog dialog={currentAction.dialog} referenceElement={referenceElement} />\n        </LegacyLayerProvider>\n      )}\n      {result}\n    </>\n  )\n})\n\n/**\n * @internal\n */\nexport function ActionMenuButton(props: ActionMenuButtonProps) {\n  const {actionStates, disabled} = props\n  const idPrefix = useId()\n\n  const [referenceElement, setReferenceElement] = useState<HTMLButtonElement | null>(null)\n\n  const popoverProps: PopoverProps = useMemo(\n    () => ({\n      placement: 'top-end',\n      portal: true,\n      preventOverflow: true,\n    }),\n    [],\n  )\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const renderActionDialog = useCallback<\n    ({handleAction}: {handleAction: (idx: number) => void}) => ReactNode\n  >(\n    ({handleAction}) => (\n      <MenuButton\n        id={`${idPrefix}-action-menu`}\n        button={\n          <ContextMenuButton\n            aria-label={t('buttons.action-menu-button.aria-label')}\n            disabled={disabled}\n            data-testid=\"action-menu-button\"\n            size=\"large\"\n            tooltipProps={{content: t('buttons.action-menu-button.tooltip')}}\n          />\n        }\n        menu={\n          <Menu padding={1}>\n            {actionStates.map((actionState, idx) => (\n              <ActionMenuListItem\n                actionState={actionState}\n                disabled={disabled}\n                index={idx}\n                // eslint-disable-next-line react/no-array-index-key\n                key={idx}\n                onAction={handleAction}\n              />\n            ))}\n          </Menu>\n        }\n        popover={popoverProps}\n        ref={setReferenceElement}\n      />\n    ),\n    [actionStates, disabled, idPrefix, popoverProps, t],\n  )\n\n  return (\n    <ActionDialogWrapper actionStates={actionStates} referenceElement={referenceElement}>\n      {renderActionDialog}\n    </ActionDialogWrapper>\n  )\n}\n\ninterface ActionMenuListItemProps {\n  actionState: DocumentActionDescription\n  disabled: boolean\n  index: number\n  onAction: (idx: number) => void\n}\n\nexport function ActionMenuListItem(props: ActionMenuListItemProps) {\n  const {actionState, disabled, index, onAction} = props\n  const {onHandle} = actionState\n\n  const handleClick = useCallback(() => {\n    onAction(index)\n    if (onHandle) onHandle()\n  }, [index, onAction, onHandle])\n\n  const hotkeys = useMemo(() => {\n    return actionState.shortcut\n      ? String(actionState.shortcut)\n          .split('+')\n          .map((s) => s.slice(0, 1).toUpperCase() + s.slice(1))\n      : undefined\n  }, [actionState.shortcut])\n\n  return (\n    <MenuItem\n      data-testid={`action-${actionState.label.replace(' ', '')}`}\n      disabled={disabled || Boolean(actionState.disabled)}\n      hotkeys={hotkeys}\n      icon={actionState.icon}\n      onClick={handleClick}\n      text={actionState.label}\n      tone={actionState.tone}\n      {...(actionState.disabled && {tooltipProps: {content: actionState.title}})}\n    />\n  )\n}\n","/* eslint-disable import/no-extraneous-dependencies */\n\nimport {TrashIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {ConfirmDeleteDialog} from '../components'\nimport {structureLocaleNamespace} from '../i18n'\nimport {useDocumentPane} from '../panes/document/useDocumentPane'\n\nconst DISABLED_REASON_TITLE_KEY = {\n  NOTHING_TO_DELETE: 'action.delete.disabled.nothing-to-delete',\n  NOT_READY: 'action.delete.disabled.not-ready',\n}\n\n/** @internal */\nexport const DeleteAction: DocumentActionComponent = ({id, type, draft, onComplete}) => {\n  const {setIsDeleting: paneSetIsDeleting} = useDocumentPane()\n  const {delete: deleteOp} = useDocumentOperation(id, type)\n  const [isDeleting, setIsDeleting] = useState(false)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleCancel = useCallback(() => {\n    setConfirmDialogOpen(false)\n    onComplete()\n  }, [onComplete])\n\n  const handleConfirm = useCallback(() => {\n    setIsDeleting(true)\n    setConfirmDialogOpen(false)\n    paneSetIsDeleting(true)\n    deleteOp.execute()\n    onComplete()\n  }, [deleteOp, onComplete, paneSetIsDeleting])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'delete',\n  })\n\n  const currentUser = useCurrentUser()\n\n  return useMemo(() => {\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: TrashIcon,\n        disabled: true,\n        label: t('action.delete.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"delete-document\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: TrashIcon,\n      disabled: isDeleting || Boolean(deleteOp.disabled) || isPermissionsLoading,\n      title: (deleteOp.disabled && t(DISABLED_REASON_TITLE_KEY[deleteOp.disabled])) || '',\n      label: isDeleting ? t('action.delete.running.label') : t('action.delete.label'),\n      shortcut: 'Ctrl+Alt+D',\n      onHandle: handle,\n      dialog: isConfirmDialogOpen && {\n        type: 'custom',\n        component: (\n          <ConfirmDeleteDialog\n            // eslint-disable-next-line @sanity/i18n/no-attribute-string-literals\n            action=\"delete\"\n            id={draft?._id || id}\n            type={type}\n            onCancel={handleCancel}\n            onConfirm={handleConfirm}\n          />\n        ),\n      },\n    }\n  }, [\n    currentUser,\n    deleteOp.disabled,\n    draft?._id,\n    handle,\n    handleCancel,\n    handleConfirm,\n    id,\n    isConfirmDialogOpen,\n    isDeleting,\n    isPermissionsLoading,\n    permissions?.granted,\n    t,\n    type,\n  ])\n}\n\nDeleteAction.action = 'delete'\nDeleteAction.displayName = 'DeleteAction'\n","/* eslint-disable import/no-extraneous-dependencies */\n\nimport {ResetIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDialogProps,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NO_CHANGES: 'action.discard-changes.disabled.no-change',\n  NOT_PUBLISHED: 'action.discard-changes.disabled.not-published',\n  NOT_READY: 'action.discard-changes.disabled.not-ready',\n} as const\n\n/** @internal */\nexport const DiscardChangesAction: DocumentActionComponent = ({\n  id,\n  type,\n  published,\n  liveEdit,\n  onComplete,\n}) => {\n  const {discardChanges} = useDocumentOperation(id, type)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'discardDraft',\n  })\n  const currentUser = useCurrentUser()\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleConfirm = useCallback(() => {\n    discardChanges.execute()\n    onComplete()\n  }, [discardChanges, onComplete])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const dialog: DocumentActionDialogProps | false = useMemo(\n    () =>\n      isConfirmDialogOpen && {\n        type: 'confirm',\n        tone: 'critical',\n        onCancel: onComplete,\n        onConfirm: handleConfirm,\n        message: t('action.discard-changes.confirm-dialog.confirm-discard-changes'),\n      },\n    [handleConfirm, isConfirmDialogOpen, onComplete, t],\n  )\n\n  return useMemo(() => {\n    if (!published || liveEdit) {\n      return null\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: ResetIcon,\n        disabled: true,\n        label: t('action.discard-changes.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"discard-changes\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: ResetIcon,\n      disabled: Boolean(discardChanges.disabled) || isPermissionsLoading,\n      title: (discardChanges.disabled && DISABLED_REASON_KEY[discardChanges.disabled]) || '',\n      label: t('action.discard-changes.label'),\n      onHandle: handle,\n      dialog,\n    }\n  }, [\n    currentUser,\n    dialog,\n    discardChanges.disabled,\n    handle,\n    isPermissionsLoading,\n    liveEdit,\n    permissions?.granted,\n    published,\n    t,\n  ])\n}\n\nDiscardChangesAction.action = 'discardChanges'\nDiscardChangesAction.displayName = 'DiscardChangesAction'\n","import {CopyIcon} from '@sanity/icons'\nimport {uuid} from '@sanity/uuid'\nimport {useCallback, useMemo, useState} from 'react'\nimport {filter, firstValueFrom} from 'rxjs'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useDocumentStore,\n  useTranslation,\n} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NOTHING_TO_DUPLICATE: 'action.duplicate.disabled.nothing-to-duplicate',\n  NOT_READY: 'action.duplicate.disabled.not-ready',\n}\n\n/** @internal */\nexport const DuplicateAction: DocumentActionComponent = ({id, type, onComplete}) => {\n  const documentStore = useDocumentStore()\n  const {duplicate} = useDocumentOperation(id, type)\n  const {navigateIntent} = useRouter()\n  const [isDuplicating, setDuplicating] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'duplicate',\n  })\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const currentUser = useCurrentUser()\n\n  const handle = useCallback(async () => {\n    const dupeId = uuid()\n\n    setDuplicating(true)\n\n    // set up the listener before executing\n    const duplicateSuccess = firstValueFrom(\n      documentStore.pair\n        .operationEvents(id, type)\n        .pipe(filter((e) => e.op === 'duplicate' && e.type === 'success')),\n    )\n    duplicate.execute(dupeId)\n\n    // only navigate to the duplicated document when the operation is successful\n    await duplicateSuccess\n    navigateIntent('edit', {id: dupeId, type})\n\n    onComplete()\n  }, [documentStore.pair, duplicate, id, navigateIntent, onComplete, type])\n\n  return useMemo(() => {\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        icon: CopyIcon,\n        disabled: true,\n        label: t('action.duplicate.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"duplicate-document\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      icon: CopyIcon,\n      disabled: isDuplicating || Boolean(duplicate.disabled) || isPermissionsLoading,\n      label: isDuplicating ? t('action.duplicate.running.label') : t('action.duplicate.label'),\n      title: duplicate.disabled ? t(DISABLED_REASON_KEY[duplicate.disabled]) : '',\n      onHandle: handle,\n    }\n  }, [\n    currentUser,\n    duplicate.disabled,\n    handle,\n    isDuplicating,\n    isPermissionsLoading,\n    permissions?.granted,\n    t,\n  ])\n}\n\nDuplicateAction.action = 'duplicate'\nDuplicateAction.displayName = 'DuplicateAction'\n","import {RevertIcon} from '@sanity/icons'\nimport {useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDialogProps,\n  useDocumentOperation,\n  useDocumentOperationEvent,\n  useTranslation,\n} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../i18n'\n\n/** @internal */\nexport const HistoryRestoreAction: DocumentActionComponent = ({id, type, revision, onComplete}) => {\n  const {restore} = useDocumentOperation(id, type)\n  const event = useDocumentOperationEvent(id, type)\n  const {navigateIntent} = useRouter()\n  const prevEvent = useRef(event)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleConfirm = useCallback(() => {\n    restore.execute(revision!)\n    onComplete()\n  }, [restore, revision, onComplete])\n\n  /**\n   * If the restore operation is successful, navigate to the document edit view\n   */\n  useEffect(() => {\n    if (!event || event === prevEvent.current) return\n\n    if (event.type === 'success' && event.op === 'restore') {\n      navigateIntent('edit', {id, type})\n    }\n\n    prevEvent.current = event\n  }, [event, id, navigateIntent, type])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const dialog: DocumentActionDialogProps | null = useMemo(() => {\n    if (isConfirmDialogOpen) {\n      return {\n        type: 'confirm',\n        tone: 'critical',\n        onCancel: onComplete,\n        onConfirm: handleConfirm,\n        message: t('action.restore.confirm.message'),\n      }\n    }\n\n    return null\n  }, [handleConfirm, isConfirmDialogOpen, onComplete, t])\n\n  const isRevisionInitial = revision === '@initial'\n  const isRevisionLatest = revision === undefined // undefined means latest revision\n\n  return useMemo(() => {\n    if (isRevisionLatest) {\n      return null\n    }\n\n    return {\n      label: t('action.restore.label'),\n      tone: 'caution',\n      onHandle: handle,\n      title: t(\n        isRevisionInitial\n          ? 'action.restore.disabled.cannot-restore-initial'\n          : 'action.restore.tooltip',\n      ),\n      icon: RevertIcon,\n      dialog,\n      disabled: isRevisionInitial,\n    }\n  }, [dialog, handle, isRevisionInitial, isRevisionLatest, t])\n}\n\nHistoryRestoreAction.action = 'restore'\nHistoryRestoreAction.displayName = 'HistoryRestoreAction'\n","import {defineEvent} from '@sanity/telemetry'\n\ninterface DocumentPublishedInfo {\n  /**\n   * The document was created and published straight away\n   */\n  publishedImmediately: boolean\n\n  /**\n   * The document had a previously published version when it was published\n   */\n  previouslyPublished: boolean\n}\nexport const DocumentPublished = defineEvent<DocumentPublishedInfo>({\n  name: 'Document Published',\n  version: 1,\n  description: 'User clicked the \"Publish\" button in the document pane',\n})\n","import {PublishIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {isValidationErrorMarker} from '@sanity/types'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  type TFunction,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useEditState,\n  useRelativeTime,\n  useSyncState,\n  useTranslation,\n  useValidationStatus,\n} from 'sanity'\n\nimport {structureLocaleNamespace, type StructureLocaleResourceKeys} from '../i18n'\nimport {useDocumentPane} from '../panes/document/useDocumentPane'\nimport {DocumentPublished} from './__telemetry__/documentActions.telemetry'\n\nconst DISABLED_REASON_TITLE_KEY: Record<string, StructureLocaleResourceKeys> = {\n  LIVE_EDIT_ENABLED: 'action.publish.live-edit.publish-disabled',\n  ALREADY_PUBLISHED: 'action.publish.already-published.no-time-ago.tooltip',\n  NO_CHANGES: 'action.publish.no-changes.tooltip',\n  NOT_READY: 'action.publish.disabled.not-ready',\n} as const\n\nfunction getDisabledReason(\n  reason: keyof typeof DISABLED_REASON_TITLE_KEY,\n  publishedAt: string | undefined,\n  t: TFunction,\n) {\n  if (reason === 'ALREADY_PUBLISHED' && publishedAt) {\n    return <AlreadyPublished publishedAt={publishedAt} />\n  }\n  return t(DISABLED_REASON_TITLE_KEY[reason])\n}\n\nfunction AlreadyPublished({publishedAt}: {publishedAt: string}) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const timeSincePublished = useRelativeTime(publishedAt, {useTemporalPhrase: true})\n  return <span>{t('action.publish.already-published.tooltip', {timeSincePublished})}</span>\n}\n\n/** @internal */\n// eslint-disable-next-line complexity\nexport const PublishAction: DocumentActionComponent = (props) => {\n  const {id, type, liveEdit, draft, published} = props\n  const [publishState, setPublishState] = useState<'publishing' | 'published' | null>(null)\n  const {publish} = useDocumentOperation(id, type)\n  const validationStatus = useValidationStatus(id, type)\n  const syncState = useSyncState(id, type)\n  const {changesOpen, onHistoryOpen, documentId, documentType} = useDocumentPane()\n  const editState = useEditState(documentId, documentType)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const revision = (editState?.draft || editState?.published || {})._rev\n\n  const hasValidationErrors = validationStatus.validation.some(isValidationErrorMarker)\n  // we use this to \"schedule\" publish after pending tasks (e.g. validation and sync) has completed\n  const [publishScheduled, setPublishScheduled] = useState<boolean>(false)\n  const isSyncing = syncState.isSyncing\n  const isValidating = validationStatus.isValidating\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'publish',\n  })\n\n  const currentUser = useCurrentUser()\n\n  // eslint-disable-next-line no-nested-ternary\n  const title = publish.disabled\n    ? getDisabledReason(publish.disabled, (published || {})._updatedAt, t) || ''\n    : hasValidationErrors\n      ? t('action.publish.validation-issues.tooltip')\n      : ''\n\n  const hasDraft = Boolean(draft)\n\n  const doPublish = useCallback(() => {\n    publish.execute()\n    setPublishState('publishing')\n  }, [publish])\n\n  useEffect(() => {\n    // make sure the validation status is about the current revision and not an earlier one\n    const validationComplete =\n      validationStatus.isValidating === false && validationStatus.revision !== revision\n\n    if (!publishScheduled || isSyncing || !validationComplete) {\n      return\n    }\n\n    if (!hasValidationErrors) {\n      doPublish()\n    }\n    setPublishScheduled(false)\n  }, [\n    isSyncing,\n    doPublish,\n    hasValidationErrors,\n    publishScheduled,\n    validationStatus.revision,\n    revision,\n    isValidating,\n    validationStatus.isValidating,\n  ])\n\n  useEffect(() => {\n    const didPublish = publishState === 'publishing' && !hasDraft\n\n    const nextState = didPublish ? 'published' : null\n    const delay = didPublish ? 200 : 4000\n    const timer = setTimeout(() => {\n      setPublishState(nextState)\n    }, delay)\n    return () => clearTimeout(timer)\n  }, [changesOpen, publishState, hasDraft])\n\n  const telemetry = useTelemetry()\n\n  const handle = useCallback(() => {\n    telemetry.log(DocumentPublished, {\n      publishedImmediately: !draft?._createdAt,\n      previouslyPublished: Boolean(published),\n    })\n    if (\n      syncState.isSyncing ||\n      validationStatus.isValidating ||\n      validationStatus.revision !== revision\n    ) {\n      setPublishScheduled(true)\n    } else {\n      doPublish()\n    }\n  }, [\n    telemetry,\n    draft?._createdAt,\n    published,\n    syncState.isSyncing,\n    validationStatus.isValidating,\n    validationStatus.revision,\n    revision,\n    doPublish,\n  ])\n\n  return useMemo(() => {\n    if (liveEdit) {\n      return {\n        tone: 'default',\n        icon: PublishIcon,\n        label: t('action.publish.live-edit.label'),\n        title: t('action.publish.live-edit.tooltip'),\n        disabled: true,\n      }\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'default',\n        icon: PublishIcon,\n        label: 'Publish',\n        title: (\n          <InsufficientPermissionsMessage context=\"publish-document\" currentUser={currentUser} />\n        ),\n        disabled: true,\n      }\n    }\n\n    const disabled = Boolean(\n      publishScheduled ||\n        editState?.transactionSyncLock?.enabled ||\n        publishState === 'publishing' ||\n        publishState === 'published' ||\n        hasValidationErrors ||\n        publish.disabled,\n    )\n\n    return {\n      disabled: disabled || isPermissionsLoading,\n      tone: 'default',\n      label:\n        // eslint-disable-next-line no-nested-ternary\n        publishState === 'published'\n          ? t('action.publish.published.label')\n          : publishScheduled || publishState === 'publishing'\n            ? t('action.publish.running.label')\n            : t('action.publish.draft.label'),\n      // @todo: Implement loading state, to show a `<Button loading />` state\n      // loading: publishScheduled || publishState === 'publishing',\n      icon: PublishIcon,\n      // eslint-disable-next-line no-nested-ternary\n      title: publishScheduled\n        ? t('action.publish.waiting')\n        : publishState === 'published' || publishState === 'publishing'\n          ? null\n          : title,\n      shortcut: disabled || publishScheduled ? null : 'Ctrl+Alt+P',\n      onHandle: handle,\n    }\n  }, [\n    currentUser,\n    editState?.transactionSyncLock?.enabled,\n    handle,\n    hasValidationErrors,\n    isPermissionsLoading,\n    liveEdit,\n    permissions?.granted,\n    publish.disabled,\n    publishScheduled,\n    publishState,\n    t,\n    title,\n  ])\n}\n\nPublishAction.action = 'publish'\nPublishAction.displayName = 'PublishAction'\n","import {UnpublishIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionModalDialogProps,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {ConfirmDeleteDialog} from '../components'\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NOT_PUBLISHED: 'action.unpublish.disabled.not-published',\n  NOT_READY: 'action.unpublish.disabled.not-ready',\n  LIVE_EDIT_ENABLED: 'action.unpublish.disabled.live-edit-enabled',\n}\n\n/** @internal */\nexport const UnpublishAction: DocumentActionComponent = ({\n  id,\n  type,\n  draft,\n  onComplete,\n  liveEdit,\n}) => {\n  const {unpublish} = useDocumentOperation(id, type)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'unpublish',\n  })\n  const currentUser = useCurrentUser()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleCancel = useCallback(() => {\n    setConfirmDialogOpen(false)\n    onComplete()\n  }, [onComplete])\n\n  const handleConfirm = useCallback(() => {\n    setConfirmDialogOpen(false)\n    unpublish.execute()\n    onComplete()\n  }, [onComplete, unpublish])\n\n  const dialog: DocumentActionModalDialogProps | null = useMemo(() => {\n    if (isConfirmDialogOpen) {\n      return {\n        type: 'dialog',\n        onClose: onComplete,\n        content: (\n          <ConfirmDeleteDialog\n            id={draft?._id || id}\n            type={type}\n            // eslint-disable-next-line @sanity/i18n/no-attribute-string-literals\n            action=\"unpublish\"\n            onCancel={handleCancel}\n            onConfirm={handleConfirm}\n          />\n        ),\n      }\n    }\n\n    return null\n  }, [draft, id, handleCancel, handleConfirm, isConfirmDialogOpen, onComplete, type])\n\n  return useMemo(() => {\n    if (liveEdit) {\n      return null\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: UnpublishIcon,\n        label: 'Unpublish',\n        title: (\n          <InsufficientPermissionsMessage context=\"unpublish-document\" currentUser={currentUser} />\n        ),\n        disabled: true,\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: UnpublishIcon,\n      disabled: Boolean(unpublish.disabled) || isPermissionsLoading,\n      label: t('action.unpublish.label'),\n      title: unpublish.disabled ? t(DISABLED_REASON_KEY[unpublish.disabled]) : '',\n      onHandle: () => setConfirmDialogOpen(true),\n      dialog,\n    }\n  }, [\n    currentUser,\n    dialog,\n    isPermissionsLoading,\n    liveEdit,\n    permissions?.granted,\n    t,\n    unpublish.disabled,\n  ])\n}\n\nUnpublishAction.action = 'unpublish'\nUnpublishAction.displayName = 'UnpublishAction'\n","/* eslint-disable camelcase */\nimport {Flex, LayerProvider, Stack, Text} from '@sanity/ui'\nimport {memo, useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDescription,\n  Hotkeys,\n  useTimelineSelector,\n} from 'sanity'\n\nimport {Button, Tooltip} from '../../../../ui-components'\nimport {RenderActionCollectionState} from '../../../components'\nimport {HistoryRestoreAction} from '../../../documentActions'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {ActionMenuButton} from './ActionMenuButton'\nimport {ActionStateDialog} from './ActionStateDialog'\n\ninterface DocumentStatusBarActionsInnerProps {\n  disabled: boolean\n  showMenu: boolean\n  states: DocumentActionDescription[]\n}\n\nconst DocumentStatusBarActionsInner = memo(function DocumentStatusBarActionsInner(\n  props: DocumentStatusBarActionsInnerProps,\n) {\n  const {disabled, showMenu, states} = props\n  const {__internal_tasks} = useDocumentPane()\n  const [firstActionState, ...menuActionStates] = states\n  const [buttonElement, setButtonElement] = useState<HTMLButtonElement | null>(null)\n\n  // TODO: This could be refactored to use the tooltip from the button if the firstAction.title was updated to a string.\n  const tooltipContent = useMemo(() => {\n    if (!firstActionState || (!firstActionState.title && !firstActionState.shortcut)) return null\n\n    return (\n      <Flex style={{maxWidth: 300}} align=\"center\" gap={3}>\n        {firstActionState.title && <Text size={1}>{firstActionState.title}</Text>}\n        {firstActionState.shortcut && (\n          <Hotkeys\n            data-testid=\"document-status-bar-hotkeys\"\n            fontSize={1}\n            style={{marginTop: -4, marginBottom: -4}}\n            keys={String(firstActionState.shortcut)\n              .split('+')\n              .map((s) => s.slice(0, 1).toUpperCase() + s.slice(1).toLowerCase())}\n          />\n        )}\n      </Flex>\n    )\n  }, [firstActionState])\n\n  return (\n    <Flex align=\"center\" gap={1}>\n      {__internal_tasks && __internal_tasks.footerAction}\n      {firstActionState && (\n        <LayerProvider zOffset={200}>\n          <Tooltip disabled={!tooltipContent} content={tooltipContent} placement=\"top\">\n            <Stack>\n              <Button\n                data-testid={`action-${firstActionState.label}`}\n                disabled={disabled || Boolean(firstActionState.disabled)}\n                icon={firstActionState.icon}\n                // eslint-disable-next-line react/jsx-handler-names\n                onClick={firstActionState.onHandle}\n                ref={setButtonElement}\n                size=\"large\"\n                text={firstActionState.label}\n                tone={firstActionState.tone || 'primary'}\n              />\n            </Stack>\n          </Tooltip>\n        </LayerProvider>\n      )}\n      {showMenu && menuActionStates.length > 0 && (\n        <ActionMenuButton actionStates={menuActionStates} disabled={disabled} />\n      )}\n      {firstActionState && firstActionState.dialog && (\n        <ActionStateDialog dialog={firstActionState.dialog} referenceElement={buttonElement} />\n      )}\n    </Flex>\n  )\n})\n\nexport const DocumentStatusBarActions = memo(function DocumentStatusBarActions() {\n  const {actions: allActions, connectionState, documentId, editState} = useDocumentPane()\n  // const [isMenuOpen, setMenuOpen] = useState(false)\n  // const handleMenuOpen = useCallback(() => setMenuOpen(true), [])\n  // const handleMenuClose = useCallback(() => setMenuOpen(false), [])\n  // const handleActionComplete = useCallback(() => setMenuOpen(false), [])\n\n  // The restore action has a dedicated place in the UI; it's only visible when the user is viewing\n  // a different document revision. It must be omitted from this collection.\n  const actions = useMemo(\n    () => (allActions ?? []).filter((action) => !isRestoreAction(action)),\n    [allActions],\n  )\n\n  const renderDocumentStatusBarActions = useCallback<\n    (props: {states: DocumentActionDescription[]}) => React.ReactNode\n  >(\n    ({states}) => (\n      <DocumentStatusBarActionsInner\n        disabled={connectionState !== 'connected'}\n        // isMenuOpen={isMenuOpen}\n        // onMenuOpen={handleMenuOpen}\n        // onMenuClose={handleMenuClose}\n        showMenu={actions.length > 1}\n        states={states}\n        // Use document ID as key to make sure that the actions state is reset when the document changes\n        key={documentId}\n      />\n    ),\n    [actions.length, connectionState, documentId],\n  )\n\n  if (actions.length === 0 || !editState) {\n    return null\n  }\n\n  return (\n    <RenderActionCollectionState\n      // component={}\n      // onActionComplete={handleActionComplete}\n      actions={actions}\n      actionProps={editState}\n      group=\"default\"\n    >\n      {renderDocumentStatusBarActions}\n    </RenderActionCollectionState>\n  )\n})\n\nexport const HistoryStatusBarActions = memo(function HistoryStatusBarActions() {\n  const {actions, connectionState, editState, timelineStore} = useDocumentPane()\n\n  // Subscribe to external timeline state changes\n  const revTime = useTimelineSelector(timelineStore, (state) => state.revTime)\n\n  const revision = revTime?.id || ''\n  const disabled = (editState?.draft || editState?.published || {})._rev === revision\n  const actionProps = useMemo(() => ({...(editState || {}), revision}), [editState, revision])\n\n  // If multiple `restore` actions are defined, ensure only the final one is used.\n  const historyActions = useMemo(() => (actions ?? []).filter(isRestoreAction).slice(-1), [actions])\n\n  const renderDocumentStatusBarActions = useCallback<\n    (props: {states: DocumentActionDescription[]}) => React.ReactNode\n  >(\n    ({states}) => (\n      <DocumentStatusBarActionsInner\n        disabled={connectionState !== 'connected' || Boolean(disabled)}\n        showMenu={false}\n        states={states}\n      />\n    ),\n    [connectionState, disabled],\n  )\n\n  return (\n    <RenderActionCollectionState\n      actions={historyActions}\n      actionProps={actionProps as any}\n      group=\"default\"\n    >\n      {renderDocumentStatusBarActions}\n    </RenderActionCollectionState>\n  )\n})\n\nexport function isRestoreAction(\n  action: DocumentActionComponent,\n): action is DocumentActionComponent & {action: 'restore'} {\n  return action.action === HistoryRestoreAction.action\n}\n","import {TabList} from '@sanity/ui'\nimport {type ComponentType, type ReactNode, useCallback} from 'react'\n\nimport {Tab} from '../../../../../ui-components'\nimport {usePaneRouter} from '../../../../components'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nexport function DocumentHeaderTabs() {\n  const {activeViewId, paneKey, views} = useDocumentPane()\n  const tabPanelId = `${paneKey}tabpanel`\n\n  return (\n    <TabList space={1}>\n      {views.map((view, index) => (\n        <DocumentHeaderTab\n          icon={view.icon}\n          id={`${paneKey}tab-${view.id}`}\n          isActive={activeViewId === view.id}\n          key={view.id}\n          label={view.title}\n          tabPanelId={tabPanelId}\n          viewId={index === 0 ? null : (view.id ?? null)}\n        />\n      ))}\n    </TabList>\n  )\n}\n\nfunction DocumentHeaderTab(props: {\n  icon?: ComponentType | ReactNode\n  id: string\n  isActive: boolean\n  label: string\n  tabPanelId: string\n  viewId: string | null\n}) {\n  const {icon, id, isActive, label, tabPanelId, viewId, ...rest} = props\n  const {ready, editState} = useDocumentPane()\n  const {setView} = usePaneRouter()\n  const handleClick = useCallback(() => setView(viewId), [setView, viewId])\n\n  return (\n    <Tab\n      {...rest} // required to enable <TabList> keyboard navigation\n      aria-controls={tabPanelId}\n      disabled={!ready && !editState?.draft && !editState?.published}\n      icon={icon}\n      id={id}\n      label={label}\n      onClick={handleClick}\n      selected={isActive}\n    />\n  )\n}\n","import {type ReactElement} from 'react'\nimport {unstable_useValuePreview as useValuePreview, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nexport function DocumentHeaderTitle(): ReactElement {\n  const {connectionState, schemaType, title, editState} = useDocumentPane()\n  const documentValue = editState?.draft || editState?.published\n  const subscribed = Boolean(documentValue)\n\n  const {error, value} = useValuePreview({\n    enabled: subscribed,\n    schemaType,\n    value: documentValue,\n  })\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (connectionState === 'connecting' && !subscribed) {\n    return <></>\n  }\n\n  if (title) {\n    return <>{title}</>\n  }\n\n  if (!documentValue) {\n    return (\n      <>\n        {t('panes.document-header-title.new.text', {\n          schemaType: schemaType?.title || schemaType?.name,\n        })}\n      </>\n    )\n  }\n\n  if (error) {\n    return <>{t('panes.document-header-title.error.text', {error: error.message})}</>\n  }\n\n  return (\n    <>\n      {value?.title || (\n        <span style={{color: 'var(--card-muted-fg-color)'}}>\n          {t('panes.document-header-title.untitled.text')}\n        </span>\n      )}\n    </>\n  )\n}\n","import {ArrowLeftIcon, CloseIcon, SplitVerticalIcon} from '@sanity/icons'\nimport {Flex} from '@sanity/ui'\nimport {\n  createElement,\n  type ForwardedRef,\n  forwardRef,\n  memo,\n  useCallback,\n  useDeferredValue,\n  useMemo,\n  useState,\n} from 'react'\nimport {type DocumentActionDescription, useFieldActions, useTranslation} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../../../ui-components'\nimport {\n  PaneContextMenuButton,\n  PaneHeader,\n  PaneHeaderActionButton,\n  RenderActionCollectionState,\n  usePane,\n  usePaneRouter,\n} from '../../../../components'\nimport {type _PaneMenuNode} from '../../../../components/pane/types'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {isMenuNodeButton, isNotMenuNodeButton, resolveMenuNodes} from '../../../../menuNodes'\nimport {type PaneMenuItem} from '../../../../types'\nimport {useStructureTool} from '../../../../useStructureTool'\nimport {ActionDialogWrapper, ActionMenuListItem} from '../../statusBar/ActionMenuButton'\nimport {isRestoreAction} from '../../statusBar/DocumentStatusBarActions'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {DocumentHeaderTabs} from './DocumentHeaderTabs'\nimport {DocumentHeaderTitle} from './DocumentHeaderTitle'\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface DocumentPanelHeaderProps {\n  menuItems: PaneMenuItem[]\n}\n\nexport const DocumentPanelHeader = memo(\n  forwardRef(function DocumentPanelHeader(\n    _props: DocumentPanelHeaderProps,\n    ref: ForwardedRef<HTMLDivElement>,\n  ) {\n    const {menuItems} = _props\n    const {\n      actions: allActions,\n      editState,\n      onMenuAction,\n      onPaneClose,\n      onPaneSplit,\n      menuItemGroups,\n      schemaType,\n      connectionState,\n      views,\n      unstable_languageFilter,\n    } = useDocumentPane()\n    const {features} = useStructureTool()\n    const {index, BackLink, hasGroupSiblings} = usePaneRouter()\n    const {actions: fieldActions} = useFieldActions()\n    const [referenceElement, setReferenceElement] = useState<HTMLElement | null>(null)\n\n    // The restore action has a dedicated place in the UI; it's only visible when the user is\n    // viewing a different document revision. It must be omitted from this collection.\n    const actions = useMemo(\n      () => (allActions ?? []).filter((action) => !isRestoreAction(action)),\n      [allActions],\n    )\n\n    const menuNodes = useMemo(\n      () =>\n        resolveMenuNodes({actionHandler: onMenuAction, fieldActions, menuItems, menuItemGroups}),\n      [onMenuAction, fieldActions, menuItemGroups, menuItems],\n    )\n\n    const menuButtonNodes = useMemo(() => menuNodes.filter(isMenuNodeButton), [menuNodes])\n    const contextMenuNodes = useMemo(() => menuNodes.filter(isNotMenuNodeButton), [menuNodes])\n    const showTabs = views.length > 1\n\n    const {collapsed, isLast} = usePane()\n    // Prevent focus if this is the last (non-collapsed) pane.\n    const tabIndex = isLast && !collapsed ? -1 : 0\n\n    // there are three kinds of buttons possible:\n    //\n    // 1. split pane - creates a new split pane\n    // 2. close split pane — closes the current split pane\n    // 3. close pane group — closes the current pane group\n\n    // show the split pane button if they're enabled and there is more than one\n    // view available to use to create a split view\n    const showSplitPaneButton = features.splitViews && onPaneSplit && views.length > 1\n\n    // show the split pane button close button if the split button is showing\n    // and there is more than one split pane open (aka has-siblings)\n    const showSplitPaneCloseButton = showSplitPaneButton && hasGroupSiblings\n\n    // show the back button if both the feature is enabled and the current pane\n    // is not the first\n    const showBackButton = features.backButton && index > 0\n\n    // show the pane group close button if the `showSplitPaneCloseButton` is\n    // _not_ showing (the split pane button replaces the group close button)\n    // and if the back button is not showing (the back button and the close\n    // button do the same thing and shouldn't be shown at the same time)\n    // and if a BackLink component was provided\n    const showPaneGroupCloseButton = !showSplitPaneCloseButton && !showBackButton && !!BackLink\n\n    const {t} = useTranslation(structureLocaleNamespace)\n\n    const renderPaneActions = useCallback<\n      (props: {states: DocumentActionDescription[]}) => React.ReactNode\n    >(\n      ({states}) => (\n        <DocumentPanelHeaderActionDialogDeferred\n          contextMenuNodes={contextMenuNodes}\n          setReferenceElement={setReferenceElement}\n          referenceElement={referenceElement}\n          states={states}\n        />\n      ),\n      [contextMenuNodes, referenceElement],\n    )\n\n    return (\n      <TooltipDelayGroupProvider>\n        <PaneHeader\n          border\n          ref={ref}\n          loading={connectionState === 'connecting' && !editState?.draft && !editState?.published}\n          title={<DocumentHeaderTitle />}\n          tabs={showTabs && <DocumentHeaderTabs />}\n          tabIndex={tabIndex}\n          backButton={\n            showBackButton && (\n              <Button\n                as={BackLink}\n                data-as=\"a\"\n                icon={ArrowLeftIcon}\n                mode=\"bleed\"\n                tooltipProps={{content: t('pane-header.back-button.text')}}\n              />\n            )\n          }\n          actions={\n            <Flex align=\"center\" gap={1}>\n              {unstable_languageFilter.length > 0 && (\n                <>\n                  {unstable_languageFilter.map((languageFilterComponent, idx) => {\n                    return createElement(languageFilterComponent, {\n                      // eslint-disable-next-line react/no-array-index-key\n                      key: `language-filter-${idx}`,\n                      schemaType,\n                    })\n                  })}\n                </>\n              )}\n\n              {menuButtonNodes.map((item) => (\n                <PaneHeaderActionButton key={item.key} node={item} />\n              ))}\n              {editState && (\n                <RenderActionCollectionState\n                  actions={actions}\n                  actionProps={editState}\n                  group=\"paneActions\"\n                >\n                  {renderPaneActions}\n                </RenderActionCollectionState>\n              )}\n\n              {showSplitPaneButton && (\n                <Button\n                  aria-label={t('buttons.split-pane-button.aria-label')}\n                  icon={SplitVerticalIcon}\n                  key=\"split-pane-button\"\n                  mode=\"bleed\"\n                  onClick={onPaneSplit}\n                  tooltipProps={{content: t('buttons.split-pane-button.tooltip')}}\n                />\n              )}\n\n              {showSplitPaneCloseButton && (\n                <Button\n                  icon={CloseIcon}\n                  key=\"close-view-button\"\n                  mode=\"bleed\"\n                  onClick={onPaneClose}\n                  tooltipProps={{content: t('buttons.split-pane-close-button.title')}}\n                />\n              )}\n\n              {showPaneGroupCloseButton && (\n                <Button\n                  icon={CloseIcon}\n                  key=\"close-view-button\"\n                  mode=\"bleed\"\n                  tooltipProps={{content: t('buttons.split-pane-close-group-button.title')}}\n                  as={BackLink}\n                />\n              )}\n            </Flex>\n          }\n        />\n      </TooltipDelayGroupProvider>\n    )\n  }),\n)\n\nconst DocumentPanelHeaderActionDialogDeferred = memo(\n  function DocumentPanelHeaderActionDialogDeferred(props: {\n    states: DocumentActionDescription[]\n    setReferenceElement: React.Dispatch<React.SetStateAction<HTMLElement | null>>\n    referenceElement: HTMLElement | null\n    contextMenuNodes: _PaneMenuNode[]\n  }) {\n    const {setReferenceElement, referenceElement, contextMenuNodes} = props\n    /**\n     * The purpose of this component is to allow deferring the rendering of document action hook states if the main thread becomes very busy.\n     * The `useDeferredValue` doesn't have an effect unless it's used to delay rendering a component that has `React.memo` to prevent unnecessary re-renders.\n     */\n    const states = useDeferredValue(props.states)\n\n    return (\n      <DocumentPanelHeaderActionDialog\n        setReferenceElement={setReferenceElement}\n        referenceElement={referenceElement}\n        contextMenuNodes={contextMenuNodes}\n        states={states}\n      />\n    )\n  },\n)\n\nconst DocumentPanelHeaderActionDialog = memo(function DocumentPanelHeaderActionDialog(props: {\n  states: DocumentActionDescription[]\n  setReferenceElement: React.Dispatch<React.SetStateAction<HTMLElement | null>>\n  referenceElement: HTMLElement | null\n  contextMenuNodes: _PaneMenuNode[]\n}) {\n  const {states, setReferenceElement, contextMenuNodes, referenceElement} = props\n\n  const renderActionDialog = useCallback<\n    ({handleAction}: {handleAction: (idx: number) => void}) => React.ReactNode\n  >(\n    ({handleAction}) => (\n      <div ref={setReferenceElement}>\n        <PaneContextMenuButton\n          nodes={contextMenuNodes}\n          key=\"context-menu\"\n          actionsNodes={\n            states.length > 0\n              ? states.map((actionState, actionIndex) => (\n                  <ActionMenuListItem\n                    key={actionState.label}\n                    actionState={actionState}\n                    disabled={Boolean(actionState.disabled)}\n                    index={actionIndex}\n                    onAction={handleAction}\n                  />\n                ))\n              : undefined\n          }\n        />\n      </div>\n    ),\n    [contextMenuNodes, setReferenceElement, states],\n  )\n\n  return (\n    <ActionDialogWrapper actionStates={states} referenceElement={referenceElement}>\n      {renderActionDialog}\n    </ActionDialogWrapper>\n  )\n})\n","import {Button, type ButtonProps} from '../../../ui-components'\n\ninterface SpacerButtonProps {\n  size?: ButtonProps['size']\n}\n\n/**\n * This renders a visually hidden <Button> component that is still contributes\n * to document layout.\n *\n * It's used to simplify padding in Sanity UI components that contain buttons which\n * may not always be rendered.\n *\n * TODO: let's find a more elegant solve to this layout shift problem\n *\n * @internal\n */\nexport function SpacerButton({size}: SpacerButtonProps) {\n  return (\n    <Button\n      aria-hidden\n      disabled\n      size={size}\n      style={{\n        pointerEvents: 'none',\n        visibility: 'hidden',\n        width: 0,\n      }}\n      text=\"-\"\n    />\n  )\n}\n","import {Badge, type BadgeTone, Inline} from '@sanity/ui'\nimport {memo, useCallback, useDeferredValue} from 'react'\nimport {type DocumentBadgeDescription} from 'sanity'\n\nimport {Tooltip} from '../../../../ui-components'\nimport {RenderBadgeCollectionState} from '../../../components'\nimport {useDocumentPane} from '../useDocumentPane'\n\ninterface DocumentBadgesInnerProps {\n  states: DocumentBadgeDescription[]\n}\n\nconst BADGE_TONES: Record<string, BadgeTone | undefined> = {\n  primary: 'primary',\n  success: 'positive',\n  warning: 'caution',\n  danger: 'critical',\n}\n\nconst DocumentBadgesInner = memo(function DocumentBadgesInner({states}: DocumentBadgesInnerProps) {\n  if (states.length === 0) {\n    return null\n  }\n  return (\n    <Inline space={1}>\n      {states.map((badge, index) => (\n        <Tooltip\n          content={badge.title}\n          disabled={!badge.title}\n          key={`${badge.label}-${index}`}\n          placement=\"top\"\n          portal\n        >\n          <Badge\n            fontSize={1}\n            mode=\"outline\"\n            paddingX={2}\n            paddingY={1}\n            radius={4}\n            tone={badge.color ? BADGE_TONES[badge.color] : undefined}\n            style={{whiteSpace: 'nowrap'}}\n          >\n            {badge.label}\n          </Badge>\n        </Tooltip>\n      ))}\n    </Inline>\n  )\n})\n\nconst DocumentBadgesDeferred = memo(function DocumentBadgesDeferred(\n  props: DocumentBadgesInnerProps,\n) {\n  /**\n   * The purpose of this component is to allow deferring the rendering of document action hook states if the main thread becomes very busy.\n   * The `useDeferredValue` doesn't have an effect unless it's used to delay rendering a component that has `React.memo` to prevent unnecessary re-renders.\n   */\n  const states = useDeferredValue(props.states)\n  return <DocumentBadgesInner states={states} />\n})\n\nexport function DocumentBadges() {\n  const {badges, editState} = useDocumentPane()\n\n  const renderDocumentBadges = useCallback<\n    (props: {states: DocumentBadgeDescription[]}) => React.ReactNode\n  >(({states}) => <DocumentBadgesDeferred states={states} />, [])\n\n  if (!editState || !badges) return null\n\n  return (\n    <RenderBadgeCollectionState badges={badges} badgeProps={editState}>\n      {renderDocumentBadges}\n    </RenderBadgeCollectionState>\n  )\n}\n","import {motion} from 'framer-motion'\nimport {type ComponentProps} from 'react'\nimport {keyframes, styled} from 'styled-components'\n\nconst StyledMotionPath = styled(motion.path)`\n  transform-origin: center;\n`\n\ntype MotionCircleProps = Omit<ComponentProps<typeof motion.circle>, 'd'>\ntype MotionPathProps = Omit<ComponentProps<typeof motion.path>, 'd' | 'ref'>\n\nconst Circle = (props: MotionCircleProps) => (\n  <motion.circle fill=\"none\" r=\"8\" cx=\"12.5\" cy=\"12.5\" strokeWidth=\"1.2\" {...props} />\n)\nconst Arrows = (props: MotionPathProps) => (\n  <StyledMotionPath\n    fill=\"none\"\n    d=\"M14 17.5619L11.5 20.5L14.5 23.0619M11 7.43811L13.5 4.50001L10.5 1.93811\"\n    {...props}\n  />\n)\nconst Checkmark = (props: MotionPathProps) => (\n  <motion.path d=\"M9.5 12.1316L11.7414 14.5L16 10\" {...props} />\n)\n\nconst rotateAnimation = keyframes`\n  0% {\n    transform: rotate(0);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n`\nconst RotateGroup = styled.g`\n  transform-origin: center;\n\n  &[data-rotate] {\n    animation: ${rotateAnimation} 1s ease-in-out infinite;\n  }\n`\n\nconst root = {\n  syncing: {\n    scale: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    scale: [1, 0.8, 1.2, 0.9, 1.1, 0.95, 1.05, 0.99, 1],\n    transition: {\n      duration: 0.5,\n      delay: 0.2,\n    },\n  },\n  changes: {transition: {duration: 0}},\n}\n\nconst circle = {\n  syncing: {\n    strokeDasharray: '0, 0, 23, 3, 23, 3',\n    strokeDashoffset: 10,\n    opacity: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    strokeDasharray: '0, 0, 23, 0, 23, 0',\n    strokeDashoffset: 10,\n    opacity: 1,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  changes: {\n    strokeDasharray: '0, 60, 23, 0, 23, 0',\n    strokeDashoffset: 0,\n    opacity: 0,\n    transition: {\n      duration: 0.5,\n    },\n  },\n}\n\nconst arrows = {\n  syncing: {\n    opacity: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    opacity: 0,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  changes: {\n    opacity: 0,\n  },\n}\n\nconst checkmark = {\n  syncing: {\n    pathLength: 0,\n    transition: {duration: 0},\n  },\n  saved: {\n    pathLength: 1,\n    transition: {\n      delay: 0.4,\n      duration: 0.3,\n    },\n  },\n  changes: {\n    pathLength: 0,\n    transition: {\n      duration: 0.2,\n    },\n  },\n}\n\ninterface AnimatedStatusIconProps {\n  status?: 'changes' | 'saved' | 'syncing'\n}\n\nexport function AnimatedStatusIcon(props: AnimatedStatusIconProps) {\n  const {status} = props\n\n  if (!status) {\n    return null\n  }\n\n  return (\n    <svg\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0 0 25 25\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.2\"\n      data-sanity-icon=\"animated-status-icon\"\n    >\n      <motion.g variants={root} initial={status} animate={status}>\n        <RotateGroup data-rotate={status === 'changes' ? undefined : ''}>\n          <Arrows variants={arrows} initial={status} animate={status} />\n          <Circle variants={circle} initial={status} animate={status} />\n        </RotateGroup>\n        <Checkmark variants={checkmark} initial={status} animate={status} />\n      </motion.g>\n    </svg>\n  )\n}\n","import {type ButtonTone, Flex, Text} from '@sanity/ui'\nimport {TextWithTone, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {AnimatedStatusIcon} from './AnimatedStatusIcon'\n\ntype StatusType = 'saved' | 'syncing'\ninterface ReviewChangesButtonProps {\n  status?: StatusType\n}\n\nconst STATUS_DICTIONARY: Record<StatusType, {i18nKey: string; tone: ButtonTone}> = {\n  saved: {\n    i18nKey: 'status-bar.document-status-pulse.status.saved.text',\n    tone: 'positive',\n  },\n  syncing: {\n    i18nKey: 'status-bar.document-status-pulse.status.syncing.text',\n    tone: 'default',\n  },\n}\n\nexport const DocumentStatusPulse = (props: ReviewChangesButtonProps) => {\n  const {status} = props\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (status !== 'saved' && status !== 'syncing') {\n    return null\n  }\n\n  const currentStatus = STATUS_DICTIONARY[status]\n\n  return (\n    <Flex align=\"center\" gap={2} data-testid=\"pane-footer-document-status-pulse\">\n      <TextWithTone size={1} tone={currentStatus.tone}>\n        <AnimatedStatusIcon status={status} />\n      </TextWithTone>\n\n      <Text muted size={1}>\n        {t(currentStatus.i18nKey)}\n      </Text>\n    </Flex>\n  )\n}\n","import {Flex} from '@sanity/ui'\nimport {useEffect, useLayoutEffect, useState} from 'react'\nimport {DocumentStatus, DocumentStatusIndicator, useSyncState} from 'sanity'\n\nimport {Tooltip} from '../../../../ui-components'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {DocumentStatusPulse} from './DocumentStatusPulse'\n\nconst SYNCING_TIMEOUT = 1000\nconst SAVED_TIMEOUT = 3000\n\ninterface DocumentStatusLineProps {\n  singleLine?: boolean\n}\n\nexport function DocumentStatusLine({singleLine}: DocumentStatusLineProps) {\n  const {documentId, documentType, editState, value} = useDocumentPane()\n\n  const [status, setStatus] = useState<'saved' | 'syncing' | null>(null)\n\n  const syncState = useSyncState(documentId, documentType)\n\n  const lastUpdated = value?._updatedAt\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    // Schedule an update to set the status to 'saved' when status changed to 'syncing.\n    // We use `syncState.isSyncing` here to avoid the status being set to 'saved' when the document is syncing.\n    if (status === 'syncing' && !syncState.isSyncing) {\n      const timerId = setTimeout(() => setStatus('saved'), SYNCING_TIMEOUT)\n      return () => clearTimeout(timerId)\n    }\n    // Schedule an update to clear the status when status changed to 'saved'\n    if (status === 'saved') {\n      const timerId = setTimeout(() => setStatus(null), SAVED_TIMEOUT)\n      return () => clearTimeout(timerId)\n    }\n  }, [status, lastUpdated, syncState.isSyncing])\n\n  // Clear the status when documentId changes to make sure we don't show the wrong status when opening a new document\n  useLayoutEffect(() => {\n    setStatus(null)\n  }, [documentId])\n\n  // Set status to 'syncing' when lastUpdated changes and we go from not syncing to syncing\n  useLayoutEffect(() => {\n    if (syncState.isSyncing) {\n      setStatus('syncing')\n    }\n  }, [syncState.isSyncing, lastUpdated])\n\n  if (status) {\n    return <DocumentStatusPulse status={status || undefined} />\n  }\n\n  return (\n    <Tooltip\n      content={\n        <DocumentStatus absoluteDate draft={editState?.draft} published={editState?.published} />\n      }\n      placement=\"top\"\n    >\n      <Flex align=\"center\" gap={3}>\n        <DocumentStatusIndicator draft={editState?.draft} published={editState?.published} />\n        <DocumentStatus\n          draft={editState?.draft}\n          published={editState?.published}\n          singleLine={singleLine}\n        />\n      </Flex>\n    </Tooltip>\n  )\n}\n","import {RestoreIcon} from '@sanity/icons'\nimport {Box, Flex, Text} from '@sanity/ui'\nimport {format} from 'date-fns'\nimport {createElement} from 'react'\nimport {Translate, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {useDocumentPane} from '../useDocumentPane'\n\nexport const StatusText = styled(Text)`\n  color: var(--card-muted-fg-color);\n\n  em {\n    color: var(--card-fg-color);\n    font-weight: 500;\n    font-style: normal;\n  }\n`\n\nexport function RevisionStatusLine(): JSX.Element {\n  const {displayed} = useDocumentPane()\n  const {t} = useTranslation()\n  const date = displayed?._updatedAt || displayed?._createdAt\n\n  const message = {\n    name: 'revision',\n    icon: RestoreIcon,\n    text: date ? (\n      <Translate\n        t={t}\n        i18nKey=\"document-status.revision-from\"\n        values={{\n          date: format(new Date(date), `MMM d, yyyy '@' pp`),\n        }}\n      />\n    ) : null,\n    tone: 'caution',\n  }\n\n  return (\n    <>\n      <Flex flex={1} gap={3} padding={2}>\n        <Box flex=\"none\">\n          <Text size={1}>{createElement(message.icon)}</Text>\n        </Box>\n        <Box flex={1}>\n          <StatusText size={1} textOverflow=\"ellipsis\">\n            {message.text}\n          </StatusText>\n        </Box>\n      </Flex>\n    </>\n  )\n}\n","import {useLayoutEffect} from 'react'\nimport {resizeObserver} from 'sanity'\n\nexport function useResizeObserver({\n  element,\n  onResize,\n}: {\n  element?: HTMLDivElement | null\n  onResize: (event: ResizeObserverEntry) => void\n}): void {\n  useLayoutEffect(() => {\n    if (element) {\n      resizeObserver.observe(element, onResize)\n    }\n\n    return () => {\n      if (element) {\n        resizeObserver.unobserve(element)\n      }\n    }\n  }, [element, onResize])\n}\n","import {Card, Flex} from '@sanity/ui'\nimport {type Ref, useCallback, useState} from 'react'\nimport {\n  type CreateLinkMetadata,\n  isSanityCreateLinked,\n  useSanityCreateConfig,\n  useTimelineSelector,\n} from 'sanity'\n\nimport {SpacerButton} from '../../../components/spacerButton'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {useDocumentTitle} from '../useDocumentTitle'\nimport {DocumentBadges} from './DocumentBadges'\nimport {DocumentStatusBarActions, HistoryStatusBarActions} from './DocumentStatusBarActions'\nimport {DocumentStatusLine} from './DocumentStatusLine'\nimport {RevisionStatusLine} from './RevisionStatusLine'\nimport {useResizeObserver} from './useResizeObserver'\n\nexport interface DocumentStatusBarProps {\n  actionsBoxRef?: Ref<HTMLDivElement>\n  createLinkMetadata?: CreateLinkMetadata\n}\n\nconst CONTAINER_BREAKPOINT = 480 // px\n\nexport function DocumentStatusBar(props: DocumentStatusBarProps) {\n  const {actionsBoxRef, createLinkMetadata} = props\n  const {editState, timelineStore, onChange: onDocumentChange} = useDocumentPane()\n  const {title} = useDocumentTitle()\n\n  const CreateLinkedActions = useSanityCreateConfig().components?.documentLinkedActions\n\n  // Subscribe to external timeline state changes\n  const showingRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n\n  const [collapsed, setCollapsed] = useState<boolean | null>(null)\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n\n  const handleResize = useCallback((event: ResizeObserverEntry) => {\n    setCollapsed(event.contentRect.width < CONTAINER_BREAKPOINT)\n  }, [])\n\n  useResizeObserver({element: rootElement, onResize: handleResize})\n\n  const shouldRender = editState?.ready && typeof collapsed === 'boolean'\n\n  let actions: JSX.Element | null = null\n  if (createLinkMetadata && isSanityCreateLinked(createLinkMetadata) && CreateLinkedActions) {\n    actions = (\n      <CreateLinkedActions\n        metadata={createLinkMetadata}\n        panelPortalElementId={DOCUMENT_PANEL_PORTAL_ELEMENT}\n        onDocumentChange={onDocumentChange}\n        documentTitle={title}\n      />\n    )\n  } else if (showingRevision) {\n    actions = <HistoryStatusBarActions />\n  } else {\n    actions = <DocumentStatusBarActions />\n  }\n\n  return (\n    <Card tone={showingRevision ? 'caution' : undefined}>\n      <Flex direction=\"column\" ref={setRootElement} sizing=\"border\">\n        {shouldRender && (\n          <Flex\n            align=\"stretch\"\n            gap={1}\n            justify=\"space-between\"\n            paddingY={2}\n            paddingLeft={showingRevision ? 3 : 4}\n            paddingRight={showingRevision ? 2 : 3}\n          >\n            <Flex align=\"center\" flex={1} gap={collapsed ? 2 : 3} wrap=\"wrap\" paddingRight={3}>\n              <Flex align=\"center\">\n                {showingRevision ? (\n                  <RevisionStatusLine />\n                ) : (\n                  <DocumentStatusLine singleLine={!collapsed} />\n                )}\n                <SpacerButton size=\"large\" />\n              </Flex>\n              <DocumentBadges />\n            </Flex>\n\n            <Flex\n              align=\"flex-start\"\n              justify=\"flex-end\"\n              ref={actionsBoxRef}\n              style={{flexShrink: 0, marginLeft: 'auto'}}\n            >\n              <SpacerButton size=\"large\" />\n              {actions}\n            </Flex>\n          </Flex>\n        )}\n      </Flex>\n    </Card>\n  )\n}\n","import {isHotkey} from 'is-hotkey-esm'\nimport {\n  createElement,\n  type ElementType,\n  type HTMLProps,\n  memo,\n  type Ref,\n  useCallback,\n  useMemo,\n  useState,\n} from 'react'\nimport {type DocumentActionDescription, type DocumentActionProps, LegacyLayerProvider} from 'sanity'\n\nimport {RenderActionCollectionState} from '../../../components'\nimport {ActionStateDialog} from '../statusBar'\nimport {useDocumentPane} from '../useDocumentPane'\n\nexport interface KeyboardShortcutResponderProps {\n  actionsBoxElement: HTMLElement | null\n  activeIndex: number\n  as?: ElementType\n  currentMinWidth?: number\n  flex?: number\n  id: string\n  minWidth?: number\n  onActionStart: (index: number) => void\n  rootRef: Ref<HTMLDivElement>\n  states: DocumentActionDescription[]\n}\n\nconst KeyboardShortcutResponder = memo(function KeyboardShortcutResponder(\n  props: KeyboardShortcutResponderProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height'>,\n) {\n  const {\n    actionsBoxElement,\n    activeIndex,\n    as = 'div',\n    children,\n    id,\n    onActionStart,\n    onKeyDown,\n    rootRef,\n    states,\n    ...rest\n  } = props\n\n  const activeAction = states[activeIndex]\n\n  const handleKeyDown = useCallback(\n    (event: any) => {\n      const matchingStates = states.filter(\n        (state) => state.shortcut && isHotkey(state.shortcut, event),\n      )\n\n      const matchingState = matchingStates[0]\n\n      if (matchingStates.length > 1) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Keyboard shortcut conflict: More than one document action matches the shortcut \"${matchingState.shortcut}\"`,\n        )\n      }\n\n      if (matchingState && !matchingState.disabled && matchingState.onHandle) {\n        event.preventDefault()\n        matchingState.onHandle()\n        onActionStart(states.indexOf(matchingState))\n        return\n      }\n\n      if (onKeyDown) {\n        onKeyDown(event)\n      }\n    },\n    [onActionStart, onKeyDown, states],\n  )\n\n  return createElement(\n    as,\n    {\n      id,\n      onKeyDown: handleKeyDown,\n      tabIndex: -1,\n      ...rest,\n      ref: rootRef,\n    },\n    [\n      children,\n      activeAction && activeAction.dialog && (\n        <LegacyLayerProvider zOffset=\"paneFooter\">\n          <ActionStateDialog dialog={activeAction.dialog} referenceElement={actionsBoxElement} />\n        </LegacyLayerProvider>\n      ),\n    ],\n  )\n})\n\nexport interface DocumentActionShortcutsProps {\n  actionsBoxElement: HTMLElement | null\n  as?: ElementType\n  currentMinWidth?: number\n  debug?: boolean\n  flex: number\n  id: string\n  minWidth: number\n  rootRef: Ref<HTMLDivElement>\n}\n\nexport const DocumentActionShortcuts = memo(\n  (props: DocumentActionShortcutsProps & Omit<HTMLProps<HTMLDivElement>, 'as'>) => {\n    const {actionsBoxElement, as = 'div', children, ...rest} = props\n    const {actions, editState} = useDocumentPane()\n    const [activeIndex, setActiveIndex] = useState(-1)\n\n    const onActionStart = useCallback((idx: number) => {\n      setActiveIndex(idx)\n    }, [])\n\n    const actionProps: DocumentActionProps | null = useMemo(\n      () =>\n        editState && {\n          ...editState,\n\n          // @todo: what to call here?\n          onComplete: () => undefined,\n\n          // @todo: get revision string\n          revision: undefined,\n        },\n      [editState],\n    )\n\n    const renderDocumentActionShortcuts = useCallback<\n      (props: {states: DocumentActionDescription[]}) => React.ReactNode\n    >(\n      ({states}) => (\n        <KeyboardShortcutResponder\n          {...rest}\n          activeIndex={activeIndex}\n          actionsBoxElement={actionsBoxElement}\n          as={as}\n          onActionStart={onActionStart}\n          states={states}\n        >\n          {children}\n        </KeyboardShortcutResponder>\n      ),\n      [actionsBoxElement, activeIndex, as, children, onActionStart, rest],\n    )\n\n    if (!actionProps || !actions) return null\n\n    return (\n      <RenderActionCollectionState actionProps={actionProps} actions={actions}>\n        {renderDocumentActionShortcuts}\n      </RenderActionCollectionState>\n    )\n  },\n)\n\nDocumentActionShortcuts.displayName = 'Memo(DocumentActionShortcuts)'\n","import {EarthAmericasIcon, JsonIcon, LinkIcon} from '@sanity/icons'\nimport {type DocumentInspector, type DocumentInspectorMenuItem, type TFunction} from 'sanity'\n\nimport {type PaneMenuItem, type StructureToolFeatures} from '../../types'\nimport {INSPECT_ACTION_PREFIX} from './constants'\n\ninterface GetMenuItemsParams {\n  currentInspector?: DocumentInspector\n  features: StructureToolFeatures\n  hasValue: boolean\n  inspectors: DocumentInspector[]\n  previewUrl?: string | null\n  inspectorMenuItems: DocumentInspectorMenuItem[]\n  t: TFunction\n}\n\nfunction getInspectorItems({\n  currentInspector,\n  hasValue,\n  inspectors,\n  inspectorMenuItems,\n}: GetMenuItemsParams): PaneMenuItem[] {\n  return inspectors\n    .map((inspector, index) => {\n      const menuItem = inspectorMenuItems[index]\n\n      if (!menuItem || menuItem.hidden) return null\n\n      return {\n        action: `${INSPECT_ACTION_PREFIX}${inspector.name}`,\n        group: menuItem.showAsAction ? undefined : 'inspectors',\n        icon: menuItem.icon,\n        isDisabled: !hasValue,\n        selected: currentInspector?.name === inspector.name,\n        shortcut: menuItem.hotkeys?.join('+'),\n        showAsAction: menuItem.showAsAction,\n        title: menuItem.title,\n        tone: menuItem.tone,\n      }\n    })\n    .filter(Boolean) as PaneMenuItem[]\n}\n\nfunction getInspectItem({hasValue, t}: GetMenuItemsParams): PaneMenuItem {\n  return {\n    action: 'inspect',\n    group: 'inspectors',\n    title: t('document-inspector.menu-item.title'),\n    icon: JsonIcon,\n    isDisabled: !hasValue,\n    shortcut: 'Ctrl+Alt+I',\n  }\n}\n\nexport function getProductionPreviewItem({previewUrl, t}: GetMenuItemsParams): PaneMenuItem | null {\n  if (!previewUrl) return null\n\n  return {\n    action: 'production-preview',\n    group: 'links',\n    title: t('production-preview.menu-item.title'),\n    icon: EarthAmericasIcon,\n    shortcut: 'Ctrl+Alt+O',\n  }\n}\n\nexport function getMenuItems(params: GetMenuItemsParams): PaneMenuItem[] {\n  const inspectorItems = getInspectorItems(params)\n  const items = [\n    // Get production preview item\n    getProductionPreviewItem(params),\n  ].filter(Boolean) as PaneMenuItem[]\n\n  return [\n    // Always present document menu item to copy current url to clipboard\n    {\n      action: 'copy-document-url',\n      showAsAction: true,\n      title: params.t('action.copy-document-url.label'),\n      icon: LinkIcon,\n    },\n    ...inspectorItems,\n\n    // TODO: convert to inspector or document view?\n    getInspectItem(params),\n\n    ...items,\n  ]\n}\n","import {type SanityDocument} from '@sanity/types'\nimport {useEffect, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {BehaviorSubject, from, of} from 'rxjs'\nimport {catchError, debounceTime, distinctUntilChanged, switchMap} from 'rxjs/operators'\nimport {isRecord, useSource} from 'sanity'\n\nconst isSanityDocument = (value: unknown): value is SanityDocument =>\n  isRecord(value) && typeof value._id === 'string' && typeof value._type === 'string'\n\nexport function usePreviewUrl(value: Partial<SanityDocument> | undefined): string | undefined {\n  const {resolveProductionUrl} = useSource().document\n  const subject = useMemo(\n    () => new BehaviorSubject<Partial<SanityDocument> | undefined>(undefined),\n    [],\n  )\n\n  useEffect(() => {\n    subject.next(value)\n  }, [subject, value])\n\n  const resolvedUrlObservable = useMemo(() => {\n    return subject.asObservable().pipe(\n      // this so that the preview URL isn't fetched on every keystroke\n      distinctUntilChanged(),\n      debounceTime(500),\n      switchMap((document) =>\n        isSanityDocument(document) ? from(resolveProductionUrl({document})) : of(undefined),\n      ),\n      distinctUntilChanged(),\n      catchError((err) => {\n        const message =\n          isRecord(err) && typeof err.message === 'string' ? err.message : 'Unknown error'\n        throw new Error(`An error was thrown while trying to get your preview url: ${message}`)\n      }),\n    )\n  }, [resolveProductionUrl, subject])\n\n  return useObservable(resolvedUrlObservable)\n}\n","import {Card, Code, Stack, Text} from '@sanity/ui'\nimport {isDev, Translate, useTranslation} from 'sanity'\n\nimport {ErrorPane} from '../../error'\n\ninterface DocumentLayoutErrorProps {\n  currentMinWidth?: number\n  documentType?: string\n  minWidth?: number\n  paneKey: string\n  value?: Record<string, unknown>\n}\n\nexport function DocumentLayoutError(props: DocumentLayoutErrorProps) {\n  const {documentType, value, currentMinWidth, paneKey, minWidth} = props\n  const {t} = useTranslation()\n\n  return (\n    <ErrorPane\n      currentMinWidth={currentMinWidth}\n      flex={2.5}\n      minWidth={minWidth}\n      paneKey={paneKey}\n      title={\n        <Translate\n          t={t}\n          i18nKey=\"panes.document-pane.document-unknown-type.title\"\n          values={{documentType}}\n        />\n      }\n      tone=\"caution\"\n    >\n      <Stack space={4}>\n        {documentType && (\n          <Text as=\"p\">\n            <Translate\n              t={t}\n              i18nKey=\"panes.document-pane.document-unknown-type.text\"\n              values={{documentType}}\n            />\n          </Text>\n        )}\n\n        {!documentType && (\n          <Text as=\"p\">{t('panes.document-pane.document-unknown-type.without-schema.text')}</Text>\n        )}\n\n        {isDev && value && (\n          /* eslint-disable i18next/no-literal-string */\n          <>\n            <Text as=\"p\">Here is the JSON representation of the document:</Text>\n\n            <Card padding={3} overflow=\"auto\" radius={2} shadow={1} tone=\"inherit\">\n              <Code language=\"json\" size={[1, 1, 2]}>\n                {JSON.stringify(value, null, 2)}\n              </Code>\n            </Card>\n          </>\n          /* eslint-enable i18next/no-literal-string */\n        )}\n      </Stack>\n    </ErrorPane>\n  )\n}\n","import {\n  DialogProvider,\n  type DialogProviderProps,\n  Flex,\n  PortalProvider,\n  useElementRect,\n} from '@sanity/ui'\nimport {isHotkey} from 'is-hotkey-esm'\nimport {type ReactNode, useCallback, useMemo, useState} from 'react'\nimport {useTranslation} from 'react-i18next'\nimport {\n  ChangeConnectorRoot,\n  type DocumentFieldActionNode,\n  type DocumentInspectorMenuItem,\n  FieldActionsProvider,\n  FieldActionsResolver,\n  GetFormValueProvider,\n  getSanityCreateLinkMetadata,\n  isSanityCreateLinked,\n  useGlobalCopyPasteElementHandler,\n  useSanityCreateConfig,\n  useZIndex,\n} from 'sanity'\nimport {type Path} from 'sanity-diff-patch'\nimport {styled} from 'styled-components'\n\nimport {TooltipDelayGroupProvider} from '../../../../ui-components'\nimport {Pane, PaneFooter, usePane, usePaneLayout, usePaneRouter} from '../../../components'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {\n  DOCUMENT_INSPECTOR_MIN_WIDTH,\n  DOCUMENT_PANEL_INITIAL_MIN_WIDTH,\n  DOCUMENT_PANEL_MIN_WIDTH,\n} from '../constants'\nimport {DocumentInspectorMenuItemsResolver} from '../DocumentInspectorMenuItemsResolver'\nimport {DocumentOperationResults} from '../DocumentOperationResults'\nimport {DocumentPanel} from '../documentPanel'\nimport {Banner} from '../documentPanel/banners/Banner'\nimport {DocumentPanelHeader} from '../documentPanel/header'\nimport {DocumentActionShortcuts} from '../keyboardShortcuts'\nimport {getMenuItems} from '../menuItems'\nimport {DocumentStatusBar} from '../statusBar'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {usePreviewUrl} from '../usePreviewUrl'\nimport {DocumentLayoutError} from './DocumentLayoutError'\n\nconst EMPTY_ARRAY: [] = []\n\nconst DIALOG_PROVIDER_POSITION: DialogProviderProps['position'] = [\n  // We use the `position: fixed` for dialogs on narrower screens (first two media breakpoints).\n  'fixed',\n  'fixed',\n  // And we use the `position: absolute` strategy (within panes) on wide screens.\n  'absolute',\n]\n\nconst StyledChangeConnectorRoot = styled(ChangeConnectorRoot)`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  min-height: 0;\n  min-width: 0;\n`\n\nexport function DocumentLayout() {\n  const {\n    changesOpen,\n    documentId,\n    documentType,\n    fieldActions,\n    focusPath,\n    inspectOpen,\n    inspector,\n    inspectors,\n    onFocus,\n    onHistoryOpen,\n    onMenuAction,\n    onPathOpen,\n    paneKey,\n    schemaType,\n    value,\n  } = useDocumentPane()\n  const {params: paneParams} = usePaneRouter()\n  const {features} = useStructureTool()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n\n  const zOffsets = useZIndex()\n  const previewUrl = usePreviewUrl(value)\n\n  const createLinkMetadata = getSanityCreateLinkMetadata(value)\n  const CreateLinkedBannerContent = useSanityCreateConfig().components?.documentLinkedBannerContent\n\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const [footerElement, setFooterElement] = useState<HTMLDivElement | null>(null)\n  const [headerElement, setHeaderElement] = useState<HTMLDivElement | null>(null)\n\n  const [actionsBoxElement, setActionsBoxElement] = useState<HTMLDivElement | null>(null)\n  const [documentPanelPortalElement, setDocumentPanelPortalElement] = useState<HTMLElement | null>(\n    null,\n  )\n\n  useGlobalCopyPasteElementHandler({\n    element: rootElement,\n    focusPath,\n    value,\n  })\n\n  const [inspectorMenuItems, setInspectorMenuItems] = useState<DocumentInspectorMenuItem[]>([])\n  const [rootFieldActionNodes, setRootFieldActionNodes] = useState<DocumentFieldActionNode[]>([])\n\n  const footerRect = useElementRect(footerElement)\n  const headerRect = useElementRect(headerElement)\n  const footerHeight = footerRect?.height\n  const headerHeight = headerRect?.height\n  const currentMinWidth =\n    DOCUMENT_PANEL_INITIAL_MIN_WIDTH + (inspector ? DOCUMENT_INSPECTOR_MIN_WIDTH : 0)\n  const minWidth = DOCUMENT_PANEL_MIN_WIDTH + (inspector ? DOCUMENT_INSPECTOR_MIN_WIDTH : 0)\n\n  const currentInspector = useMemo(\n    () => inspectors?.find((i) => i.name === inspector?.name),\n    [inspectors, inspector?.name],\n  )\n\n  const hasValue = Boolean(value)\n\n  const menuItems = useMemo(\n    () =>\n      getMenuItems({\n        currentInspector,\n        features,\n        hasValue,\n        inspectorMenuItems,\n        inspectors,\n        previewUrl,\n        t,\n      }),\n    [currentInspector, features, hasValue, inspectorMenuItems, inspectors, previewUrl, t],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      for (const item of menuItems) {\n        if (item.shortcut) {\n          if (isHotkey(item.shortcut, event)) {\n            event.preventDefault()\n            event.stopPropagation()\n            onMenuAction(item)\n            return\n          }\n        }\n      }\n    },\n    [onMenuAction, menuItems],\n  )\n\n  const onConnectorSetFocus = useCallback(\n    (path: Path) => {\n      onPathOpen(path)\n      onFocus(path)\n    },\n    [onPathOpen, onFocus],\n  )\n\n  if (!schemaType) {\n    return (\n      <DocumentLayoutError\n        currentMinWidth={currentMinWidth}\n        documentType={documentType}\n        minWidth={minWidth}\n        paneKey={paneKey}\n        value={value}\n      />\n    )\n  }\n\n  return (\n    <GetFormValueProvider value={value}>\n      {inspectors.length > 0 && (\n        <DocumentInspectorMenuItemsResolver\n          documentId={documentId}\n          documentType={documentType}\n          inspectors={inspectors}\n          onMenuItems={setInspectorMenuItems}\n        />\n      )}\n\n      {fieldActions.length > 0 && schemaType && (\n        <FieldActionsResolver\n          actions={fieldActions}\n          documentId={documentId}\n          documentType={documentType}\n          onActions={setRootFieldActionNodes}\n          path={EMPTY_ARRAY}\n          schemaType={schemaType}\n        />\n      )}\n\n      <FieldActionsProvider actions={rootFieldActionNodes} path={EMPTY_ARRAY}>\n        <DocumentActionShortcuts\n          actionsBoxElement={actionsBoxElement}\n          as={Pane}\n          currentMinWidth={currentMinWidth}\n          data-testid=\"document-pane\"\n          flex={2.5}\n          id={paneKey}\n          minWidth={minWidth}\n          onKeyUp={handleKeyUp}\n          rootRef={setRootElement}\n        >\n          <DocumentPanelHeader ref={setHeaderElement} menuItems={menuItems} />\n\n          {createLinkMetadata &&\n            isSanityCreateLinked(createLinkMetadata) &&\n            CreateLinkedBannerContent && (\n              <ShowWhenPaneOpen>\n                <Banner\n                  tone=\"transparent\"\n                  data-test-id=\"sanity-create-read-only-banner\"\n                  content={<CreateLinkedBannerContent metadata={createLinkMetadata} />}\n                />\n              </ShowWhenPaneOpen>\n            )}\n\n          <DialogProvider position={DIALOG_PROVIDER_POSITION} zOffset={zOffsets.paneDialog}>\n            <Flex direction=\"column\" flex={1} height={layoutCollapsed ? undefined : 'fill'}>\n              <StyledChangeConnectorRoot\n                data-testid=\"change-connector-root\"\n                isReviewChangesOpen={changesOpen && paneParams?.changesInspectorTab === 'review'}\n                onOpenReviewChanges={onHistoryOpen}\n                onSetFocus={onConnectorSetFocus}\n              >\n                <DocumentPanel\n                  footerHeight={footerHeight || null}\n                  headerHeight={headerHeight || null}\n                  isInspectOpen={inspectOpen}\n                  rootElement={rootElement}\n                  setDocumentPanelPortalElement={setDocumentPanelPortalElement}\n                />\n              </StyledChangeConnectorRoot>\n            </Flex>\n          </DialogProvider>\n\n          {/* These providers are added because we want the dialogs in `DocumentStatusBar` to be scoped to the document pane. */}\n          {/* The portal element comes from `DocumentPanel`. */}\n          <PortalProvider\n            __unstable_elements={{[DOCUMENT_PANEL_PORTAL_ELEMENT]: documentPanelPortalElement}}\n          >\n            <DialogProvider position={DIALOG_PROVIDER_POSITION} zOffset={zOffsets.portal}>\n              <PaneFooter ref={setFooterElement}>\n                <TooltipDelayGroupProvider>\n                  <DocumentStatusBar\n                    actionsBoxRef={setActionsBoxElement}\n                    createLinkMetadata={createLinkMetadata}\n                  />\n                </TooltipDelayGroupProvider>\n              </PaneFooter>\n            </DialogProvider>\n          </PortalProvider>\n          <DocumentOperationResults />\n        </DocumentActionShortcuts>\n      </FieldActionsProvider>\n    </GetFormValueProvider>\n  )\n}\n\n/**\n * Prevents whatever is inside of it from rendering when the pane is collapsed.\n * Needed locally as DocumentLayout does lives outside PaneContext, but is provided _somewhere_ within it.\n */\nfunction ShowWhenPaneOpen(props: {children: ReactNode}) {\n  const {collapsed} = usePane()\n  return collapsed ? null : props.children\n}\n","import {type ComponentType} from 'react'\nimport {type DocumentLayoutProps, type PluginOptions, useMiddlewareComponents} from 'sanity'\n\nimport {DocumentLayout} from './DocumentLayout'\n\nfunction pick(plugin: PluginOptions) {\n  return plugin.document?.components?.unstable_layout as ComponentType<\n    Omit<DocumentLayoutProps, 'renderDefault'>\n  >\n}\n\n/**\n * A hook that returns the document layout composed\n * by the Components API (`document.components.layout`).\n */\nexport function useDocumentLayoutComponent(): ComponentType<\n  Omit<DocumentLayoutProps, 'renderDefault'>\n> {\n  return useMiddlewareComponents({\n    pick,\n    defaultComponent: DocumentLayout,\n  })\n}\n","import {defineEvent} from '@sanity/telemetry'\n\n/**\n * @internal\n */\nexport const DocumentURLCopied = defineEvent({\n  name: 'DocumentURLCopied',\n  version: 1,\n  description: 'User copied document URL to clipboard',\n})\n\n/**\n * When a draft is successfully created\n * @internal\n */\nexport const CreatedDraft = defineEvent({\n  name: 'New Draft Created',\n  version: 1,\n  description: 'User created a new draft',\n})\n","import {type Template} from 'sanity'\n\ninterface InitialValueOptions {\n  documentType: string\n  panePayload?: unknown\n  templateName?: string\n  templateParams?: Record<string, unknown>\n  urlTemplate?: string\n}\n\n/**\n * @internal\n */\nexport function getInitialValueTemplateOpts(\n  templates: Template[],\n  opts: InitialValueOptions,\n): {templateName: string; templateParams: Record<string, unknown>} {\n  const payload = opts.panePayload || {}\n  const structureNodeTemplate = opts.templateName\n\n  if (opts.urlTemplate && structureNodeTemplate && structureNodeTemplate !== opts.urlTemplate) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `Conflicting templates: URL says \"${opts.urlTemplate}\", structure node says \"${structureNodeTemplate}\". Using \"${structureNodeTemplate}\".`,\n    )\n  }\n\n  const template = structureNodeTemplate || opts.urlTemplate\n  const typeTemplates = templates.filter((t) => t.schemaType === opts.documentType)\n\n  const templateParams = {\n    ...opts.templateParams,\n    ...(typeof payload === 'object' ? payload || {} : {}),\n  }\n\n  let templateName = template\n\n  // If we have not specified a specific template, and we only have a single\n  // template available for a schema type, use it\n  if (!template && typeTemplates.length === 1) {\n    templateName = typeTemplates[0].id\n  }\n\n  return {templateName: templateName!, templateParams}\n}\n","/* eslint-disable camelcase */\nimport {isActionEnabled} from '@sanity/schema/_internal'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {\n  type ObjectSchemaType,\n  type Path,\n  type SanityDocument,\n  type SanityDocumentLike,\n} from '@sanity/types'\nimport {useToast} from '@sanity/ui'\nimport {fromString as pathFromString, pathFor, resolveKeyedPath} from '@sanity/util/paths'\nimport {omit, throttle} from 'lodash'\nimport {memo, useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport deepEquals from 'react-fast-compare'\nimport {\n  type DocumentFieldAction,\n  type DocumentInspector,\n  type DocumentPresence,\n  EMPTY_ARRAY,\n  getDraftId,\n  getExpandOperations,\n  getPublishedId,\n  isSanityCreateLinkedDocument,\n  type OnPathFocusPayload,\n  type PatchEvent,\n  setAtPath,\n  type StateTree,\n  toMutationPatches,\n  useConnectionState,\n  useCopyPaste,\n  useDocumentOperation,\n  useDocumentValuePermissions,\n  useEditState,\n  useFormState,\n  useInitialValue,\n  usePresenceStore,\n  useSchema,\n  useSource,\n  useTemplates,\n  useTimelineSelector,\n  useTimelineStore,\n  useTranslation,\n  useUnique,\n  useValidationStatus,\n} from 'sanity'\nimport {DocumentPaneContext} from 'sanity/_singletons'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type PaneMenuItem} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {CreatedDraft, DocumentURLCopied} from './__telemetry__'\nimport {\n  DEFAULT_MENU_ITEM_GROUPS,\n  EMPTY_PARAMS,\n  HISTORY_INSPECTOR_NAME,\n  INSPECT_ACTION_PREFIX,\n} from './constants'\nimport {type DocumentPaneContextValue} from './DocumentPaneContext'\nimport {getInitialValueTemplateOpts} from './getInitialValueTemplateOpts'\nimport {type DocumentPaneProviderProps} from './types'\nimport {usePreviewUrl} from './usePreviewUrl'\n\n/**\n * @internal\n */\n// eslint-disable-next-line complexity, max-statements\nexport const DocumentPaneProvider = memo((props: DocumentPaneProviderProps) => {\n  const {children, index, pane, paneKey, onFocusPath} = props\n  const schema = useSchema()\n  const templates = useTemplates()\n  const {setDocumentMeta} = useCopyPaste()\n  const {\n    __internal_tasks,\n    document: {\n      actions: documentActions,\n      badges: documentBadges,\n      unstable_fieldActions: fieldActionsResolver,\n      unstable_languageFilter: languageFilterResolver,\n      inspectors: inspectorsResolver,\n    },\n  } = useSource()\n  const presenceStore = usePresenceStore()\n  const paneRouter = usePaneRouter()\n  const setPaneParams = paneRouter.setParams\n  const {features} = useStructureTool()\n  const {push: pushToast} = useToast()\n  const {\n    options,\n    menuItemGroups = DEFAULT_MENU_ITEM_GROUPS,\n    title = null,\n    views: viewsProp = [],\n  } = pane\n  const paneOptions = useUnique(options)\n  const documentIdRaw = paneOptions.id\n  const documentId = getPublishedId(documentIdRaw)\n  const documentType = options.type\n  const params = useUnique(paneRouter.params) || EMPTY_PARAMS\n  const panePayload = useUnique(paneRouter.payload)\n  const {templateName, templateParams} = useMemo(\n    () =>\n      getInitialValueTemplateOpts(templates, {\n        documentType,\n        templateName: paneOptions.template,\n        templateParams: paneOptions.templateParameters,\n        panePayload,\n        urlTemplate: params.template,\n      }),\n    [documentType, paneOptions, params, panePayload, templates],\n  )\n  const initialValueRaw = useInitialValue({\n    documentId,\n    documentType,\n    templateName,\n    templateParams,\n  })\n  const initialValue = useUnique(initialValueRaw)\n  const {patch} = useDocumentOperation(documentId, documentType)\n  const editState = useEditState(documentId, documentType)\n  const {validation: validationRaw} = useValidationStatus(documentId, documentType)\n  const connectionState = useConnectionState(documentId, documentType)\n  const schemaType = schema.get(documentType) as ObjectSchemaType | undefined\n  const value: SanityDocumentLike = editState?.draft || editState?.published || initialValue.value\n  const [isDeleting, setIsDeleting] = useState(false)\n\n  // Resolve document actions\n  const actions = useMemo(\n    () => documentActions({schemaType: documentType, documentId}),\n    [documentActions, documentId, documentType],\n  )\n\n  // Resolve document badges\n  const badges = useMemo(\n    () => documentBadges({schemaType: documentType, documentId}),\n    [documentBadges, documentId, documentType],\n  )\n\n  // Resolve document language filter\n  const languageFilter = useMemo(\n    () => languageFilterResolver({schemaType: documentType, documentId}),\n    [documentId, documentType, languageFilterResolver],\n  )\n\n  const validation = useUnique(validationRaw)\n  const views = useUnique(viewsProp)\n\n  const [focusPath, setFocusPath] = useState<Path>(() =>\n    params.path ? pathFromString(params.path) : EMPTY_ARRAY,\n  )\n  const focusPathRef = useRef<Path>([])\n  const activeViewId = params.view || (views[0] && views[0].id) || null\n  const [timelineMode, setTimelineMode] = useState<'since' | 'rev' | 'closed'>('closed')\n\n  const [timelineError, setTimelineError] = useState<Error | null>(null)\n\n  /**\n   * Create an intermediate store which handles document Timeline + TimelineController\n   * creation, and also fetches pre-requsite document snapshots. Compatible with `useSyncExternalStore`\n   * and made available to child components via DocumentPaneContext.\n   */\n  const timelineStore = useTimelineStore({\n    documentId,\n    documentType,\n    onError: setTimelineError,\n    rev: params.rev,\n    since: params.since,\n  })\n\n  // Subscribe to external timeline state changes\n  const onOlderRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n  const revTime = useTimelineSelector(timelineStore, (state) => state.revTime)\n  const sinceAttributes = useTimelineSelector(timelineStore, (state) => state.sinceAttributes)\n  const timelineDisplayed = useTimelineSelector(timelineStore, (state) => state.timelineDisplayed)\n  const timelineReady = useTimelineSelector(timelineStore, (state) => state.timelineReady)\n  const isPristine = useTimelineSelector(timelineStore, (state) => state.isPristine)\n\n  /**\n   * Determine if the current document is deleted.\n   *\n   * When the timeline is available – we check for the absence of an editable document pair\n   * (both draft + published versions) as well as a non 'pristine' timeline (i.e. a timeline that consists\n   * of at least one chunk).\n   *\n   * In the _very rare_ case where the timeline cannot be loaded – we skip this check and always assume\n   * the document is NOT deleted. Since we can't accurately determine document deleted status without history,\n   * skipping this check means that in these cases, users will at least be able to create new documents\n   * without them being incorrectly marked as deleted.\n   */\n  const isDeleted = useMemo(() => {\n    if (!timelineReady) {\n      return false\n    }\n    return Boolean(!editState?.draft && !editState?.published) && !isPristine\n  }, [editState?.draft, editState?.published, isPristine, timelineReady])\n\n  // TODO: this may cause a lot of churn. May be a good idea to prevent these\n  // requests unless the menu is open somehow\n  const previewUrl = usePreviewUrl(value)\n\n  const [presence, setPresence] = useState<DocumentPresence[]>([])\n  useEffect(() => {\n    const subscription = presenceStore.documentPresence(documentId).subscribe((nextPresence) => {\n      setPresence(nextPresence)\n    })\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [documentId, presenceStore])\n\n  const inspectors: DocumentInspector[] = useMemo(\n    () => inspectorsResolver({documentId, documentType}),\n    [documentId, documentType, inspectorsResolver],\n  )\n\n  const [inspectorName, setInspectorName] = useState<string | null>(() => params.inspect || null)\n\n  // Handle inspector name changes from URL\n  const inspectParamRef = useRef<string | undefined>(params.inspect)\n  useEffect(() => {\n    if (inspectParamRef.current !== params.inspect) {\n      inspectParamRef.current = params.inspect\n      setInspectorName(params.inspect || null)\n    }\n  }, [params.inspect])\n\n  const currentInspector = inspectors?.find((i) => i.name === inspectorName)\n  const resolvedChangesInspector = inspectors.find((i) => i.name === HISTORY_INSPECTOR_NAME)\n\n  const changesOpen = currentInspector?.name === HISTORY_INSPECTOR_NAME\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const inspectOpen = params.inspect === 'on'\n  const compareValue: Partial<SanityDocument> | null = changesOpen\n    ? sinceAttributes\n    : editState?.published || null\n\n  const fieldActions: DocumentFieldAction[] = useMemo(\n    () => (schemaType ? fieldActionsResolver({documentId, documentType, schemaType}) : []),\n    [documentId, documentType, fieldActionsResolver, schemaType],\n  )\n\n  /**\n   * Note that in addition to connection and edit state, we also wait for a valid document timeline\n   * range to be loaded. This means if we're loading an older revision, the full transaction range must\n   * be loaded in full prior to the document being displayed.\n   *\n   * Previously, visiting studio URLs with timeline params would display the 'current' document and then\n   * 'snap' in the older revision, which was disorienting and could happen mid-edit.\n   *\n   * In the event that the timeline cannot be loaded due to TimelineController errors or blocked requests,\n   * we skip this readiness check to ensure that users aren't locked out of editing. Trying to select\n   * a timeline revision in this instance will display an error localized to the popover itself.\n   */\n  const ready =\n    connectionState === 'connected' &&\n    editState.ready &&\n    (!params.rev || timelineReady || !!timelineError)\n\n  const displayed: Partial<SanityDocument> | undefined = useMemo(\n    () => (onOlderRevision ? timelineDisplayed || {_id: value._id, _type: value._type} : value),\n    [onOlderRevision, timelineDisplayed, value],\n  )\n\n  const setTimelineRange = useCallback(\n    (newSince: string, newRev: string | null) => {\n      setPaneParams({\n        ...params,\n        since: newSince,\n        rev: newRev || undefined,\n      })\n    },\n    [params, setPaneParams],\n  )\n\n  const handleBlur = useCallback(\n    (blurredPath: Path) => {\n      if (disableBlurRef.current) {\n        return\n      }\n\n      setFocusPath(EMPTY_ARRAY)\n\n      if (focusPathRef.current !== EMPTY_ARRAY) {\n        focusPathRef.current = EMPTY_ARRAY\n        onFocusPath?.(EMPTY_ARRAY)\n      }\n\n      // note: we're deliberately not syncing presence here since it would make the user avatar disappear when a\n      // user clicks outside a field without focusing another one\n    },\n    [onFocusPath, setFocusPath],\n  )\n\n  const patchRef = useRef<(event: PatchEvent) => void>(() => {\n    throw new Error('Nope')\n  })\n\n  patchRef.current = (event: PatchEvent) => {\n    // when creating a new draft\n    if (!editState.draft && !editState.published) {\n      telemetry.log(CreatedDraft)\n    }\n    patch.execute(toMutationPatches(event.patches), initialValue.value)\n  }\n\n  const handleChange = useCallback((event: PatchEvent) => patchRef.current(event), [])\n\n  const closeInspector = useCallback(\n    (closeInspectorName?: string) => {\n      // inspector?: DocumentInspector\n      const inspector = closeInspectorName && inspectors.find((i) => i.name === closeInspectorName)\n\n      if (closeInspectorName && !inspector) {\n        console.warn(`No inspector named \"${closeInspectorName}\"`)\n        return\n      }\n\n      if (!currentInspector) {\n        return\n      }\n\n      if (inspector) {\n        const result = inspector.onClose?.({params}) ?? {params}\n\n        setInspectorName(null)\n        inspectParamRef.current = undefined\n\n        setPaneParams({...result.params, inspect: undefined})\n\n        return\n      }\n\n      if (currentInspector) {\n        const result = currentInspector.onClose?.({params}) ?? {params}\n\n        setInspectorName(null)\n        inspectParamRef.current = undefined\n\n        setPaneParams({...result.params, inspect: undefined})\n      }\n    },\n    [currentInspector, inspectors, params, setPaneParams],\n  )\n\n  const openInspector = useCallback(\n    (nextInspectorName: string, paneParams?: Record<string, string>) => {\n      const nextInspector = inspectors.find((i) => i.name === nextInspectorName)\n\n      if (!nextInspector) {\n        console.warn(`No inspector named \"${nextInspectorName}\"`)\n        return\n      }\n\n      // if the inspector is already open, only update params\n      if (currentInspector?.name === nextInspector.name) {\n        setPaneParams({...params, ...paneParams, inspect: nextInspector.name})\n        return\n      }\n\n      let currentParams = params\n\n      if (currentInspector) {\n        const closeResult = nextInspector.onClose?.({params: currentParams}) ?? {\n          params: currentParams,\n        }\n\n        currentParams = closeResult.params\n      }\n\n      const result = nextInspector.onOpen?.({params: currentParams}) ?? {params: currentParams}\n\n      setInspectorName(nextInspector.name)\n      inspectParamRef.current = nextInspector.name\n\n      setPaneParams({...result.params, ...paneParams, inspect: nextInspector.name})\n    },\n    [currentInspector, inspectors, params, setPaneParams],\n  )\n\n  const handleHistoryClose = useCallback(() => {\n    if (resolvedChangesInspector) {\n      closeInspector(resolvedChangesInspector.name)\n    }\n  }, [closeInspector, resolvedChangesInspector])\n\n  const handleHistoryOpen = useCallback(() => {\n    if (!features.reviewChanges) {\n      return\n    }\n\n    if (resolvedChangesInspector) {\n      openInspector(resolvedChangesInspector.name, {changesInspectorTab: 'review'})\n    }\n  }, [features.reviewChanges, openInspector, resolvedChangesInspector])\n\n  const handlePaneClose = useCallback(() => paneRouter.closeCurrent(), [paneRouter])\n\n  const handlePaneSplit = useCallback(() => paneRouter.duplicateCurrent(), [paneRouter])\n\n  const toggleLegacyInspect = useCallback(\n    (toggle = !inspectOpen) => {\n      if (toggle) {\n        setPaneParams({...params, inspect: 'on'})\n      } else {\n        setPaneParams(omit(params, 'inspect'))\n      }\n    },\n    [inspectOpen, params, setPaneParams],\n  )\n\n  const telemetry = useTelemetry()\n\n  const handleMenuAction = useCallback(\n    (item: PaneMenuItem) => {\n      if (item.action === 'production-preview' && previewUrl) {\n        window.open(previewUrl)\n        return true\n      }\n\n      if (item.action === 'copy-document-url' && navigator) {\n        telemetry.log(DocumentURLCopied)\n        // Chose to copy the user's current URL instead of\n        // the document's edit intent link because\n        // of bugs when resolving a document that has\n        // multiple access paths within Structure\n        navigator.clipboard.writeText(window.location.toString())\n        pushToast({\n          id: 'copy-document-url',\n          status: 'info',\n          title: t('panes.document-operation-results.operation-success_copy-url'),\n        })\n        return true\n      }\n\n      if (item.action === 'inspect') {\n        toggleLegacyInspect(true)\n        return true\n      }\n\n      if (item.action === 'reviewChanges') {\n        handleHistoryOpen()\n        return true\n      }\n\n      if (typeof item.action === 'string' && item.action.startsWith(INSPECT_ACTION_PREFIX)) {\n        const nextInspectorName = item.action.slice(INSPECT_ACTION_PREFIX.length)\n        const nextInspector = inspectors.find((i) => i.name === nextInspectorName)\n\n        if (nextInspector) {\n          if (nextInspector.name === inspectorName) {\n            closeInspector(nextInspector.name)\n          } else {\n            openInspector(nextInspector.name)\n          }\n          return true\n        }\n      }\n\n      return false\n    },\n    [\n      t,\n      closeInspector,\n      handleHistoryOpen,\n      inspectorName,\n      inspectors,\n      openInspector,\n      previewUrl,\n      toggleLegacyInspect,\n      pushToast,\n      telemetry,\n    ],\n  )\n\n  const handleLegacyInspectClose = useCallback(\n    () => toggleLegacyInspect(false),\n    [toggleLegacyInspect],\n  )\n\n  const [openPath, onSetOpenPath] = useState<Path>([])\n  const [fieldGroupState, onSetFieldGroupState] = useState<StateTree<string>>()\n  const [collapsedPaths, onSetCollapsedPath] = useState<StateTree<boolean>>()\n  const [collapsedFieldSets, onSetCollapsedFieldSets] = useState<StateTree<boolean>>()\n\n  const handleOnSetCollapsedPath = useCallback((path: Path, collapsed: boolean) => {\n    onSetCollapsedPath((prevState) => setAtPath(prevState, path, collapsed))\n  }, [])\n\n  const handleOnSetCollapsedFieldSet = useCallback((path: Path, collapsed: boolean) => {\n    onSetCollapsedFieldSets((prevState) => setAtPath(prevState, path, collapsed))\n  }, [])\n\n  const handleSetActiveFieldGroup = useCallback(\n    (path: Path, groupName: string) =>\n      onSetFieldGroupState((prevState) => setAtPath(prevState, path, groupName)),\n    [],\n  )\n\n  const requiredPermission = value._createdAt ? 'update' : 'create'\n  const liveEdit = Boolean(schemaType?.liveEdit)\n  const docId = value._id ? value._id : 'dummy-id'\n  const docPermissionsInput = useMemo(() => {\n    return {\n      ...value,\n      _id: liveEdit ? getPublishedId(docId) : getDraftId(docId),\n    }\n  }, [liveEdit, value, docId])\n\n  const [permissions, isPermissionsLoading] = useDocumentValuePermissions({\n    document: docPermissionsInput,\n    permission: requiredPermission,\n  })\n\n  const isCreateLinked = isSanityCreateLinkedDocument(value)\n  const isNonExistent = !value?._id\n\n  const readOnly = useMemo(() => {\n    const hasNoPermission = !isPermissionsLoading && !permissions?.granted\n    const updateActionDisabled = !isActionEnabled(schemaType!, 'update')\n    const createActionDisabled = isNonExistent && !isActionEnabled(schemaType!, 'create')\n    const reconnecting = connectionState === 'reconnecting'\n    const isLocked = editState.transactionSyncLock?.enabled\n    // in cases where the document has drafts but the schema is live edit,\n    // there is a risk of data loss, so we disable editing in this case\n    const isLiveEditAndDraft = Boolean(liveEdit && editState.draft)\n\n    return (\n      !ready ||\n      revTime !== null ||\n      hasNoPermission ||\n      updateActionDisabled ||\n      createActionDisabled ||\n      reconnecting ||\n      isLocked ||\n      isDeleting ||\n      isDeleted ||\n      isLiveEditAndDraft ||\n      isCreateLinked\n    )\n  }, [\n    isPermissionsLoading,\n    permissions?.granted,\n    schemaType,\n    isNonExistent,\n    connectionState,\n    editState.transactionSyncLock?.enabled,\n    editState.draft,\n    liveEdit,\n    ready,\n    revTime,\n    isDeleting,\n    isDeleted,\n    isCreateLinked,\n  ])\n\n  const formState = useFormState({\n    schemaType: schemaType!,\n    documentValue: displayed,\n    readOnly,\n    comparisonValue: compareValue,\n    focusPath,\n    openPath,\n    collapsedPaths,\n    presence,\n    validation,\n    collapsedFieldSets,\n    fieldGroupState,\n    changesOpen,\n  })\n\n  useEffect(() => {\n    setDocumentMeta({\n      documentId,\n      documentType,\n      schemaType: schemaType!,\n      onChange: handleChange,\n    })\n  }, [documentId, documentType, schemaType, handleChange, setDocumentMeta])\n\n  const formStateRef = useRef(formState)\n  formStateRef.current = formState\n\n  const setOpenPath = useCallback(\n    (path: Path) => {\n      const ops = getExpandOperations(formStateRef.current!, path)\n      ops.forEach((op) => {\n        if (op.type === 'expandPath') {\n          onSetCollapsedPath((prevState) => setAtPath(prevState, op.path, false))\n        }\n        if (op.type === 'expandFieldSet') {\n          onSetCollapsedFieldSets((prevState) => setAtPath(prevState, op.path, false))\n        }\n        if (op.type === 'setSelectedGroup') {\n          onSetFieldGroupState((prevState) => setAtPath(prevState, op.path, op.groupName))\n        }\n      })\n      onSetOpenPath(path)\n    },\n    [formStateRef],\n  )\n\n  const updatePresence = useCallback(\n    (nextFocusPath: Path, payload?: OnPathFocusPayload) => {\n      presenceStore.setLocation([\n        {\n          type: 'document',\n          documentId,\n          path: nextFocusPath,\n          lastActiveAt: new Date().toISOString(),\n          selection: payload?.selection,\n        },\n      ])\n    },\n    [documentId, presenceStore],\n  )\n\n  const updatePresenceThrottled = useMemo(\n    () => throttle(updatePresence, 1000, {leading: true, trailing: true}),\n    [updatePresence],\n  )\n\n  const handleFocus = useCallback(\n    (_nextFocusPath: Path, payload?: OnPathFocusPayload) => {\n      const nextFocusPath = pathFor(_nextFocusPath)\n      if (nextFocusPath !== focusPathRef.current) {\n        setFocusPath(pathFor(nextFocusPath))\n        setOpenPath(pathFor(nextFocusPath.slice(0, -1)))\n        focusPathRef.current = nextFocusPath\n        onFocusPath?.(nextFocusPath)\n      }\n      updatePresenceThrottled(nextFocusPath, payload)\n    },\n    [onFocusPath, setOpenPath, updatePresenceThrottled],\n  )\n\n  const documentPane: DocumentPaneContextValue = useMemo(\n    () => ({\n      actions,\n      activeViewId,\n      badges,\n      changesOpen,\n      closeInspector,\n      collapsedFieldSets,\n      collapsedPaths,\n      compareValue,\n      connectionState,\n      displayed,\n      documentId,\n      documentIdRaw,\n      documentType,\n      editState,\n      fieldActions,\n      focusPath,\n      inspector: currentInspector || null,\n      inspectors,\n      __internal_tasks,\n      onBlur: handleBlur,\n      onChange: handleChange,\n      onFocus: handleFocus,\n      onPathOpen: setOpenPath,\n      onHistoryClose: handleHistoryClose,\n      onHistoryOpen: handleHistoryOpen,\n      onInspectClose: handleLegacyInspectClose,\n      onMenuAction: handleMenuAction,\n      onPaneClose: handlePaneClose,\n      onPaneSplit: handlePaneSplit,\n      onSetActiveFieldGroup: handleSetActiveFieldGroup,\n      onSetCollapsedPath: handleOnSetCollapsedPath,\n      onSetCollapsedFieldSet: handleOnSetCollapsedFieldSet,\n      openInspector,\n      openPath,\n      index,\n      inspectOpen,\n      validation,\n      menuItemGroups: menuItemGroups || [],\n      paneKey,\n      previewUrl,\n      ready,\n      schemaType: schemaType!,\n      isPermissionsLoading,\n      permissions,\n      setTimelineMode,\n      setTimelineRange,\n      setIsDeleting,\n      isDeleting,\n      isDeleted,\n      timelineError,\n      timelineMode,\n      timelineStore,\n      title,\n      value,\n      views,\n      formState,\n      unstable_languageFilter: languageFilter,\n    }),\n    [\n      __internal_tasks,\n      actions,\n      activeViewId,\n      badges,\n      changesOpen,\n      closeInspector,\n      collapsedFieldSets,\n      collapsedPaths,\n      compareValue,\n      connectionState,\n      currentInspector,\n      displayed,\n      documentId,\n      documentIdRaw,\n      documentType,\n      editState,\n      fieldActions,\n      focusPath,\n      formState,\n      handleBlur,\n      handleChange,\n      handleFocus,\n      handleHistoryClose,\n      handleHistoryOpen,\n      handleLegacyInspectClose,\n      handleMenuAction,\n      handleOnSetCollapsedFieldSet,\n      handleOnSetCollapsedPath,\n      handlePaneClose,\n      handlePaneSplit,\n      handleSetActiveFieldGroup,\n      index,\n      inspectOpen,\n      inspectors,\n      isDeleted,\n      isDeleting,\n      isPermissionsLoading,\n      languageFilter,\n      menuItemGroups,\n      openInspector,\n      openPath,\n      paneKey,\n      permissions,\n      previewUrl,\n      ready,\n      schemaType,\n      setOpenPath,\n      setTimelineRange,\n      timelineError,\n      timelineMode,\n      timelineStore,\n      title,\n      validation,\n      value,\n      views,\n    ],\n  )\n\n  useEffect(() => {\n    let timeout: ReturnType<typeof setTimeout>\n    if (connectionState === 'reconnecting') {\n      timeout = setTimeout(() => {\n        pushToast({\n          id: 'sanity/structure/reconnecting',\n          status: 'warning',\n          title: t('panes.document-pane-provider.reconnecting.title'),\n        })\n      }, 2000) // 2 seconds, we can iterate on the value\n    }\n    return () => {\n      if (timeout) clearTimeout(timeout)\n    }\n  }, [connectionState, pushToast, t])\n\n  const disableBlurRef = useRef(false)\n\n  // Reset `focusPath` when `documentId` or `params.path` changes\n  useEffect(() => {\n    if (ready && params.path) {\n      const {path, ...restParams} = params\n      const pathFromUrl = resolveKeyedPath(formStateRef.current?.value, pathFromString(path))\n\n      disableBlurRef.current = true\n\n      // Reset focus path when url params path changes\n      if (!deepEquals(focusPathRef.current, pathFromUrl)) {\n        setFocusPath(pathFromUrl)\n        setOpenPath(pathFromUrl)\n        focusPathRef.current = pathFromUrl\n        onFocusPath?.(pathFromUrl)\n      }\n\n      const timeout = setTimeout(() => {\n        disableBlurRef.current = false\n      }, 0)\n\n      // remove the `path`-param from url after we have consumed it as the initial focus path\n      paneRouter.setParams(restParams)\n\n      return () => clearTimeout(timeout)\n    }\n\n    return undefined\n  }, [params, documentId, onFocusPath, setOpenPath, ready, paneRouter])\n\n  return (\n    <DocumentPaneContext.Provider value={documentPane}>{children}</DocumentPaneContext.Provider>\n  )\n})\n\nDocumentPaneProvider.displayName = 'Memo(DocumentPaneProvider)'\n","import {type Path} from '@sanity/types'\nimport {Stack, Text} from '@sanity/ui'\nimport {fromString as pathFromString} from '@sanity/util/paths'\nimport {memo, useMemo} from 'react'\nimport {\n  CopyPasteProvider,\n  ReferenceInputOptionsProvider,\n  SourceProvider,\n  Translate,\n  useDocumentType,\n  useSource,\n  useTemplatePermissions,\n  useTemplates,\n  useTranslation,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type DocumentPaneNode} from '../../types'\nimport {ErrorPane} from '../error'\nimport {LoadingPane} from '../loading'\nimport {CommentsWrapper} from './comments'\nimport {useDocumentLayoutComponent} from './document-layout'\nimport {DocumentPaneProvider} from './DocumentPaneProvider'\nimport {type DocumentPaneProviderProps} from './types'\n\ntype DocumentPaneOptions = DocumentPaneNode['options']\n\n/**\n * @internal\n */\nexport const DocumentPane = memo(function DocumentPane(props: DocumentPaneProviderProps) {\n  const {name: parentSourceName} = useSource()\n\n  return (\n    <SourceProvider name={props.pane.source || parentSourceName}>\n      <CopyPasteProvider>\n        <DocumentPaneInner {...props} />\n      </CopyPasteProvider>\n    </SourceProvider>\n  )\n})\n\nfunction DocumentPaneInner(props: DocumentPaneProviderProps) {\n  const {pane, paneKey} = props\n  const {resolveNewDocumentOptions} = useSource().document\n  const paneRouter = usePaneRouter()\n  const options = usePaneOptions(pane.options, paneRouter.params)\n  const {documentType, isLoaded: isDocumentLoaded} = useDocumentType(options.id, options.type)\n\n  const DocumentLayout = useDocumentLayoutComponent()\n\n  // The templates that should be creatable from inside this document pane.\n  // For example, from the \"Create new\" menu in reference inputs.\n  const templateItems = useMemo(() => {\n    return resolveNewDocumentOptions({\n      type: 'document',\n      documentId: options.id,\n      schemaType: options.type,\n    })\n  }, [options.id, options.type, resolveNewDocumentOptions])\n\n  const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions({\n    templateItems,\n  })\n  const isLoaded = isDocumentLoaded && !isTemplatePermissionsLoading\n\n  const providerProps = useMemo(() => {\n    return isLoaded && documentType && options.type !== documentType\n      ? mergeDocumentType(props, options, documentType)\n      : props\n  }, [props, documentType, isLoaded, options])\n\n  const {ReferenceChildLink, handleEditReference, groupIndex, routerPanesState} = paneRouter\n  const childParams = routerPanesState[groupIndex + 1]?.[0].params || {}\n  const routerPanesStateLength = routerPanesState.length\n  const {parentRefPath} = childParams\n\n  const activePath: {path: Path; state: 'selected' | 'pressed' | 'none'} = useMemo(() => {\n    return parentRefPath\n      ? {\n          path: pathFromString(parentRefPath),\n          state:\n            // eslint-disable-next-line no-nested-ternary\n            groupIndex >= routerPanesStateLength - 1\n              ? 'none'\n              : groupIndex >= routerPanesStateLength - 2\n                ? 'selected'\n                : 'pressed',\n        }\n      : {path: [], state: 'none'}\n  }, [parentRefPath, groupIndex, routerPanesStateLength])\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (options.type === '*' && !isLoaded) {\n    return (\n      <LoadingPane\n        flex={2.5}\n        minWidth={320}\n        paneKey={paneKey}\n        title={t('panes.document-pane.document-not-found.loading')}\n      />\n    )\n  }\n\n  if (!documentType) {\n    return (\n      <ErrorPane\n        flex={2.5}\n        minWidth={320}\n        paneKey={paneKey}\n        title={t('panes.document-pane.document-not-found.title')}\n      >\n        <Stack space={4}>\n          <Text as=\"p\">\n            <Translate\n              t={t}\n              i18nKey=\"panes.document-pane.document-not-found.text\"\n              values={{id: options.id}}\n              components={{Code: ({children}) => <code>{children}</code>}}\n            />\n          </Text>\n        </Stack>\n      </ErrorPane>\n    )\n  }\n\n  return (\n    <DocumentPaneProvider\n      // this needs to be here to avoid formState from being re-used across (incompatible) document types\n      // see https://github.com/sanity-io/sanity/discussions/3794 for a description of the problem\n      key={`${documentType}-${options.id}`}\n      {...providerProps}\n    >\n      {/* NOTE: this is a temporary location for this provider until we */}\n      {/* stabilize the reference input options formally in the form builder */}\n      {/* eslint-disable-next-line react/jsx-pascal-case */}\n      <ReferenceInputOptionsProvider\n        EditReferenceLinkComponent={ReferenceChildLink}\n        onEditReference={handleEditReference}\n        initialValueTemplateItems={templatePermissions}\n        activePath={activePath}\n      >\n        <CommentsWrapper documentId={options.id} documentType={options.type}>\n          <DocumentLayout documentId={options.id} documentType={options.type} />\n        </CommentsWrapper>\n      </ReferenceInputOptionsProvider>\n    </DocumentPaneProvider>\n  )\n}\n\nfunction usePaneOptions(\n  options: DocumentPaneOptions,\n  params: Record<string, string | undefined> = {},\n): DocumentPaneOptions {\n  const templates = useTemplates()\n\n  return useMemo(() => {\n    // The document type is provided, so return\n    if (options.type && options.type !== '*') {\n      return options\n    }\n\n    // Attempt to derive document type from the template configuration\n    const templateName = options.template || params.template\n    const template = templateName ? templates.find((t) => t.id === templateName) : undefined\n    const documentType = template?.schemaType\n\n    // No document type was found in a template\n    if (!documentType) {\n      return options\n    }\n\n    // The template provided the document type, so modify the pane’s `options` property\n    return {...options, type: documentType}\n  }, [options, params.template, templates])\n}\n\nfunction mergeDocumentType(\n  props: DocumentPaneProviderProps,\n  options: DocumentPaneOptions,\n  documentType: string,\n): DocumentPaneProviderProps {\n  return {\n    ...props,\n    pane: {\n      ...props.pane,\n      options: {...options, type: documentType},\n    },\n  }\n}\n","import {type SortOrder} from './types'\n\nexport const PARTIAL_PAGE_LIMIT = 100\nexport const FULL_LIST_LIMIT = 2000\nexport const DEFAULT_ORDERING: SortOrder = {by: [{field: '_updatedAt', direction: 'desc'}]}\nexport const EMPTY_RECORD: Record<string, unknown> = {}\n\nexport const ENABLE_LRU_MEMO = true\n","import {type SanityDocument} from '@sanity/types'\nimport {Box, Container, Flex, Heading, Stack, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  CommandList,\n  type CommandListRenderItemCallback,\n  ErrorActions,\n  type GeneralPreviewLayoutKey,\n  getPublishedId,\n  LoadingBlock,\n  SanityDefaultPreview,\n  Translate,\n  useSchema,\n  useTranslation,\n} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Delay, PaneContent, PaneItem, usePane, usePaneLayout} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {FULL_LIST_LIMIT} from './constants'\nimport {type DocumentListPaneItem, type LoadingVariant} from './types'\n\nconst RootBox = styled(Box)<{$opacity?: number}>`\n  position: relative;\n  opacity: ${(props) => props.$opacity || 1};\n  transition: opacity 0.4s;\n`\n\nconst CommandListBox = styled(Box)`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n`\n\ninterface DocumentListPaneContentProps {\n  childItemId?: string\n  error: {message: string} | null\n  filterIsSimpleTypeConstraint: boolean\n  hasMaxItems?: boolean\n  hasSearchQuery: boolean\n  isActive?: boolean\n  isLazyLoading: boolean\n  isLoading: boolean\n  items: DocumentListPaneItem[]\n  layout?: GeneralPreviewLayoutKey\n  loadingVariant?: LoadingVariant\n  onEndReached: () => void\n  onRetry?: () => void\n  paneTitle: string\n  searchInputElement: HTMLInputElement | null\n  showIcons: boolean\n}\n\nconst SKELETON_ITEMS = [...Array(30).keys()]\n\nfunction LoadingView(props: {layout?: GeneralPreviewLayoutKey}) {\n  const {layout} = props\n\n  return (\n    <Stack paddingX={3} paddingY={2} paddingTop={0} space={1}>\n      {SKELETON_ITEMS.map((num) => (\n        <SanityDefaultPreview isPlaceholder layout={layout} key={num} />\n      ))}\n    </Stack>\n  )\n}\n\nexport function DocumentListPaneContent(props: DocumentListPaneContentProps) {\n  const {\n    childItemId,\n    error,\n    filterIsSimpleTypeConstraint,\n    hasMaxItems,\n    hasSearchQuery,\n    isActive,\n    isLazyLoading,\n    isLoading,\n    items,\n    layout,\n    loadingVariant,\n    onEndReached,\n    onRetry,\n    paneTitle,\n    searchInputElement,\n    showIcons,\n  } = props\n\n  const schema = useSchema()\n\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const {collapsed, index} = usePane()\n  const [shouldRender, setShouldRender] = useState(!collapsed)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleEndReached = useCallback(() => {\n    if (shouldRender) {\n      onEndReached()\n    }\n  }, [onEndReached, shouldRender])\n\n  useEffect(() => {\n    if (collapsed) return undefined\n\n    const timer = setTimeout(() => {\n      setShouldRender(true)\n    }, 0)\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [collapsed, items])\n\n  const renderItem = useCallback<CommandListRenderItemCallback<SanityDocument>>(\n    (item, {activeIndex}) => {\n      const publishedId = getPublishedId(item._id)\n      const isSelected = childItemId === publishedId\n      const pressed = !isActive && isSelected\n      const selected = isActive && isSelected\n      const isLastItem = activeIndex === items.length - 1\n      const showSpinner = isLastItem && isLazyLoading\n      const showMaxItemsMessage = isLastItem && hasMaxItems\n\n      return (\n        <>\n          <PaneItem\n            icon={showIcons === false ? false : undefined}\n            id={publishedId}\n            layout={layout}\n            marginBottom={1}\n            pressed={pressed}\n            schemaType={schema.get(item._type)}\n            selected={selected}\n            value={item}\n          />\n\n          {showSpinner && <LoadingBlock />}\n\n          {showMaxItemsMessage && (\n            <Box marginY={1} paddingX={3} paddingY={4}>\n              <Text align=\"center\" muted size={1}>\n                {t('panes.document-list-pane.max-items.text', {limit: FULL_LIST_LIMIT})}\n              </Text>\n            </Box>\n          )}\n        </>\n      )\n    },\n    [childItemId, isActive, items.length, layout, schema, showIcons, hasMaxItems, isLazyLoading, t],\n  )\n\n  const noDocumentsContent = useMemo(() => {\n    if (hasSearchQuery) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Container width={1}>\n            <Box paddingX={4} paddingY={5}>\n              <Text align=\"center\" muted>\n                {t('panes.document-list-pane.no-documents.text')}\n              </Text>\n            </Box>\n          </Container>\n        </Flex>\n      )\n    }\n\n    return (\n      <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n        <Container width={1}>\n          <Box paddingX={4} paddingY={5}>\n            <Text align=\"center\" muted>\n              {filterIsSimpleTypeConstraint\n                ? t('panes.document-list-pane.no-documents-of-type.text')\n                : t('panes.document-list-pane.no-matching-documents.text')}\n            </Text>\n          </Box>\n        </Container>\n      </Flex>\n    )\n  }, [filterIsSimpleTypeConstraint, hasSearchQuery, t])\n\n  const mainContent = useMemo(() => {\n    if (!shouldRender) {\n      return null\n    }\n\n    if (error) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Container width={1}>\n            <Stack paddingX={4} paddingY={5} space={4}>\n              <Heading as=\"h3\">{t('panes.document-list-pane.error.title')}</Heading>\n              <Text as=\"p\">\n                <Translate\n                  t={t}\n                  i18nKey=\"panes.document-list-pane.error.text\"\n                  values={{error: error.message}}\n                  components={{Code: ({children}) => <code>{children}</code>}}\n                />\n              </Text>\n              <ErrorActions error={error} eventId={null} onRetry={onRetry} />\n            </Stack>\n          </Container>\n        </Flex>\n      )\n    }\n\n    if (!isLoading && items.length === 0) {\n      return noDocumentsContent\n    }\n\n    if (loadingVariant === 'initial' && isLoading) {\n      return (\n        <Delay ms={300}>\n          <LoadingView layout={layout} />\n        </Delay>\n      )\n    }\n\n    if (loadingVariant === 'spinner' && isLoading) {\n      return null\n    }\n\n    // prevents bug when panes won't render if first rendered while collapsed\n    const key = `${index}-${collapsed}`\n\n    return (\n      <RootBox overflow=\"hidden\" height=\"fill\" $opacity={loadingVariant === 'subtle' ? 0.8 : 1}>\n        <CommandListBox>\n          <CommandList\n            activeItemDataAttr=\"data-hovered\"\n            ariaLabel={paneTitle}\n            canReceiveFocus\n            inputElement={searchInputElement}\n            itemHeight={51}\n            items={items}\n            key={key}\n            onEndReached={handleEndReached}\n            onlyShowSelectionWhenActive\n            overscan={10}\n            paddingBottom={1}\n            paddingX={3}\n            renderItem={renderItem}\n            wrapAround={false}\n          />\n        </CommandListBox>\n      </RootBox>\n    )\n    // Explicitly don't include `noDocumentsContent` in the deps array, as it's\n    // causing a visual bug where the \"No documents\" message is shown for a split second\n    // when clearing a search query with no results\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    collapsed,\n    error,\n    handleEndReached,\n    index,\n    isLoading,\n    items,\n    layout,\n    loadingVariant,\n    // noDocumentsContent,\n    onRetry,\n    renderItem,\n    searchInputElement,\n    shouldRender,\n  ])\n\n  return (\n    <PaneContent\n      data-testid=\"document-list-pane\"\n      overflow={layoutCollapsed || loadingVariant === 'initial' ? 'hidden' : 'auto'}\n    >\n      {mainContent}\n    </PaneContent>\n  )\n}\n","import {\n  isIndexSegment,\n  isKeySegment,\n  isReferenceSchemaType,\n  type ObjectField,\n  type ObjectFieldType,\n  type ObjectSchemaType,\n  type SanityDocumentLike,\n  type SchemaType,\n} from '@sanity/types'\nimport * as PathUtils from '@sanity/util/paths'\nimport {type ExprNode, parse} from 'groq-js'\nimport {collate, getPublishedId} from 'sanity'\n\nimport {type DocumentListPaneItem, type SortOrder} from './types'\n\nexport function getDocumentKey(value: DocumentListPaneItem, index: number): string {\n  return value._id ? getPublishedId(value._id) : `item-${index}`\n}\n\nexport function removePublishedWithDrafts(documents: SanityDocumentLike[]): DocumentListPaneItem[] {\n  return collate(documents).map((entry) => {\n    const doc = entry.draft || entry.published\n    return {\n      ...doc,\n      hasPublished: !!entry.published,\n      hasDraft: !!entry.draft,\n    }\n  }) as any\n}\n\nexport function applyOrderingFunctions(order: SortOrder, schemaType: ObjectSchemaType): SortOrder {\n  const orderBy = order.by.map((by) => {\n    // Skip those that already have a mapper\n    if (by.mapWith) {\n      return by\n    }\n\n    const fieldType = tryResolveSchemaTypeForPath(schemaType, by.field)\n    if (!fieldType) {\n      return by\n    }\n\n    // Note: order matters here, since the jsonType of a date field is `string`,\n    // but we want to apply `datetime()`, not `lower()`\n    if (fieldExtendsType(fieldType, 'datetime')) {\n      return {...by, mapWith: 'dateTime'}\n    }\n\n    if (fieldType.jsonType === 'string') {\n      return {...by, mapWith: 'lower'}\n    }\n\n    return by\n  })\n\n  return orderBy.every((item, index) => item === order.by[index]) ? order : {...order, by: orderBy}\n}\n\nfunction tryResolveSchemaTypeForPath(baseType: SchemaType, path: string): SchemaType | undefined {\n  const pathSegments = PathUtils.fromString(path)\n\n  let current: SchemaType | undefined = baseType\n  for (const segment of pathSegments) {\n    if (!current) {\n      return undefined\n    }\n\n    if (typeof segment === 'string') {\n      current = getFieldTypeByName(current, segment)\n      continue\n    }\n\n    const isArrayAccessor = isKeySegment(segment) || isIndexSegment(segment)\n    if (!isArrayAccessor || current.jsonType !== 'array') {\n      return undefined\n    }\n\n    const [memberType, otherType] = current.of || []\n    if (otherType || !memberType) {\n      // Can't figure out the type without knowing the value\n      return undefined\n    }\n\n    if (!isReferenceSchemaType(memberType)) {\n      current = memberType\n      continue\n    }\n\n    const [refType, otherRefType] = memberType.to || []\n    if (otherRefType || !refType) {\n      // Can't figure out the type without knowing the value\n      return undefined\n    }\n\n    current = refType\n  }\n\n  return current\n}\n\nfunction getFieldTypeByName(type: SchemaType, fieldName: string): SchemaType | undefined {\n  if (!('fields' in type)) {\n    return undefined\n  }\n\n  const fieldType = type.fields.find((field) => field.name === fieldName)\n  return fieldType ? fieldType.type : undefined\n}\n\nexport function fieldExtendsType(field: ObjectField | ObjectFieldType, ofType: string): boolean {\n  let current: SchemaType | undefined = field.type\n  while (current) {\n    if (current.name === ofType) {\n      return true\n    }\n\n    if (!current.type && current.jsonType === ofType) {\n      return true\n    }\n\n    current = current.type\n  }\n\n  return false\n}\n\n/**\n * Recursively extract static `_type`s from GROQ filter expressions. If the\n * types can't be statically determined then it will return `null`.\n */\n// eslint-disable-next-line complexity\nfunction findTypes(node: ExprNode): Set<string> | null {\n  switch (node.type) {\n    case 'OpCall': {\n      const {left, right} = node\n\n      switch (node.op) {\n        // e.g. `a == b`\n        case '==': {\n          // e.g. `_type == 'value'`\n          if (left.type === 'AccessAttribute' && left.name === '_type' && !left.base) {\n            if (right.type !== 'Value' || typeof right.value !== 'string') return null\n            return new Set([right.value])\n          }\n\n          // e.g. `'value' == _type`\n          if (right.type === 'AccessAttribute' && right.name === '_type' && !right.base) {\n            if (left.type !== 'Value' || typeof left.value !== 'string') return null\n            return new Set([left.value])\n          }\n\n          // otherwise, we can't determine the types statically\n          return null\n        }\n\n        // e.g. `a in b`\n        case 'in': {\n          // if `_type` is not on the left hand side of `in` then it can't be determined\n          if (left.type !== 'AccessAttribute' || left.name !== '_type' || left.base) return null\n          // if the right hand side is not an array then the types can't be determined\n          if (right.type !== 'Array') return null\n\n          const types = new Set<string>()\n          // iterate through all the types\n          for (const element of right.elements) {\n            // if we find a splat, then early return, we can't determine the types\n            if (element.isSplat) return null\n            // if the array element is not just a simple value, then early return\n            if (element.value.type !== 'Value') return null\n            // if the array element value is not a string, then early return\n            if (typeof element.value.value !== 'string') return null\n            // otherwise add the element value to the set of types\n            types.add(element.value.value)\n          }\n\n          // if there were any elements in the types set, return it\n          if (types.size) return types\n          // otherwise, the set of types cannot be determined\n          return null\n        }\n\n        default: {\n          return null\n        }\n      }\n    }\n\n    // groups can just be unwrapped, the AST preserves the order\n    case 'Group': {\n      return findTypes(node.base)\n    }\n\n    // e.g. `_type == 'a' || _type == 'b'`\n    // with Or nodes, if we can't determine the types for either the left or\n    // right hand side then we can't determine the types for any\n    // e.g. `_type == 'a' || isActive`\n    // — can't determine types because `isActive` could be true on another types\n    case 'Or': {\n      const left = findTypes(node.left)\n      if (!left) return null\n\n      const right = findTypes(node.right)\n      if (!right) return null\n\n      return new Set([...left, ...right])\n    }\n\n    // e.g. `_type == 'a' && isActive`\n    // with And nodes, we can determine the types as long as we can determine\n    // the types for one side. We can't determine the types if both are `null`.\n    case 'And': {\n      const left = findTypes(node.left)\n      const right = findTypes(node.right)\n\n      if (!left && !right) return null\n      return new Set([...(left || []), ...(right || [])])\n    }\n\n    default: {\n      return null\n    }\n  }\n}\n\nexport function findStaticTypesInFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] | null {\n  try {\n    const types = findTypes(parse(filter, {params}))\n    if (!types) return null\n\n    return Array.from(types).sort()\n  } catch {\n    // if we couldn't parse the filter, just return `null`\n    return null\n  }\n}\n","import {type SchemaType, type SortOrderingItem} from '@sanity/types'\n\nconst IMPLICIT_SCHEMA_TYPE_FIELDS = ['_id', '_type', '_createdAt', '_updatedAt', '_rev']\n\n// Takes a path array and a schema type and builds a GROQ join every time it enters a reference field\nfunction joinReferences(schemaType: SchemaType, path: string[], strict: boolean = false): string {\n  const [head, ...tail] = path\n\n  if (!('fields' in schemaType)) {\n    return ''\n  }\n\n  const schemaField = schemaType.fields.find((field) => field.name === head)\n  if (!schemaField) {\n    if (!IMPLICIT_SCHEMA_TYPE_FIELDS.includes(head)) {\n      const errorMessage = `The current ordering config targeted the nonexistent field \"${head}\" on schema type \"${schemaType.name}\". It should be one of ${schemaType.fields.map((field) => field.name).join(', ')}`\n      if (strict) {\n        throw new Error(errorMessage)\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(errorMessage)\n      }\n    }\n    return ''\n  }\n\n  if ('to' in schemaField.type && schemaField.type.name === 'reference') {\n    const refTypes = schemaField.type.to\n    return `${head}->{${refTypes.map((refType) => joinReferences(refType, tail)).join(',')}}`\n  }\n\n  const tailFields = tail.length > 0 && joinReferences(schemaField.type, tail)\n  const tailWrapper = tailFields ? `{${tailFields}}` : ''\n  return tail.length > 0 ? `${head}${tailWrapper}` : head\n}\n\nexport function getExtendedProjection(\n  schemaType: SchemaType,\n  orderBy: SortOrderingItem[],\n  strict: boolean = false,\n): string {\n  return orderBy\n    .map((ordering) => joinReferences(schemaType, ordering.field.split('.'), strict))\n    .join(', ')\n}\n","import {type SanityClient} from '@sanity/client'\nimport {\n  asyncScheduler,\n  defer,\n  map,\n  merge,\n  mergeMap,\n  type Observable,\n  of,\n  partition,\n  share,\n  take,\n  throttleTime,\n  throwError,\n  timer,\n} from 'rxjs'\nimport {exhaustMapWithTrailing} from 'rxjs-exhaustmap-with-trailing'\nimport {\n  createSearch,\n  createSWR,\n  getSearchableTypes,\n  type SanityDocumentLike,\n  type Schema,\n  type SearchStrategy,\n} from 'sanity'\n\nimport {getExtendedProjection} from '../../structureBuilder/util/getExtendedProjection'\nimport {type SortOrder} from './types'\n\ninterface ListenQueryOptions {\n  client: SanityClient\n  filter: string\n  limit: number\n  params: Record<string, unknown>\n  schema: Schema\n  searchQuery: string\n  sort: SortOrder\n  staticTypeNames?: string[] | null\n  maxFieldDepth?: number\n  searchStrategy?: SearchStrategy\n}\n\nexport interface SearchQueryResult {\n  fromCache: boolean\n  documents: SanityDocumentLike[]\n}\n\nconst swr = createSWR<SanityDocumentLike[]>({maxSize: 100})\n\nexport function listenSearchQuery(options: ListenQueryOptions): Observable<SearchQueryResult> {\n  const {\n    client,\n    schema,\n    sort,\n    limit,\n    params,\n    filter,\n    searchQuery,\n    staticTypeNames,\n    maxFieldDepth,\n    searchStrategy,\n  } = options\n  const sortBy = sort.by\n  const extendedProjection = sort?.extendedProjection\n\n  // Listen for changes with the given filter and params, and whenever a change occurs, we want to\n  // re-fetch the documents that match the search query (see below).\n  // We use a separate listener since the search query is too large to use in a listen query.\n  const events$ = defer(() => {\n    return client.listen(`*[${filter}]`, params, {\n      events: ['welcome', 'mutation', 'reconnect'],\n      includeResult: false,\n      visibility: 'query',\n    })\n  }).pipe(\n    mergeMap((ev, i) => {\n      const isFirst = i === 0\n      if (isFirst && ev.type !== 'welcome') {\n        // If the first event is not welcome, it is most likely a reconnect and\n        // if it's not a reconnect something is very wrong and we should throw.\n        return throwError(\n          () =>\n            new Error(\n              ev.type === 'reconnect'\n                ? 'Could not establish EventSource connection'\n                : `Received unexpected type of first event \"${ev.type}\"`,\n            ),\n        )\n      }\n      return of(ev)\n    }),\n    share(),\n  )\n\n  const [welcome$, mutationAndReconnect$] = partition(events$, (ev) => ev.type === 'welcome')\n\n  const swrKey = JSON.stringify({filter, limit, params, searchQuery, sort, staticTypeNames})\n\n  return merge(\n    welcome$.pipe(take(1)),\n    mutationAndReconnect$.pipe(throttleTime(1000, asyncScheduler, {leading: true, trailing: true})),\n  ).pipe(\n    exhaustMapWithTrailing((event) => {\n      // Get the types names to use for searching.\n      // If we have a static list of types, we can skip fetching the types and use the static list.\n      const typeNames$ = staticTypeNames\n        ? of(staticTypeNames)\n        : client.observable.fetch(`array::unique(*[${filter}][]._type)`, params)\n\n      // Use the type names to create a search query and fetch the documents that match the query.\n      return typeNames$.pipe(\n        mergeMap((typeNames: string[]) => {\n          const types = getSearchableTypes(schema, staticTypeNames || []).filter((type) => {\n            if (typeNames.includes(type.name)) {\n              // make a call to getExtendedProjection in strict mode to verify that all fields are\n              // known. This method will throw an exception if there are any unknown fields specified\n              // in the sort by list\n              getExtendedProjection(type, sort.by, true)\n              return true\n            }\n            return false\n          })\n\n          const search = createSearch(types, client, {\n            filter,\n            params,\n            strategy: searchStrategy,\n            maxDepth: maxFieldDepth,\n          })\n\n          const doFetch = () => {\n            const searchTerms = {\n              query: searchQuery || '',\n              types,\n            }\n\n            const searchOptions = {\n              __unstable_extendedProjection: extendedProjection,\n              comments: [`findability-source: ${searchQuery ? 'list-query' : 'list'}`],\n              limit,\n              skipSortByScore: true,\n              sort: sortBy,\n            }\n\n            return search(searchTerms, searchOptions).pipe(\n              map((result) =>\n                // eslint-disable-next-line max-nested-callbacks\n                result.hits.map(({hit}) => hit),\n              ),\n            )\n          }\n\n          if (event.type === 'mutation' && event.visibility !== 'query') {\n            // Even though the listener request specifies visibility=query, the events are not guaranteed to be delivered with visibility=query\n            // If the event we are responding to arrives with visibility != query, we add a little delay to allow for the updated document to be available for queries\n            // See https://www.sanity.io/docs/listening#visibility-c4786e55c3ff\n            return timer(1200).pipe(mergeMap(doFetch))\n          }\n          return doFetch()\n        }),\n      )\n    }),\n    swr(swrKey),\n    map(({fromCache, value}) => ({fromCache, documents: value})),\n  )\n}\n","import {observableCallback} from 'observable-callback'\nimport {useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {concat, fromEvent, merge, of} from 'rxjs'\nimport {\n  catchError,\n  filter,\n  map,\n  mergeMap,\n  scan,\n  share,\n  shareReplay,\n  take,\n  takeUntil,\n  withLatestFrom,\n} from 'rxjs/operators'\nimport {\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  useClient,\n  useSchema,\n  useSearchMaxFieldDepth,\n  useWorkspace,\n} from 'sanity'\n\nimport {DEFAULT_ORDERING, FULL_LIST_LIMIT, PARTIAL_PAGE_LIMIT} from './constants'\nimport {findStaticTypesInFilter, removePublishedWithDrafts} from './helpers'\nimport {listenSearchQuery} from './listenSearchQuery'\nimport {type DocumentListPaneItem, type SortOrder} from './types'\n\ninterface UseDocumentListOpts {\n  apiVersion?: string\n  filter: string\n  params: Record<string, unknown>\n  searchQuery: string | null\n  sortOrder?: SortOrder\n}\n\ninterface DocumentListState {\n  error: {message: string} | null\n  isLoadingFullList: boolean\n  isLoading: boolean\n  fromCache?: boolean\n  items: DocumentListPaneItem[]\n}\n\nconst INITIAL_QUERY_STATE: DocumentListState = {\n  error: null,\n  isLoading: true,\n  isLoadingFullList: false,\n  fromCache: false,\n  items: [],\n}\n\ninterface UseDocumentListHookValue extends DocumentListState {\n  onRetry: () => void\n  onLoadFullList: () => void\n}\n\n/**\n * @internal\n */\nexport function useDocumentList(opts: UseDocumentListOpts): UseDocumentListHookValue {\n  const {filter: searchFilter, params: paramsProp, sortOrder, searchQuery, apiVersion} = opts\n  const client = useClient({\n    ...DEFAULT_STUDIO_CLIENT_OPTIONS,\n    apiVersion: apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n  })\n  const {strategy: searchStrategy} = useWorkspace().search\n  const schema = useSchema()\n  const maxFieldDepth = useSearchMaxFieldDepth()\n\n  // Get the type name from the filter, if it is a simple type filter.\n  const typeNameFromFilter = useMemo(\n    () => findStaticTypesInFilter(searchFilter, paramsProp),\n    [searchFilter, paramsProp],\n  )\n\n  const [onRetry$, onRetry] = useMemo(() => observableCallback(), [])\n  const [onFetchFullList$, onLoadFullList] = useMemo(() => observableCallback(), [])\n\n  const queryResults$ = useMemo(() => {\n    const listenSearchQueryArgs = {\n      client,\n      filter: searchFilter,\n      limit: PARTIAL_PAGE_LIMIT,\n      params: paramsProp,\n      schema,\n      searchQuery: searchQuery || '',\n      sort: sortOrder || DEFAULT_ORDERING,\n      staticTypeNames: typeNameFromFilter,\n      maxFieldDepth,\n      searchStrategy,\n    }\n\n    const partialList$ = listenSearchQuery(listenSearchQueryArgs).pipe(\n      shareReplay({refCount: true, bufferSize: 1}),\n    )\n\n    // we want to fetch the full list if the last result of the partial list is at the limit\n    const fullList$ = onFetchFullList$.pipe(\n      withLatestFrom(partialList$),\n      filter(([, result]) => result?.documents.length === PARTIAL_PAGE_LIMIT),\n      // we want to set up the full list listener only once\n      take(1),\n      mergeMap(() =>\n        concat(\n          of({type: 'loadFullList' as const}),\n          listenSearchQuery({...listenSearchQueryArgs, limit: FULL_LIST_LIMIT}).pipe(\n            map((result) => ({type: 'result' as const, result})),\n          ),\n        ),\n      ),\n      share(),\n    )\n\n    // The combined search results from both partial page and full list\n    return merge(\n      partialList$.pipe(\n        map((result) => ({\n          type: 'result' as const,\n          result,\n        })),\n        // when the full list listener kicks off, we want to stop the partial list listener\n        takeUntil(fullList$),\n      ),\n      fullList$,\n    ).pipe(\n      catchError((err: unknown, caught$) => {\n        return concat(\n          of({type: 'error' as const, error: safeError(err)}),\n          merge(fromEvent(window, 'online'), onRetry$).pipe(\n            take(1),\n            mergeMap(() => caught$),\n          ),\n        )\n      }),\n      scan((prev, event) => {\n        if (event.type === 'error') {\n          return {\n            ...prev,\n            error: event.error,\n          }\n        }\n        if (event.type === 'result') {\n          return {\n            ...prev,\n            error: null,\n            fromCache: event.result.fromCache,\n            isLoading: false,\n            items: removePublishedWithDrafts(event.result.documents),\n            isLoadingFullList: false,\n          }\n        }\n        if (event.type === 'loadFullList') {\n          return {\n            ...prev,\n            error: null,\n            isLoadingFullList: true,\n          }\n        }\n        throw new Error('Unexpected')\n      }, INITIAL_QUERY_STATE),\n    )\n  }, [\n    client,\n    searchFilter,\n    paramsProp,\n    schema,\n    searchQuery,\n    sortOrder,\n    typeNameFromFilter,\n    maxFieldDepth,\n    searchStrategy,\n    onFetchFullList$,\n    onRetry$,\n  ])\n\n  const {error, items, isLoading, fromCache, isLoadingFullList} = useObservable(\n    queryResults$,\n    INITIAL_QUERY_STATE,\n  )\n\n  return {\n    error,\n    onRetry,\n    isLoading,\n    items,\n    fromCache,\n    onLoadFullList,\n    isLoadingFullList,\n  }\n}\n\n// todo: candidate for re-use\nconst nonErrorThrownWarning = `[WARNING: This was thrown as a non-error. Only Error instances should be thrown]`\nfunction safeError(thrown: unknown): Error {\n  if (thrown instanceof Error) {\n    return thrown\n  }\n  if (typeof thrown === 'object' && thrown !== null) {\n    if ('message' in thrown && typeof thrown.message === 'string') {\n      return new Error(`${thrown.message} ${nonErrorThrownWarning}`)\n    }\n    return new Error(`${String(thrown)} ${nonErrorThrownWarning}`)\n  }\n  return new Error(`${String(thrown)} ${nonErrorThrownWarning}`)\n}\n","import {SearchIcon, SpinnerIcon} from '@sanity/icons'\nimport {Box, TextInput} from '@sanity/ui'\nimport {memo, useCallback, useEffect, useMemo, useState} from 'react'\nimport {useObservableEvent} from 'react-rx'\nimport {debounce, map, type Observable, of, tap, timer} from 'rxjs'\nimport {\n  type GeneralPreviewLayoutKey,\n  useI18nText,\n  useSchema,\n  useTranslation,\n  useUnique,\n} from 'sanity'\nimport {keyframes, styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {EMPTY_RECORD, FULL_LIST_LIMIT} from './constants'\nimport {DocumentListPaneContent} from './DocumentListPaneContent'\nimport {applyOrderingFunctions, findStaticTypesInFilter} from './helpers'\nimport {useShallowUnique} from './PaneContainer'\nimport {type LoadingVariant, type SortOrder} from './types'\nimport {useDocumentList} from './useDocumentList'\n\n/**\n * @internal\n */\nexport type DocumentListPaneProps = BaseStructureToolPaneProps<'documentList'> & {\n  sortOrder?: SortOrder\n  layout?: Exclude<GeneralPreviewLayoutKey, 'sheetList'>\n}\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`\n\nconst fadeIn = keyframes`\n  0% {\n    opacity: 0;\n  }\n  50% {\n    opacity: 0.1;\n  }\n  100% {\n    opacity: 0.4;\n  }\n`\n\nconst AnimatedSpinnerIcon = styled(SpinnerIcon)`\n  animation: ${rotate} 500ms linear infinite;\n`\n\nconst SubtleSpinnerIcon = styled(SpinnerIcon)`\n  animation: ${rotate} 1500ms linear infinite;\n  opacity: 0.4;\n`\n\nconst DelayedSubtleSpinnerIcon = styled(SpinnerIcon)`\n  animation:\n    ${rotate} 1500ms linear infinite,\n    ${fadeIn} 1000ms linear;\n  opacity: 0.4;\n`\n\n/**\n * @internal\n */\n\nexport const DocumentListPane = memo(function DocumentListPane(props: DocumentListPaneProps) {\n  const {childItemId, isActive, pane, paneKey, sortOrder: sortOrderRaw, layout} = props\n  const schema = useSchema()\n\n  const {displayOptions, options} = pane\n  const {apiVersion, filter} = options\n  const params = useShallowUnique(options.params || EMPTY_RECORD)\n  const typeName = useMemo(() => {\n    const staticTypes = findStaticTypesInFilter(filter, params)\n    if (staticTypes?.length === 1) return staticTypes[0]\n    return null\n  }, [filter, params])\n\n  const showIcons = displayOptions?.showIcons !== false\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {title} = useI18nText(pane)\n\n  const [searchQuery, setSearchQuery] = useState<string>('')\n  const [searchInputValue, setSearchInputValue] = useState<string>('')\n  const [searchInputElement, setSearchInputElement] = useState<HTMLInputElement | null>(null)\n\n  const sortWithOrderingFn =\n    typeName && sortOrderRaw\n      ? applyOrderingFunctions(sortOrderRaw, schema.get(typeName) as any)\n      : sortOrderRaw\n\n  const sortOrder = useUnique(sortWithOrderingFn)\n\n  const {error, isLoadingFullList, isLoading, items, fromCache, onLoadFullList, onRetry} =\n    useDocumentList({\n      apiVersion,\n      filter,\n      params,\n      searchQuery: searchQuery?.trim(),\n      sortOrder,\n    })\n\n  const handleQueryChange = useObservableEvent(\n    (event$: Observable<React.ChangeEvent<HTMLInputElement>>) => {\n      return event$.pipe(\n        map((event) => event.target.value),\n        tap(setSearchInputValue),\n        debounce((value) => (value === '' ? of('') : timer(300))),\n        tap(setSearchQuery),\n      )\n    },\n  )\n\n  const handleClearSearch = useCallback(() => {\n    setSearchQuery('')\n    setSearchInputValue('')\n  }, [])\n\n  const handleSearchKeyDown = useCallback(\n    (event: React.KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === 'Escape') {\n        handleClearSearch()\n      }\n    },\n    [handleClearSearch],\n  )\n\n  const [enableSearchSpinner, setEnableSearchSpinner] = useState<string | void>()\n\n  useEffect(() => {\n    if (!enableSearchSpinner && !isLoading) {\n      setEnableSearchSpinner(paneKey)\n    }\n  }, [enableSearchSpinner, isLoading, paneKey])\n\n  useEffect(() => {\n    // Clear search field and disable search spinner\n    // when switching between panes (i.e. when paneKey changes).\n    handleClearSearch()\n    setEnableSearchSpinner()\n  }, [paneKey, handleClearSearch])\n\n  const loadingVariant: LoadingVariant = useMemo(() => {\n    if (isLoading && enableSearchSpinner === paneKey) {\n      return 'spinner'\n    }\n    if (fromCache) {\n      return 'subtle'\n    }\n\n    return 'initial'\n  }, [enableSearchSpinner, fromCache, isLoading, paneKey])\n\n  const textInputIcon = useMemo(() => {\n    if (loadingVariant === 'spinner') {\n      return AnimatedSpinnerIcon\n    }\n    if (searchInputValue && loadingVariant === 'subtle') {\n      return SubtleSpinnerIcon\n    }\n    return SearchIcon\n  }, [loadingVariant, searchInputValue])\n\n  return (\n    <>\n      <Box paddingX={3} paddingBottom={3}>\n        <TextInput\n          aria-label={t('panes.document-list-pane.search-input.aria-label')}\n          autoComplete=\"off\"\n          border={false}\n          clearButton={Boolean(searchQuery)}\n          disabled={Boolean(error)}\n          fontSize={[2, 2, 1]}\n          icon={textInputIcon}\n          iconRight={\n            loadingVariant === 'subtle' && !searchInputValue ? DelayedSubtleSpinnerIcon : null\n          }\n          onChange={handleQueryChange}\n          onClear={handleClearSearch}\n          onKeyDown={handleSearchKeyDown}\n          padding={2}\n          placeholder={t('panes.document-list-pane.search-input.placeholder')}\n          radius={2}\n          ref={setSearchInputElement}\n          spellCheck={false}\n          value={searchInputValue}\n        />\n      </Box>\n      <DocumentListPaneContent\n        childItemId={childItemId}\n        error={error}\n        filterIsSimpleTypeConstraint={!!typeName}\n        hasMaxItems={items.length === FULL_LIST_LIMIT}\n        hasSearchQuery={Boolean(searchQuery)}\n        isActive={isActive}\n        isLazyLoading={isLoadingFullList}\n        isLoading={isLoading}\n        items={items}\n        key={paneKey}\n        layout={layout}\n        loadingVariant={loadingVariant}\n        onEndReached={onLoadFullList}\n        onRetry={onRetry}\n        paneTitle={title}\n        searchInputElement={searchInputElement}\n        showIcons={showIcons}\n      />\n    </>\n  )\n})\n","import {ArrowLeftIcon} from '@sanity/icons'\nimport {memo, type ReactNode, useMemo} from 'react'\nimport {type GeneralPreviewLayoutKey, type InitialValueTemplateItem} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../ui-components'\nimport {\n  BackLink,\n  PaneHeader as StructurePaneHeader,\n  PaneHeaderActions,\n  usePane,\n} from '../../components'\nimport {\n  type PaneMenuItem,\n  type PaneMenuItemGroup,\n  type StructureToolPaneActionHandler,\n} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {type SortOrder} from './types'\n\ninterface PaneHeaderProps {\n  contentAfter?: ReactNode\n  index: number\n  initialValueTemplates?: InitialValueTemplateItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  menuItems?: PaneMenuItem[]\n  setLayout: (layout: GeneralPreviewLayoutKey) => void\n  setSortOrder: (sortOrder: SortOrder) => void\n  title: string\n}\n\nexport const PaneHeader = memo(\n  ({\n    contentAfter,\n    index,\n    initialValueTemplates = [],\n    menuItemGroups = [],\n    menuItems = [],\n    setLayout,\n    setSortOrder,\n    title,\n  }: PaneHeaderProps) => {\n    const {features} = useStructureTool()\n    const {collapsed, isLast} = usePane()\n    // Prevent focus if this is the last (non-collapsed) pane.\n    const tabIndex = isLast && !collapsed ? -1 : 0\n\n    const actionHandlers = useMemo((): Record<string, StructureToolPaneActionHandler> => {\n      return {\n        setLayout: ({layout: value}: {layout: GeneralPreviewLayoutKey}) => {\n          setLayout(value)\n        },\n        setSortOrder: (sort: SortOrder) => {\n          setSortOrder(sort)\n        },\n      }\n    }, [setLayout, setSortOrder])\n\n    return (\n      <TooltipDelayGroupProvider>\n        <StructurePaneHeader\n          actions={\n            <PaneHeaderActions\n              initialValueTemplateItems={initialValueTemplates}\n              actionHandlers={actionHandlers}\n              menuItemGroups={menuItemGroups}\n              menuItems={menuItems}\n            />\n          }\n          backButton={\n            features.backButton &&\n            index > 0 && (\n              <Button\n                as={BackLink}\n                data-as=\"a\"\n                icon={ArrowLeftIcon}\n                mode=\"bleed\"\n                tooltipProps={{content: 'Back'}}\n              />\n            )\n          }\n          contentAfter={contentAfter}\n          tabIndex={tabIndex}\n          title={title}\n        />\n      </TooltipDelayGroupProvider>\n    )\n  },\n)\n\nPaneHeader.displayName = 'Memo(PaneHeader)'\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {type SanityDocument} from '@sanity/client'\nimport {Checkbox} from '@sanity/ui'\nimport {type CellContext} from '@tanstack/react-table'\nimport {type MouseEvent, useCallback} from 'react'\n\nexport function DocumentSheetListSelect(props: CellContext<SanityDocument, unknown>) {\n  const {row, table} = props\n\n  const {selectedAnchor, setSelectedAnchor} = table.options.meta || {}\n\n  const handleOnClick = useCallback(\n    (e: MouseEvent<HTMLInputElement>) => {\n      if (e.shiftKey && selectedAnchor !== null && selectedAnchor !== undefined) {\n        const shiftClickIndex = row.index\n        const lowerIndex = shiftClickIndex < selectedAnchor ? shiftClickIndex : selectedAnchor\n        const upperIndex = shiftClickIndex < selectedAnchor ? selectedAnchor : shiftClickIndex\n\n        const additionalSelectedRows = table\n          .getRowModel()\n          .flatRows.slice(lowerIndex, upperIndex + 1)\n          .map(({id}) => id)\n\n        const currentSelectedRows = table.getSelectedRowModel().rows.map(({id}) => id)\n        table.setRowSelection(() =>\n          [...additionalSelectedRows, ...currentSelectedRows].reduce(\n            (nextSelectedRows, rowId) => ({...nextSelectedRows, [rowId]: true}),\n            {},\n          ),\n        )\n      } else if (setSelectedAnchor) {\n        const isRowCurrentlySelected = row.getIsSelected()\n        if (isRowCurrentlySelected) {\n          // about to unselect so invalidate current anchor\n          setSelectedAnchor(null)\n        } else {\n          // override anchor with new selection index\n          setSelectedAnchor(row.index)\n        }\n\n        row.toggleSelected()\n      }\n    },\n    [selectedAnchor, row, setSelectedAnchor, table],\n  )\n\n  return (\n    <Checkbox\n      style={{paddingLeft: 4}}\n      checked={props.row.getIsSelected()}\n      disabled={!props.row.getCanSelect()}\n      // onChange doesn't have shiftKey in event, but want to control this checkbox\n      // need to define noop onChange to suppress the warning\n      // eslint-disable-next-line react/jsx-no-bind\n      onChange={() => null}\n      onClick={handleOnClick}\n    />\n  )\n}\n","import {type SanityDocument} from '@sanity/types'\nimport {type Table} from '@tanstack/react-table'\nimport {type ReactNode, useCallback, useContext, useEffect, useMemo, useState} from 'react'\nimport {DocumentSheetListContext} from 'sanity/_singletons'\n\ninterface DocumentSheetListProviderProps {\n  children?: ReactNode\n  table: Table<SanityDocument>\n}\n\ntype SelectedCellDetails = {\n  colId: string\n  rowIndex: number\n  state: 'focused' | 'selected'\n} | null\n\n/** @internal */\nexport interface DocumentSheetListContextValue {\n  focusAnchorCell: () => void\n  resetFocusSelection: () => void\n  setSelectedAnchorCell: (colId: string, rowIndex: number) => void\n  getStateByCellId: (\n    colId: string,\n    rowIndex: number,\n  ) => 'focused' | 'selectedAnchor' | 'selectedRange' | null\n  submitFocusedCell: () => void\n}\n\n/** @internal */\nexport const useDocumentSheetListContext = (): DocumentSheetListContextValue => {\n  const context = useContext(DocumentSheetListContext)\n\n  if (context === undefined) {\n    throw new Error('useDocumentSheetListContext must be used within an DocumentSheetListProvider')\n  }\n  return context\n}\n\n/** @internal */\nexport function DocumentSheetListProvider({\n  children,\n  table,\n}: DocumentSheetListProviderProps): ReactNode {\n  const [selectedAnchorCellDetails, setSelectedAnchorCellDetails] =\n    useState<SelectedCellDetails>(null)\n  const [selectedRangeCellIndexes, setSelectedRangeCellIndexes] = useState<number[]>([])\n\n  const clearAndSetFocusSelection = useCallback(\n    (nextAnchorDetails: SelectedCellDetails = null) => {\n      if (\n        selectedAnchorCellDetails?.state === 'focused' &&\n        document.activeElement instanceof HTMLElement\n      ) {\n        document.activeElement.blur()\n      }\n\n      setSelectedAnchorCellDetails(nextAnchorDetails)\n      setSelectedRangeCellIndexes([])\n    },\n    [selectedAnchorCellDetails],\n  )\n\n  const resetFocusSelection = useCallback(\n    () => clearAndSetFocusSelection(),\n    [clearAndSetFocusSelection],\n  )\n\n  const changeSelectionColumn = useCallback(\n    (direction: 'left' | 'right') => {\n      if (!selectedAnchorCellDetails) return\n\n      const visibleColumns = table.getVisibleLeafColumns()\n      const columnIndexAfterMove =\n        visibleColumns.findIndex((col) => col.id === selectedAnchorCellDetails.colId) +\n        (direction === 'left' ? -1 : 1)\n\n      if (columnIndexAfterMove < 0 || columnIndexAfterMove >= visibleColumns.length) return\n\n      clearAndSetFocusSelection({\n        colId: visibleColumns[columnIndexAfterMove].id,\n        rowIndex: selectedAnchorCellDetails.rowIndex,\n        state: 'selected',\n      })\n    },\n    [clearAndSetFocusSelection, selectedAnchorCellDetails, table],\n  )\n\n  const changeSelectionRange = useCallback(\n    (direction: 'up' | 'down') => {\n      if (!selectedAnchorCellDetails) return\n\n      setSelectedRangeCellIndexes((previousSelection) => {\n        const {rowIndex: anchorIndex} = selectedAnchorCellDetails\n        const getNextIndex = (startingIndex: number) =>\n          startingIndex + (direction === 'down' ? 1 : -1)\n        // if no cells are selected, select the cell in the direction\n        if (!previousSelection.length) {\n          const firstSelectedIndex = getNextIndex(anchorIndex)\n          if (firstSelectedIndex < 0) return []\n          return [firstSelectedIndex]\n        }\n        const lastIndexSelected = previousSelection[previousSelection.length - 1]\n        const nextIndex = getNextIndex(lastIndexSelected)\n\n        // if the cell in the direction is out of bounds, return the previous selection\n        if (nextIndex < 0) return previousSelection\n\n        // if the cell in the direction is the same as the focused cell, deselect all cells\n        if (nextIndex === anchorIndex) return []\n\n        // if the cell in the direction is already selected, deselect the last selected cell\n        if (previousSelection.includes(nextIndex)) {\n          return previousSelection.slice(0, -1)\n        }\n\n        return [...previousSelection, nextIndex]\n      })\n    },\n    [selectedAnchorCellDetails],\n  )\n\n  const setSelectedAnchorCell = useCallback(\n    (colId: string, rowIndex: number) => {\n      clearAndSetFocusSelection({colId, rowIndex, state: 'selected'})\n    },\n    [clearAndSetFocusSelection],\n  )\n\n  const handleEscapePress = useCallback(() => {\n    if (!selectedAnchorCellDetails) return\n    if (selectedRangeCellIndexes.length) {\n      // only clear selected range if it exists\n      setSelectedRangeCellIndexes([])\n    } else {\n      const nextAnchorCellDetails: SelectedCellDetails =\n        selectedAnchorCellDetails.state === 'selected'\n          ? null\n          : {\n              ...selectedAnchorCellDetails,\n              state: 'selected',\n            }\n      clearAndSetFocusSelection(nextAnchorCellDetails)\n    }\n  }, [clearAndSetFocusSelection, selectedAnchorCellDetails, selectedRangeCellIndexes.length])\n\n  const handleUpDownKey = useCallback(\n    (isShiftKey: boolean, key: string) => {\n      if (!selectedAnchorCellDetails) return\n\n      const direction = key === 'ArrowDown' ? 'down' : 'up'\n      const offset = direction === 'down' ? 1 : -1\n\n      if (isShiftKey) {\n        changeSelectionRange(direction)\n      } else {\n        const newSelectedCellRowIndex = selectedAnchorCellDetails.rowIndex + offset\n        if (newSelectedCellRowIndex < 0) return\n\n        setSelectedAnchorCell(selectedAnchorCellDetails.colId, newSelectedCellRowIndex)\n      }\n    },\n    [changeSelectionRange, selectedAnchorCellDetails, setSelectedAnchorCell],\n  )\n\n  const handleAnchorKeydown = useCallback(\n    (event: KeyboardEvent) => {\n      if (!selectedAnchorCellDetails) return\n\n      const {key, shiftKey} = event\n\n      switch (key) {\n        case 'Shift':\n          break // shift allow should do nothing\n\n        case 'Escape':\n          handleEscapePress()\n          break\n\n        case 'ArrowDown':\n        case 'ArrowUp':\n          event.preventDefault()\n          handleUpDownKey(shiftKey, key)\n          break\n\n        case 'ArrowLeft':\n        case 'ArrowRight':\n          // when cell is focused, arrows should have default behavior\n          // only prevent default when cell is selected\n          if (selectedAnchorCellDetails.state === 'selected') {\n            event.preventDefault()\n            changeSelectionColumn(key === 'ArrowLeft' ? 'left' : 'right')\n          }\n          break\n\n        default:\n          break\n      }\n    },\n    [selectedAnchorCellDetails, handleEscapePress, handleUpDownKey, changeSelectionColumn],\n  )\n\n  const handleAnchorClick = useCallback(\n    (event: MouseEvent) => {\n      if (!selectedAnchorCellDetails) return\n      const isClickInAnchorCell = document\n        .getElementById(\n          `cell-${selectedAnchorCellDetails.colId}-${selectedAnchorCellDetails.rowIndex}`,\n        )\n        ?.contains(event.target as Node)\n\n      if (!isClickInAnchorCell) resetFocusSelection()\n    },\n    [resetFocusSelection, selectedAnchorCellDetails],\n  )\n\n  useEffect(() => {\n    if (selectedAnchorCellDetails) {\n      document.addEventListener('keydown', handleAnchorKeydown)\n      document.addEventListener('click', handleAnchorClick)\n    }\n\n    return () => {\n      if (selectedAnchorCellDetails) {\n        document.removeEventListener('keydown', handleAnchorKeydown)\n        document.removeEventListener('click', handleAnchorClick)\n      }\n    }\n  }, [handleAnchorClick, handleAnchorKeydown, selectedAnchorCellDetails])\n\n  const focusAnchorCell = useCallback(\n    () =>\n      setSelectedAnchorCellDetails((anchorCellDetails) => {\n        if (!anchorCellDetails) return null\n\n        return {...anchorCellDetails, state: 'focused'}\n      }),\n    [],\n  )\n\n  const getStateByCellId = useCallback(\n    (colId: string, rowIndex: number) => {\n      if (selectedAnchorCellDetails?.colId !== colId) return null\n\n      if (selectedAnchorCellDetails.rowIndex === rowIndex)\n        return selectedAnchorCellDetails.state === 'focused' ? 'focused' : 'selectedAnchor'\n\n      if (selectedRangeCellIndexes.includes(rowIndex)) return 'selectedRange'\n\n      return null\n    },\n    [selectedAnchorCellDetails, selectedRangeCellIndexes],\n  )\n\n  const submitFocusedCell = useCallback(() => {\n    if (!selectedAnchorCellDetails) return\n\n    clearAndSetFocusSelection({\n      colId: selectedAnchorCellDetails.colId,\n      rowIndex: selectedAnchorCellDetails.rowIndex + 1,\n      state: 'selected',\n    })\n  }, [clearAndSetFocusSelection, selectedAnchorCellDetails])\n\n  const value = useMemo<DocumentSheetListContextValue>(\n    () => ({\n      focusAnchorCell,\n      resetFocusSelection,\n      setSelectedAnchorCell,\n      getStateByCellId,\n      submitFocusedCell,\n    }),\n    [\n      focusAnchorCell,\n      resetFocusSelection,\n      setSelectedAnchorCell,\n      getStateByCellId,\n      submitFocusedCell,\n    ],\n  )\n\n  return (\n    <DocumentSheetListContext.Provider value={value}>{children}</DocumentSheetListContext.Provider>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\n/* eslint-disable i18next/no-literal-string */\nimport {type ObjectFieldType} from '@sanity/types'\nimport {Select, TextInput} from '@sanity/ui'\nimport {type Cell, type CellContext, flexRender} from '@tanstack/react-table'\nimport {type MouseEventHandler, useCallback, useEffect, useRef, useState} from 'react'\nimport {type SanityDocument} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {useDocumentSheetListContext} from './DocumentSheetListProvider'\n\nconst DataCell = styled.td<{width: number}>`\n  display: flex;\n  overflow: hidden;\n  box-sizing: border-box;\n  width: ${({width}) => width}px;\n  border-top: 1px solid var(--card-border-color);\n  background-color: var(--card-bg-color);\n`\n\nconst PinnedDataCell = styled(DataCell)`\n  position: sticky;\n  z-index: 2;\n`\n\ninterface SheetListCellInnerProps extends CellContext<SanityDocument, unknown> {\n  fieldType: ObjectFieldType\n}\n\ntype CellInputElement = HTMLInputElement | HTMLSelectElement\ntype InputRef = CellInputElement | null\n\n/** @internal */\nexport function SheetListCellInner(props: SheetListCellInnerProps) {\n  const {getValue, column, row, fieldType} = props\n  const cellId = `cell-${column.id}-${row.index}`\n  const [renderValue, setRenderValue] = useState<string>(getValue() as string)\n  const [isDirty, setIsDirty] = useState(false)\n  const inputRef = useRef<InputRef>(null)\n  const {\n    focusAnchorCell,\n    resetFocusSelection,\n    setSelectedAnchorCell,\n    getStateByCellId,\n    submitFocusedCell,\n  } = useDocumentSheetListContext()\n  const cellState = getStateByCellId(column.id, row.index)\n\n  const handleOnFocus = useCallback(() => {\n    // reselect in cases where focus achieved without initial mousedown\n    setSelectedAnchorCell(column.id, row.index)\n    focusAnchorCell()\n  }, [column.id, focusAnchorCell, row.index, setSelectedAnchorCell])\n  const {patchDocument} = props.table.options.meta || {}\n\n  const handleProgrammaticFocus = () => {\n    inputRef.current?.focus()\n    if (inputRef.current instanceof HTMLInputElement) {\n      inputRef.current.select()\n    }\n  }\n\n  const handleOnMouseDown: MouseEventHandler<CellInputElement> = (event) => {\n    if (event.detail === 2) {\n      handleProgrammaticFocus()\n    } else {\n      event.preventDefault()\n      setSelectedAnchorCell(column.id, row.index)\n    }\n  }\n\n  const handleOnEnterDown = useCallback(\n    (event: KeyboardEvent) => {\n      const {key} = event\n      if (key === 'Enter') {\n        if (cellState === 'selectedAnchor') handleProgrammaticFocus()\n        if (cellState === 'focused') submitFocusedCell()\n      }\n    },\n    [cellState, submitFocusedCell],\n  )\n\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setIsDirty(true)\n    setRenderValue(event.target.value)\n  }\n\n  const handleOnBlur = () => {\n    if (isDirty) {\n      patchDocument?.(row.id, column.id, renderValue)\n      setIsDirty(false)\n    }\n    resetFocusSelection()\n  }\n\n  const handlePaste = useCallback(\n    (event: ClipboardEvent) => {\n      const clipboardData = event.clipboardData?.getData('Text')\n\n      if (typeof clipboardData === 'string' || typeof clipboardData === 'number') {\n        setRenderValue(clipboardData)\n        // patch immediately when pasting\n        patchDocument?.(row.id, column.id, clipboardData)\n      }\n    },\n    [column.id, patchDocument, row.id],\n  )\n\n  const handleCopy = useCallback(() => {\n    navigator.clipboard.writeText(renderValue.toString())\n  }, [renderValue])\n\n  useEffect(() => {\n    if (cellState === 'selectedAnchor' || cellState === 'focused')\n      // only listen for enter key when cell is focused or anchor\n      document.addEventListener('keydown', handleOnEnterDown)\n    if (cellState === 'selectedAnchor' || cellState === 'selectedRange')\n      // if cell is selected, paste events should be handled\n      document.addEventListener('paste', handlePaste)\n\n    if (cellState === 'selectedAnchor')\n      // only allow copying when cell is selected anchor\n      document.addEventListener('copy', handleCopy)\n\n    return () => {\n      if (cellState === 'selectedAnchor' || cellState === 'focused')\n        document.removeEventListener('keydown', handleOnEnterDown)\n      if (cellState === 'selectedAnchor' || cellState === 'selectedRange')\n        document.removeEventListener('paste', handlePaste)\n      if (cellState === 'selectedAnchor') document.removeEventListener('copy', handleCopy)\n    }\n  }, [\n    cellId,\n    cellState,\n    column.id,\n    getStateByCellId,\n    handleCopy,\n    handleOnEnterDown,\n    handlePaste,\n    row.index,\n  ])\n\n  const getBorderStyle = () => {\n    if (cellState === 'focused') return '2px solid blue'\n    if (cellState === 'selectedRange') return '1px solid green'\n    if (cellState === 'selectedAnchor') return '1px solid blue'\n\n    return '1px solid transparent'\n  }\n\n  const inputProps = {\n    'onFocus': handleOnFocus,\n    'onBlur': handleOnBlur,\n    'onMouseDown': handleOnMouseDown,\n    'aria-selected': !!cellState,\n    'data-testid': cellId,\n    'id': cellId,\n    'ref': (ref: InputRef) => (inputRef.current = ref),\n  }\n\n  if (fieldType.name === 'boolean') {\n    return (\n      <Select\n        {...inputProps}\n        onChange={() => null}\n        radius={0}\n        style={{\n          boxShadow: 'none',\n          border: getBorderStyle(),\n          padding: 0,\n        }}\n        value={JSON.stringify(renderValue)}\n      >\n        <option value=\"True\">True</option>\n        <option value=\"False\">False</option>\n      </Select>\n    )\n  }\n\n  return (\n    <TextInput\n      {...inputProps}\n      size={0}\n      radius={0}\n      border={false}\n      style={{\n        border: getBorderStyle(),\n        padding: '22px 16px',\n      }}\n      value={\n        typeof renderValue === 'string' || typeof renderValue === 'number'\n          ? renderValue\n          : JSON.stringify(renderValue)\n      }\n      onChange={handleOnChange}\n    />\n  )\n}\n\n/** @internal */\nexport function SheetListCell(cell: Cell<SanityDocument, unknown>) {\n  const isPinned = cell.column.getIsPinned()\n  const Cell = isPinned ? PinnedDataCell : DataCell\n  const borderWidth = isPinned && cell.column.getIsLastColumn('left') ? 2 : 1\n\n  return (\n    <Cell\n      key={cell.row.original._id + cell.id}\n      style={{\n        left: cell.column.getStart('left') ?? undefined,\n        borderRight: `${borderWidth}px solid var(--card-border-color)`,\n      }}\n      width={cell.column.getSize()}\n    >\n      {flexRender(cell.column.columnDef.cell, cell.getContext?.())}\n    </Cell>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {isObjectSchemaType, type ObjectSchemaType} from '@sanity/types'\nimport {Box, Checkbox, Flex, Text} from '@sanity/ui'\nimport {\n  type AccessorKeyColumnDef,\n  createColumnHelper,\n  type GroupColumnDef,\n  type VisibilityState,\n} from '@tanstack/react-table'\nimport {useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {\n  type DocumentPreviewStore,\n  DocumentStatusIndicator,\n  getPreviewStateObservable,\n  type SanityDocument,\n  type SchemaType,\n  useDocumentPreviewStore,\n} from 'sanity'\n\nimport {DocumentSheetListSelect} from './DocumentSheetListSelect'\nimport {SheetListCellInner} from './SheetListCell'\n\nexport const VISIBLE_COLUMN_LIMIT = 5\n\nconst PreviewCell = (props: {\n  documentPreviewStore: DocumentPreviewStore\n  schemaType: SchemaType\n  row: {\n    original: SanityDocument\n  }\n}) => {\n  const {documentPreviewStore, row, schemaType} = props\n  const title = 'Document title'\n  const previewStateObservable = useMemo(\n    () => getPreviewStateObservable(documentPreviewStore, schemaType, row.original._id, title),\n    [documentPreviewStore, row.original._id, schemaType],\n  )\n  const {draft, published, isLoading} = useObservable(previewStateObservable, {\n    draft: null,\n    isLoading: true,\n    published: null,\n  })\n  if (isLoading) {\n    return (\n      <Text size={1} muted>\n        Loading...\n      </Text>\n    )\n  }\n  const displayValue = (draft?.title ?? published?.title ?? 'Untitled') as string\n  return (\n    <Flex align=\"center\" gap={3}>\n      <DocumentStatusIndicator draft={draft} published={published} />\n      <Text size={1}>{displayValue}</Text>\n    </Flex>\n  )\n}\n\nconst columnHelper = createColumnHelper<SanityDocument>()\nconst SUPPORTED_FIELDS = ['string', 'number', 'boolean']\n\ntype Columns = (\n  | AccessorKeyColumnDef<SanityDocument, unknown>\n  | GroupColumnDef<SanityDocument, unknown>\n)[]\n\nconst getColsFromSchemaType = (schemaType: ObjectSchemaType, parentalField?: string): Columns => {\n  return schemaType.fields.reduce<Columns>((tableColumns: Columns, field) => {\n    const {type, name} = field\n    if (SUPPORTED_FIELDS.includes(type.name)) {\n      const nextCol = columnHelper.accessor(\n        // accessor must use dot notation for internal tanstack method of reading cell data\n        parentalField ? `${parentalField}.${field.name}` : field.name,\n        {\n          id: parentalField ? `${parentalField}_${field.name}` : field.name,\n          header: field.type.title,\n          enableHiding: true,\n          cell: (info) => <SheetListCellInner {...info} fieldType={type} />,\n        },\n      )\n\n      return [...tableColumns, nextCol]\n    }\n\n    // if first layer nested object\n    if (type.name === 'object' && isObjectSchemaType(type) && !parentalField) {\n      return [\n        ...tableColumns,\n        columnHelper.group({header: name, columns: getColsFromSchemaType(type, field.name)}),\n      ]\n    }\n\n    return tableColumns\n  }, [])\n}\n\n// Type guard function to check if a column is of type GroupColumnDef\nfunction isAccessorKeyColumnDef(\n  column: Columns[number],\n): column is AccessorKeyColumnDef<SanityDocument, unknown> {\n  return 'accessorKey' in column\n}\nfunction isGroupColumnDef(\n  column: AccessorKeyColumnDef<SanityDocument, unknown> | GroupColumnDef<SanityDocument, unknown>,\n): column is GroupColumnDef<SanityDocument, unknown> {\n  return 'columns' in column\n}\n\nconst flatColumns = (cols: Columns): AccessorKeyColumnDef<SanityDocument, unknown>[] => {\n  return cols.flatMap((col) => {\n    if (isAccessorKeyColumnDef(col)) {\n      return col\n    }\n    if (isGroupColumnDef(col)) {\n      return col.columns ? flatColumns(col.columns) : []\n    }\n    return []\n  })\n}\n\nexport function useDocumentSheetColumns(documentSchemaType?: ObjectSchemaType) {\n  const documentPreviewStore = useDocumentPreviewStore()\n\n  const columns: Columns = useMemo(() => {\n    if (!documentSchemaType) {\n      return []\n    }\n    return [\n      columnHelper.display({\n        id: 'selected',\n        enableHiding: false,\n        header: (info) => (\n          <Box>\n            <Checkbox\n              style={{paddingLeft: 4}}\n              indeterminate={info.table.getIsSomeRowsSelected()}\n              onChange={info.table.getToggleAllPageRowsSelectedHandler()}\n            />\n            {/* eslint-disable-next-line i18next/no-literal-string */}\n            {info.table.getSelectedRowModel().rows.length} selected\n          </Box>\n        ),\n        cell: DocumentSheetListSelect,\n      }),\n      columnHelper.accessor('Preview', {\n        enableHiding: false,\n        id: 'Preview',\n        cell: (info) => {\n          return (\n            <PreviewCell\n              {...info}\n              documentPreviewStore={documentPreviewStore}\n              schemaType={documentSchemaType}\n            />\n          )\n        },\n      }),\n      ...getColsFromSchemaType(documentSchemaType),\n    ]\n  }, [documentPreviewStore, documentSchemaType])\n\n  const [initialColumnsVisibility]: [VisibilityState, number] = useMemo(\n    () =>\n      flatColumns(columns).reduce<[VisibilityState, number]>(\n        ([accCols, countAllowedVisible], column) => {\n          if (!column.id) throw new Error('Column must have an id')\n          const visibilityKey = column.id\n\n          // this column is always visible\n          if (!column.enableHiding) {\n            return [{...accCols, [visibilityKey]: true}, countAllowedVisible]\n          }\n\n          // have already reached column visibility limit, hide column by default\n          if (countAllowedVisible === VISIBLE_COLUMN_LIMIT) {\n            return [{...accCols, [visibilityKey]: false}, countAllowedVisible]\n          }\n\n          return [{...accCols, [visibilityKey]: true}, countAllowedVisible + 1]\n        },\n        [{}, 0],\n      ),\n    [columns],\n  )\n\n  return {columns, initialColumnsVisibility}\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {Box, Checkbox, Flex, Menu, Stack, Text} from '@sanity/ui'\nimport {type Column, type Table} from '@tanstack/react-table'\nimport {useCallback} from 'react'\nimport {type SanityDocument, useTranslation} from 'sanity'\n\nimport {Button, MenuButton} from '../../../../ui-components'\nimport {VISIBLE_COLUMN_LIMIT} from './useDocumentSheetColumns'\n\ntype ColumnsControlProps = {\n  table: Table<SanityDocument>\n}\n\nexport function ColumnsControl({table}: ColumnsControlProps) {\n  const {t} = useTranslation()\n  const isVisibleLimitReached =\n    table.getVisibleLeafColumns().filter((col) => col.getCanHide()).length >= VISIBLE_COLUMN_LIMIT\n\n  const setInitialColumns = useCallback(() => {\n    table.resetColumnVisibility()\n  }, [table])\n\n  const handleColumnOnChange = (column: Column<SanityDocument, unknown>) => () => {\n    column.toggleVisibility()\n  }\n\n  const getColumnVisibilityDisabled = (column: Column<SanityDocument, unknown>) => {\n    const isColumnVisible = column.getIsVisible()\n    const isSingleColumnVisible =\n      table.getVisibleLeafColumns().filter((col) => col.getCanHide()).length === 1\n\n    return (isVisibleLimitReached && !isColumnVisible) || (isSingleColumnVisible && isColumnVisible)\n  }\n\n  return (\n    <MenuButton\n      button={<Button mode=\"bleed\" text={t('sheet-list.edit-columns')} />}\n      id=\"columns-control\"\n      menu={\n        <Menu padding={3} paddingTop={4} style={{width: 240}}>\n          <Flex direction=\"column\" height=\"fill\" gap={3}>\n            <Text weight=\"semibold\" size={1}>\n              {t('sheet-list.select-fields')}\n            </Text>\n            <Flex style={{flex: '1 1 auto', maxHeight: 320, overflowY: 'scroll'}}>\n              <Stack>\n                {table\n                  .getAllLeafColumns()\n                  .filter((column) => column.getCanHide())\n                  .map((column) => (\n                    <Flex key={column.id} marginY={2} align=\"center\">\n                      <Checkbox\n                        readOnly={getColumnVisibilityDisabled(column)}\n                        checked={column.getIsVisible()}\n                        onChange={handleColumnOnChange(column)}\n                        id={`col-visibility-${column.id}`}\n                        style={{display: 'block'}}\n                      />\n                      <Box flex={1} paddingLeft={3}>\n                        <Text size={1}>\n                          <label htmlFor={`col-visibility-${column.id}`}>\n                            {column.columnDef.header?.toString()}\n                          </label>\n                        </Text>\n                      </Box>\n                    </Flex>\n                  ))}\n              </Stack>\n            </Flex>\n            <Button\n              width=\"fill\"\n              mode=\"ghost\"\n              text={t('sheet-list.reset-columns')}\n              onClick={setInitialColumns}\n            />\n          </Flex>\n        </Menu>\n      }\n      placement=\"bottom\"\n      popover={{portal: true}}\n    />\n  )\n}\n","import {Flex} from '@sanity/ui'\nimport {Filters, SearchHeader, useSearchState} from 'sanity'\nimport {styled} from 'styled-components'\n\nconst SearchContainer = styled(Flex)`\n  flex-shrink: 0;\n`\n\nexport function DocumentSheetListFilter() {\n  const {\n    state: {filtersVisible},\n  } = useSearchState()\n\n  return (\n    <SearchContainer>\n      <SearchHeader />\n      {filtersVisible && <Filters showTypeFilter={false} />}\n    </SearchContainer>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {CloseIcon, EllipsisHorizontalIcon} from '@sanity/icons'\nimport {type SanityDocument} from '@sanity/types'\nimport {Box, Flex, Menu, Text} from '@sanity/ui'\nimport {flexRender, type Header as HeaderType, type HeaderGroup} from '@tanstack/react-table'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, MenuButton, MenuItem, Tooltip} from '../../../../ui-components'\n\nconst Header = styled.th<{width: number}>`\n  margin: 16px;\n  z-index: 1;\n  padding: 22px 0px;\n  border-top: 1px solid var(--card-border-color);\n  background-color: var(--card-badge-default-bg-color);\n  box-sizing: border-box;\n  text-align: left;\n  width: ${({width}) => width}px;\n  max-width: ${({width}) => width}px;\n`\n\nconst PinnedHeader = styled(Header)`\n  position: sticky;\n  z-index: 2;\n`\n\nconst HoverMenu = styled.div`\n  visibility: hidden;\n\n  ${Header}:hover & {\n    visibility: visible;\n  }\n`\n\ntype DocumentSheetListHeaderProps = {\n  header: HeaderType<SanityDocument, unknown>\n  headerGroup: HeaderGroup<SanityDocument>\n}\n\nexport function DocumentSheetListHeader(props: DocumentSheetListHeaderProps) {\n  const {header, headerGroup} = props\n  const {t} = useTranslation()\n\n  const isPinned = header.column.getIsPinned()\n\n  const headerTitle =\n    headerGroup.depth > 0 && !header.column.parent ? null : (\n      <Text size={1} weight=\"semibold\" textOverflow=\"ellipsis\">\n        {flexRender(header.column.columnDef.header, header.getContext())}\n      </Text>\n    )\n\n  const HeaderTag = isPinned ? PinnedHeader : Header\n\n  const canShowHeaderMenu =\n    header.column.getCanHide() &&\n    (headerGroup.depth === 0 ? !header.column.columns.length : header.column.parent)\n\n  const borderWidth = isPinned && header.column.getIsLastColumn('left') ? 2 : 1\n\n  return (\n    <HeaderTag\n      style={{\n        left: header.column.getStart('left') ?? undefined,\n        borderRight: `${borderWidth}px solid var(--card-border-color)`,\n      }}\n      key={header.id}\n      data-testid={`header-${header.id}`}\n      width={header.getSize()}\n    >\n      <Flex justify=\"space-between\" marginX={2} align=\"baseline\">\n        <Tooltip delay={500} content={headerTitle}>\n          <Box style={{boxSizing: 'border-box'}} marginLeft={3} marginRight={3}>\n            {headerTitle}\n          </Box>\n        </Tooltip>\n        {canShowHeaderMenu && (\n          <HoverMenu>\n            <MenuButton\n              button={\n                <Button\n                  tooltipProps={{content: 'Open field menu'}}\n                  mode=\"bleed\"\n                  icon={EllipsisHorizontalIcon}\n                  data-testid=\"field-menu-button\"\n                />\n              }\n              id=\"field menu\"\n              popover={{placement: 'bottom-end'}}\n              menu={\n                <Menu>\n                  <MenuItem\n                    text={t('sheet-list.hide-field')}\n                    icon={CloseIcon}\n                    onClick={() => header.column.toggleVisibility()}\n                  />\n                </Menu>\n              }\n            />\n          </HoverMenu>\n        )}\n      </Flex>\n    </HeaderTag>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\n/* eslint-disable i18next/no-literal-string */\n/* eslint-disable @sanity/i18n/no-attribute-string-literals */\n/* eslint-disable react/jsx-no-bind */\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  DoubleChevronLeftIcon,\n  DoubleChevronRightIcon,\n} from '@sanity/icons'\nimport {Flex, Text} from '@sanity/ui'\nimport {type Table} from '@tanstack/react-table'\nimport {type SanityDocument} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../../ui-components'\n\nexport function DocumentSheetListPaginator({table}: {table: Table<SanityDocument>}) {\n  return (\n    <TooltipDelayGroupProvider>\n      <Flex gap={3} align={'center'}>\n        <Button\n          onClick={() => table.setPageIndex(0)}\n          disabled={!table.getCanPreviousPage()}\n          icon={DoubleChevronLeftIcon}\n          tooltipProps={{\n            content: 'Go to first page',\n          }}\n        />\n        <Button\n          onClick={() => table.previousPage()}\n          disabled={!table.getCanPreviousPage()}\n          icon={ChevronLeftIcon}\n          tooltipProps={{\n            content: 'Go to previous page',\n          }}\n        />\n        <Text style={{whiteSpace: 'nowrap'}}>\n          {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}\n        </Text>\n\n        <Button\n          onClick={() => table.nextPage()}\n          disabled={!table.getCanNextPage()}\n          icon={ChevronRightIcon}\n          tooltipProps={{\n            content: 'Go to next page',\n          }}\n        />\n        <Button\n          onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n          disabled={!table.getCanNextPage()}\n          icon={DoubleChevronRightIcon}\n          tooltipProps={{\n            content: 'Go to last page',\n          }}\n        />\n        <select\n          value={table.getState().pagination.pageSize}\n          onChange={(e) => {\n            table.setPageSize(Number(e.target.value))\n          }}\n        >\n          {[25, 50, 100].map((pageSize) => (\n            <option key={pageSize} value={pageSize}>\n              {pageSize}\n            </option>\n          ))}\n        </select>\n      </Flex>\n    </TooltipDelayGroupProvider>\n  )\n}\n","import {type ListenEvent, type ListenOptions} from '@sanity/client'\nimport {useCallback, useEffect, useMemo, useReducer, useState} from 'react'\nimport {catchError, of} from 'rxjs'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, getDraftId, type SanityDocument, useClient} from 'sanity'\n\ninterface DocumentDeletedAction {\n  id: string\n  type: 'DOCUMENT_DELETED'\n}\n\ninterface DocumentUpdatedAction {\n  payload: SanityDocument\n  type: 'DOCUMENT_UPDATED'\n}\n\ninterface DocumentsSetAction {\n  documents: SanityDocument[]\n  type: 'DOCUMENTS_SET'\n}\n\ninterface DocumentReceivedAction {\n  payload: SanityDocument\n  type: 'DOCUMENT_RECEIVED'\n}\n\nexport type DocumentsReducerAction =\n  | DocumentDeletedAction\n  | DocumentUpdatedAction\n  | DocumentsSetAction\n  | DocumentReceivedAction\n\nexport interface DocumentsReducerState {\n  documents: Record<string, SanityDocument>\n}\n\nfunction createDocumentsSet(documents: SanityDocument[]) {\n  const documentsById = documents.reduce((acc, doc) => ({...acc, [doc._id]: doc}), {})\n  return documentsById\n}\n\nfunction documentsReducer(\n  state: DocumentsReducerState,\n  action: DocumentsReducerAction,\n): DocumentsReducerState {\n  switch (action.type) {\n    case 'DOCUMENTS_SET': {\n      // Create an object with the documents id as key\n      const documents = createDocumentsSet(action.documents)\n\n      return {\n        ...state,\n        documents: documents,\n      }\n    }\n\n    case 'DOCUMENT_RECEIVED': {\n      const nextDocumentResult = action.payload as SanityDocument\n\n      return {\n        ...state,\n        documents: {\n          ...state.documents,\n          [nextDocumentResult._id]: nextDocumentResult,\n        },\n      }\n    }\n\n    case 'DOCUMENT_DELETED': {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const {[action.id]: _, ...restDocuments} = state.documents\n\n      return {\n        ...state,\n        documents: restDocuments,\n      }\n    }\n\n    case 'DOCUMENT_UPDATED': {\n      const updatedDocument = action.payload\n      const id = updatedDocument._id as string\n      const document = state.documents[id]\n\n      const nextDocument = {\n        // Add existing document data\n        ...document,\n        // Add incoming document data\n        ...updatedDocument,\n      } satisfies SanityDocument\n\n      return {\n        ...state,\n        documents: {\n          ...state.documents,\n          [id]: nextDocument,\n        },\n      }\n    }\n\n    default:\n      return state\n  }\n}\n\nconst LISTEN_OPTIONS: ListenOptions = {\n  events: ['welcome', 'mutation', 'reconnect'],\n  includeResult: true,\n  visibility: 'query',\n}\n\n/**\n * TODO:\n * [] Lazy load more documents, reduce initial fetch.\n * [] Add support for sorting and filtering.\n * []  Make a projection of the query according to the schema. e.g. get only the primitive fields and the _id to reduce the data payload.\n */\nexport function useDocumentSheetListStore({\n  filter,\n  params,\n  apiVersion,\n}: {\n  filter: string\n  params?: Record<string, unknown>\n  apiVersion?: string\n}) {\n  const QUERY = `*[${filter}][0...2000]`\n  const client = useClient({\n    ...DEFAULT_STUDIO_CLIENT_OPTIONS,\n    apiVersion: apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n  })\n  const [state, dispatch] = useReducer(documentsReducer, {\n    documents: {},\n  })\n  const [isLoading, setIsLoading] = useState<boolean>(client !== null)\n  const [error, setError] = useState<Error | null>(null)\n\n  const initialFetch = useCallback(async () => {\n    if (!client) {\n      setIsLoading(false)\n      return\n    }\n    try {\n      const res = await client.fetch(QUERY, params)\n      dispatch({type: 'DOCUMENTS_SET', documents: res})\n      setIsLoading(false)\n    } catch (err) {\n      setError(err)\n    }\n  }, [client, params, QUERY])\n\n  const handleListenerEvent = useCallback(\n    async (event: ListenEvent<Record<string, SanityDocument>>) => {\n      // Fetch all documents on initial connection\n      if (event.type === 'welcome') {\n        setIsLoading(true)\n        await initialFetch()\n        setIsLoading(false)\n      }\n\n      // The reconnect event means that we are trying to reconnect to the realtime listener.\n      // In this case we set loading to true to indicate that we're trying to\n      // reconnect. Once a connection has been established, the welcome event\n      // will be received and we'll fetch all documents again (above).\n      if (event.type === 'reconnect') {\n        setIsLoading(true)\n      }\n\n      // Handle mutations (create, update, delete) from the realtime listener\n      // and update the documents store accordingly\n      if (event.type === 'mutation') {\n        if (event.transition === 'appear') {\n          const nextDocument = event.result as SanityDocument | undefined\n\n          if (nextDocument) {\n            dispatch({\n              type: 'DOCUMENT_RECEIVED',\n              payload: nextDocument,\n            })\n          }\n        }\n\n        if (event.transition === 'disappear') {\n          dispatch({type: 'DOCUMENT_DELETED', id: event.documentId})\n        }\n\n        if (event.transition === 'update') {\n          const updatedDocument = event.result as SanityDocument | undefined\n\n          if (updatedDocument) {\n            dispatch({\n              type: 'DOCUMENT_UPDATED',\n              payload: updatedDocument,\n            })\n          }\n        }\n      }\n    },\n    [initialFetch],\n  )\n\n  const listener$ = useMemo(() => {\n    if (!client) return of()\n\n    const events$ = client.observable.listen(QUERY, params, LISTEN_OPTIONS).pipe(\n      catchError((err) => {\n        setError(err)\n        return of(err)\n      }),\n    )\n\n    return events$\n  }, [client, params, QUERY])\n\n  useEffect(() => {\n    const sub = listener$.subscribe(handleListenerEvent)\n\n    return () => {\n      sub?.unsubscribe()\n    }\n  }, [handleListenerEvent, listener$])\n\n  // Contemplate that we could have drafts and live documents here, merge them.\n  const dataAsArray = useMemo(() => {\n    // Joins the drafts and the live documents\n    const uniques = Object.keys(state.documents).reduce(\n      (acc: {[key: string]: SanityDocument}, key) => {\n        const document = state.documents[key]\n        const isDraft = document._id === getDraftId(document._id)\n        const id = isDraft ? document._id : getDraftId(document._id)\n        // If we already have the document, and this document is not the draft one, it means\n        // the draft hast already been added to the list, so we skip it.\n        if (acc[id] && !isDraft) {\n          return acc\n        }\n        acc[id] = document\n        return acc\n      },\n      {},\n    )\n    return Object.values(uniques)\n  }, [state.documents])\n\n  return {\n    data: dataAsArray,\n    isLoading,\n    error,\n  }\n}\n","import {useMemo} from 'react'\nimport {getPublishedId, useSearchState} from 'sanity'\n\nimport {useDocumentSheetListStore} from './useDocumentSheetListStore'\n\ninterface DocumentSheetListOptions {\n  /** The schemaType.name  */\n  typeName: string\n}\n\nexport function useDocumentSheetList({typeName}: DocumentSheetListOptions) {\n  const {state} = useSearchState()\n\n  const items = useMemo(() => {\n    const map = new Map()\n    state.result.hits.forEach((h) => map.set(getPublishedId(h.hit._id), h.hit))\n    return map\n  }, [state.result.hits])\n\n  // The store is listening to all the documents that match with the _type filter.\n  const {data, isLoading} = useDocumentSheetListStore({\n    filter: `_type == \"${typeName}\"`,\n  })\n\n  // Only return the documents that match with the serverSide filter items.\n  const documents = useMemo(() => {\n    return data.filter((doc) => items.has(getPublishedId(doc._id)))\n  }, [data, items])\n\n  return {data: documents, isLoading}\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {isDocumentSchemaType, type ObjectSchemaType, type SanityDocument} from '@sanity/types'\nimport {Box, Flex, Text} from '@sanity/ui'\nimport {\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  type Row,\n  useReactTable,\n} from '@tanstack/react-table'\nimport {useCallback, useEffect, useState} from 'react'\nimport {SearchProvider, useSchema, useSearchState} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {type BaseStructureToolPaneProps} from '../../types'\nimport {ColumnsControl} from './ColumnsControl'\nimport {DocumentSheetListFilter} from './DocumentSheetListFilter'\nimport {DocumentSheetListHeader} from './DocumentSheetListHeader'\nimport {DocumentSheetListPaginator} from './DocumentSheetListPaginator'\nimport {DocumentSheetListProvider} from './DocumentSheetListProvider'\nimport {SheetListCell} from './SheetListCell'\nimport {useDocumentSheetColumns} from './useDocumentSheetColumns'\nimport {useDocumentSheetList} from './useDocumentSheetList'\n\ntype DocumentSheetListPaneProps = BaseStructureToolPaneProps<'documentList'>\n\nconst PaneContainer = styled(Flex)`\n  height: 100%;\n`\nconst TableContainer = styled.div`\n  overflow: auto; //our scrollable table container\n  position: relative; //needed for sticky header\n`\nconst Table = styled.table`\n  border-collapse: separate;\n  border-spacing: 0;\n  font-family: arial, sans-serif;\n  white-space: nowrap;\n  width: 100%;\n  border: 1px solid lightgray;\n\n  thead {\n    display: grid;\n    position: sticky;\n    top: 0;\n    z-index: 10;\n  }\n  tr {\n    padding: 0;\n  }\n  tr:last-child {\n    border-bottom: none;\n  }\n`\n\nfunction DocumentSheetListPaneInner({\n  documentSchemaType,\n}: DocumentSheetListPaneProps & {documentSchemaType: ObjectSchemaType}) {\n  const {dispatch, state} = useSearchState()\n  const {columns, initialColumnsVisibility} = useDocumentSheetColumns(documentSchemaType)\n  const {data} = useDocumentSheetList({\n    typeName: documentSchemaType.name,\n  })\n  const [selectedAnchor, setSelectedAnchor] = useState<number | null>(null)\n\n  const totalRows = state.result.hits.length\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    // Avoids resetting the page index when the data changes, e.g. a mutation is received\n    autoResetPageIndex: false,\n    initialState: {\n      columnPinning: {left: ['selected', 'Preview']},\n      pagination: {pageSize: 25},\n      columnVisibility: initialColumnsVisibility,\n    },\n    getRowId: (row) => row._id,\n    meta: {\n      selectedAnchor,\n      setSelectedAnchor,\n      patchDocument: (documentId, fieldId, value) => null,\n    },\n  })\n\n  const {rows} = table.getRowModel()\n\n  useEffect(() => {\n    dispatch({type: 'TERMS_TYPE_ADD', schemaType: documentSchemaType})\n    return () => {\n      dispatch({type: 'TERMS_TYPE_REMOVE', schemaType: documentSchemaType})\n    }\n  }, [documentSchemaType, dispatch])\n\n  const renderRow = useCallback((row: Row<SanityDocument>) => {\n    return (\n      <Box\n        as=\"tr\"\n        key={row.original._id + row.id}\n        paddingY={2}\n        style={{display: 'flex', width: '100%'}}\n      >\n        {row.getVisibleCells().map((cell) => (\n          <SheetListCell {...cell} key={row.original._id + cell.id} />\n        ))}\n      </Box>\n    )\n  }, [])\n\n  const rowsCount = `Total: ${totalRows} rows, showing ${rows.length} rows`\n  return (\n    <PaneContainer direction=\"column\" paddingX={3} data-testid=\"document-sheet-list-pane\">\n      <Flex direction=\"row\" align=\"center\" paddingY={3} paddingX={1} justify=\"space-between\">\n        <Flex direction=\"row\" align=\"center\">\n          <DocumentSheetListFilter />\n          <Text size={0} muted>\n            {rowsCount}\n          </Text>\n        </Flex>\n        <ColumnsControl table={table} />\n      </Flex>\n      <TableContainer>\n        <DocumentSheetListProvider table={table}>\n          <Table>\n            <thead>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <Box as=\"tr\" key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => (\n                    <DocumentSheetListHeader\n                      key={header.id}\n                      header={header}\n                      headerGroup={headerGroup}\n                    />\n                  ))}\n                </Box>\n              ))}\n            </thead>\n            <tbody>{table.getRowModel().rows.map(renderRow)}</tbody>\n          </Table>\n        </DocumentSheetListProvider>\n      </TableContainer>\n      <Flex justify={'flex-end'} padding={3} gap={4} paddingY={5}>\n        <DocumentSheetListPaginator table={table} />\n      </Flex>\n    </PaneContainer>\n  )\n}\n\nexport function DocumentSheetListPane(props: DocumentSheetListPaneProps) {\n  const schema = useSchema()\n  const typeName = props.pane.schemaTypeName\n\n  const schemaType = schema.get(typeName)\n  if (!schemaType || !isDocumentSchemaType(schemaType)) {\n    throw new Error(`Schema type \"${typeName}\" not found or not a document schema`)\n  }\n  return (\n    <SearchProvider>\n      <DocumentSheetListPaneInner {...props} documentSchemaType={schemaType} />\n    </SearchProvider>\n  )\n}\n","import {Card, Code} from '@sanity/ui'\nimport {isEqual} from 'lodash'\nimport {memo, useMemo, useRef} from 'react'\nimport {\n  EMPTY_ARRAY,\n  type GeneralDocumentListLayoutKey,\n  SourceProvider,\n  useI18nText,\n  useSource,\n} from 'sanity'\nimport shallowEquals from 'shallow-equals'\n\nimport {Pane} from '../../components/pane'\nimport {_DEBUG} from '../../constants'\nimport {type PaneMenuItem} from '../../types'\nimport {useStructureToolSetting} from '../../useStructureToolSetting'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {DEFAULT_ORDERING, EMPTY_RECORD} from './constants'\nimport {DocumentListPane} from './DocumentListPane'\nimport {findStaticTypesInFilter} from './helpers'\nimport {PaneHeader} from './PaneHeader'\nimport {DocumentSheetListPane} from './sheetList/DocumentSheetListPane'\nimport {type SortOrder} from './types'\n\nconst addSelectedStateToMenuItems = (options: {\n  menuItems?: PaneMenuItem[]\n  sortOrderRaw?: SortOrder\n  layout?: GeneralDocumentListLayoutKey\n}) => {\n  const {menuItems, sortOrderRaw, layout} = options\n\n  return menuItems?.map((item) => {\n    if (item.params?.layout) {\n      return {\n        ...item,\n        selected: layout === item.params?.layout,\n      }\n    }\n\n    if (item?.params?.by) {\n      return {\n        ...item,\n        selected: isEqual(sortOrderRaw?.by, item?.params?.by || EMPTY_ARRAY),\n      }\n    }\n\n    return {...item, selected: false}\n  })\n}\n\nexport function useShallowUnique<ValueType>(value: ValueType): ValueType {\n  const valueRef = useRef<ValueType>(value)\n  if (!shallowEquals(valueRef.current, value)) {\n    valueRef.current = value\n  }\n  return valueRef.current\n}\n\n/**\n * @internal\n */\nexport const PaneContainer = memo(function PaneContainer(\n  props: BaseStructureToolPaneProps<'documentList'>,\n) {\n  const {index, isSelected, pane, paneKey} = props\n  const {name: parentSourceName} = useSource()\n\n  const {\n    defaultLayout = 'default',\n    initialValueTemplates = EMPTY_ARRAY,\n    menuItemGroups,\n    menuItems,\n    options,\n  } = pane\n  const {defaultOrdering = EMPTY_ARRAY, filter} = options\n  const params = useShallowUnique(options.params || EMPTY_RECORD)\n  const sourceName = pane.source\n  const typeName = useMemo(() => {\n    const staticTypes = findStaticTypesInFilter(filter, params)\n    if (staticTypes?.length === 1) return staticTypes[0]\n    return null\n  }, [filter, params])\n\n  const [layout, setLayout] = useStructureToolSetting<GeneralDocumentListLayoutKey>(\n    'layout',\n    typeName ?? pane.id, //pane.id for anything that is not documentTypeList\n    defaultLayout,\n  )\n\n  const {title} = useI18nText(pane)\n\n  // Ensure that we use the defaultOrdering value from structure builder if any as the default\n  const defaultSortOrder = useMemo(() => {\n    return defaultOrdering?.length > 0 ? {by: defaultOrdering} : DEFAULT_ORDERING\n  }, [defaultOrdering])\n\n  const [sortOrderRaw, setSortOrder] = useStructureToolSetting<SortOrder>(\n    'sort-order',\n    typeName ?? pane.id, //pane.id for anything that is not documentTypeList\n    defaultSortOrder,\n  )\n\n  const menuItemsWithSelectedState = useMemo(\n    () =>\n      addSelectedStateToMenuItems({\n        menuItems,\n        sortOrderRaw,\n        layout,\n      }),\n    [layout, menuItems, sortOrderRaw],\n  )\n\n  const isSheetListLayout = layout === 'sheetList'\n  const paneLayout = isSheetListLayout ? (\n    <DocumentSheetListPane {...props} key={props.pane.id} />\n  ) : (\n    <DocumentListPane {...props} sortOrder={sortOrderRaw} layout={layout} />\n  )\n\n  return (\n    <SourceProvider name={sourceName || parentSourceName}>\n      <Pane\n        data-ui=\"DocumentListPane\"\n        id={paneKey}\n        minWidth={320}\n        {...(isSheetListLayout ? {} : {currentMaxWidth: 350, maxWidth: 640})}\n        selected={isSelected}\n      >\n        {_DEBUG && (\n          <Card padding={4} tone=\"transparent\">\n            <Code>{pane.source || '(none)'}</Code>\n          </Card>\n        )}\n\n        <PaneHeader\n          index={index}\n          initialValueTemplates={initialValueTemplates}\n          menuItemGroups={menuItemGroups}\n          menuItems={menuItemsWithSelectedState}\n          setLayout={setLayout}\n          setSortOrder={setSortOrder}\n          title={title}\n        />\n        {paneLayout}\n      </Pane>\n    </SourceProvider>\n  )\n})\n","import {type SerializePath} from './StructureNodes'\n\n/** @internal */\nexport class SerializeError extends Error {\n  public readonly path: SerializePath\n  public helpId?: HELP_URL\n\n  constructor(\n    message: string,\n    parentPath: SerializePath,\n    pathSegment: string | number | undefined,\n    hint?: string,\n  ) {\n    super(message)\n    this.name = 'SerializeError'\n    const segment = typeof pathSegment === 'undefined' ? '<unknown>' : `${pathSegment}`\n    this.path = (parentPath || []).concat(hint ? `${segment} (${hint})` : segment)\n  }\n\n  withHelpUrl(id: HELP_URL): SerializeError {\n    this.helpId = id\n    return this\n  }\n}\n\n/** @internal */\nexport enum HELP_URL {\n  ID_REQUIRED = 'structure-node-id-required',\n  TITLE_REQUIRED = 'structure-title-required',\n  FILTER_REQUIRED = 'structure-filter-required',\n  INVALID_LIST_ITEM = 'structure-invalid-list-item',\n  COMPONENT_REQUIRED = 'structure-view-component-required',\n  DOCUMENT_ID_REQUIRED = 'structure-document-id-required',\n  DOCUMENT_TYPE_REQUIRED = 'structure-document-type-required',\n  SCHEMA_TYPE_REQUIRED = 'structure-schema-type-required',\n  SCHEMA_TYPE_NOT_FOUND = 'structure-schema-type-not-found',\n  LIST_ITEMS_MUST_BE_ARRAY = 'structure-list-items-must-be-array',\n  QUERY_PROVIDED_FOR_FILTER = 'structure-query-provided-for-filter',\n  ACTION_OR_INTENT_REQUIRED = 'structure-action-or-intent-required',\n  LIST_ITEM_IDS_MUST_BE_UNIQUE = 'structure-list-item-ids-must-be-unique',\n  ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE = 'structure-action-and-intent-mutually-exclusive',\n  API_VERSION_REQUIRED_FOR_CUSTOM_FILTER = 'structure-api-version-required-for-custom-filter',\n}\n","import {type SortOrdering} from '@sanity/types'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport const ORDER_BY_UPDATED_AT: SortOrdering = {\n  title: 'Last edited',\n  i18n: {\n    title: {\n      key: 'menu-items.sort-by.last-edited',\n      ns: structureLocaleNamespace,\n    },\n  },\n  name: 'lastEditedDesc',\n  by: [{field: '_updatedAt', direction: 'desc'}],\n}\n\nexport const ORDER_BY_CREATED_AT: SortOrdering = {\n  title: 'Created',\n  i18n: {\n    title: {\n      key: 'menu-items.sort-by.created',\n      ns: structureLocaleNamespace,\n    },\n  },\n  name: 'lastCreatedDesc',\n  by: [{field: '_createdAt', direction: 'desc'}],\n}\n\nexport const DEFAULT_SELECTED_ORDERING_OPTION = ORDER_BY_UPDATED_AT\n\nexport const DEFAULT_ORDERING_OPTIONS: SortOrdering[] = [\n  ORDER_BY_UPDATED_AT, // _updatedAt\n  ORDER_BY_CREATED_AT, // _createdAt\n]\n","import {SortIcon} from '@sanity/icons'\nimport {type SchemaType, type SortOrdering, type SortOrderingItem} from '@sanity/types'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type Intent} from './Intent'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {DEFAULT_ORDERING_OPTIONS} from './Sort'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {getExtendedProjection} from './util/getExtendedProjection'\n\n/** @internal */\nexport function maybeSerializeMenuItem(\n  item: MenuItem | MenuItemBuilder,\n  index: number,\n  path: SerializePath,\n): MenuItem {\n  return item instanceof MenuItemBuilder ? item.serialize({path, index}) : item\n}\n\n/**\n * Menu item action type\n * @public */\nexport type MenuItemActionType =\n  | string\n  | ((params: Record<string, string> | undefined, scope?: any) => void)\n\n/**\n * Menu items parameters\n *\n * @public */\nexport type MenuItemParamsType = Record<string, string | unknown | undefined>\n\n/**\n * Interface for menu items\n *\n * @public */\nexport interface MenuItem {\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /**\n   * Menu Item title. Note that the `i18n` configuration will take\n   * precedence and this title is left here as a fallback if no i18n key is\n   * provided and compatibility with older plugins\n   */\n  title: string\n  /** Menu Item action */\n  action?: MenuItemActionType\n  /** Menu Item intent */\n  intent?: Intent\n  /** Menu Item group */\n  group?: string\n  // TODO: align these with TemplateItem['icon']\n  /** Menu Item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** Menu Item parameters. See {@link MenuItemParamsType} */\n  params?: MenuItemParamsType\n  /** Determine if it will show the MenuItem as action */\n  showAsAction?: boolean\n}\n\n/**\n * Partial menu items\n * @public\n */\nexport type PartialMenuItem = Partial<MenuItem>\n\n/**\n * Class for building menu items.\n *\n * @public */\nexport class MenuItemBuilder implements Serializable<MenuItem> {\n  /** menu item option object. See {@link PartialMenuItem} */\n  protected spec: PartialMenuItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: MenuItem,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set menu item action\n   * @param action - menu item action. See {@link MenuItemActionType}\n   * @returns menu item builder based on action provided. See {@link MenuItemBuilder}\n   */\n  action(action: MenuItemActionType): MenuItemBuilder {\n    return this.clone({action})\n  }\n\n  /**\n   * Get menu item action\n   * @returns menu item builder action. See {@link PartialMenuItem}\n   */\n  getAction(): PartialMenuItem['action'] {\n    return this.spec.action\n  }\n\n  /**\n   * Set menu item intent\n   * @param intent - menu item intent. See {@link Intent}\n   * @returns menu item builder based on intent provided. See {@link MenuItemBuilder}\n   */\n  intent(intent: Intent): MenuItemBuilder {\n    return this.clone({intent})\n  }\n\n  /**\n   * Get menu item intent\n   * @returns menu item intent. See {@link PartialMenuItem}\n   */\n  getIntent(): PartialMenuItem['intent'] {\n    return this.spec.intent\n  }\n\n  /**\n   * Set menu item title\n   * @param title - menu item title\n   * @returns menu item builder based on title provided. See {@link MenuItemBuilder}\n   */\n  title(title: string): MenuItemBuilder {\n    return this.clone({title})\n  }\n\n  /**\n   * Get menu item title. Note that the `i18n` configuration will take\n   * precedence and this title is left here for compatibility.\n   * @returns menu item title\n   */\n  getTitle(): string | undefined {\n    return this.spec.title\n  }\n\n  /**\n   * Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - object with i18n key and related namespace\n   * @returns menu item builder based on i18n config provided. See {@link MenuItemBuilder}\n   */\n  i18n(i18n: I18nTextRecord<'title'>): MenuItemBuilder {\n    return this.clone({i18n})\n  }\n\n  /**\n   * Get the i18n key and namespace used to populate the localized title.\n   * @returns the i18n key and namespace used to populate the localized title.\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /**\n   * Set menu item group\n   * @param group - menu item group\n   * @returns menu item builder based on group provided. See {@link MenuItemBuilder}\n   */\n  group(group: string): MenuItemBuilder {\n    return this.clone({group})\n  }\n\n  /**\n   * Get menu item group\n   * @returns menu item group. See {@link PartialMenuItem}\n   */\n  getGroup(): PartialMenuItem['group'] {\n    return this.spec.group\n  }\n\n  /**\n   * Set menu item icon\n   * @param icon - menu item icon\n   * @returns menu item builder based on icon provided. See {@link MenuItemBuilder}\n   */\n  icon(icon: React.ComponentType | React.ReactNode): MenuItemBuilder {\n    return this.clone({icon})\n  }\n\n  /**\n   * Get menu item icon\n   * @returns menu item icon. See {@link PartialMenuItem}\n   */\n  getIcon(): PartialMenuItem['icon'] {\n    return this.spec.icon\n  }\n\n  /**\n   * Set menu item parameters\n   * @param params - menu item parameters. See {@link MenuItemParamsType}\n   * @returns menu item builder based on parameters provided. See {@link MenuItemBuilder}\n   */\n  params(params: MenuItemParamsType): MenuItemBuilder {\n    return this.clone({params})\n  }\n\n  /**\n   * Get meny item parameters\n   * @returns menu item parameters. See {@link PartialMenuItem}\n   */\n  getParams(): PartialMenuItem['params'] {\n    return this.spec.params\n  }\n\n  /**\n   * Set menu item to show as action\n   * @param showAsAction - determine if menu item should show as action\n   * @returns menu item builder based on if it should show as action. See {@link MenuItemBuilder}\n   */\n  showAsAction(showAsAction = true): MenuItemBuilder {\n    return this.clone({showAsAction: Boolean(showAsAction)})\n  }\n\n  /**\n   * Check if menu item should show as action\n   * @returns true if menu item should show as action, false if not. See {@link PartialMenuItem}\n   */\n  getShowAsAction(): PartialMenuItem['showAsAction'] {\n    return this.spec.showAsAction\n  }\n\n  /** Serialize menu item builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns menu item node based on path provided in options. See {@link MenuItem}\n   */\n  serialize(options: SerializeOptions = {path: []}): MenuItem {\n    const {title, action, intent} = this.spec\n    if (!title) {\n      const hint = typeof action === 'string' ? `action: \"${action}\"` : undefined\n      throw new SerializeError(\n        '`title` is required for menu item',\n        options.path,\n        options.index,\n        hint,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    if (!action && !intent) {\n      throw new SerializeError(\n        `\\`action\\` or \\`intent\\` required for menu item with title ${this.spec.title}`,\n        options.path,\n        options.index,\n        `\"${title}\"`,\n      ).withHelpUrl(HELP_URL.ACTION_OR_INTENT_REQUIRED)\n    }\n\n    if (intent && action) {\n      throw new SerializeError(\n        'cannot set both `action` AND `intent`',\n        options.path,\n        options.index,\n        `\"${title}\"`,\n      ).withHelpUrl(HELP_URL.ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE)\n    }\n\n    return {...this.spec, title}\n  }\n\n  /** Clone menu item builder\n   * @param withSpec - menu item options. See {@link PartialMenuItem}\n   * @returns menu item builder based on context and spec provided. See {@link MenuItemBuilder}\n   */\n  clone(withSpec?: PartialMenuItem): MenuItemBuilder {\n    const builder = new MenuItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n\n/** @internal */\nexport interface SortMenuItem extends MenuItem {\n  params: {\n    by: SortOrderingItem[]\n  }\n}\n\n/** @internal */\nexport function getOrderingMenuItem(\n  context: StructureContext,\n  {by, title, i18n}: SortOrdering,\n  extendedProjection?: string,\n): MenuItemBuilder {\n  let builder = new MenuItemBuilder(context)\n    .group('sorting')\n    .title(\n      context.i18n.t('default-menu-item.fallback-title', {\n        // note this lives in the `studio` bundle because that one is loaded by default\n        ns: 'studio',\n        replace: {title}, // replaces the `{{title}}` option\n      }),\n    ) // fallback title\n    .icon(SortIcon)\n    .action('setSortOrder')\n    .params({by, extendedProjection})\n\n  if (i18n) {\n    builder = builder.i18n(i18n)\n  }\n\n  return builder\n}\n\n/** @internal */\nexport function getOrderingMenuItemsForSchemaType(\n  context: StructureContext,\n  typeName: SchemaType | string,\n): MenuItemBuilder[] {\n  const {schema} = context\n  const type = typeof typeName === 'string' ? schema.get(typeName) : typeName\n  if (!type || !('orderings' in type)) {\n    return []\n  }\n\n  return (\n    type.orderings ? type.orderings.concat(DEFAULT_ORDERING_OPTIONS) : DEFAULT_ORDERING_OPTIONS\n  ).map((ordering: SortOrdering) =>\n    getOrderingMenuItem(context, ordering, getExtendedProjection(type, ordering.by)),\n  )\n}\n","import {type I18nTextRecord} from 'sanity'\n\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/** @internal */\nexport function maybeSerializeMenuItemGroup(\n  item: MenuItemGroup | MenuItemGroupBuilder,\n  index: number,\n  path: SerializePath,\n): MenuItemGroup {\n  return item instanceof MenuItemGroupBuilder ? item.serialize({path, index}) : item\n}\n\n/**\n * Interface for menu item groups\n * @public\n */\nexport interface MenuItemGroup {\n  /** Menu group Id */\n  id: string\n  /** Menu group title */\n  title: string\n  i18n?: I18nTextRecord<'title'>\n}\n\n/**\n * Class for building menu item groups.\n *\n * @public\n */\nexport class MenuItemGroupBuilder implements Serializable<MenuItemGroup> {\n  /** Menu item group ID */\n  protected _id: string\n  /** Menu item group title */\n  protected _title: string\n\n  protected _i18n?: I18nTextRecord<'title'>\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: MenuItemGroup,\n  ) {\n    this._id = spec ? spec.id : ''\n    this._title = spec ? spec.title : ''\n    this._i18n = spec ? spec.i18n : undefined\n  }\n\n  /**\n   * Set menu item group ID\n   * @param id - menu item group ID\n   * @returns menu item group builder based on ID provided. See {@link MenuItemGroupBuilder}\n   */\n  id(id: string): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {id, title: this._title, i18n: this._i18n})\n  }\n\n  /**\n   * Get menu item group ID\n   * @returns menu item group ID\n   */\n  getId(): string {\n    return this._id\n  }\n\n  /**\n   * Set menu item group title\n   * @param title - menu item group title\n   * @returns menu item group builder based on title provided. See {@link MenuItemGroupBuilder}\n   */\n  title(title: string): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {title, id: this._id, i18n: this._i18n})\n  }\n\n  /**\n   * Get menu item group title\n   * @returns menu item group title\n   */\n  getTitle(): string {\n    return this._title\n  }\n\n  /**\n   * Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - object with i18n key and related namespace\n   * @returns menu item group builder based on i18n info provided. See {@link MenuItemGroupBuilder}\n   */\n  i18n(i18n: I18nTextRecord<'title'>): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {i18n, id: this._id, title: this._title})\n  }\n\n  /**\n   * Get the i18n key and namespace used to populate the localized title.\n   * @returns the i18n key and namespace used to populate the localized title.\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this._i18n\n  }\n\n  /**\n   * Serialize menu item group builder\n   * @param options - serialization options (path). See {@link SerializeOptions}\n   * @returns menu item group based on path provided in options. See {@link MenuItemGroup}\n   */\n  serialize(options: SerializeOptions = {path: []}): MenuItemGroup {\n    const {_id, _title, _i18n} = this\n    if (!_id) {\n      throw new SerializeError(\n        '`id` is required for a menu item group',\n        options.path,\n        options.index,\n        _title,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!_title) {\n      throw new SerializeError(\n        '`title` is required for a menu item group',\n        options.path,\n        _id,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    return {\n      id: _id,\n      title: _title,\n      i18n: _i18n,\n    }\n  }\n}\n","import {SerializeError} from '../SerializeError'\nimport {type SerializePath} from '../StructureNodes'\n\nexport const disallowedPattern = /([^A-Za-z0-9-_.])/\n\nexport function validateId(\n  id: string,\n  parentPath: SerializePath,\n  pathSegment: string | number | undefined,\n): string {\n  if (typeof id !== 'string') {\n    throw new SerializeError(\n      `Structure node id must be of type string, got ${typeof id}`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  const [disallowedChar] = id.match(disallowedPattern) || []\n  if (disallowedChar) {\n    throw new SerializeError(\n      `Structure node id cannot contain character \"${disallowedChar}\"`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  if (id.startsWith('__edit__')) {\n    throw new SerializeError(\n      `Structure node id cannot start with __edit__`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  return id\n}\n","import {camelCase} from 'lodash'\nimport getSlug from 'speakingurl'\n\nimport {disallowedPattern} from './validateId'\n\nexport function getStructureNodeId(title: string, id?: string): string {\n  if (id) {\n    return id\n  }\n\n  const camelCased = camelCase(title)\n\n  return disallowedPattern.test(camelCased) ? camelCase(getSlug(title)) : camelCased\n}\n","import {type I18nTextRecord} from 'sanity'\n\nimport {type IntentChecker} from './Intent'\nimport {maybeSerializeMenuItem, type MenuItem, type MenuItemBuilder} from './MenuItem'\nimport {\n  maybeSerializeMenuItemGroup,\n  type MenuItemGroup,\n  type MenuItemGroupBuilder,\n} from './MenuItemGroup'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type Serializable,\n  type SerializeOptions,\n  type StructureNode,\n} from './StructureNodes'\nimport {type UserComponent} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\n/**\n * Interface for component\n *\n * @public\n */\n// TODO: rename to `StructureComponent` since it clashes with React?\nexport interface Component extends StructureNode {\n  /** Component of type {@link UserComponent} */\n  component: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component menu items, array of type {@link MenuItem} */\n  menuItems: MenuItem[]\n  /** Component menu item group, array of type {@link MenuItemGroup} */\n  menuItemGroups: MenuItemGroup[]\n  /** Component options */\n  options: {[key: string]: unknown}\n  canHandleIntent?: IntentChecker\n}\n\n/**\n * Interface for component input\n *\n * @public\n */\nexport interface ComponentInput extends StructureNode {\n  /** Component of type {@link UserComponent} */\n  component: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component options */\n  options?: {[key: string]: unknown}\n  /** Component menu items. See {@link MenuItem} and {@link MenuItemBuilder}  */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Component menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n}\n\n/**\n * Interface for buildable component\n *\n * @public\n */\nexport interface BuildableComponent extends Partial<StructureNode> {\n  /** Component of type {@link UserComponent} */\n  component?: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component options */\n  options?: {[key: string]: unknown}\n  /** Component menu items. See {@link MenuItem} and {@link MenuItemBuilder}  */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Component menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n  canHandleIntent?: IntentChecker\n}\n\n/**\n * Class for building components\n *\n * @public\n */\nexport class ComponentBuilder implements Serializable<Component> {\n  /** component builder option object */\n  protected spec: BuildableComponent\n\n  constructor(spec?: ComponentInput) {\n    this.spec = {options: {}, ...(spec ? spec : {})}\n  }\n\n  /** Set Component ID\n   * @param id - component ID\n   * @returns component builder based on ID provided\n   */\n  id(id: string): ComponentBuilder {\n    return this.clone({id})\n  }\n\n  /** Get ID\n   * @returns ID\n   */\n  getId(): BuildableComponent['id'] {\n    return this.spec.id\n  }\n\n  /** Set Component title\n   * @param title - component title\n   * @returns component builder based on title provided (and ID)\n   */\n  title(title: string): ComponentBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get Component title\n   * @returns title\n   */\n  getTitle(): BuildableComponent['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ComponentBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /** Set Component child\n   * @param child - child component\n   * @returns component builder based on child component provided\n   */\n  child(child: Child): ComponentBuilder {\n    return this.clone({child})\n  }\n\n  /** Get Component child\n   * @returns child component\n   */\n  getChild(): BuildableComponent['child'] {\n    return this.spec.child\n  }\n\n  /** Set component\n   * @param component - user built component\n   * @returns component builder based on component provided\n   */\n  component(component: UserComponent): ComponentBuilder {\n    return this.clone({component})\n  }\n\n  /** Get Component\n   * @returns component\n   */\n  getComponent(): BuildableComponent['component'] {\n    return this.spec.component\n  }\n\n  /** Set Component options\n   * @param options - component options\n   * @returns component builder based on options provided\n   */\n  options(options: {[key: string]: unknown}): ComponentBuilder {\n    return this.clone({options})\n  }\n\n  /** Get Component options\n   * @returns component options\n   */\n  getOptions(): NonNullable<BuildableComponent['options']> {\n    return this.spec.options || {}\n  }\n\n  /** Set Component menu items\n   * @param menuItems - component menu items\n   * @returns component builder based on menuItems provided\n   */\n  menuItems(menuItems: (MenuItem | MenuItemBuilder)[]): ComponentBuilder {\n    return this.clone({menuItems})\n  }\n\n  /** Get Component menu items\n   * @returns menu items\n   */\n  getMenuItems(): BuildableComponent['menuItems'] {\n    return this.spec.menuItems\n  }\n\n  /** Set Component menu item groups\n   * @param menuItemGroups - component menu item groups\n   * @returns component builder based on menuItemGroups provided\n   */\n  menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ComponentBuilder {\n    return this.clone({menuItemGroups})\n  }\n\n  /** Get Component menu item groups\n   * @returns menu item groups\n   */\n  getMenuItemGroups(): BuildableComponent['menuItemGroups'] {\n    return this.spec.menuItemGroups\n  }\n\n  canHandleIntent(canHandleIntent: IntentChecker): ComponentBuilder {\n    return this.clone({canHandleIntent})\n  }\n\n  /** Serialize component\n   * @param options - serialization options\n   * @returns component object based on path provided in options\n   *\n   */\n  serialize(options: SerializeOptions = {path: []}): Component {\n    const {id, title, child, options: componentOptions, component} = this.spec\n    if (!id) {\n      throw new SerializeError(\n        '`id` is required for `component` structure item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!component) {\n      throw new SerializeError(\n        '`component` is required for `component` structure item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    return {\n      id: validateId(id, options.path, options.index),\n      title,\n      type: 'component',\n      child,\n      component,\n      canHandleIntent: this.spec.canHandleIntent,\n      options: componentOptions || {},\n      menuItems: (this.spec.menuItems || []).map((item, i) =>\n        maybeSerializeMenuItem(item, i, options.path),\n      ),\n      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) =>\n        maybeSerializeMenuItemGroup(item, i, options.path),\n      ),\n    }\n  }\n\n  /** Clone component builder (allows for options overriding)\n   * @param withSpec - component builder options\n   * @returns cloned builder\n   */\n  clone(withSpec?: BuildableComponent): ComponentBuilder {\n    const builder = new ComponentBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SanityClient} from '@sanity/client'\nimport {\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  getDraftId,\n  getPublishedId,\n  type SourceClientOptions,\n} from 'sanity'\n\nexport async function resolveTypeForDocument(\n  getClient: (options: SourceClientOptions) => SanityClient,\n  id: string,\n): Promise<string | undefined> {\n  const query = '*[_id in [$documentId, $draftId]]._type'\n  const documentId = getPublishedId(id)\n  const draftId = getDraftId(id)\n\n  const types = await getClient(DEFAULT_STUDIO_CLIENT_OPTIONS).fetch(\n    query,\n    {documentId, draftId},\n    {tag: 'structure.resolve-type'},\n  )\n\n  return types[0]\n}\n","import {kebabCase} from 'lodash'\n\nimport {HELP_URL, SerializeError} from '../SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from '../StructureNodes'\nimport {type View} from '../types'\nimport {validateId} from '../util/validateId'\nimport {type ComponentViewBuilder} from './ComponentView'\nimport {type FormViewBuilder} from './FormView'\n\n/**\n * Interface for base view\n *\n * @public */\nexport interface BaseView {\n  /** View id */\n  id: string\n  /** View Title */\n  title: string\n  /** View Icon */\n  icon?: React.ComponentType | React.ReactNode\n}\n\n/**\n * Class for building generic views.\n *\n * @public\n */\nexport abstract class GenericViewBuilder<TView extends Partial<BaseView>, ConcreteImpl>\n  implements Serializable<BaseView>\n{\n  /** Generic view option object */\n  protected spec: TView = {} as TView\n\n  /** Set generic view ID\n   * @param id - generic view ID\n   * @returns generic view builder based on ID provided.\n   */\n  id(id: string): ConcreteImpl {\n    return this.clone({id})\n  }\n  /** Get generic view ID\n   * @returns generic view ID\n   */\n  getId(): TView['id'] {\n    return this.spec.id\n  }\n\n  /** Set generic view title\n   * @param title - generic view title\n   * @returns generic view builder based on title provided and (if provided) its ID.\n   */\n  title(title: string): ConcreteImpl {\n    return this.clone({title, id: this.spec.id || kebabCase(title)})\n  }\n\n  /** Get generic view title\n   * @returns generic view title\n   */\n  getTitle(): TView['title'] {\n    return this.spec.title\n  }\n\n  /** Set generic view icon\n   * @param icon - generic view icon\n   * @returns generic view builder based on icon provided.\n   */\n  icon(icon: React.ComponentType | React.ReactNode): ConcreteImpl {\n    return this.clone({icon})\n  }\n\n  /** Get generic view icon\n   * @returns generic view icon\n   */\n  getIcon(): TView['icon'] {\n    return this.spec.icon\n  }\n\n  /** Serialize generic view\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns generic view object based on path provided in options. See {@link BaseView}\n   */\n  serialize(options: SerializeOptions = {path: []}): BaseView {\n    const {id, title, icon} = this.spec\n    if (!id) {\n      throw new SerializeError(\n        '`id` is required for view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!title) {\n      throw new SerializeError(\n        '`title` is required for view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    return {\n      id: validateId(id, options.path, options.index),\n      title,\n      icon,\n    }\n  }\n\n  /** Clone generic view builder (allows for options overriding)\n   * @param withSpec - Partial generic view builder options. See {@link BaseView}\n   * @returns Generic view builder.\n   */\n  abstract clone(withSpec?: Partial<BaseView>): ConcreteImpl\n}\n\nfunction isSerializable(view: BaseView | Serializable<BaseView>): view is Serializable<BaseView> {\n  return typeof (view as Serializable<BaseView>).serialize === 'function'\n}\n\n/** @internal */\nexport function maybeSerializeView(\n  item: View | Serializable<View>,\n  index: number,\n  path: SerializePath,\n): View {\n  return isSerializable(item) ? item.serialize({path, index}) : item\n}\n\n/**\n * View builder. See {@link ComponentViewBuilder} and {@link FormViewBuilder}\n *\n * @public\n */\nexport type ViewBuilder = ComponentViewBuilder | FormViewBuilder\n","import {isRecord} from 'sanity'\n\nimport {HELP_URL, SerializeError} from '../SerializeError'\nimport {type SerializeOptions} from '../StructureNodes'\nimport {type UserViewComponent} from '../types'\nimport {type BaseView, GenericViewBuilder} from './View'\n\n/**\n * Interface for component views.\n *\n * @public */\nexport interface ComponentView<TOptions = Record<string, any>> extends BaseView {\n  type: 'component'\n  /** Component view components. See {@link UserViewComponent} */\n  component: UserViewComponent\n  /** Component view options */\n  options: TOptions\n}\n\nconst isComponentSpec = (spec: unknown): spec is ComponentView =>\n  isRecord(spec) && spec.type === 'component'\n\n/**\n * Class for building a component view.\n *\n * @public */\nexport class ComponentViewBuilder extends GenericViewBuilder<\n  Partial<ComponentView>,\n  ComponentViewBuilder\n> {\n  /** Partial Component view option object. See {@link ComponentView} */\n  protected spec: Partial<ComponentView>\n\n  constructor(\n    /**\n     * Component view component or spec\n     * @param componentOrSpec - user view component or partial component view. See {@link UserViewComponent} and {@link ComponentView}\n     */\n    componentOrSpec?: UserViewComponent | Partial<ComponentView>,\n  ) {\n    const spec = isComponentSpec(componentOrSpec) ? {...componentOrSpec} : {options: {}}\n\n    super()\n    this.spec = spec\n\n    const userComponent =\n      typeof componentOrSpec === 'function' ? componentOrSpec : this.spec.component\n\n    if (userComponent) {\n      // Because we're cloning, this'll return a new instance, so grab the spec from it\n      this.spec = this.component(userComponent).spec\n    }\n  }\n\n  /** Set view Component\n   * @param component - component view component. See {@link UserViewComponent}\n   * @returns component view builder based on component view provided. See {@link ComponentViewBuilder}\n   */\n  component(component: UserViewComponent): ComponentViewBuilder {\n    return this.clone({component})\n  }\n\n  /** Get view Component\n   * @returns Partial component view. See {@link ComponentView}\n   */\n  getComponent(): Partial<ComponentView>['component'] {\n    return this.spec.component\n  }\n\n  /** Set view Component options\n   * @param options - component view options\n   * @returns component view builder based on options provided. See {@link ComponentViewBuilder}\n   */\n  options(options: {[key: string]: any}): ComponentViewBuilder {\n    return this.clone({options})\n  }\n\n  /** Get view Component options\n   * @returns component view options. See {@link ComponentView}\n   */\n  getOptions(): ComponentView['options'] {\n    return this.spec.options || {}\n  }\n\n  /** Serialize view Component\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns component view based on path provided in options. See {@link ComponentView}\n   *\n   */\n  serialize(options: SerializeOptions = {path: []}): ComponentView {\n    const base = super.serialize(options)\n\n    const component = this.spec.component\n    if (typeof component !== 'function') {\n      throw new SerializeError(\n        '`component` is required and must be a function for `component()` view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.COMPONENT_REQUIRED)\n    }\n\n    return {\n      ...base,\n      component,\n      options: this.spec.options || {},\n      type: 'component',\n    }\n  }\n\n  /** Clone Component view builder (allows for options overriding)\n   * @param withSpec - partial for component view option. See {@link ComponentView}\n   * @returns component view builder. See {@link ComponentViewBuilder}\n   */\n  clone(withSpec?: Partial<ComponentView>): ComponentViewBuilder {\n    const builder = new ComponentViewBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SerializeOptions} from '../StructureNodes'\nimport {type BaseView, GenericViewBuilder} from './View'\n\n/**\n * Interface for form views.\n *\n * @public */\nexport interface FormView extends BaseView {\n  type: 'form'\n}\n\n/**\n * Class for building a form view.\n *\n * @public */\nexport class FormViewBuilder extends GenericViewBuilder<Partial<BaseView>, FormViewBuilder> {\n  /** Document list options. See {@link FormView} */\n  protected spec: Partial<FormView>\n\n  constructor(spec?: Partial<FormView>) {\n    super()\n    this.spec = {id: 'editor', title: 'Editor', ...(spec ? spec : {})}\n  }\n\n  /**\n   * Serialize Form view builder\n   * @param options - Serialize options. See {@link SerializeOptions}\n   * @returns form view builder based on path provided in options. See {@link FormView}\n   */\n  serialize(options: SerializeOptions = {path: []}): FormView {\n    return {\n      ...super.serialize(options),\n      type: 'form',\n    }\n  }\n\n  /**\n   * Clone Form view builder (allows for options overriding)\n   * @param withSpec - Partial form view builder options. See {@link FormView}\n   * @returns form view builder. See {@link FormViewBuilder}\n   */\n  clone(withSpec?: Partial<FormView>): FormViewBuilder {\n    const builder = new FormViewBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type UserViewComponent} from '../types'\nimport {type ComponentView, ComponentViewBuilder} from './ComponentView'\nimport {type FormView, FormViewBuilder} from './FormView'\n\nexport * from './ComponentView'\nexport * from './FormView'\nexport * from './View'\n\n/** @internal */\nexport const form = (spec?: Partial<FormView>): FormViewBuilder => new FormViewBuilder(spec)\n\n/** @internal */\nexport const component = (\n  componentOrSpec?: UserViewComponent | Partial<ComponentView>,\n): ComponentViewBuilder => new ComponentViewBuilder(componentOrSpec)\n","import {type SchemaType} from '@sanity/types'\nimport {uniq} from 'lodash'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type ChildResolver} from './ChildResolver'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type DocumentNode,\n  type EditorNode,\n  type Serializable,\n  type SerializeOptions,\n} from './StructureNodes'\nimport {type StructureContext, type View} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {resolveTypeForDocument} from './util/resolveTypeForDocument'\nimport {validateId} from './util/validateId'\nimport {form} from './views'\nimport {maybeSerializeView, type ViewBuilder} from './views/View'\n\nconst createDocumentChildResolver =\n  ({resolveDocumentNode, getClient}: StructureContext): ChildResolver =>\n  async (itemId, {params, path}) => {\n    let type = params.type\n\n    const parentPath = path.slice(0, path.length - 1)\n    const currentSegment = path[path.length - 1]\n\n    if (!type) {\n      type = await resolveTypeForDocument(getClient, itemId)\n    }\n\n    if (!type) {\n      throw new SerializeError(\n        `Failed to resolve document, and no type provided in parameters.`,\n        parentPath,\n        currentSegment,\n      )\n    }\n\n    return resolveDocumentNode({documentId: itemId, schemaType: type})\n  }\n\n/**\n * Interface for options of Partial Documents. See {@link PartialDocumentNode}\n *\n * @public */\nexport interface DocumentOptions {\n  /** Document Id */\n  id: string\n  /** Document Type */\n  type: string\n  /** Document Template */\n  template?: string\n  /** Template parameters */\n  templateParameters?: Record<string, unknown>\n}\n\n/**\n * Interface for partial document (focused on the document pane)\n *\n * @public */\nexport interface PartialDocumentNode {\n  /** Document Id */\n  id?: string\n  /** Document title */\n  title?: string\n  /** I18n key and namespace used to populate the localized title */\n  i18n?: I18nTextRecord<'title'>\n  /** Document children of type {@link Child} */\n  child?: Child\n  /**\n   * Views for the document pane. See {@link ViewBuilder} and {@link View}\n   */\n  views?: (View | ViewBuilder)[]\n  /**\n   * Document options. See {@link DocumentOptions}\n   */\n  options?: Partial<DocumentOptions>\n}\n\n/**\n * A `DocumentBuilder` is used to build a document node.\n *\n * @public */\nexport class DocumentBuilder implements Serializable<DocumentNode> {\n  /** Component builder option object See {@link PartialDocumentNode} */\n  protected spec: PartialDocumentNode\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: PartialDocumentNode,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /** Set Document Builder ID\n   * @param id - document builder ID\n   * @returns document builder based on ID provided. See {@link DocumentBuilder}\n   */\n  id(id: string): DocumentBuilder {\n    return this.clone({id})\n  }\n\n  /** Get Document Builder ID\n   * @returns document ID. See {@link PartialDocumentNode}\n   */\n  getId(): PartialDocumentNode['id'] {\n    return this.spec.id\n  }\n\n  /** Set Document title\n   * @param title - document title\n   * @returns document builder based on title provided (and ID). See {@link DocumentBuilder}\n   */\n  title(title: string): DocumentBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get Document title\n   * @returns document title. See {@link PartialDocumentNode}\n   */\n  getTitle(): PartialDocumentNode['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): DocumentBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /** Set Document child\n   * @param child - document child\n   * @returns document builder based on child provided. See {@link DocumentBuilder}\n   */\n  child(child: Child): DocumentBuilder {\n    return this.clone({child})\n  }\n\n  /** Get Document child\n   * @returns document child. See {@link PartialDocumentNode}\n   */\n  getChild(): PartialDocumentNode['child'] {\n    return this.spec.child\n  }\n\n  /** Set Document ID\n   * @param documentId - document ID\n   * @returns document builder with document based on ID provided. See {@link DocumentBuilder}\n   */\n  documentId(documentId: string): DocumentBuilder {\n    // Let's try to be a bit helpful and assign an ID from document ID if none is specified\n    const paneId = this.spec.id || documentId\n    return this.clone({\n      id: paneId,\n      options: {\n        ...(this.spec.options || {}),\n        id: documentId,\n      },\n    })\n  }\n\n  /** Get Document ID\n   * @returns document ID. See {@link DocumentOptions}\n   */\n  getDocumentId(): Partial<DocumentOptions>['id'] {\n    return this.spec.options?.id\n  }\n\n  /** Set Document Type\n   * @param documentType - document type\n   * @returns document builder with document based on type provided. See {@link DocumentBuilder}\n   */\n  schemaType(documentType: SchemaType | string): DocumentBuilder {\n    return this.clone({\n      options: {\n        ...(this.spec.options || {}),\n        type: typeof documentType === 'string' ? documentType : documentType.name,\n      },\n    })\n  }\n\n  /** Get Document Type\n   * @returns document type. See {@link DocumentOptions}\n   */\n  getSchemaType(): Partial<DocumentOptions>['type'] {\n    return this.spec.options?.type\n  }\n\n  /** Set Document Template\n   * @param templateId - document template ID\n   * @param parameters - document template parameters\n   * @returns document builder with document based on template provided. See {@link DocumentBuilder}\n   */\n  initialValueTemplate(templateId: string, parameters?: Record<string, unknown>): DocumentBuilder {\n    return this.clone({\n      options: {\n        ...(this.spec.options || {}),\n        template: templateId,\n        templateParameters: parameters,\n      },\n    })\n  }\n\n  /** Get Document Template\n   * @returns document template. See {@link DocumentOptions}\n   */\n  getInitialValueTemplate(): Partial<DocumentOptions>['template'] {\n    return this.spec.options?.template\n  }\n\n  /** Get Document's initial value Template parameters\n   * @returns document template parameters. See {@link DocumentOptions}\n   */\n  getInitialValueTemplateParameters(): Partial<DocumentOptions>['templateParameters'] {\n    return this.spec.options?.templateParameters\n  }\n\n  /** Set Document views\n   * @param views - document views. See {@link ViewBuilder} and {@link View}\n   * @returns document builder with document based on views provided. See {@link DocumentBuilder}\n   */\n  views(views: (View | ViewBuilder)[]): DocumentBuilder {\n    return this.clone({views})\n  }\n\n  /** Get Document views\n   * @returns document views. See {@link ViewBuilder} and {@link View}\n   */\n  getViews(): (View | ViewBuilder)[] {\n    return this.spec.views || []\n  }\n\n  /** Serialize Document builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document node based on path, index and hint provided in options. See {@link DocumentNode}\n   */\n  serialize({path = [], index, hint}: SerializeOptions = {path: []}): DocumentNode {\n    const urlId = path[index || path.length - 1]\n\n    // Try to grab document ID / editor ID from URL if not defined\n    const id = this.spec.id || (urlId && `${urlId}`) || ''\n    const options: Partial<DocumentOptions> = {\n      id,\n      type: undefined,\n      template: undefined,\n      templateParameters: undefined,\n      ...this.spec.options,\n    }\n\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for document nodes',\n        path,\n        index,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!options || !options.id) {\n      throw new SerializeError(\n        'document id (`id`) is required for document nodes',\n        path,\n        id,\n        hint,\n      ).withHelpUrl(HELP_URL.DOCUMENT_ID_REQUIRED)\n    }\n\n    if (!options || !options.type) {\n      throw new SerializeError(\n        'document type (`schemaType`) is required for document nodes',\n        path,\n        id,\n        hint,\n      )\n    }\n\n    const views = (this.spec.views && this.spec.views.length > 0 ? this.spec.views : [form()]).map(\n      (item, i) => maybeSerializeView(item, i, path),\n    )\n\n    const viewIds = views.map((view) => view.id)\n    const dupes = uniq(viewIds.filter((viewId, i) => viewIds.includes(viewId, i + 1)))\n    if (dupes.length > 0) {\n      throw new SerializeError(\n        `document node has views with duplicate IDs: ${dupes.join(',  ')}`,\n        path,\n        id,\n        hint,\n      )\n    }\n\n    return {\n      ...this.spec,\n      child: this.spec.child || createDocumentChildResolver(this._context),\n      id: validateId(id, path, index),\n      type: 'document',\n      options: getDocumentOptions(options),\n      views,\n    }\n  }\n\n  /** Clone Document builder\n   * @param withSpec - partial document node specification used to extend the cloned builder. See {@link PartialDocumentNode}\n   * @returns document builder based on context and spec provided. See {@link DocumentBuilder}\n   */\n  clone(withSpec: PartialDocumentNode = {}): DocumentBuilder {\n    const builder = new DocumentBuilder(this._context)\n    const options = {...(this.spec.options || {}), ...(withSpec.options || {})}\n    builder.spec = {...this.spec, ...withSpec, options}\n    return builder\n  }\n}\n\nfunction getDocumentOptions(spec: Partial<DocumentOptions>): DocumentOptions {\n  const opts: DocumentOptions = {\n    id: spec.id || '',\n    type: spec.type || '*',\n  }\n\n  if (spec.template) {\n    opts.template = spec.template\n  }\n\n  if (spec.templateParameters) {\n    opts.templateParameters = spec.templateParameters\n  }\n\n  return opts\n}\n\n/** @internal */\nexport function documentFromEditor(context: StructureContext, spec?: EditorNode): DocumentBuilder {\n  let doc = spec?.type\n    ? // Use user-defined document fragment as base if possible\n      context.resolveDocumentNode({schemaType: spec.type})\n    : // Fall back to plain old document builder\n      new DocumentBuilder(context)\n\n  if (!spec) return doc\n\n  const {id, type, template, templateParameters} = spec.options\n  doc = doc.id(spec.id).documentId(id)\n\n  if (type) {\n    doc = doc.schemaType(type)\n  }\n  if (template) {\n    doc = doc.initialValueTemplate(template, templateParameters)\n  }\n  if (spec.child) {\n    doc = doc.child(spec.child)\n  }\n\n  return doc\n}\n\n/** @internal */\nexport function documentFromEditorWithInitialValue(\n  {resolveDocumentNode, templates}: StructureContext,\n  templateId: string,\n  parameters?: Record<string, unknown>,\n): DocumentBuilder {\n  const template = templates.find((t) => t.id === templateId)\n\n  if (!template) {\n    throw new Error(`Template with ID \"${templateId}\" not defined`)\n  }\n\n  return resolveDocumentNode({schemaType: template.schemaType}).initialValueTemplate(\n    templateId,\n    parameters,\n  )\n}\n","import {AddIcon} from '@sanity/icons'\nimport {type InitialValueTemplateItem} from 'sanity'\n\nimport {type BaseIntentParams, type IntentParams} from './Intent'\nimport {type MenuItem, MenuItemBuilder} from './MenuItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * A `InitialValueTemplateItemBuilder` is used to build a document node with an initial value set.\n *\n * @public\n */\nexport class InitialValueTemplateItemBuilder implements Serializable<InitialValueTemplateItem> {\n  /** Initial Value template item option object. See {@link InitialValueTemplateItem} */\n  protected spec: Partial<InitialValueTemplateItem>\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: Partial<InitialValueTemplateItem>,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /** Set initial value template item builder ID\n   * @param id - initial value template item ID\n   * @returns initial value template item based on ID provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  id(id: string): InitialValueTemplateItemBuilder {\n    return this.clone({id})\n  }\n\n  /** Get initial value template item builder ID\n   * @returns initial value template item ID. See {@link InitialValueTemplateItem}\n   */\n  getId(): Partial<InitialValueTemplateItem>['id'] {\n    return this.spec.id\n  }\n\n  /** Set initial value template item title\n   * @param title - initial value template item title\n   * @returns initial value template item based on title provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  title(title: string): InitialValueTemplateItemBuilder {\n    return this.clone({title})\n  }\n\n  /** Get initial value template item title\n   * @returns initial value template item title. See {@link InitialValueTemplateItem}\n   */\n  getTitle(): Partial<InitialValueTemplateItem>['title'] {\n    return this.spec.title\n  }\n\n  /** Set initial value template item description\n   * @param description - initial value template item description\n   * @returns initial value template item builder based on description provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  description(description: string): InitialValueTemplateItemBuilder {\n    return this.clone({description})\n  }\n\n  /** Get initial value template item description\n   * @returns initial value template item description. See {@link InitialValueTemplateItem}\n   */\n  getDescription(): Partial<InitialValueTemplateItem>['description'] {\n    return this.spec.description\n  }\n\n  /** Set initial value template ID\n   * @param templateId - initial value template item template ID\n   * @returns initial value template item based builder on template ID provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  templateId(templateId: string): InitialValueTemplateItemBuilder {\n    // Let's try to be a bit helpful and assign an ID from template ID if none is specified\n    const paneId = this.spec.id || templateId\n    return this.clone({\n      id: paneId,\n      templateId,\n    })\n  }\n\n  /** Get initial value template item template ID\n   * @returns initial value template item ID. See {@link InitialValueTemplateItem}\n   */\n  getTemplateId(): Partial<InitialValueTemplateItem>['templateId'] {\n    return this.spec.templateId\n  }\n\n  /** Get initial value template item template parameters\n   * @param parameters - initial value template item parameters\n   * @returns initial value template item builder based on parameters provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  parameters(parameters: {[key: string]: any}): InitialValueTemplateItemBuilder {\n    return this.clone({parameters})\n  }\n\n  /** Get initial value template item template parameters\n   * @returns initial value template item parameters. See {@link InitialValueTemplateItem}\n   */\n  getParameters(): Partial<InitialValueTemplateItem>['parameters'] {\n    return this.spec.parameters\n  }\n\n  /** Serialize initial value template item\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns initial value template item object based on the path, index and hint provided in options. See {@link InitialValueTemplateItem}\n   */\n  serialize({path = [], index, hint}: SerializeOptions = {path: []}): InitialValueTemplateItem {\n    const {spec, _context} = this\n    const {templates} = _context\n\n    if (typeof spec.id !== 'string' || !spec.id) {\n      throw new SerializeError(\n        '`id` is required for initial value template item nodes',\n        path,\n        index,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!spec.templateId) {\n      throw new SerializeError(\n        'template id (`templateId`) is required for initial value template item nodes',\n        path,\n        spec.id,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    const template = templates.find((t) => t.id === spec.templateId)\n\n    if (!template) {\n      throw new SerializeError(\n        'template id (`templateId`) is required for initial value template item nodes',\n        path,\n        spec.id,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    return {\n      id: spec.id,\n      templateId: spec.id,\n      schemaType: template.schemaType,\n      type: 'initialValueTemplateItem',\n      description: spec.description || template.description,\n      title: spec.title || template.title,\n      subtitle: spec.subtitle,\n      icon: spec.icon || template.icon,\n      initialDocumentId: spec.initialDocumentId,\n      parameters: spec.parameters,\n    }\n  }\n\n  /** Clone generic view builder (allows for options overriding)\n   * @param withSpec - initial value template item builder options. See {@link InitialValueTemplateItemBuilder}\n   * @returns initial value template item builder based on the context and options provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  clone(withSpec: Partial<InitialValueTemplateItem> = {}): InitialValueTemplateItemBuilder {\n    const builder = new InitialValueTemplateItemBuilder(this._context)\n    builder.spec = {...this.spec, ...withSpec}\n    return builder\n  }\n}\n\n/** @internal */\nexport function defaultInitialValueTemplateItems(\n  context: StructureContext,\n): InitialValueTemplateItemBuilder[] {\n  const {schema, getStructureBuilder, templates} = context\n\n  // Sort templates by their schema type, in order or definition\n  const typeNames = schema.getTypeNames()\n  const ordered = templates\n    // Don't list templates that require parameters\n    // TODO: this should use the new-document template items instead maybe?\n    .filter((tpl) => !tpl.parameters?.length)\n    .sort((a, b) => typeNames.indexOf(a.schemaType) - typeNames.indexOf(b.schemaType))\n\n  // Create actual template items out of the templates\n  return ordered.map((tpl) => getStructureBuilder().initialValueTemplateItem(tpl.id))\n}\n\n/** @internal */\nexport function maybeSerializeInitialValueTemplateItem(\n  item: InitialValueTemplateItem | InitialValueTemplateItemBuilder,\n  index: number,\n  path: SerializePath,\n): InitialValueTemplateItem {\n  return item instanceof InitialValueTemplateItemBuilder ? item.serialize({path, index}) : item\n}\n\n/** @internal */\nexport function menuItemsFromInitialValueTemplateItems(\n  context: StructureContext,\n  templateItems: InitialValueTemplateItem[],\n): MenuItem[] {\n  const {schema, templates} = context\n  return templateItems.map((item) => {\n    const template = templates.find((t) => t.id === item.templateId)\n    const title = item.title || template?.title || 'Create'\n\n    const params: BaseIntentParams = {}\n    if (template && template.schemaType) {\n      params.type = template.schemaType\n    }\n\n    if (item.templateId) {\n      params.template = item.templateId\n    }\n\n    const intentParams: IntentParams = item.parameters ? [params, item.parameters] : params\n    const schemaType = template && schema.get(template.schemaType)\n\n    const i18n = item.i18n || template?.i18n\n\n    let builder = new MenuItemBuilder(context)\n      .title(title)\n      .icon((template && template.icon) || schemaType?.icon || AddIcon)\n      .intent({type: 'create', params: intentParams})\n\n    if (i18n) {\n      builder = builder.i18n(i18n)\n    }\n\n    return builder.serialize()\n  })\n}\n","import {getTypeNamesFromFilter, type PartialDocumentList} from './DocumentList'\nimport {type StructureNode} from './StructureNodes'\n\n/**\n * Intent parameters (json)\n *\n * @public\n */\nexport type IntentJsonParams = {[key: string]: any}\n\n/**\n * Base intent parameters\n *\n * @public\n * @todo dedupe with core\n */\nexport interface BaseIntentParams {\n  /**\n   * Document schema type name to create/edit.\n   * Required for `create` intents, optional for `edit` (but encouraged, safer and faster)\n   */\n  type?: string\n\n  /**\n   * ID of the document to create/edit.\n   * Required for `edit` intents, optional for `create`.\n   */\n  id?: string\n\n  /**\n   * Name (ID) of initial value template to use for `create` intent. Optional.\n   */\n  template?: string\n\n  /**\n   * Experimental field path\n   *\n   * @beta\n   * @experimental\n   * @hidden\n   */\n  path?: string\n\n  /**\n   * Optional \"mode\" to use for edit intent.\n   * Known modes are `structure` and `presentation`.\n   */\n  mode?: string\n\n  /**\n   * Arbitrary/custom parameters are generally discouraged - try to keep them to a minimum,\n   * or use `payload` (arbitrary JSON-serializable object) instead.\n   */\n  [key: string]: string | undefined\n}\n\n/** @internal */\nexport const DEFAULT_INTENT_HANDLER = Symbol('Document type list canHandleIntent')\n\n/**\n * Intent parameters\n * See {@link router.BaseIntentParams} and {@link router.IntentJsonParams}\n *\n * @public\n */\nexport type IntentParams = BaseIntentParams | [BaseIntentParams, IntentJsonParams]\n\n/**\n * Interface for intents\n * @public */\n// TODO: intents should be unified somewhere\nexport interface Intent {\n  /** Intent type */\n  type: string\n  /** Intent parameters. See {@link IntentParams}\n   */\n  params?: IntentParams\n}\n\n/**\n * Interface for intent checker\n *\n * @public\n */\nexport interface IntentChecker {\n  (\n    /** Intent name */\n    intentName: string,\n    /** Intent checker parameter */\n    params: {[key: string]: any},\n    /** Structure context. See {@link StructureNode} */\n    context: {pane: StructureNode; index: number},\n  ): boolean\n  /** intent checker identify */\n  identity?: symbol\n}\n\n/** @internal */\nexport const defaultIntentChecker: IntentChecker = (intentName, params, {pane}): boolean => {\n  const isEdit = intentName === 'edit'\n  const isCreate = intentName === 'create'\n  const typedSpec = pane as PartialDocumentList\n  const paneFilter = typedSpec.options?.filter || ''\n  const paneParams = typedSpec.options?.params || {}\n  const typeNames = typedSpec.schemaTypeName\n    ? [typedSpec.schemaTypeName]\n    : getTypeNamesFromFilter(paneFilter, paneParams)\n\n  const initialValueTemplates = typedSpec.initialValueTemplates || []\n\n  if (isCreate && params.template) {\n    return initialValueTemplates.some((tpl) => tpl.templateId === params.template)\n  }\n\n  return (\n    (isEdit && params.id && typeNames.includes(params.type)) ||\n    (isCreate && typeNames.includes(params.type))\n  )\n}\n\ndefaultIntentChecker.identity = DEFAULT_INTENT_HANDLER\n","export const layoutOptions = ['default', 'card', 'media', 'detail', 'block']\n","import {type I18nTextRecord, type InitialValueTemplateItem, type PreviewLayoutKey} from 'sanity'\n\nimport {\n  type InitialValueTemplateItemBuilder,\n  maybeSerializeInitialValueTemplateItem,\n} from './InitialValueTemplateItem'\nimport {defaultIntentChecker, type IntentChecker} from './Intent'\nimport {layoutOptions} from './Layout'\nimport {maybeSerializeMenuItem, type MenuItem, type MenuItemBuilder} from './MenuItem'\nimport {\n  maybeSerializeMenuItemGroup,\n  type MenuItemGroup,\n  type MenuItemGroupBuilder,\n} from './MenuItemGroup'\nimport {SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type Serializable,\n  type SerializeOptions,\n  type StructureNode,\n} from './StructureNodes'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\nfunction noChildResolver() {\n  return undefined\n}\n\n/** @internal */\nexport const shallowIntentChecker: IntentChecker = (intentName, params, {pane, index}): boolean => {\n  return index <= 1 && defaultIntentChecker(intentName, params, {pane, index})\n}\n\n/**\n * Interface for list display options\n *\n * @public */\nexport interface ListDisplayOptions {\n  /** Check if list display should show icons */\n  showIcons?: boolean\n}\n\n/**\n * Interface for base generic list\n *\n * @public\n */\nexport interface BaseGenericList extends StructureNode {\n  /** List layout key. */\n  defaultLayout?: PreviewLayoutKey\n  /** Can handle intent. See {@link IntentChecker} */\n  canHandleIntent?: IntentChecker\n  /** List display options. See {@link ListDisplayOptions} */\n  displayOptions?: ListDisplayOptions\n  /** List child. See {@link Child} */\n  child: Child\n  /** List initial values array. See {@link InitialValueTemplateItem} and {@link InitialValueTemplateItemBuilder} */\n  initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder)[]\n}\n\n/**\n * Interface for generic list\n *\n * @public\n */\n// \"POJO\"/verbatim-version - end result\nexport interface GenericList extends BaseGenericList {\n  /** List type */\n  type: string\n  /** List menu items array. See {@link MenuItem} */\n  menuItems: MenuItem[]\n  /** List menu item groups array. See {@link MenuItemGroup} */\n  menuItemGroups: MenuItemGroup[]\n}\n\n/**\n * Interface for buildable generic list\n *\n * @public\n */\n// Used internally in builder classes to make everything optional\nexport interface BuildableGenericList extends Partial<BaseGenericList> {\n  /** List menu items array. See {@link MenuItem} and {@link MenuItemBuilder} */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** List menu items groups array. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n}\n\n/**\n * Interface for generic list input\n * Allows builders and only requires things not inferrable\n *\n * @public */\n// Input version, allows builders and only requires things not inferrable\nexport interface GenericListInput extends StructureNode {\n  /** Input id */\n  id: string\n  /** Input title */\n  title: string\n  /** Input menu items groups. See {@link MenuItem} and {@link MenuItemBuilder} */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Input menu items groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n  /** Input initial value array. See {@link InitialValueTemplateItem} and {@link InitialValueTemplateItemBuilder} */\n  initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder)[]\n  /** Input default layout. */\n  defaultLayout?: PreviewLayoutKey\n  /** If input can handle intent. See {@link IntentChecker} */\n  canHandleIntent?: IntentChecker\n  /** Input child of type {@link Child} */\n  child?: Child\n}\n\n/**\n * Class for building generic lists\n *\n * @public\n */\nexport abstract class GenericListBuilder<TList extends BuildableGenericList, ConcreteImpl>\n  implements Serializable<GenericList>\n{\n  /** Check if initial value templates are set */\n  protected initialValueTemplatesSpecified = false\n  /** Generic list option object */\n  protected spec: TList = {} as TList\n\n  /** Set generic list ID\n   * @param id - generic list ID\n   * @returns generic list builder based on ID provided.\n   */\n  id(id: string): ConcreteImpl {\n    return this.clone({id})\n  }\n\n  /** Get generic list ID\n   * @returns generic list ID\n   */\n  getId(): TList['id'] {\n    return this.spec.id\n  }\n\n  /** Set generic list title\n   * @param title - generic list title\n   * @returns generic list builder based on title and ID provided.\n   */\n  title(title: string): ConcreteImpl {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get generic list title\n   * @returns generic list title\n   */\n  getTitle(): TList['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ConcreteImpl {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): TList['i18n'] {\n    return this.spec.i18n\n  }\n\n  /** Set generic list layout\n   * @param defaultLayout - generic list layout key.\n   * @returns generic list builder based on layout provided.\n   */\n  defaultLayout(defaultLayout: PreviewLayoutKey): ConcreteImpl {\n    return this.clone({defaultLayout})\n  }\n\n  /** Get generic list layout\n   * @returns generic list layout\n   */\n  getDefaultLayout(): TList['defaultLayout'] {\n    return this.spec.defaultLayout\n  }\n\n  /** Set generic list menu items\n   * @param menuItems - generic list menu items. See {@link MenuItem} and {@link MenuItemBuilder}\n   * @returns generic list builder based on menu items provided.\n   */\n  menuItems(menuItems: (MenuItem | MenuItemBuilder)[] | undefined): ConcreteImpl {\n    return this.clone({menuItems})\n  }\n\n  /** Get generic list menu items\n   * @returns generic list menu items\n   */\n  getMenuItems(): TList['menuItems'] {\n    return this.spec.menuItems\n  }\n\n  /** Set generic list menu item groups\n   * @param menuItemGroups - generic list menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder}\n   * @returns generic list builder based on menu item groups provided.\n   */\n  menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ConcreteImpl {\n    return this.clone({menuItemGroups})\n  }\n\n  /** Get generic list menu item groups\n   * @returns generic list menu item groups\n   */\n  getMenuItemGroups(): TList['menuItemGroups'] {\n    return this.spec.menuItemGroups\n  }\n\n  /** Set generic list child\n   * @param child - generic list child. See {@link Child}\n   * @returns generic list builder based on child provided (clone).\n   */\n  child(child: Child): ConcreteImpl {\n    return this.clone({child})\n  }\n\n  /** Get generic list child\n   * @returns generic list child\n   */\n  getChild(): TList['child'] {\n    return this.spec.child\n  }\n\n  /** Set generic list can handle intent\n   * @param canHandleIntent - generic list intent checker. See {@link IntentChecker}\n   * @returns generic list builder based on can handle intent provided.\n   */\n  canHandleIntent(canHandleIntent?: IntentChecker): ConcreteImpl {\n    return this.clone({canHandleIntent})\n  }\n\n  /** Get generic list can handle intent\n   * @returns generic list can handle intent\n   */\n  getCanHandleIntent(): TList['canHandleIntent'] {\n    return this.spec.canHandleIntent\n  }\n\n  /** Set generic list display options\n   * @param enabled - allow / disallow for showing icons\n   * @returns generic list builder based on display options (showIcons) provided.\n   */\n  showIcons(enabled = true): ConcreteImpl {\n    return this.clone({\n      displayOptions: {...(this.spec.displayOptions || {}), showIcons: enabled},\n    })\n  }\n\n  /** Get generic list display options\n   * @returns generic list display options (specifically showIcons)\n   */\n  getShowIcons(): boolean | undefined {\n    return this.spec.displayOptions ? this.spec.displayOptions.showIcons : undefined\n  }\n\n  /** Set generic list initial value templates\n   * @param templates - generic list initial value templates. See {@link InitialValueTemplateItemBuilder}\n   * @returns generic list builder based on templates provided.\n   */\n  initialValueTemplates(\n    templates:\n      | InitialValueTemplateItem\n      | InitialValueTemplateItemBuilder\n      | Array<InitialValueTemplateItem | InitialValueTemplateItemBuilder>,\n  ): ConcreteImpl {\n    this.initialValueTemplatesSpecified = true\n    return this.clone({initialValueTemplates: Array.isArray(templates) ? templates : [templates]})\n  }\n\n  /** Get generic list initial value templates\n   * @returns generic list initial value templates\n   */\n  getInitialValueTemplates(): TList['initialValueTemplates'] {\n    return this.spec.initialValueTemplates\n  }\n\n  /** Serialize generic list\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns generic list object based on path provided in options. See {@link GenericList}\n   */\n  serialize(options: SerializeOptions = {path: []}): GenericList {\n    const id = this.spec.id || ''\n    const path = options.path\n\n    const defaultLayout = this.spec.defaultLayout\n    if (defaultLayout && !layoutOptions.includes(defaultLayout)) {\n      throw new SerializeError(\n        `\\`layout\\` must be one of ${layoutOptions.map((item) => `\"${item}\"`).join(', ')}`,\n        path,\n        id || options.index,\n        this.spec.title,\n      )\n    }\n\n    const initialValueTemplates = (this.spec.initialValueTemplates || []).map((item, i) =>\n      maybeSerializeInitialValueTemplateItem(item, i, path),\n    )\n\n    return {\n      id: validateId(id, options.path, id || options.index),\n      title: this.spec.title,\n      i18n: this.spec.i18n,\n      type: 'genericList',\n      defaultLayout,\n      child: this.spec.child || noChildResolver,\n      canHandleIntent: this.spec.canHandleIntent || shallowIntentChecker,\n      displayOptions: this.spec.displayOptions,\n      initialValueTemplates,\n      menuItems: (this.spec.menuItems || []).map((item, i) =>\n        maybeSerializeMenuItem(item, i, path),\n      ),\n      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) =>\n        maybeSerializeMenuItemGroup(item, i, path),\n      ),\n    }\n  }\n\n  /** Clone generic list builder (allows for options overriding)\n   * @param _withSpec - generic list options.\n   * @returns generic list builder.\n   */\n  abstract clone(_withSpec?: object): ConcreteImpl\n}\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {AddIcon} from '@sanity/icons'\nimport {type SchemaType, type SortOrderingItem} from '@sanity/types'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, type InitialValueTemplateItem} from 'sanity'\n\nimport {type ChildResolver, type ChildResolverOptions, type ItemChild} from './ChildResolver'\nimport {DocumentBuilder} from './Document'\nimport {\n  type BuildableGenericList,\n  type GenericList,\n  GenericListBuilder,\n  type GenericListInput,\n} from './GenericList'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Child, type SerializeOptions} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {resolveTypeForDocument} from './util/resolveTypeForDocument'\n\nconst validateFilter = (spec: PartialDocumentList, options: SerializeOptions) => {\n  const filter = spec.options?.filter.trim() || ''\n\n  if (['*', '{'].includes(filter[0])) {\n    throw new SerializeError(\n      `\\`filter\\` cannot start with \\`${filter[0]}\\` - looks like you are providing a query, not a filter`,\n      options.path,\n      spec.id,\n      spec.title,\n    ).withHelpUrl(HELP_URL.QUERY_PROVIDED_FOR_FILTER)\n  }\n\n  return filter\n}\n\nconst createDocumentChildResolverForItem =\n  (context: StructureContext): ChildResolver =>\n  (itemId: string, options: ChildResolverOptions): ItemChild | Promise<ItemChild> | undefined => {\n    const parentItem = options.parent as DocumentList\n    const template = options.params?.template\n      ? context.templates.find((tpl) => tpl.id === options.params.template)\n      : undefined\n    const type = template\n      ? template.schemaType\n      : parentItem.schemaTypeName || resolveTypeForDocument(context.getClient, itemId)\n\n    return Promise.resolve(type).then((schemaType) =>\n      schemaType\n        ? context.resolveDocumentNode({schemaType, documentId: itemId})\n        : new DocumentBuilder(context).id('editor').documentId(itemId).schemaType(''),\n    )\n  }\n\n/**\n * Partial document list\n *\n * @public\n */\nexport interface PartialDocumentList extends BuildableGenericList {\n  /** Document list options. See {@link DocumentListOptions} */\n  options?: DocumentListOptions\n  /** Schema type name */\n  schemaTypeName?: string\n}\n\n/**\n * Interface for document list input\n *\n * @public\n */\nexport interface DocumentListInput extends GenericListInput {\n  /** Document list options. See {@link DocumentListOptions} */\n  options: DocumentListOptions\n}\n\n/**\n * Interface for document list\n *\n * @public\n */\nexport interface DocumentList extends GenericList {\n  type: 'documentList'\n  /** Document list options. See {@link DocumentListOptions} */\n  options: DocumentListOptions\n  /** Document list child. See {@link Child} */\n  child: Child\n  /** Document schema type name */\n  schemaTypeName?: string\n}\n\n/**\n * Interface for document List options\n *\n * @public\n */\nexport interface DocumentListOptions {\n  /** Document list filter */\n  filter: string\n  /** Document list parameters */\n  params?: Record<string, unknown>\n  /** Document list API version */\n  apiVersion?: string\n  /** Document list API default ordering array. */\n  defaultOrdering?: SortOrderingItem[]\n}\n\n/**\n * Class for building document list\n *\n * @public\n */\nexport class DocumentListBuilder extends GenericListBuilder<\n  PartialDocumentList,\n  DocumentListBuilder\n> {\n  /** Document list options. See {@link PartialDocumentList} */\n  protected spec: PartialDocumentList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListInput,\n  ) {\n    super()\n    this.spec = spec || {}\n    this.initialValueTemplatesSpecified = Boolean(spec?.initialValueTemplates)\n  }\n\n  /** Set API version\n   * @param apiVersion - API version\n   * @returns document list builder based on the options and API version provided. See {@link DocumentListBuilder}\n   */\n  apiVersion(apiVersion: string): DocumentListBuilder {\n    return this.clone({options: {...(this.spec.options || {filter: ''}), apiVersion}})\n  }\n\n  /** Get API version\n   * @returns API version\n   */\n  getApiVersion(): string | undefined {\n    return this.spec.options?.apiVersion\n  }\n\n  /** Set Document list filter\n   * @param filter - GROQ-filter used to determine which documents to display. Do not support joins, since they operate on individual documents, and will ignore order-clauses and projections. See {@link https://www.sanity.io/docs/realtime-updates}\n   * @returns document list builder based on the options and filter provided. See {@link DocumentListBuilder}\n   */\n  filter(filter: string): DocumentListBuilder {\n    return this.clone({options: {...(this.spec.options || {}), filter}})\n  }\n\n  /** Get Document list filter\n   * @returns filter\n   */\n  getFilter(): string | undefined {\n    return this.spec.options?.filter\n  }\n\n  /** Set Document list schema type name\n   * @param type - schema type name.\n   * @returns document list builder based on the schema type name provided. See {@link DocumentListBuilder}\n   */\n  schemaType(type: SchemaType | string): DocumentListBuilder {\n    const schemaTypeName = typeof type === 'string' ? type : type.name\n    return this.clone({schemaTypeName})\n  }\n\n  /** Get Document list schema type name\n   * @returns schema type name\n   */\n  getSchemaType(): string | undefined {\n    return this.spec.schemaTypeName\n  }\n\n  /** Set Document list options' parameters\n   * @param params - parameters\n   * @returns document list builder based on the options provided. See {@link DocumentListBuilder}\n   */\n  params(params: Record<string, unknown>): DocumentListBuilder {\n    return this.clone({\n      options: {...(this.spec.options || {filter: ''}), params},\n    })\n  }\n\n  /** Get Document list options' parameters\n   * @returns options\n   */\n  getParams(): Record<string, unknown> | undefined {\n    return this.spec.options?.params\n  }\n\n  /** Set Document list default ordering\n   * @param ordering - default sort ordering array. See {@link SortOrderingItem}\n   * @returns document list builder based on ordering provided. See {@link DocumentListBuilder}\n   */\n  defaultOrdering(ordering: SortOrderingItem[]): DocumentListBuilder {\n    if (!Array.isArray(ordering)) {\n      throw new Error('`defaultOrdering` must be an array of order clauses')\n    }\n\n    return this.clone({\n      options: {...(this.spec.options || {filter: ''}), defaultOrdering: ordering},\n    })\n  }\n\n  /** Get Document list default ordering\n   * @returns default ordering. See {@link SortOrderingItem}\n   */\n  getDefaultOrdering(): SortOrderingItem[] | undefined {\n    return this.spec.options?.defaultOrdering\n  }\n\n  /** Serialize Document list\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document list object based on path provided in options. See {@link DocumentList}\n   */\n  serialize(options: SerializeOptions = {path: []}): DocumentList {\n    if (typeof this.spec.id !== 'string' || !this.spec.id) {\n      throw new SerializeError(\n        '`id` is required for document lists',\n        options.path,\n        options.index,\n        this.spec.title,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!this.spec.options || !this.spec.options.filter) {\n      throw new SerializeError(\n        '`filter` is required for document lists',\n        options.path,\n        this.spec.id,\n        this.spec.title,\n      ).withHelpUrl(HELP_URL.FILTER_REQUIRED)\n    }\n\n    const hasSimpleFilter = this.spec.options?.filter === '_type == $type'\n    if (!hasSimpleFilter && this.spec.options.filter && !this.spec.options.apiVersion) {\n      console.warn(\n        `No apiVersion specified for document type list with custom filter: \\`${this.spec.options.filter}\\`. This will be required in the future. See %s for more info.`,\n        generateHelpUrl(HELP_URL.API_VERSION_REQUIRED_FOR_CUSTOM_FILTER),\n      )\n    }\n    return {\n      ...super.serialize(options),\n      type: 'documentList',\n      schemaTypeName: this.spec.schemaTypeName,\n      child: this.spec.child || createDocumentChildResolverForItem(this._context),\n      options: {\n        ...this.spec.options,\n        // @todo: make specifying .apiVersion required when using custom (non-simple) filters in v4\n        apiVersion: this.spec.options.apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n        filter: validateFilter(this.spec, options),\n      },\n    }\n  }\n\n  /** Clone Document list builder (allows for options overriding)\n   * @param withSpec - override document list spec. See {@link PartialDocumentList}\n   * @returns document list builder. See {@link DocumentListBuilder}\n   */\n  clone(withSpec?: PartialDocumentList): DocumentListBuilder {\n    const builder = new DocumentListBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n\n    if (!this.initialValueTemplatesSpecified) {\n      builder.spec.initialValueTemplates = inferInitialValueTemplates(this._context, builder.spec)\n    }\n\n    if (!builder.spec.schemaTypeName) {\n      builder.spec.schemaTypeName = inferTypeName(builder.spec)\n    }\n\n    return builder\n  }\n\n  /** Get Document list spec\n   * @returns document list spec. See {@link PartialDocumentList}\n   */\n  getSpec(): PartialDocumentList {\n    return this.spec\n  }\n}\n\nfunction inferInitialValueTemplates(\n  context: StructureContext,\n  spec: PartialDocumentList,\n): InitialValueTemplateItem[] | undefined {\n  const {document} = context\n  const {schemaTypeName, options} = spec\n  const {filter, params} = options || {filter: '', params: {}}\n  const typeNames = schemaTypeName\n    ? [schemaTypeName]\n    : Array.from(new Set(getTypeNamesFromFilter(filter, params)))\n\n  if (typeNames.length === 0) {\n    return undefined\n  }\n\n  return typeNames\n    .flatMap((schemaType) =>\n      document.resolveNewDocumentOptions({\n        type: 'structure',\n        schemaType,\n      }),\n    )\n    .map((option) => ({...option, icon: AddIcon}))\n}\n\nfunction inferTypeName(spec: PartialDocumentList): string | undefined {\n  const {options} = spec\n  const {filter, params} = options || {filter: '', params: {}}\n  const typeNames = getTypeNamesFromFilter(filter, params)\n  return typeNames.length === 1 ? typeNames[0] : undefined\n}\n\n/** @internal */\nexport function getTypeNamesFromFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  let typeNames = getTypeNamesFromEqualityFilter(filter, params)\n\n  if (typeNames.length === 0) {\n    typeNames = getTypeNamesFromInTypesFilter(filter, params)\n  }\n\n  return typeNames\n}\n\n// From _type == \"movie\" || _type == $otherType\nfunction getTypeNamesFromEqualityFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  const pattern =\n    /\\b_type\\s*==\\s*(['\"].*?['\"]|\\$.*?(?:\\s|$))|\\B(['\"].*?['\"]|\\$.*?(?:\\s|$))\\s*==\\s*_type/g\n  const matches: string[] = []\n  let match\n  while ((match = pattern.exec(filter)) !== null) {\n    matches.push(match[1] || match[2])\n  }\n\n  return matches\n    .map((candidate) => {\n      const typeName = candidate[0] === '$' ? params[candidate.slice(1)] : candidate\n      const normalized = ((typeName as string) || '').trim().replace(/^[\"']|[\"']$/g, '')\n      return normalized\n    })\n    .filter(Boolean)\n}\n\n// From _type in [\"dog\", \"cat\", $otherSpecies]\nfunction getTypeNamesFromInTypesFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  const pattern = /\\b_type\\s+in\\s+\\[(.*?)\\]/\n  const matches = filter.match(pattern)\n  if (!matches) {\n    return []\n  }\n\n  return matches[1]\n    .split(/,\\s*/)\n    .map((match) => match.trim().replace(/^[\"']+|[\"']+$/g, ''))\n    .map((item) => (item[0] === '$' ? params[item.slice(1)] : item))\n    .filter(Boolean) as string[]\n}\n","import {find} from 'lodash'\nimport {isRecord} from 'sanity'\n\nimport {type ChildResolver, type ChildResolverOptions} from './ChildResolver'\nimport {isDocumentListItem} from './DocumentListItem'\nimport {\n  type BuildableGenericList,\n  type GenericList,\n  GenericListBuilder,\n  type GenericListInput,\n  shallowIntentChecker,\n} from './GenericList'\nimport {type IntentChecker} from './Intent'\nimport {type ListItem, ListItemBuilder} from './ListItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Divider, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\nconst getArgType = (thing: ListItem) => {\n  if (thing instanceof ListBuilder) {\n    return 'ListBuilder'\n  }\n\n  if (isPromise<ListItem>(thing)) {\n    return 'Promise'\n  }\n\n  return Array.isArray(thing) ? 'array' : typeof thing\n}\n\nconst isListItem = (item: ListItem | Divider): item is ListItem => {\n  return item.type === 'listItem'\n}\n\nconst defaultCanHandleIntent: IntentChecker = (intentName: string, params, context) => {\n  const pane = context.pane as List\n  const items = pane.items || []\n  return (\n    items\n      .filter(isDocumentListItem)\n      .some((item) => item.schemaType.name === params.type && item._id === params.id) ||\n    shallowIntentChecker(intentName, params, context)\n  )\n}\n\nconst resolveChildForItem: ChildResolver = (itemId: string, options: ChildResolverOptions) => {\n  const parentItem = options.parent as List\n  const items = parentItem.items.filter(isListItem)\n  const target = (items.find((item) => item.id === itemId) || {child: undefined}).child\n\n  if (!target || typeof target !== 'function') {\n    return target\n  }\n\n  return typeof target === 'function' ? target(itemId, options) : target\n}\n\nfunction maybeSerializeListItem(\n  item: ListItem | ListItemBuilder | Divider,\n  index: number,\n  path: SerializePath,\n): ListItem | Divider {\n  if (item instanceof ListItemBuilder) {\n    return item.serialize({path, index})\n  }\n\n  const listItem = item as ListItem\n  if (listItem && listItem.type === 'divider') {\n    return item as Divider\n  }\n\n  if (!listItem || listItem.type !== 'listItem') {\n    const gotWhat = (listItem && listItem.type) || getArgType(listItem)\n    const helpText = gotWhat === 'array' ? ' - did you forget to spread (...moreItems)?' : ''\n    throw new SerializeError(\n      `List items must be of type \"listItem\", got \"${gotWhat}\"${helpText}`,\n      path,\n      index,\n    ).withHelpUrl(HELP_URL.INVALID_LIST_ITEM)\n  }\n\n  return item\n}\n\nfunction isPromise<T>(thing: unknown): thing is PromiseLike<T> {\n  return isRecord(thing) && typeof thing.then === 'function'\n}\n\n/**\n * Interface for List\n *\n * @public\n */\nexport interface List extends GenericList {\n  type: 'list'\n  /** List items. See {@link ListItem} and {@link Divider} */\n  items: (ListItem | Divider)[]\n}\n\n/**\n * Interface for list input\n *\n * @public\n */\nexport interface ListInput extends GenericListInput {\n  /** List input items array. See {@link ListItem}, {@link ListItemBuilder} and {@link Divider} */\n  items?: (ListItem | ListItemBuilder | Divider)[]\n}\n\n/**\n * Interface for buildable list\n *\n * @public\n */\nexport interface BuildableList extends BuildableGenericList {\n  /** List items. See {@link ListItem}, {@link ListItemBuilder} and {@link Divider} */\n  items?: (ListItem | ListItemBuilder | Divider)[]\n}\n\n/**\n * A `ListBuilder` is used to build a list of items in the structure tool.\n *\n * @public */\nexport class ListBuilder extends GenericListBuilder<BuildableList, ListBuilder> {\n  /** buildable list option object. See {@link BuildableList} */\n  protected spec: BuildableList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: ListInput,\n  ) {\n    super()\n    this.spec = spec ? spec : {}\n    this.initialValueTemplatesSpecified = Boolean(spec && spec.initialValueTemplates)\n  }\n\n  /**\n   * Set list builder based on items provided\n   * @param items - list items. See {@link ListItemBuilder}, {@link ListItem} and {@link Divider}\n   * @returns list builder based on items provided. See {@link ListBuilder}\n   */\n  items(items: (ListItemBuilder | ListItem | Divider)[]): ListBuilder {\n    return this.clone({items})\n  }\n\n  /** Get list builder items\n   * @returns list items. See {@link BuildableList}\n   */\n  getItems(): BuildableList['items'] {\n    return this.spec.items\n  }\n\n  /** Serialize list builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns list based on path in options. See {@link List}\n   */\n  serialize(options: SerializeOptions = {path: []}): List {\n    const id = this.spec.id\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for lists',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    const items = typeof this.spec.items === 'undefined' ? [] : this.spec.items\n    if (!Array.isArray(items)) {\n      throw new SerializeError(\n        '`items` must be an array of items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.LIST_ITEMS_MUST_BE_ARRAY)\n    }\n\n    const path = (options.path || []).concat(id)\n    const serializedItems = items.map((item, index) => maybeSerializeListItem(item, index, path))\n    const dupes = serializedItems.filter((val, i) => find(serializedItems, {id: val.id}, i + 1))\n\n    if (dupes.length > 0) {\n      const dupeIds = dupes.map((item) => item.id).slice(0, 5)\n      const dupeDesc = dupes.length > 5 ? `${dupeIds.join(', ')}...` : dupeIds.join(', ')\n      throw new SerializeError(\n        `List items with same ID found (${dupeDesc})`,\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.LIST_ITEM_IDS_MUST_BE_UNIQUE)\n    }\n\n    return {\n      ...super.serialize(options),\n      type: 'list',\n      canHandleIntent: this.spec.canHandleIntent || defaultCanHandleIntent,\n      child: this.spec.child || resolveChildForItem,\n      items: serializedItems,\n    }\n  }\n\n  /**\n   * Clone list builder and return new list builder based on context and spec provided\n   * @param withSpec - list options. See {@link BuildableList}\n   * @returns new list builder based on context and spec provided. See {@link ListBuilder}\n   */\n  clone(withSpec?: BuildableList): ListBuilder {\n    const builder = new ListBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SchemaType} from '@sanity/types'\nimport {type Observable} from 'rxjs'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type ChildResolver, type ItemChild} from './ChildResolver'\nimport {ComponentBuilder} from './Component'\nimport {DocumentBuilder} from './Document'\nimport {DocumentListBuilder} from './DocumentList'\nimport {ListBuilder} from './List'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Collection,\n  type CollectionBuilder,\n  type Serializable,\n  type SerializeOptions,\n} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\n/**\n * Unserialized list item child.\n * See {@link Collection}, {@link CollectionBuilder}, {@link ChildResolver} and {@link ItemChild}\n *\n * @public\n */\nexport type UnserializedListItemChild =\n  | Collection\n  | CollectionBuilder\n  | ChildResolver\n  | Observable<ItemChild>\n\n/**\n * Child of List Item\n * See {@link Collection}, {@link ChildResolver}, {@link ItemChild}\n * @public\n */\nexport type ListItemChild = Collection | ChildResolver | Observable<ItemChild> | undefined\n\n/**\n * Interface for serialize list item options\n *\n * @public\n */\nexport interface ListItemSerializeOptions extends SerializeOptions {\n  /** Check if list item title is optional */\n  titleIsOptional?: boolean\n}\n\n/**\n * Interface for ist item display options\n *\n * @public */\nexport interface ListItemDisplayOptions {\n  /** Check if list item display should show icon */\n  showIcon?: boolean\n}\n\n/**\n * interface for list item input\n *\n * @public */\nexport interface ListItemInput {\n  /** List item id */\n  id: string\n  /** List item title */\n  title?: string\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link ListItemChild} */\n  child?: ListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema type. See {@link SchemaType} */\n  schemaType?: SchemaType | string\n}\n\n/**\n * Interface for List Item\n *\n * @public */\nexport interface ListItem {\n  /** List item id */\n  id: string\n  /** List item type */\n  type: string\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /** List item title. Note that the `i18n` key and namespace will take precedence. */\n  title?: string\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link ListItemChild} */\n  child?: ListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema type. See {@link SchemaType} */\n  schemaType?: SchemaType\n}\n\n/**\n * Interface for unserialized list items.\n *\n * @public\n */\nexport interface UnserializedListItem {\n  /** List item ID */\n  id: string\n  /** List item title */\n  title: string\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link UnserializedListItemChild} */\n  child?: UnserializedListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema. See {@link SchemaType} */\n  schemaType?: SchemaType | string\n}\n\n/**\n * Partial list item. See {@link UnserializedListItem}\n *\n * @public */\nexport type PartialListItem = Partial<UnserializedListItem>\n\n/**\n * Class for building list items\n *\n * @public */\nexport class ListItemBuilder implements Serializable<ListItem> {\n  /** List item option object. See {@link PartialListItem} */\n  protected spec: PartialListItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: ListItemInput,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set list item ID\n   * @returns list item builder based on ID provided. See {@link ListItemBuilder}\n   */\n  id(id: string): ListItemBuilder {\n    return this.clone({id})\n  }\n\n  /**\n   * Get list item ID\n   * @returns list item ID. See {@link PartialListItem}\n   */\n  getId(): PartialListItem['id'] {\n    return this.spec.id\n  }\n\n  /**\n   * Set list item title\n   * @returns list item builder based on title provided. See {@link ListItemBuilder}\n   */\n  title(title: string): ListItemBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /**\n   * Get list item title\n   * @returns list item title. See {@link PartialListItem}\n   */\n  getTitle(): PartialListItem['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ListItemBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /**\n   * Set list item icon\n   * @returns list item builder based on icon provided. See {@link ListItemBuilder}\n   */\n  icon(icon: React.ComponentType | React.ReactNode): ListItemBuilder {\n    return this.clone({icon})\n  }\n\n  /**\n   * Set if list item should show icon\n   * @returns list item builder based on showIcon provided. See {@link ListItemBuilder}\n   */\n  showIcon(enabled = true): ListItemBuilder {\n    return this.clone({\n      displayOptions: {...(this.spec.displayOptions || {}), showIcon: enabled},\n    })\n  }\n\n  /**\n   * Check if list item should show icon\n   * @returns true if it should show the icon, false if not, undefined if not set\n   */\n  getShowIcon(): boolean | undefined {\n    return this.spec.displayOptions ? this.spec.displayOptions.showIcon : undefined\n  }\n\n  /**\n   *Get list item icon\n   * @returns list item icon. See {@link PartialListItem}\n   */\n  getIcon(): PartialListItem['icon'] {\n    return this.spec.icon\n  }\n\n  /**\n   * Set list item child\n   * @param child - list item child. See {@link UnserializedListItemChild}\n   * @returns list item builder based on child provided. See {@link ListItemBuilder}\n   */\n  child(child: UnserializedListItemChild): ListItemBuilder {\n    return this.clone({child})\n  }\n\n  /**\n   * Get list item child\n   * @returns list item child. See {@link PartialListItem}\n   */\n  getChild(): PartialListItem['child'] {\n    return this.spec.child\n  }\n\n  /**\n   * Set list item schema type\n   * @param schemaType - list item schema type. See {@link SchemaType}\n   * @returns list item builder based on schema type provided. See {@link ListItemBuilder}\n   */\n  schemaType(schemaType: SchemaType | string): ListItemBuilder {\n    return this.clone({schemaType})\n  }\n\n  /**\n   * Get list item schema type\n   * @returns list item schema type. See {@link PartialListItem}\n   */\n  getSchemaType(): PartialListItem['schemaType'] {\n    const schemaType = this.spec.schemaType\n\n    if (typeof schemaType === 'string') {\n      return this._context.schema.get(schemaType)\n    }\n\n    return this.spec.schemaType\n  }\n\n  /** Serialize list item builder\n   * @param options - serialization options. See {@link ListItemSerializeOptions}\n   * @returns list item node based on path provided in options. See {@link ListItem}\n   */\n  serialize(options: ListItemSerializeOptions = {path: []}): ListItem {\n    const {id, title, child} = this.spec\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for list items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!options.titleIsOptional && (typeof title !== 'string' || !title)) {\n      throw new SerializeError('`title` is required for list items', options.path, id).withHelpUrl(\n        HELP_URL.TITLE_REQUIRED,\n      )\n    }\n\n    let schemaType = this.spec.schemaType\n    if (typeof schemaType === 'string') {\n      const type = this._context.schema.get(schemaType)\n      if (!type) {\n        throw new SerializeError(\n          `Could not find type \"${schemaType}\" in schema`,\n          options.path,\n          id,\n        ).withHelpUrl(HELP_URL.SCHEMA_TYPE_NOT_FOUND)\n      }\n\n      schemaType = type\n    }\n\n    const serializeOptions = {path: options.path.concat(id), hint: 'child'}\n    let listChild =\n      child instanceof ComponentBuilder ||\n      child instanceof DocumentListBuilder ||\n      child instanceof DocumentBuilder ||\n      child instanceof ListBuilder\n        ? child.serialize(serializeOptions)\n        : child\n\n    // In the case of a function, create a bound version that will pass the correct serialize\n    // context, so we may lazily resolve it at some point in the future without losing context\n    if (typeof listChild === 'function') {\n      const originalChild = listChild\n      listChild = (itemId, childOptions) => {\n        return originalChild(itemId, {...childOptions, serializeOptions})\n      }\n    }\n\n    return {\n      ...this.spec,\n      id: validateId(id, options.path, options.index),\n      schemaType,\n      child: listChild,\n      title,\n      type: 'listItem',\n    }\n  }\n\n  /** Clone list item builder\n   * @param withSpec - partial list item options. See {@link PartialListItem}\n   * @returns list item builder based on context and spec provided. See {@link ListItemBuilder}\n   */\n  clone(withSpec?: PartialListItem): ListItemBuilder {\n    const builder = new ListItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SchemaType} from '@sanity/types'\nimport {isRecord} from 'sanity'\n\nimport {DocumentBuilder} from './Document'\nimport {\n  type ListItem,\n  ListItemBuilder,\n  type ListItemInput,\n  type UnserializedListItem,\n} from './ListItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type SerializeOptions} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * Interface for document list item input\n *\n * @public\n */\nexport interface DocumentListItemInput extends ListItemInput {\n  /** Document list item input schema type. See {@link SchemaType} */\n  schemaType: SchemaType | string\n}\n\n/**\n * Interface for document list item\n *\n * @public\n */\nexport interface DocumentListItem extends ListItem {\n  /** Document schema type. See {@link SchemaType} */\n  schemaType: SchemaType\n  /** Document ID */\n  _id: string\n}\n\n/**\n * Partial document list item\n *\n * @public\n */\nexport type PartialDocumentListItem = Partial<UnserializedListItem>\n\nconst createDefaultChildResolver =\n  (context: StructureContext, spec: PartialDocumentListItem) => (documentId: string) => {\n    const schemaType =\n      spec.schemaType &&\n      (typeof spec.schemaType === 'string' ? spec.schemaType : spec.schemaType.name)\n\n    return schemaType\n      ? context.resolveDocumentNode({schemaType, documentId})\n      : new DocumentBuilder(context).id('documentEditor').documentId(documentId)\n  }\n\n/**\n * Class for building a document list item\n *\n * @public\n */\nexport class DocumentListItemBuilder extends ListItemBuilder {\n  /** Document list options. See {@link PartialDocumentListItem} */\n  protected spec: PartialDocumentListItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListItemInput,\n  ) {\n    super(_context, spec)\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Serialize document list item\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document list item object based on path provided in options. See {@link DocumentListItem}\n   */\n  serialize(options: SerializeOptions = {path: []}): DocumentListItem {\n    const spec = super.serialize({...options, titleIsOptional: true})\n\n    if (!spec.schemaType) {\n      throw new SerializeError(\n        '`schemaType` is required for document list items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.SCHEMA_TYPE_REQUIRED)\n    }\n\n    const child = spec.child || createDefaultChildResolver(this._context, spec)\n    return {...spec, child, schemaType: spec.schemaType, _id: spec.id}\n  }\n\n  /** Clone Document list item builder (allows for options overriding)\n   * @param withSpec - Document list item builder options. See {@link PartialDocumentListItem}\n   * @returns document list item builder. See {@link DocumentListItemBuilder}\n   */\n  clone(withSpec?: PartialDocumentListItem): DocumentListItemBuilder {\n    const builder = new DocumentListItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n\n/** @internal */\nexport function isDocumentListItem(item: unknown): item is DocumentListItem {\n  return isRecord(item) && typeof item.schemaType !== 'undefined' && typeof item._id === 'string'\n}\n","import {type SchemaType} from '@sanity/types'\n\nimport {DocumentListBuilder, type DocumentListInput, type PartialDocumentList} from './DocumentList'\nimport {type GenericListInput} from './GenericList'\nimport {DEFAULT_INTENT_HANDLER} from './Intent'\nimport {type Child} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * Interface for document type list input\n *\n * @public\n */\nexport interface DocumentTypeListInput extends Partial<GenericListInput> {\n  /** Document type list input schema type. See {@link SchemaType} */\n  schemaType: SchemaType | string\n}\n\n/**\n * Class for building a document type list\n *\n * @public\n */\nexport class DocumentTypeListBuilder extends DocumentListBuilder {\n  /** Document list options. See {@link PartialDocumentList} */\n  protected spec: PartialDocumentList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListInput,\n  ) {\n    super(_context)\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set Document type list child\n   * @param child - Child component. See {@link Child}\n   * @returns document type list builder based on child component provided without default intent handler. See {@link DocumentTypeListBuilder}\n   */\n  child(child: Child): DocumentTypeListBuilder {\n    return this.cloneWithoutDefaultIntentHandler({child})\n  }\n\n  /** Clone Document type list builder (allows for options overriding)\n   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}\n   * @returns document type list builder. See {@link DocumentTypeListBuilder}\n   */\n  clone(withSpec?: PartialDocumentList): DocumentTypeListBuilder {\n    const parent = super.clone(withSpec)\n    const builder = new DocumentTypeListBuilder(this._context)\n    builder.spec = {...this.spec, ...parent.getSpec(), ...(withSpec || {})}\n    return builder\n  }\n\n  /** Clone Document type list builder (allows for options overriding) and remove default intent handler\n   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}\n   * @returns document type list builder without default intent handler. See {@link DocumentTypeListBuilder}\n   */\n  cloneWithoutDefaultIntentHandler(withSpec?: PartialDocumentList): DocumentTypeListBuilder {\n    const parent = super.clone(withSpec)\n    const builder = new DocumentTypeListBuilder(this._context)\n    const canHandleIntent = this.spec.canHandleIntent\n    const shouldOverride = canHandleIntent && canHandleIntent.identity === DEFAULT_INTENT_HANDLER\n    const override = shouldOverride ? {canHandleIntent: undefined} : {}\n    builder.spec = {\n      ...parent.getSpec(),\n      ...this.spec,\n      ...(withSpec || {}),\n      ...override,\n    }\n    return builder\n  }\n}\n","import {StackCompactIcon, StackIcon} from '@sanity/icons'\nimport {type SchemaType} from '@sanity/types'\nimport {startCase} from 'lodash'\n\nimport {structureLocaleNamespace} from '../i18n'\nimport {type DocumentListBuilder} from './DocumentList'\nimport {DocumentTypeListBuilder, type DocumentTypeListInput} from './DocumentTypeList'\nimport {defaultIntentChecker} from './Intent'\nimport {type List} from './List'\nimport {type ListItem, ListItemBuilder} from './ListItem'\nimport {getOrderingMenuItemsForSchemaType, MenuItemBuilder} from './MenuItem'\nimport {DEFAULT_SELECTED_ORDERING_OPTION} from './Sort'\nimport {type Collection} from './StructureNodes'\nimport {type StructureContext} from './types'\n\nconst BUNDLED_DOC_TYPES = ['sanity.imageAsset', 'sanity.fileAsset']\n\nfunction isBundledDocType(typeName: string) {\n  return BUNDLED_DOC_TYPES.includes(typeName)\n}\n\nfunction isDocumentType(schemaType: SchemaType) {\n  return schemaType.type?.name === 'document'\n}\n\nfunction isList(collection: Collection): collection is List {\n  return collection.type === 'list'\n}\n\nexport function getDocumentTypes({schema}: StructureContext): string[] {\n  return schema\n    .getTypeNames()\n    .filter((n) => {\n      const schemaType = schema.get(n)\n      return schemaType && isDocumentType(schemaType)\n    })\n    .filter((n) => !isBundledDocType(n))\n}\n\nexport function getDocumentTypeListItems(context: StructureContext): ListItemBuilder[] {\n  const types = getDocumentTypes(context)\n  return types.map((typeName) => getDocumentTypeListItem(context, typeName))\n}\n\nexport function getDocumentTypeListItem(\n  context: StructureContext,\n  typeName: string,\n): ListItemBuilder {\n  const {schema} = context\n\n  const type = schema.get(typeName)\n  if (!type) {\n    throw new Error(`Schema type with name \"${typeName}\" not found`)\n  }\n\n  const title = type.title || startCase(typeName)\n\n  return new ListItemBuilder(context)\n    .id(typeName)\n    .title(title)\n    .schemaType(type)\n    .child((id, childContext) => {\n      const parent = childContext.parent as Collection\n      const parentItem = isList(parent)\n        ? (parent.items.find((item) => item.id === id) as ListItem)\n        : null\n\n      let list = getDocumentTypeList(context, typeName)\n      if (parentItem && parentItem.title) {\n        list = list.title(parentItem.title)\n      }\n\n      return list\n    })\n}\n\nexport function getDocumentTypeList(\n  context: StructureContext,\n  typeNameOrSpec: string | DocumentTypeListInput,\n): DocumentListBuilder {\n  const {schema, resolveDocumentNode} = context\n\n  const schemaType = typeof typeNameOrSpec === 'string' ? typeNameOrSpec : typeNameOrSpec.schemaType\n  const typeName = typeof schemaType === 'string' ? schemaType : schemaType.name\n  const spec: DocumentTypeListInput =\n    typeof typeNameOrSpec === 'string' ? {schemaType} : typeNameOrSpec\n\n  const type = schema.get(typeName)\n  if (!type) {\n    throw new Error(`Schema type with name \"${typeName}\" not found`)\n  }\n\n  const title = type.title || startCase(typeName)\n\n  return new DocumentTypeListBuilder(context)\n    .id(spec.id || typeName)\n    .title(spec.title || title)\n    .filter('_type == $type')\n    .params({type: typeName})\n    .schemaType(type)\n    .defaultOrdering(DEFAULT_SELECTED_ORDERING_OPTION.by)\n    .menuItemGroups(\n      spec.menuItemGroups || [\n        {\n          id: 'sorting',\n          title: 'Sort',\n          i18n: {title: {key: 'menu-item-groups.actions-group', ns: structureLocaleNamespace}},\n        },\n        {\n          id: 'layout',\n          title: 'Layout',\n          i18n: {title: {key: 'menu-item-groups.layout-group', ns: structureLocaleNamespace}},\n        },\n        {\n          id: 'actions',\n          title: 'Actions',\n          i18n: {title: {key: 'menu-item-groups.sorting-group', ns: structureLocaleNamespace}},\n        },\n      ],\n    )\n    .child(\n      spec.child ||\n        ((documentId: string) => resolveDocumentNode({schemaType: typeName, documentId})),\n    )\n    .canHandleIntent(spec.canHandleIntent || defaultIntentChecker)\n    .menuItems(\n      spec.menuItems || [\n        // Create new (from action button) will be added in serialization step of GenericList\n\n        // Sort by <Y>\n        ...getOrderingMenuItemsForSchemaType(context, type),\n\n        // Display as <Z>\n        new MenuItemBuilder(context)\n          .group('layout')\n          .i18n({title: {key: 'menu-items.layout.compact-view', ns: structureLocaleNamespace}})\n          .title('Compact view') // fallback title\n          .icon(StackCompactIcon)\n          .action('setLayout')\n          .params({layout: 'default'}),\n\n        new MenuItemBuilder(context)\n          .group('layout')\n          .i18n({title: {key: 'menu-items.layout.detailed-view', ns: structureLocaleNamespace}})\n          .title('Detailed view') // fallback title\n          .icon(StackIcon)\n          .action('setLayout')\n          .params({layout: 'detail'}),\n\n        // Create new (from menu) will be added in serialization step of GenericList\n      ],\n    )\n}\n","import {type SchemaType} from '@sanity/types'\nimport {uniqueId} from 'lodash'\nimport {isValidElementType} from 'react-is'\nimport {getConfigContextFromSource, getPublishedId, type Source} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\nimport {ComponentBuilder, type ComponentInput} from './Component'\nimport {DocumentBuilder, documentFromEditor, documentFromEditorWithInitialValue} from './Document'\nimport {DocumentListBuilder} from './DocumentList'\nimport {DocumentListItemBuilder} from './DocumentListItem'\nimport {\n  getDocumentTypeList,\n  getDocumentTypeListItem,\n  getDocumentTypeListItems,\n} from './documentTypeListItems'\nimport {\n  defaultInitialValueTemplateItems,\n  InitialValueTemplateItemBuilder,\n  menuItemsFromInitialValueTemplateItems,\n} from './InitialValueTemplateItem'\nimport {ListBuilder} from './List'\nimport {ListItemBuilder} from './ListItem'\nimport {getOrderingMenuItem, getOrderingMenuItemsForSchemaType, MenuItemBuilder} from './MenuItem'\nimport {MenuItemGroupBuilder} from './MenuItemGroup'\nimport {type Divider} from './StructureNodes'\nimport {\n  type DefaultDocumentNodeResolver,\n  type StructureBuilder,\n  type StructureContext,\n  type UserComponent,\n} from './types'\nimport * as views from './views'\n\n/** @internal */\nexport interface StructureBuilderOptions {\n  source: Source\n  defaultDocumentNode?: DefaultDocumentNodeResolver\n}\n\nfunction hasIcon(schemaType?: SchemaType | string): boolean {\n  if (!schemaType || typeof schemaType === 'string') {\n    return false\n  }\n\n  return Boolean(schemaType.icon)\n}\n\nfunction getDefaultStructure(context: StructureContext): ListBuilder {\n  const items = getDocumentTypeListItems(context)\n  return new ListBuilder(context)\n    .id('__root__')\n    .title('Content')\n    .i18n({title: {key: 'default-definition.content-title', ns: structureLocaleNamespace}})\n    .items(items)\n    .showIcons(items.some((item) => hasIcon(item.getSchemaType())))\n}\n\n/** @internal */\nexport function createStructureBuilder({\n  defaultDocumentNode,\n  source,\n}: StructureBuilderOptions): StructureBuilder {\n  const configContext = getConfigContextFromSource(source)\n  const context: StructureContext = {\n    ...source,\n    getStructureBuilder: () => structureBuilder,\n    resolveDocumentNode: (options) => {\n      let builder =\n        defaultDocumentNode?.(structureBuilder, {...options, ...configContext}) ||\n        new DocumentBuilder(context)\n\n      if (!builder.getId()) {\n        builder = builder.id('documentEditor')\n      }\n\n      if (options.documentId) {\n        builder = builder.documentId(getPublishedId(options.documentId))\n      }\n\n      return builder.schemaType(options.schemaType)\n    },\n  }\n\n  const structureBuilder: StructureBuilder = {\n    defaults: () => getDefaultStructure(context),\n    documentTypeList: (...args) => getDocumentTypeList(context, ...args),\n    documentTypeListItem: (...args) => getDocumentTypeListItem(context, ...args),\n    documentTypeListItems: (...args) => getDocumentTypeListItems(context, ...args),\n    document: (...args) => new DocumentBuilder(context, ...args),\n    documentWithInitialValueTemplate: (...args) =>\n      documentFromEditorWithInitialValue(context, ...args),\n    defaultDocument: context.resolveDocumentNode,\n\n    list: (...args) => new ListBuilder(context, ...args),\n    listItem: (...args) => new ListItemBuilder(context, ...args),\n\n    menuItem: (...args) => new MenuItemBuilder(context, ...args),\n    menuItemGroup: (...args) => new MenuItemGroupBuilder(context, ...args),\n    menuItemsFromInitialValueTemplateItems: (...args) =>\n      menuItemsFromInitialValueTemplateItems(context, ...args),\n\n    documentList: (...args) => new DocumentListBuilder(context, ...args),\n    documentListItem: (...args) => new DocumentListItemBuilder(context, ...args),\n\n    orderingMenuItem: (...args) => getOrderingMenuItem(context, ...args),\n    orderingMenuItemsForType: (...args) => getOrderingMenuItemsForSchemaType(context, ...args),\n\n    editor: (...args) => documentFromEditor(context, ...args),\n\n    defaultInitialValueTemplateItems: (...args) =>\n      defaultInitialValueTemplateItems(context, ...args),\n\n    initialValueTemplateItem: (\n      templateId: string,\n      parameters?: Record<string, unknown>,\n    ): InitialValueTemplateItemBuilder =>\n      new InitialValueTemplateItemBuilder(context, {\n        id: templateId,\n        parameters,\n        templateId,\n      }),\n\n    component: (spec?: ComponentInput | UserComponent) => {\n      return isValidElementType(spec)\n        ? new ComponentBuilder().component(spec as UserComponent)\n        : new ComponentBuilder(spec as ComponentInput)\n    },\n\n    divider: (): Divider => ({id: uniqueId('__divider__'), type: 'divider'}),\n\n    view: views,\n    context,\n  }\n\n  return structureBuilder\n}\n","import {type DocumentBadgeComponent} from 'sanity'\n\n/** @internal */\nexport const LiveEditBadge: DocumentBadgeComponent = (props) => {\n  const {liveEdit} = props\n\n  if (liveEdit) {\n    return {\n      label: 'Live',\n      color: 'danger',\n    }\n  }\n\n  return null\n}\nLiveEditBadge.displayName = 'LiveEditBadge'\n","import {uuid} from '@sanity/uuid'\n\nimport {EMPTY_PARAMS, type LOADING_PANE} from './constants'\nimport {type PaneNode, type RouterPanes} from './types'\n\nconst state: {\n  activePanes: Array<PaneNode | typeof LOADING_PANE>\n} = {activePanes: []}\n\nexport function setActivePanes(panes: Array<PaneNode | typeof LOADING_PANE>): void {\n  state.activePanes = panes\n}\n\n/**\n * This function looks at the _active panes_ to resolve an intent. this type of\n * intent resolution is faster and does not cause the panes to reset\n *\n * @internal\n */\nexport function getIntentState(\n  intent: string,\n  params: Record<string, string>,\n  routerState: {panes?: RouterPanes} | undefined,\n  payload: unknown,\n): {panes: RouterPanes} | {intent: string; params: Record<string, string>; payload: unknown} {\n  const panes = routerState?.panes || []\n  const activePanes = state.activePanes || []\n  const editDocumentId = params.id || uuid()\n  const isTemplate = intent === 'create' && params.template\n\n  // Loop through open panes and see if any of them can handle the intent\n  for (let i = activePanes.length - 1; i >= 0; i--) {\n    const pane = activePanes[i]\n\n    if (typeof pane !== 'object') continue\n\n    // NOTE: if you update this logic, please also update the similar handler in\n    // `resolveIntent.ts`\n    if (\n      pane.canHandleIntent?.(intent, params, {\n        pane,\n        index: i,\n      }) ||\n      // see `resolveIntent.ts` for more info\n      (pane.type === 'documentList' &&\n        pane.schemaTypeName === params.type &&\n        pane.options.filter === '_type == $type')\n    ) {\n      const paneParams = isTemplate ? {template: params.template} : EMPTY_PARAMS\n\n      return {\n        panes: panes\n          .slice(0, i)\n          .concat([[{id: editDocumentId, params: paneParams, payload}]]) as RouterPanes,\n      }\n    }\n  }\n\n  return {intent: intent, params, payload}\n}\n","import {\n  AddIcon,\n  CloseIcon,\n  EditIcon,\n  type IconComponent,\n  PublishIcon,\n  TrashIcon,\n  UnpublishIcon,\n} from '@sanity/icons'\n\nexport const TIMELINE_ICON_COMPONENTS: {[key: string]: IconComponent | undefined} = {\n  create: AddIcon,\n  delete: TrashIcon,\n  discardDraft: CloseIcon,\n  initial: AddIcon,\n  editDraft: EditIcon,\n  editLive: EditIcon,\n  publish: PublishIcon,\n  unpublish: UnpublishIcon,\n}\n","import {type IconComponent} from '@sanity/icons'\nimport {type ChunkType} from 'sanity'\n\nimport {TIMELINE_ICON_COMPONENTS} from './constants'\n\nexport function getTimelineEventIconComponent(type: ChunkType): IconComponent | undefined {\n  return TIMELINE_ICON_COMPONENTS[type]\n}\n","import {ChevronLeftIcon} from '@sanity/icons'\nimport {type MouseEvent, useCallback} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {TIMELINE_LIST_WRAPPER_ID} from './timeline'\n\n/**\n * This is a hack to force the scrollbar to not appear when the list is expanding,\n * if we don't do this the scrollbar will appear for a brief moment when the list is expanding and then disappear\n * when the list is fully expanded.\n */\nfunction hideScrollbarOnExpand(isExpanded: boolean) {\n  // Do nothing if the list is already expanded\n  if (isExpanded) return\n\n  const listWrapper = document.getElementById(TIMELINE_LIST_WRAPPER_ID)\n\n  if (listWrapper) {\n    const firstChildren = listWrapper.children[0] as HTMLElement\n    const hasScrollbar = firstChildren.scrollHeight > firstChildren.clientHeight\n    if (!hasScrollbar) {\n      //\n      const currentStyle = getComputedStyle(firstChildren).overflowY\n      // Add overflow hidden to the listWrapper to avoid the scrollbar to appear when expanding\n      firstChildren.style.overflowY = 'hidden'\n      setTimeout(() => {\n        // Reset the overflow style after the list is expanded\n        firstChildren.style.overflowY = currentStyle\n      }, 0)\n    }\n  }\n}\n\nconst FlipIcon = styled(ChevronLeftIcon)`\n  transition: transform 200ms;\n  &[data-expanded='true'] {\n    transform: rotate(-90deg);\n  }\n`\n\nexport function ExpandableTimelineItemButton({\n  isExpanded,\n  onExpand,\n}: {\n  isExpanded: boolean\n  onExpand: () => void\n}) {\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleExpandClick = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.stopPropagation()\n      hideScrollbarOnExpand(isExpanded)\n      onExpand()\n    },\n    [onExpand, isExpanded],\n  )\n\n  return (\n    <Button\n      mode=\"bleed\"\n      icon={<FlipIcon data-expanded={isExpanded} />}\n      tooltipProps={{\n        content: isExpanded\n          ? t('timeline-item.menu.action-collapse')\n          : t('timeline-item.menu.action-expand'),\n      }}\n      onClick={handleExpandClick}\n    />\n  )\n}\n","import {Box, Flex, Stack} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\nexport const StackWrapper = styled(Stack)`\n  max-width: 200px;\n`\n\nexport const ListWrapper = styled(Flex)<{$maxHeight: string}>`\n  max-height: ${(props) => props.$maxHeight};\n  min-width: 244px;\n`\n\nexport const Root = styled(Box)<{$visible?: boolean}>(({$visible}) => {\n  return css`\n    opacity: 0;\n    pointer-events: none;\n    transition: opacity 0.2s;\n\n    ${$visible &&\n    css`\n      opacity: 1;\n      pointer-events: auto;\n    `}\n  `\n})\n","import {type ChunkType, type StudioLocaleResourceKeys} from 'sanity'\n\n/**\n * Maps from a chunk type to an i18n key for the operation\n *\n * @internal\n */\nexport const TIMELINE_ITEM_I18N_KEY_MAPPING: Record<ChunkType, StudioLocaleResourceKeys> = {\n  initial: 'timeline.operation.created-initial',\n  create: 'timeline.operation.created',\n  publish: 'timeline.operation.published',\n  editLive: 'timeline.operation.edited-live',\n  editDraft: 'timeline.operation.edited-draft',\n  unpublish: 'timeline.operation.unpublished',\n  discardDraft: 'timeline.operation.draft-discarded',\n  delete: 'timeline.operation.deleted',\n}\n","import {type AvatarSize, AvatarStack} from '@sanity/ui'\nimport {UserAvatar} from 'sanity'\n\ninterface UserAvatarStackProps {\n  maxLength?: number\n  userIds: string[]\n  size?: AvatarSize\n  withTooltip?: boolean\n}\n\nexport function UserAvatarStack({\n  maxLength,\n  userIds,\n  size,\n  withTooltip = true,\n}: UserAvatarStackProps) {\n  return (\n    <AvatarStack maxLength={maxLength} size={size}>\n      {userIds.map((userId) => (\n        <UserAvatar key={userId} user={userId} withTooltip={withTooltip} />\n      ))}\n    </AvatarStack>\n  )\n}\n","import {Box, Card, Flex, Skeleton, Stack, Text} from '@sanity/ui'\n// eslint-disable-next-line camelcase\nimport {getTheme_v2, type ThemeColorAvatarColorKey} from '@sanity/ui/theme'\nimport {createElement, type MouseEvent, useCallback, useMemo} from 'react'\nimport {\n  type ChunkType,\n  type RelativeTimeOptions,\n  useDateTimeFormat,\n  UserAvatar,\n  useRelativeTime,\n  useTranslation,\n  useUser,\n} from 'sanity'\nimport {css, styled} from 'styled-components'\n\nimport {Tooltip} from '../../../../ui-components'\nimport {getTimelineEventIconComponent} from './helpers'\nimport {TIMELINE_ITEM_I18N_KEY_MAPPING} from './timelineI18n'\nimport {UserAvatarStack} from './userAvatarStack'\nimport {type ChunksWithCollapsedDrafts} from './utils'\n\nexport const IconBox = styled(Flex)<{$color: ThemeColorAvatarColorKey}>((props) => {\n  const theme = getTheme_v2(props.theme)\n  const color = props.$color\n\n  return css`\n    --card-icon-color: ${theme.color.avatar[color].fg};\n    background-color: ${theme.color.avatar[color].bg};\n    box-shadow: 0 0 0 1px var(--card-bg-color);\n\n    position: absolute;\n    width: ${theme.avatar.sizes[0].size}px;\n    height: ${theme.avatar.sizes[0].size}px;\n    right: -3px;\n    bottom: -3px;\n    border-radius: 50%;\n  `\n})\n\nconst TIMELINE_ITEM_EVENT_TONE: Record<ChunkType | 'withinSelection', ThemeColorAvatarColorKey> = {\n  initial: 'blue',\n  create: 'blue',\n  publish: 'green',\n  editLive: 'green',\n  editDraft: 'yellow',\n  unpublish: 'orange',\n  discardDraft: 'orange',\n  delete: 'red',\n  withinSelection: 'magenta',\n}\n\nexport interface TimelineItemProps {\n  chunk: ChunksWithCollapsedDrafts\n  isSelected: boolean\n  onSelect: (chunk: ChunksWithCollapsedDrafts) => void\n  collaborators?: Set<string>\n  optionsMenu?: React.ReactNode\n}\n\nconst RELATIVE_TIME_OPTIONS: RelativeTimeOptions = {\n  minimal: true,\n  useTemporalPhrase: true,\n}\n\nconst AvatarSkeleton = styled(Skeleton)((props) => {\n  const theme = getTheme_v2(props.theme)\n  return css`\n    border-radius: 50%;\n    width: ${theme.avatar.sizes[1].size}px;\n    height: ${theme.avatar.sizes[1].size}px;\n  `\n})\n\nconst NameSkeleton = styled(Skeleton)((props) => {\n  const theme = getTheme_v2(props.theme)\n  return css`\n    width: 6ch;\n    height: ${theme.font.text.sizes[0].lineHeight}px;\n  `\n})\n\nconst UserLine = ({userId}: {userId: string}) => {\n  const [user, loading] = useUser(userId)\n\n  return (\n    <Flex align=\"center\" gap={2} key={userId} padding={1}>\n      <Box>{loading || !user ? <AvatarSkeleton animated /> : <UserAvatar user={user} />}</Box>\n      <Box>\n        {loading || !user?.displayName ? (\n          <Text size={1}>\n            <NameSkeleton animated />\n          </Text>\n        ) : (\n          <Text muted size={1}>\n            {user.displayName}\n          </Text>\n        )}\n      </Box>\n    </Flex>\n  )\n}\nconst TooltipContent = ({collaborators}: {collaborators: string[]}) => {\n  const {t} = useTranslation('studio')\n  return (\n    <Stack paddingBottom={1}>\n      <Box padding={1} paddingBottom={2}>\n        <Text size={1} weight=\"medium\">\n          {t('timeline.changes.title')}\n        </Text>\n      </Box>\n      {collaborators.map((userId) => (\n        <UserLine key={userId} userId={userId} />\n      ))}\n    </Stack>\n  )\n}\nexport function TimelineItem({\n  chunk,\n  isSelected,\n  onSelect,\n  collaborators,\n  optionsMenu,\n}: TimelineItemProps) {\n  const {t} = useTranslation('studio')\n  const {type, endTimestamp: timestamp} = chunk\n  const iconComponent = getTimelineEventIconComponent(type)\n  const authorUserIds = Array.from(chunk.authors)\n  const collaboratorsUsersIds = collaborators ? Array.from(collaborators) : []\n  const isSelectable = type !== 'delete'\n  const dateFormat = useDateTimeFormat({dateStyle: 'medium', timeStyle: 'short'})\n  const date = new Date(timestamp)\n\n  const updatedTimeAgo = useRelativeTime(date || '', RELATIVE_TIME_OPTIONS)\n\n  const formattedTimestamp = useMemo(() => {\n    const parsedDate = new Date(timestamp)\n    const formattedDate = dateFormat.format(parsedDate)\n\n    return formattedDate\n  }, [timestamp, dateFormat])\n\n  const handleClick = useCallback(\n    (evt: MouseEvent<HTMLDivElement>) => {\n      evt.preventDefault()\n      evt.stopPropagation()\n\n      if (isSelectable) {\n        onSelect(chunk)\n      }\n    },\n    [onSelect, chunk, isSelectable],\n  )\n\n  return (\n    <Flex align=\"center\" gap={1}>\n      <Card\n        as=\"button\"\n        onClick={handleClick}\n        padding={2}\n        pressed={isSelected}\n        radius={2}\n        data-ui=\"timelineItem\"\n        data-testid=\"timeline-item-button\"\n        data-chunk-id={chunk.id}\n      >\n        <Flex align=\"center\" gap={3}>\n          <div style={{position: 'relative'}}>\n            <UserAvatarStack maxLength={3} userIds={authorUserIds} size={2} />\n            <IconBox align=\"center\" justify=\"center\" $color={TIMELINE_ITEM_EVENT_TONE[type]}>\n              <Text size={0}>{iconComponent && createElement(iconComponent)}</Text>\n            </IconBox>\n          </div>\n          <Stack space={2}>\n            <Text size={1} weight=\"medium\">\n              {t(TIMELINE_ITEM_I18N_KEY_MAPPING[type]) || <code>{type}</code>}\n            </Text>\n\n            <Text as=\"time\" size={1} muted dateTime={timestamp} title={formattedTimestamp}>\n              {updatedTimeAgo}\n            </Text>\n          </Stack>\n\n          {collaboratorsUsersIds.length > 0 && (\n            <Flex flex={1} justify=\"flex-end\" align=\"center\">\n              <Tooltip\n                placement=\"top\"\n                content={<TooltipContent collaborators={collaboratorsUsersIds} />}\n                portal\n              >\n                <Box paddingLeft={2} paddingY={2}>\n                  <UserAvatarStack\n                    maxLength={3}\n                    userIds={collaboratorsUsersIds}\n                    size={0}\n                    withTooltip={false}\n                  />\n                </Box>\n              </Tooltip>\n            </Flex>\n          )}\n        </Flex>\n      </Card>\n      {optionsMenu}\n    </Flex>\n  )\n}\n","import {type Chunk, type ChunkType} from 'sanity'\n\nexport type NonPublishChunk = Omit<Chunk, 'type'> & {\n  type: Exclude<ChunkType, 'publish'>\n  parentId?: string\n}\n\nexport type PublishChunk = Omit<Chunk, 'type'> & {\n  type: 'publish'\n  children: string[]\n  collaborators: Set<string>\n}\n\nexport const isNonPublishChunk = (chunk: Chunk): chunk is NonPublishChunk =>\n  chunk.type !== 'publish'\n\nexport const isPublishChunk = (chunk: Chunk): chunk is PublishChunk => chunk.type === 'publish'\n\n/**\n * searches for the previous publish action in the list of chunks\n * e.g. chunks = [publish, edit, publish, edit, edit] it needs to return the second publish action\n * e.g. chunks = [publish, edit, delete, edit, edit] it returns undefined\n */\n\nfunction getPreviousPublishAction(chunks: Chunk[]) {\n  let previousPublish: PublishChunk | null = null\n  // We need to iterate from the end to the start of the list\n  for (let index = chunks.length - 1; index >= 0; index--) {\n    const chunk = chunks[index]\n    if (isPublishChunk(chunk)) {\n      previousPublish = chunk\n      break\n    }\n    if (chunk.type === 'editDraft') {\n      continue\n    } else break\n  }\n\n  return previousPublish\n}\nexport type ChunksWithCollapsedDrafts = NonPublishChunk | PublishChunk\n\n/**\n * Takes an array of chunks and adds them metadata necessary for the timeline view.\n * for draft chunks, it will add the parentId of the published chunk if this draft action is now published\n * for published, it will add the children array and the collaborators array\n */\nexport function addChunksMetadata(chunks: Chunk[]): ChunksWithCollapsedDrafts[] {\n  const result: ChunksWithCollapsedDrafts[] = []\n\n  for (const chunk of chunks) {\n    if (isPublishChunk(chunk)) {\n      result.push({\n        ...chunk,\n        type: 'publish',\n        children: [],\n        collaborators: new Set(), // Initialize the collaborators array\n      })\n      continue\n    }\n    if (isNonPublishChunk(chunk)) {\n      const previousPublish = getPreviousPublishAction(result)\n      if (chunk.type === 'editDraft' && previousPublish?.type === 'publish') {\n        Array.from(chunk.authors).forEach((id) => {\n          previousPublish.collaborators.add(id)\n        })\n        previousPublish.children.push(chunk.id)\n        result.push({\n          ...chunk,\n          parentId: previousPublish.id,\n        })\n        continue\n      }\n    }\n    if (isNonPublishChunk(chunk)) {\n      result.push(chunk)\n    }\n  }\n\n  return result\n}\n","import {Box, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  type Chunk,\n  CommandList,\n  type CommandListRenderItemCallback,\n  LoadingBlock,\n  useTranslation,\n} from 'sanity'\n\nimport {ExpandableTimelineItemButton} from './expandableTimelineItemButton'\nimport {ListWrapper, Root, StackWrapper} from './timeline.styled'\nimport {TimelineItem} from './timelineItem'\nimport {\n  addChunksMetadata,\n  type ChunksWithCollapsedDrafts,\n  isNonPublishChunk,\n  isPublishChunk,\n} from './utils'\n\ninterface TimelineProps {\n  chunks: Chunk[]\n  hasMoreChunks: boolean | null\n  lastChunk?: Chunk | null\n  onLoadMore: () => void\n  onSelect: (chunk: Chunk) => void\n  /**\n   * The list needs a predefined max height for the scroller to work.\n   */\n  listMaxHeight?: string\n}\n\nexport const TIMELINE_LIST_WRAPPER_ID = 'timeline-list-wrapper'\n\nexport const Timeline = ({\n  chunks,\n  hasMoreChunks,\n  lastChunk: selectedChunk,\n  onLoadMore,\n  onSelect,\n  listMaxHeight = 'calc(100vh - 280px)',\n}: TimelineProps) => {\n  const [mounted, setMounted] = useState(false)\n  const {t} = useTranslation('studio')\n  const selectedChunkId = selectedChunk?.id\n  const chunksWithMetadata = useMemo(() => addChunksMetadata(chunks), [chunks])\n\n  const [expandedParents, setExpandedParents] = useState<Set<string>>(() => {\n    if (selectedChunkId) {\n      // If the selected chunk is a draft, we need to expand its parent\n      const selected = chunksWithMetadata.find((chunk) => chunk.id === selectedChunkId)\n      if (selected && isNonPublishChunk(selected) && selected.parentId) {\n        return new Set([selected.parentId])\n      }\n    }\n    return new Set()\n  })\n\n  useEffect(() => {\n    // This effect ensures that when we reload the timeline with a selected draft, we expand its parent.\n    if (selectedChunkId) {\n      const selected = chunksWithMetadata.find((chunk) => chunk.id === selectedChunkId)\n      if (selected && isNonPublishChunk(selected) && selected.parentId) {\n        const parentId = selected.parentId\n        setExpandedParents((prev) => {\n          if (prev.has(parentId)) return prev\n          const next = new Set(prev)\n          next.add(parentId)\n          return next\n        })\n      }\n    }\n  }, [chunksWithMetadata, selectedChunkId])\n\n  const filteredChunks = useMemo(() => {\n    return chunksWithMetadata.filter((chunk) => {\n      if (isPublishChunk(chunk) || !chunk.parentId) return true\n      // If the chunk has a parent id keep it hidden until the parent is expanded.\n      return expandedParents.has(chunk.parentId)\n    })\n  }, [chunksWithMetadata, expandedParents])\n\n  useEffect(() => {\n    // This effect ensures that we load more chunks if the list is not long enough.\n    // This could happen if a parent chunk has multiple drafts, so you could end with a list of 50 transactions but only\n    // 1 parent chunk, the publish, which squashed all the changes.\n    // In that case, users will see the loading block at the bottom, but nothing will really be happening. Because they haven't reach the end of the list.\n    if (filteredChunks.length < 16 && hasMoreChunks) {\n      onLoadMore()\n    }\n  }, [filteredChunks, hasMoreChunks, onLoadMore])\n\n  const handleExpandParent = useCallback(\n    (parentId: string) => () =>\n      setExpandedParents((prev) => {\n        const next = new Set(prev)\n\n        if (prev.has(parentId)) next.delete(parentId)\n        else next.add(parentId)\n\n        return next\n      }),\n    [],\n  )\n\n  const selectedIndex = useMemo(\n    () =>\n      selectedChunkId ? filteredChunks.findIndex((chunk) => chunk.id === selectedChunkId) : -1,\n    [selectedChunkId, filteredChunks],\n  )\n  const handleSelectChunk = useCallback(\n    (chunk: ChunksWithCollapsedDrafts) => {\n      const timelineChunk = chunks.find((c) => c.id === chunk.id)\n      if (timelineChunk) onSelect(timelineChunk)\n      else {\n        console.error('TimelineItem: chunk not found')\n        onSelect(chunk)\n      }\n    },\n    [chunks, onSelect],\n  )\n\n  const renderItem = useCallback<CommandListRenderItemCallback<(typeof filteredChunks)[number]>>(\n    (chunk, {activeIndex}) => {\n      const isFirst = activeIndex === 0\n\n      return (\n        <Box\n          paddingBottom={1}\n          paddingTop={isFirst ? 1 : 0}\n          paddingRight={1}\n          paddingLeft={isNonPublishChunk(chunk) && chunk.parentId ? 4 : 1}\n        >\n          <TimelineItem\n            chunk={chunk}\n            isSelected={selectedChunkId === chunk.id}\n            onSelect={handleSelectChunk}\n            collaborators={isPublishChunk(chunk) ? chunk.collaborators : undefined}\n            optionsMenu={\n              isPublishChunk(chunk) && chunk.children.length > 0 ? (\n                <ExpandableTimelineItemButton\n                  isExpanded={expandedParents.has(chunk.id)}\n                  onExpand={handleExpandParent(chunk.id)}\n                />\n              ) : null\n            }\n          />\n          {activeIndex === filteredChunks.length - 1 && hasMoreChunks && <LoadingBlock />}\n        </Box>\n      )\n    },\n    [\n      expandedParents,\n      filteredChunks.length,\n      handleExpandParent,\n      handleSelectChunk,\n      hasMoreChunks,\n      selectedChunkId,\n    ],\n  )\n\n  useEffect(() => setMounted(true), [])\n\n  return (\n    <Root\n      /**\n       * We delay initial rendering if `selectedIndex` is present.\n       * This is a _temporary_ workaround to allow the virtual <CommandList>\n       * to scroll to a specific index prior to being displayed.\n       *\n       * Without this, there'll be a noticeable 'flash' where the virtual list\n       * will render with its child items at the top and then scroll into position.\n       */\n      $visible={!selectedIndex || mounted}\n      data-ui=\"timeline\"\n    >\n      {filteredChunks.length === 0 && (\n        <StackWrapper padding={3} space={3}>\n          <Text size={1} weight=\"medium\">\n            {t('timeline.error.no-document-history-title')}\n          </Text>\n          <Text muted size={1}>\n            {t('timeline.error.no-document-history-description')}\n          </Text>\n        </StackWrapper>\n      )}\n\n      {filteredChunks.length > 0 && (\n        <ListWrapper direction=\"column\" $maxHeight={listMaxHeight} id={TIMELINE_LIST_WRAPPER_ID}>\n          <CommandList\n            activeItemDataAttr=\"data-hovered\"\n            ariaLabel={t('timeline.list.aria-label')}\n            autoFocus=\"list\"\n            initialIndex={selectedIndex}\n            initialScrollAlign=\"center\"\n            itemHeight={57}\n            items={filteredChunks}\n            onEndReached={onLoadMore}\n            onEndReachedIndexOffset={20}\n            overscan={5}\n            renderItem={renderItem}\n            wrapAround={false}\n          />\n        </ListWrapper>\n      )}\n    </Root>\n  )\n}\n\nTimeline.displayName = 'Timeline'\n","import {ErrorOutlineIcon} from '@sanity/icons'\nimport {Flex, Stack} from '@sanity/ui'\nimport {TextWithTone, useTranslation} from 'sanity'\n\nexport function TimelineError() {\n  const {t} = useTranslation('studio')\n\n  return (\n    <Flex align=\"flex-start\" gap={3} padding={4}>\n      <TextWithTone tone=\"critical\">\n        <ErrorOutlineIcon />\n      </TextWithTone>\n      <Stack space={4}>\n        <TextWithTone size={1} tone=\"critical\" weight=\"medium\">\n          {t('timeline.error.load-document-changes-title')}\n        </TextWithTone>\n        <TextWithTone size={1} tone=\"critical\">\n          {t('timeline.error.load-document-changes-description')}\n        </TextWithTone>\n      </Stack>\n    </Flex>\n  )\n}\n","import {ChevronDownIcon} from '@sanity/icons'\nimport {\n  Flex,\n  type Placement,\n  PortalProvider,\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useToast,\n} from '@sanity/ui'\nimport {useCallback, useMemo, useState} from 'react'\nimport {type Chunk, useTimelineSelector, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, Popover} from '../../../../ui-components'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {Timeline} from './timeline'\nimport {TimelineError} from './TimelineError'\nimport {TIMELINE_ITEM_I18N_KEY_MAPPING} from './timelineI18n'\n\ninterface TimelineMenuProps {\n  chunk: Chunk | null\n  mode: 'rev' | 'since'\n  placement?: Placement\n}\n\nconst Root = styled(Popover)`\n  overflow: hidden;\n  overflow: clip;\n`\n\nexport const TIMELINE_MENU_PORTAL = 'timeline-menu'\n\nexport function TimelineMenu({chunk, mode, placement}: TimelineMenuProps) {\n  const {setTimelineRange, setTimelineMode, timelineError, ready, timelineStore} = useDocumentPane()\n  const [open, setOpen] = useState(false)\n  const [button, setButton] = useState<HTMLButtonElement | null>(null)\n  const [popoverRef, setPopoverRef] = useState<HTMLElement | null>(null)\n\n  const toast = useToast()\n\n  const chunks = useTimelineSelector(timelineStore, (state) => state.chunks)\n  const loading = useTimelineSelector(timelineStore, (state) => state.isLoading)\n  const hasMoreChunks = useTimelineSelector(timelineStore, (state) => state.hasMoreChunks)\n  const realRevChunk = useTimelineSelector(timelineStore, (state) => state.realRevChunk)\n  const sinceTime = useTimelineSelector(timelineStore, (state) => state.sinceTime)\n\n  const {t} = useTranslation('studio')\n\n  const handleOpen = useCallback(() => {\n    setTimelineMode(mode)\n    setOpen(true)\n  }, [mode, setTimelineMode])\n\n  const handleClose = useCallback(() => {\n    setTimelineMode('closed')\n    setOpen(false)\n  }, [setTimelineMode])\n\n  const handleGlobalKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (open && (event.key === 'Escape' || event.key === 'Tab')) {\n        handleClose()\n        button?.focus()\n      }\n    },\n    [button, handleClose, open],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(open && handleClose, () => [button, popoverRef])\n\n  const selectRev = useCallback(\n    (revChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore.findRangeForRev(revChunk)\n        setTimelineMode('closed')\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineMode, setTimelineRange, t, timelineStore, toast],\n  )\n\n  const selectSince = useCallback(\n    (sinceChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore.findRangeForSince(sinceChunk)\n        setTimelineMode('closed')\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineMode, setTimelineRange, t, timelineStore, toast],\n  )\n\n  const handleLoadMore = useCallback(() => {\n    if (!loading) {\n      timelineStore.loadMore()\n    }\n  }, [loading, timelineStore])\n\n  const content = useMemo(() => {\n    if (timelineError) return <TimelineError />\n\n    if (mode === 'rev') {\n      return (\n        <Timeline\n          chunks={chunks}\n          hasMoreChunks={hasMoreChunks}\n          lastChunk={realRevChunk}\n          onLoadMore={handleLoadMore}\n          onSelect={selectRev}\n        />\n      )\n    }\n\n    const filteredChunks = realRevChunk\n      ? chunks.filter((c) => c.index < realRevChunk.index)\n      : chunks\n    return (\n      <Timeline\n        chunks={filteredChunks}\n        hasMoreChunks={hasMoreChunks}\n        lastChunk={sinceTime}\n        onLoadMore={handleLoadMore}\n        onSelect={selectSince}\n      />\n    )\n  }, [\n    chunks,\n    handleLoadMore,\n    hasMoreChunks,\n    mode,\n    realRevChunk,\n    selectRev,\n    selectSince,\n    sinceTime,\n    timelineError,\n  ])\n\n  const formatParams = {\n    timestamp: {dateStyle: 'medium', timeStyle: 'short'},\n  }\n\n  const revLabel = chunk\n    ? t(TIMELINE_ITEM_I18N_KEY_MAPPING[chunk.type], {\n        context: 'timestamp',\n        timestamp: new Date(chunk?.endTimestamp),\n        formatParams,\n      })\n    : t('timeline.latest-revision')\n\n  const sinceLabel = chunk\n    ? t('timeline.since', {\n        timestamp: new Date(chunk?.endTimestamp),\n        formatParams,\n      })\n    : t('timeline.since-version-missing')\n\n  const buttonLabel = mode === 'rev' ? revLabel : sinceLabel\n\n  return (\n    <PortalProvider __unstable_elements={{[TIMELINE_MENU_PORTAL]: popoverRef}}>\n      <Root\n        data-testid=\"timeline-menu\"\n        constrainSize\n        content={open && content}\n        data-ui=\"versionMenu\"\n        open={open}\n        placement={placement}\n        matchReferenceWidth\n        portal\n        ref={setPopoverRef}\n      >\n        <Flex width={'fill'}>\n          <Button\n            data-testid={open ? 'timeline-menu-close-button' : 'timeline-menu-open-button'}\n            disabled={!ready}\n            mode=\"ghost\"\n            onClick={open ? handleClose : handleOpen}\n            ref={setButton}\n            selected={open}\n            width=\"fill\"\n            tooltipProps={null}\n            justify={'space-between'}\n            style={{\n              maxWidth: '100%',\n            }}\n            iconRight={ChevronDownIcon}\n            text={ready ? buttonLabel : t('timeline.loading-history')}\n          />\n        </Flex>\n      </Root>\n    </PortalProvider>\n  )\n}\n","import {type ObjectDiff} from '@sanity/diff'\nimport {BoundaryElementProvider, Box, Card, Flex, Text} from '@sanity/ui'\nimport {type ReactElement, useMemo, useState} from 'react'\nimport {\n  ChangeFieldWrapper,\n  ChangeList,\n  type DocumentChangeContextInstance,\n  LoadingBlock,\n  NoChanges,\n  type ObjectSchemaType,\n  ScrollContainer,\n  useTimelineSelector,\n  useTranslation,\n} from 'sanity'\nimport {DocumentChangeContext} from 'sanity/_singletons'\nimport {styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {TimelineMenu} from '../../timeline'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nconst Grid = styled(Box)`\n  &:not([hidden]) {\n    display: grid;\n  }\n  grid-template-columns: 48px 1fr;\n  align-items: center;\n  gap: 0.25em;\n`\n\nexport function ChangesInspector({showChanges}: {showChanges: boolean}): ReactElement {\n  const {documentId, schemaType, timelineError, timelineStore, value} = useDocumentPane()\n  const [scrollRef, setScrollRef] = useState<HTMLDivElement | null>(null)\n\n  const rev = useTimelineSelector(timelineStore, (state) => state.revTime)\n  const diff = useTimelineSelector(timelineStore, (state) => state.diff)\n  const onOlderRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n  const selectionState = useTimelineSelector(timelineStore, (state) => state.selectionState)\n  const sinceTime = useTimelineSelector(timelineStore, (state) => state.sinceTime)\n  const loading = selectionState === 'loading'\n  const isComparingCurrent = !onOlderRevision\n\n  // Note that we are using the studio core namespace here, as changes theoretically should\n  // be part of Sanity core (needs to be moved from structure at some point)\n  const {t: structureT} = useTranslation(structureLocaleNamespace)\n\n  const documentContext: DocumentChangeContextInstance = useMemo(\n    () => ({\n      documentId,\n      schemaType,\n      FieldWrapper: ChangeFieldWrapper,\n      rootDiff: diff,\n      isComparingCurrent,\n      value,\n      showFromValue: true,\n    }),\n    [documentId, diff, isComparingCurrent, schemaType, value],\n  )\n\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\" overflow=\"hidden\">\n      <Box padding={3}>\n        <Grid paddingX={2} paddingBottom={2}>\n          <Text size={1} muted>\n            {structureT('changes.from.label')}\n          </Text>\n\n          <TimelineMenu mode=\"since\" chunk={sinceTime} placement=\"bottom-start\" />\n          <Text size={1} muted>\n            {structureT('changes.to.label')}\n          </Text>\n          <TimelineMenu chunk={rev} mode=\"rev\" placement=\"bottom-end\" />\n        </Grid>\n      </Box>\n\n      <Card flex={1} paddingX={2} paddingY={2}>\n        <BoundaryElementProvider element={scrollRef}>\n          <Scroller data-ui=\"Scroller\" ref={setScrollRef}>\n            <Box flex={1} paddingX={3} height=\"fill\">\n              {showChanges && (\n                <Content\n                  diff={diff}\n                  documentContext={documentContext}\n                  error={timelineError}\n                  loading={loading}\n                  schemaType={schemaType}\n                />\n              )}\n            </Box>\n          </Scroller>\n        </BoundaryElementProvider>\n      </Card>\n    </Flex>\n  )\n}\n\nfunction Content({\n  error,\n  diff,\n  documentContext,\n  loading,\n  schemaType,\n}: {\n  error?: Error | null\n  diff: ObjectDiff<any> | null\n  documentContext: DocumentChangeContextInstance\n  loading: boolean\n  schemaType: ObjectSchemaType\n}) {\n  if (error) {\n    return <NoChanges />\n  }\n\n  if (loading) {\n    return <LoadingBlock showText />\n  }\n\n  if (!diff) {\n    return <NoChanges />\n  }\n\n  return (\n    <DocumentChangeContext.Provider value={documentContext}>\n      <ChangeList diff={diff} schemaType={schemaType} />\n    </DocumentChangeContext.Provider>\n  )\n}\n","import {BoundaryElementProvider, Card, Flex, useToast} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {type Chunk, ScrollContainer, useTimelineSelector, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Timeline} from '../../timeline'\nimport {TimelineError} from '../../timeline/TimelineError'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nexport function HistorySelector({showList}: {showList: boolean}) {\n  const {timelineError, setTimelineMode, setTimelineRange, timelineStore} = useDocumentPane()\n  const [scrollRef, setScrollRef] = useState<HTMLDivElement | null>(null)\n  const [listHeight, setListHeight] = useState(0)\n\n  const getScrollerRef = useCallback((el: HTMLDivElement | null) => {\n    /**\n     * Hacky solution, the list height needs to be defined, it cannot be obtained from the parent using a `max-height: 100%`\n     * Because the scroller won't work properly and it won't scroll to the selected element on mount.\n     * To fix this, this component will set the list height to the height of the parent element - 1px, to avoid a double scroll line.\n     */\n    setListHeight(el?.clientHeight ? el.clientHeight - 1 : 0)\n    setScrollRef(el)\n  }, [])\n\n  const chunks = useTimelineSelector(timelineStore, (state) => state.chunks)\n  const realRevChunk = useTimelineSelector(timelineStore, (state) => state.realRevChunk)\n  const hasMoreChunks = useTimelineSelector(timelineStore, (state) => state.hasMoreChunks)\n  const loading = useTimelineSelector(timelineStore, (state) => state.isLoading)\n\n  const {t} = useTranslation('studio')\n  const toast = useToast()\n  const selectRev = useCallback(\n    (revChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore.findRangeForRev(revChunk)\n        setTimelineMode('closed')\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineMode, setTimelineRange, t, timelineStore, toast],\n  )\n\n  const handleLoadMore = useCallback(() => {\n    // If updated, be sure to update the TimeLineMenu component as well\n    if (!loading) {\n      timelineStore.loadMore()\n    }\n  }, [loading, timelineStore])\n\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\">\n      <Card flex={1} padding={2} paddingTop={0}>\n        {timelineError ? (\n          <TimelineError />\n        ) : (\n          <BoundaryElementProvider element={scrollRef}>\n            <Scroller data-ui=\"Scroller\" ref={getScrollerRef}>\n              {listHeight &&\n              // This forces the list to unmount and remount, which is needed to reset the scroll position\n              showList ? (\n                <Timeline\n                  chunks={chunks}\n                  hasMoreChunks={hasMoreChunks}\n                  lastChunk={realRevChunk}\n                  onLoadMore={handleLoadMore}\n                  onSelect={selectRev}\n                  listMaxHeight={`${listHeight}px`}\n                />\n              ) : null}\n            </Scroller>\n          </BoundaryElementProvider>\n        )}\n      </Card>\n    </Flex>\n  )\n}\n","import {CloseIcon} from '@sanity/icons'\nimport {Box, Flex, TabList, TabPanel} from '@sanity/ui'\nimport {type DocumentInspectorProps, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, Tab} from '../../../../../ui-components'\nimport {usePaneRouter} from '../../../../components/paneRouter/usePaneRouter'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {HISTORY_INSPECTOR_NAME} from '../../constants'\nimport {ChangesInspector} from './ChangesInspector'\nimport {HistorySelector} from './HistorySelector'\n\nconst FadeInFlex = styled(Flex)`\n  opacity: 0;\n  transition: opacity 200ms;\n  &[data-ready] {\n    opacity: 1;\n  }\n`\nconst TABS = ['history', 'review'] as const\nconst isValidTab = (tab: string | undefined): tab is (typeof TABS)[number] =>\n  // @ts-expect-error TS doesn't understand the type guard\n  tab && TABS.includes(tab)\n\nexport function ChangesTabs(props: DocumentInspectorProps) {\n  const {params, setParams} = usePaneRouter()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const isReady = params?.inspect === HISTORY_INSPECTOR_NAME\n\n  const paneRouterTab = isValidTab(params?.changesInspectorTab)\n    ? params.changesInspectorTab\n    : TABS[0]\n  const setPaneRouterTab = (tab: (typeof TABS)[number]) =>\n    setParams({\n      ...params,\n      changesInspectorTab: tab,\n    })\n\n  return (\n    <FadeInFlex direction=\"column\" padding={0} height=\"fill\" data-ready={isReady ? '' : undefined}>\n      <Flex align=\"center\" padding={3} gap={2}>\n        <TabList space={1} flex={1}>\n          <Tab\n            aria-controls=\"history-panel\"\n            id=\"history-tab\"\n            label={t('changes.tab.history')}\n            onClick={() => setPaneRouterTab('history')}\n            selected={paneRouterTab === 'history'}\n          />\n          <Tab\n            aria-controls=\"review-changes-panel\"\n            id=\"changes-tab\"\n            label={t('changes.tab.review-changes')}\n            onClick={() => setPaneRouterTab('review')}\n            selected={paneRouterTab === 'review'}\n          />\n        </TabList>\n        <Box flex=\"none\">\n          <Button\n            aria-label={t('changes.action.close-label')}\n            icon={CloseIcon}\n            mode=\"bleed\"\n            onClick={props.onClose}\n            tooltipProps={{content: t('document-inspector.close-button.tooltip')}}\n          />\n        </Box>\n      </Flex>\n\n      <TabPanel\n        aria-labelledby=\"history-tab\"\n        height=\"fill\"\n        hidden={paneRouterTab !== 'history'}\n        id=\"history-panel\"\n      >\n        <HistorySelector showList={paneRouterTab === 'history'} />\n      </TabPanel>\n\n      <TabPanel\n        aria-labelledby=\"review-tab\"\n        hidden={paneRouterTab !== 'review'}\n        id=\"review-panel\"\n        height=\"fill\"\n      >\n        <ChangesInspector showChanges={paneRouterTab === 'review'} />\n      </TabPanel>\n    </FadeInFlex>\n  )\n}\n","import {RestoreIcon} from '@sanity/icons'\nimport {type DocumentInspector, useTranslation} from 'sanity'\n\nimport {useStructureTool} from '../../../../useStructureTool'\nimport {HISTORY_INSPECTOR_NAME} from '../../constants'\nimport {ChangesTabs} from './ChangesTabs'\n\nexport const changesInspector: DocumentInspector = {\n  name: HISTORY_INSPECTOR_NAME,\n  useMenuItem: () => {\n    const {features} = useStructureTool()\n    const {t} = useTranslation()\n\n    return {\n      hidden: !features.reviewChanges,\n      icon: RestoreIcon,\n      title: t('changes.title'),\n    }\n  },\n  component: ChangesTabs,\n  onClose: ({params}) => ({\n    params: {...params, since: undefined, rev: undefined, changesInspectorTab: undefined},\n  }),\n  onOpen: ({params}) => ({params: {...params, since: '@lastPublished'}}),\n}\n","/* eslint-disable no-loop-func */\n\nimport {type Path, type SanityDocument, type SchemaType} from '@sanity/types'\nimport {isArray, isRecord} from 'sanity'\n\nexport function getPathTitles(options: {\n  path: Path\n  schemaType: SchemaType\n  value: Partial<SanityDocument> | null\n}): Array<{name: string; title?: string}> {\n  const {path, schemaType, value} = options\n  const result: Array<{name: string; title?: string}> = []\n\n  let s = schemaType\n  let v: unknown = value\n\n  for (const segment of path) {\n    // field name\n    if (typeof segment === 'string') {\n      if (!isRecord(v) && v !== undefined) {\n        throw new Error(`Parent value is not an object, cannot get path segment: .${segment}`)\n      }\n\n      if (s.jsonType !== 'object') {\n        throw new Error(\n          `Parent type is not an object schema type, cannot get path segment: .${segment}`,\n        )\n      }\n\n      v = v?.[segment]\n\n      const field = s.fields.find((f) => f.name === segment)\n\n      if (!field) {\n        result.push({name: segment})\n        return result\n      }\n\n      s = field.type\n\n      result.push(s)\n\n      continue\n    }\n\n    // array item index\n    if (typeof segment === 'number') {\n      if (!isArray(v) && v !== undefined) {\n        throw new Error(`Parent value is not an array, cannot get path segment: [${segment}]`)\n      }\n\n      if (s.jsonType !== 'array') {\n        throw new Error(\n          `Parent type is not an array schema type, cannot get path segment: [${segment}]`,\n        )\n      }\n\n      v = v?.[segment]\n\n      const itemType = s.of.find((ofType) => {\n        if (typeof v === 'string') {\n          return ofType.jsonType === 'string'\n        }\n\n        if (typeof v === 'number') {\n          return ofType.jsonType === 'number'\n        }\n\n        if (typeof v === 'boolean') {\n          return ofType.jsonType === 'boolean'\n        }\n\n        if (isRecord(v)) {\n          return ofType.name === v?._type\n        }\n\n        return false\n      })\n\n      if (!itemType) {\n        throw new Error(`Item type not found: [${segment}]`)\n      }\n\n      s = itemType\n\n      result.push(s)\n\n      continue\n    }\n\n    // array item key\n    if (isRecord(segment) && segment._key) {\n      if (!isArray(v)) {\n        throw new Error(\n          `Parent value is not an array, cannot get path segment: [_key == ${segment}]`,\n        )\n      }\n\n      if (s.jsonType !== 'array') {\n        throw new Error(\n          `Parent type is not an array schema type, cannot get path segment: .${segment}`,\n        )\n      }\n\n      const values = v ?? []\n\n      v = values.find((i) => isRecord(i) && i._key === segment._key)\n\n      if (!isRecord(v)) {\n        throw new Error(`Array item not found: [_key == ${segment._key}]`)\n      }\n\n      const ofType = s.of.find((i) => isRecord(v) && i.name === v?._type)\n\n      if (!ofType) {\n        throw new Error(`Array item type not found: .${v?._type}`)\n      }\n\n      s = ofType\n\n      result.push(s)\n\n      continue\n    }\n\n    throw new Error(`Invalid path segment: ${JSON.stringify(segment)}`)\n  }\n\n  return result\n}\n","import {\n  ErrorOutlineIcon,\n  type IconComponent,\n  InfoOutlineIcon,\n  WarningOutlineIcon,\n} from '@sanity/icons'\nimport {\n  type ObjectSchemaType,\n  type Path,\n  type SanityDocument,\n  type SchemaType,\n  type ValidationMarker,\n} from '@sanity/types'\nimport {Box, Card, type CardTone, Flex, Stack, Text} from '@sanity/ui'\nimport {createElement, type ErrorInfo, Fragment, useCallback, useMemo, useState} from 'react'\nimport {type DocumentInspectorProps, useTranslation} from 'sanity'\n\nimport {ErrorBoundary} from '../../../../../ui-components'\nimport {DocumentInspectorHeader} from '../../documentInspector'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {getPathTitles} from './getPathTitles'\n\nconst MARKER_ICON: Record<'error' | 'warning' | 'info', IconComponent> = {\n  error: ErrorOutlineIcon,\n  warning: WarningOutlineIcon,\n  info: InfoOutlineIcon,\n}\n\nconst MARKER_TONE: Record<'error' | 'warning' | 'info', CardTone> = {\n  error: 'critical',\n  warning: 'caution',\n  info: 'primary',\n}\n\nexport function ValidationInspector(props: DocumentInspectorProps) {\n  const {onClose} = props\n  const {onFocus, onPathOpen, schemaType, validation, value} = useDocumentPane()\n  const {t} = useTranslation('validation')\n\n  const handleOpen = useCallback(\n    (path: Path) => {\n      onPathOpen(path)\n      onFocus(path)\n    },\n    [onFocus, onPathOpen],\n  )\n\n  return (\n    <Flex direction=\"column\" height=\"fill\" overflow=\"hidden\">\n      <DocumentInspectorHeader\n        as=\"header\"\n        closeButtonLabel={t('panel.close-button-aria-label')}\n        flex=\"none\"\n        onClose={onClose}\n        title={t('panel.title')}\n      />\n\n      <Card flex={1} overflow=\"auto\" padding={3}>\n        {validation.length === 0 && (\n          <Box padding={2}>\n            <Text muted size={1}>\n              {t('panel.no-errors-message')}\n            </Text>\n          </Box>\n        )}\n\n        {validation.length > 0 && (\n          <Stack space={2}>\n            {validation.map((marker, i) => (\n              <ValidationCard\n                // eslint-disable-next-line react/no-array-index-key\n                key={i}\n                marker={marker}\n                onOpen={handleOpen}\n                schemaType={schemaType}\n                value={value}\n              />\n            ))}\n          </Stack>\n        )}\n      </Card>\n    </Flex>\n  )\n}\n\nfunction ValidationCard(props: {\n  marker: ValidationMarker\n  onOpen: (path: Path) => void\n  schemaType: ObjectSchemaType\n  value: Partial<SanityDocument> | null\n}) {\n  const {marker, onOpen, schemaType, value} = props\n  const handleOpen = useCallback(() => onOpen(marker.path), [marker, onOpen])\n  const [errorInfo, setErrorInfo] = useState<{error: Error; info: ErrorInfo} | null>(null)\n\n  return (\n    <ErrorBoundary onCatch={setErrorInfo}>\n      {errorInfo && (\n        <Card padding={3} radius={2} tone=\"critical\">\n          <Text size={1}>{errorInfo.error.message}</Text>\n        </Card>\n      )}\n\n      {!errorInfo && (\n        <Card\n          __unstable_focusRing\n          as=\"button\"\n          onClick={handleOpen}\n          padding={3}\n          radius={2}\n          tone={MARKER_TONE[marker.level]}\n        >\n          <Flex align=\"flex-start\" gap={3}>\n            <Box flex=\"none\">\n              <Text size={1}>{createElement(MARKER_ICON[marker.level])}</Text>\n            </Box>\n\n            <Stack flex={1} space={2}>\n              <DocumentNodePathBreadcrumbs\n                path={marker.path}\n                schemaType={schemaType}\n                value={value}\n              />\n\n              <Text muted size={1}>\n                {marker.message}\n              </Text>\n            </Stack>\n          </Flex>\n        </Card>\n      )}\n    </ErrorBoundary>\n  )\n}\n\nfunction DocumentNodePathBreadcrumbs(props: {\n  path: Path\n  schemaType: SchemaType\n  value: Partial<SanityDocument> | null\n}) {\n  const {path, schemaType, value} = props\n\n  const pathTitles = useMemo(() => {\n    try {\n      return getPathTitles({path, schemaType, value})\n    } catch (e) {\n      console.error(e)\n    }\n    return null\n  }, [path, schemaType, value])\n\n  if (!pathTitles?.length) return null\n\n  return (\n    <Text size={1}>\n      {pathTitles.map((t, i) => (\n        <Fragment key={i}>\n          {i > 0 && <span style={{color: 'var(--card-muted-fg-color)', opacity: 0.5}}> / </span>}\n          <span style={{fontWeight: 500}}>{t.title || t.name}</span>\n        </Fragment>\n      ))}\n    </Text>\n  )\n}\n","import {CheckmarkCircleIcon, ErrorOutlineIcon, WarningOutlineIcon} from '@sanity/icons'\nimport {useMemo} from 'react'\nimport {\n  type DocumentInspector,\n  type DocumentInspectorMenuItem,\n  type DocumentInspectorUseMenuItemProps,\n  type FormNodeValidation,\n  isValidationError,\n  isValidationWarning,\n  useTranslation,\n  useValidationStatus,\n} from 'sanity'\n\nimport {VALIDATION_INSPECTOR_NAME} from '../../constants'\nimport {ValidationInspector} from './ValidationInspector'\n\nfunction useMenuItem(props: DocumentInspectorUseMenuItemProps): DocumentInspectorMenuItem {\n  const {documentId, documentType} = props\n  const {t} = useTranslation('validation')\n  const {validation: validationMarkers} = useValidationStatus(documentId, documentType)\n\n  const validation: FormNodeValidation[] = useMemo(\n    () =>\n      validationMarkers.map((item) => ({\n        level: item.level,\n        message: item.message,\n        path: item.path,\n      })),\n    [validationMarkers],\n  )\n\n  const hasErrors = validation.some(isValidationError)\n  const hasWarnings = validation.some(isValidationWarning)\n\n  const icon = useMemo(() => {\n    if (hasErrors) return ErrorOutlineIcon\n    if (hasWarnings) return WarningOutlineIcon\n    return CheckmarkCircleIcon\n  }, [hasErrors, hasWarnings])\n\n  const tone = useMemo(() => {\n    if (hasErrors) return 'critical'\n    if (hasWarnings) return 'caution'\n    return 'positive'\n  }, [hasErrors, hasWarnings])\n\n  return {\n    hidden: validation.length === 0,\n    icon,\n    title: t('panel.title'),\n    tone,\n    showAsAction: true,\n  }\n}\n\nexport const validationInspector: DocumentInspector = {\n  name: VALIDATION_INSPECTOR_NAME,\n  component: ValidationInspector,\n  useMenuItem,\n}\n","import {omit} from 'lodash'\nimport {decodeJsonParams, encodeJsonParams, route} from 'sanity/router'\n\nimport {type RouterPaneGroup, type RouterPanes, type RouterPaneSibling} from './types'\n\nconst EMPTY_PARAMS = {}\n\n/**\n * @internal\n */\nexport function legacyEditParamsToState(params: string): Record<string, unknown> {\n  try {\n    return JSON.parse(decodeURIComponent(params))\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn('Failed to parse JSON parameters')\n    return {}\n  }\n}\n\nexport function encodePanesSegment(panes: RouterPanes): string {\n  return (panes || [])\n    .map((group) => group.map(encodeChunks).join('|'))\n    .map(encodeURIComponent)\n    .join(';')\n}\n\n/**\n * @internal\n */\nexport function legacyEditParamsToPath(params: Record<string, unknown>): string {\n  return JSON.stringify(params)\n}\n\n// http://localhost:3333/intent/create/template=book-by-author;type=book/eyJhdXRob3JJZCI6Imdycm0ifQ==\n\n/**\n * @internal\n */\nexport function toState(pathSegment: string): RouterPaneGroup[] {\n  return parsePanesSegment(decodeURIComponent(pathSegment))\n}\n\n/**\n * @internal\n */\nexport function toPath(panes: RouterPaneGroup[]): string {\n  return encodePanesSegment(panes)\n}\n\nexport const router = route.create('/', [\n  // \"Asynchronous intent resolving\" route\n  route.intents('/intent'),\n\n  // Legacy fallback route, will be redirected to new format\n  route.create('/edit/:type/:editDocumentId', [\n    route.create({\n      path: '/:params',\n      transform: {params: {toState: legacyEditParamsToState, toPath: legacyEditParamsToPath}},\n    }),\n  ]),\n\n  // The regular path - when the intent can be resolved to a specific pane\n  route.create({\n    path: '/:panes',\n    // Legacy URLs, used to handle redirects\n    children: [route.create('/:action', route.create('/:legacyEditDocumentId'))],\n    transform: {\n      panes: {toState, toPath},\n    },\n  }),\n])\n\n// old: authors;knut,{\"template\":\"diaryEntry\"}\n// new: authors;knut,view=diff,eyJyZXYxIjoiYWJjMTIzIiwicmV2MiI6ImRlZjQ1NiJ9|latest-posts\n\nconst panePattern = /^([.a-z0-9_-]+),?({.*?})?(?:(;|$))/i\nconst isParam = (str: string) => /^[a-z0-9]+=[^=]+/i.test(str)\nconst isPayloadLike = (str: string) => /^[A-Za-z0-9\\-_]+(?:={0,2})$/.test(str)\nconst exclusiveParams = ['view', 'since', 'rev', 'inspect', 'comment']\n\ntype Truthy<T> = T extends false\n  ? never\n  : T extends ''\n    ? never\n    : T extends 0\n      ? never\n      : T extends 0n\n        ? never\n        : T extends null | undefined\n          ? NonNullable<T>\n          : T\nconst isTruthy = Boolean as (t: unknown) => boolean as <T>(t: T) => t is Truthy<T>\n\nfunction parseChunks(chunks: string[], initial: RouterPaneSibling): RouterPaneSibling {\n  const sibling: RouterPaneSibling = {...initial, params: EMPTY_PARAMS, payload: undefined}\n  return chunks.reduce((pane, chunk) => {\n    if (isParam(chunk)) {\n      const key = chunk.slice(0, chunk.indexOf('='))\n      const value = chunk.slice(key.length + 1)\n      pane.params = {...pane.params, [decodeURIComponent(key)]: decodeURIComponent(value)}\n    } else if (isPayloadLike(chunk)) {\n      pane.payload = tryParseBase64Payload(chunk)\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn('Unknown pane segment: %s - skipping', chunk)\n    }\n\n    return pane\n  }, sibling)\n}\n\nfunction encodeChunks(pane: RouterPaneSibling, index: number, group: RouterPaneGroup): string {\n  const {payload, params = {}, id} = pane\n  const [firstSibling] = group\n  const paneIsFirstSibling = pane === firstSibling\n  const sameAsFirst = index !== 0 && id === firstSibling.id\n  const encodedPayload =\n    typeof payload === 'undefined' ? undefined : encodeJsonParams(payload as any)\n\n  const encodedParams = Object.entries(params)\n    .filter((entry): entry is [string, string] => {\n      const [key, value] = entry\n      if (!value) return false\n      if (paneIsFirstSibling) return true\n\n      // omit the value if it's the same as the value from the first sibling\n      const valueFromFirstSibling = firstSibling.params?.[key]\n      if (value === valueFromFirstSibling && !exclusiveParams.includes(key)) return false\n      return true\n    })\n    .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n\n  return (\n    [sameAsFirst ? '' : id]\n      .concat([encodedParams.length > 0 && encodedParams, encodedPayload].filter(isTruthy).flat())\n      .join(',') || ','\n  )\n}\n\nexport function parsePanesSegment(str: string): RouterPanes {\n  if (str.indexOf(',{') !== -1) {\n    return parseOldPanesSegment(str)\n  }\n\n  return str\n    .split(';')\n    .map((group) => {\n      const [firstSibling, ...restOfSiblings] = group.split('|').map((segment) => {\n        const [id, ...chunks] = segment.split(',')\n        return parseChunks(chunks, {id})\n      })\n\n      return [\n        firstSibling,\n        ...restOfSiblings.map((sibling) => ({\n          ...firstSibling,\n          ...sibling,\n          id: sibling.id || firstSibling.id,\n          params: {...omit(firstSibling.params, exclusiveParams), ...sibling.params},\n          payload: sibling.payload || firstSibling.payload,\n        })),\n      ]\n    })\n    .filter((group) => group.length > 0)\n}\n\nfunction parseOldPanesSegment(str: string): RouterPanes {\n  const chunks: RouterPaneGroup = []\n\n  let buffer = str\n  while (buffer.length) {\n    const [match, id, payloadChunk] = buffer.match(panePattern) || []\n    if (!match) {\n      buffer = buffer.slice(1)\n      continue\n    }\n\n    const payload = payloadChunk && tryParsePayload(payloadChunk)\n    chunks.push({id, payload})\n\n    buffer = buffer.slice(match.length)\n  }\n\n  return [chunks]\n}\n\nfunction tryParsePayload(json: string) {\n  try {\n    return JSON.parse(json)\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(`Failed to parse parameters: ${err.message}`)\n    return undefined\n  }\n}\n\nfunction tryParseBase64Payload(data: string): unknown {\n  try {\n    return data ? decodeJsonParams(data) : undefined\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(`Failed to parse parameters: ${err.message}`)\n    return undefined\n  }\n}\n","import {MasterDetailIcon} from '@sanity/icons'\nimport {lazy} from 'react'\nimport {definePlugin} from 'sanity'\n\nimport {\n  DeleteAction,\n  DiscardChangesAction,\n  DuplicateAction,\n  HistoryRestoreAction,\n  PublishAction,\n  UnpublishAction,\n} from './documentActions'\nimport {LiveEditBadge} from './documentBadges'\nimport {getIntentState} from './getIntentState'\nimport {structureUsEnglishLocaleBundle} from './i18n'\nimport {changesInspector} from './panes/document/inspectors/changes'\nimport {validationInspector} from './panes/document/inspectors/validation'\nimport {router} from './router'\nimport {type StructureToolOptions} from './types'\n\nconst documentActions = [\n  PublishAction,\n  UnpublishAction,\n  DiscardChangesAction,\n  DuplicateAction,\n  DeleteAction,\n  HistoryRestoreAction,\n]\n\nconst documentBadges = [LiveEditBadge]\n\nconst inspectors = [validationInspector, changesInspector]\n\n/**\n * The structureTool is a studio plugin which adds the “structure tool” – a tool within\n * Sanity Studio in which content editors can drill down to specific documents to edit them.\n * You can configure your Studio's structure tool(s).\n *\n * @public\n * @param options - Options for the structure tool. See {@link StructureToolOptions}\n * @example Minimal example\n * ```ts\n * // sanity.config.ts\n * import { defineConfig } from 'sanity'\n * import { structureTool } from 'sanity/structure'\n *\n * export default defineConfig((\n *  // ...\n *  plugins: [\n *    structureTool() // use defaults\n *  ]\n * })\n * ```\n *\n * @example To customise your structure tool\n * ```ts\n * // sanity.config.ts\n * import { defineConfig } from 'sanity'\n * import { structureTool } from 'sanity/structure'\n * import { FaCar } from 'react-icons'\n\n * export default defineConfig((\n *\t // ...\n *   plugins: [\n *    structureTool({\n *      name: 'cars',\n *      title: 'Cars',\n *      icon: FaCar,\n *      structure: (S) => S.documentTypeList('car'),\n *      defaultDocumentNode: (S) =>\n *        S.document().views([\n *          S.view.form(),\n *          S.view.component(Preview).title('Preview')\n *        ])\n *    })\n *  ]\n * })\n * ```\n * */\nexport const structureTool = definePlugin<StructureToolOptions | void>((options) => {\n  const icon = options?.icon || MasterDetailIcon\n\n  return {\n    name: 'sanity/structure',\n    document: {\n      actions: (prevActions) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the document actions already exist in the Studio config\n        return Array.from(new Set([...prevActions, ...documentActions]))\n      },\n      badges: (prevBadges) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the document badges already exist in the Studio config\n        return Array.from(new Set([...prevBadges, ...documentBadges]))\n      },\n      inspectors: (prevInspectors) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the inspectors already exist in the Studio config\n        return Array.from(new Set([...prevInspectors, ...inspectors]))\n      },\n    },\n\n    tools: [\n      {\n        name: options?.name || 'structure',\n        title: options?.title || 'Structure',\n        icon,\n        component: lazy(() => import('./components/structureTool')),\n        canHandleIntent: (intent, params) => {\n          if (intent === 'create') return canHandleCreateIntent(params)\n          if (intent === 'edit') return canHandleEditIntent(params)\n          return false\n        },\n        getIntentState,\n        // Controlled by sanity/src/structure/components/structureTool/StructureTitle.tsx\n        controlsDocumentTitle: true,\n        options,\n        router,\n      },\n    ],\n\n    i18n: {\n      bundles: [structureUsEnglishLocaleBundle],\n    },\n  }\n})\n\nfunction canHandleCreateIntent(params: Record<string, unknown>) {\n  // We can't handle create intents without a `type` parameter\n  if (!('type' in params)) {\n    return false\n  }\n\n  // We can handle any create intent as long as it has a `type` parameter,\n  // but we also know how to deal with templates, where other tools might not\n  return 'template' in params ? {template: true} : true\n}\n\nfunction canHandleEditIntent(params: Record<string, unknown>) {\n  // We can't handle edit intents without an `id` parameter\n  if (!('id' in params)) {\n    return false\n  }\n\n  // We can handle any edit intent with a document ID, but we're best at `structure` mode\n  // This ensures that other tools that can handle modes such as `presentation` or `batch`\n  // can take precedence over the structure tool\n  return 'mode' in params ? {mode: params.mode === 'structure'} : true\n}\n","import {type ReactElement, type ReactNode, useMemo, useState} from 'react'\nimport {useConfigContextFromSource, useDocumentStore, useSource} from 'sanity'\nimport {StructureToolContext} from 'sanity/_singletons'\n\nimport {createStructureBuilder, type DefaultDocumentNodeResolver} from './structureBuilder'\nimport {\n  type StructureResolver,\n  type StructureToolContextValue,\n  type UnresolvedPaneNode,\n} from './types'\n\n/** @internal */\nexport interface StructureToolProviderProps {\n  structure?: StructureResolver\n  defaultDocumentNode?: DefaultDocumentNodeResolver\n  children: ReactNode\n}\n\n/** @internal */\nexport function StructureToolProvider({\n  defaultDocumentNode,\n  structure: resolveStructure,\n  children,\n}: StructureToolProviderProps): ReactElement {\n  const [layoutCollapsed, setLayoutCollapsed] = useState(false)\n  const source = useSource()\n  const configContext = useConfigContextFromSource(source)\n  const documentStore = useDocumentStore()\n\n  const S = useMemo(() => {\n    return createStructureBuilder({\n      defaultDocumentNode,\n      source,\n    })\n  }, [defaultDocumentNode, source])\n\n  const rootPaneNode = useMemo(() => {\n    // TODO: unify types and remove cast\n    if (resolveStructure)\n      return resolveStructure(S, {\n        ...configContext,\n        documentStore,\n      }) as UnresolvedPaneNode\n    return S.defaults() as UnresolvedPaneNode\n  }, [S, resolveStructure, configContext, documentStore])\n\n  const features: StructureToolContextValue['features'] = useMemo(\n    () => ({\n      backButton: layoutCollapsed,\n      resizablePanes: !layoutCollapsed,\n      reviewChanges: !layoutCollapsed,\n      splitPanes: !layoutCollapsed,\n      splitViews: !layoutCollapsed,\n    }),\n    [layoutCollapsed],\n  )\n\n  const structureTool: StructureToolContextValue = useMemo(() => {\n    return {\n      features,\n      layoutCollapsed,\n      setLayoutCollapsed,\n      rootPaneNode,\n      structureContext: S.context,\n    }\n  }, [features, layoutCollapsed, rootPaneNode, S.context])\n\n  return (\n    <StructureToolContext.Provider value={structureTool}>{children}</StructureToolContext.Provider>\n  )\n}\n"],"names":["structureLocaleNamespace","structureUsEnglishLocaleBundle","defineLocaleResourceBundle","locale","namespace","resources","DocTitle","props","$","_c","document","documentValue","schema","useSchema","t0","_type","get","schemaType","t","useTranslation","t1","value","error","useValuePreview","t2","t3","message","errorMessage","title","jsx","color","Fragment","ChevronWrapper","styled","Box","CrossDatasetReferencesDetails","details","CrossDatasetReferencesSummary","summary","Table","table","theme","rem","sanity","space","DocumentIdFlex","Flex","OtherReferenceCount","difference","totalCount","references","length","count","Text","Symbol","for","InfoOutlineIcon","t4","Tooltip","t5","jsxs","Inline","PaneItemPreview","icon","layout","presence","isRecord","isValidElement","isString","isNumber","documentPreviewStore","_id","getPreviewStateObservable","previewStateObservable","draft","isLoading","published","useObservable","TooltipDelayGroupProvider","DocumentPreviewPresence","DocumentStatusIndicator","status","DocumentStatus","tooltip","getPreviewValueWithFallback","t6","SanityDefaultPreview","BackLink","forwardRef","ref","routerPanesState","groupIndex","useContext","PaneRouterContext","slice","panes","state","StateLink","usePaneLayout","pane","PaneLayoutContext","Error","ChildLink","childId","childParameters","childPayload","rest","id","params","payload","ParameterizedLink","currentPanes","siblingIndex","nextParams","useUnique","nextPayload","currentGroup","currentSibling","nextSibling","nextGroup","t7","t8","t9","nextPanes","t10","nextState","t11","ReferenceChildLink","children","documentId","documentType","parentRefPath","template","pathToString","type","usePaneRouter","EMPTY_ARRAY","ReferencePreviewLink","onClick","getPublishedId","documentPresence","useDocumentPresence","useDocumentPreviewStore","name","linkProps","PreviewCard","ConfirmDeleteDialogBody","crossDatasetReferences","internalReferences","documentTitle","action","datasetNames","hasUnknownDatasetNames","onReferenceLinkClick","toast","useToast","item","UnknownIcon","renderPreviewItem","DocumentTitle","Translate","T0","T1","T2","t12","normalizedDatasetNames","datasetSubtitle","datasets","join","context","t13","WarningOutlineIcon","t14","t15","Card","t16","Stack","map","item_0","borderTop","undefined","DocumentsIcon","documentCount","ChevronDownIcon","minWidth","filter","_temp","t17","index","projectId","datasetName","CopyToClipboard","push","Button","CopyIcon","content","reference","isClientError","e","POLL_INTERVAL","visiblePoll$","getVisiblePoll$","fromEvent","pipe","startWith","visibilityState","distinctUntilChanged","switchMap","visible","timer","EMPTY","shareReplay","refCount","bufferSize","getDocumentExistence","versionedClient","draftId","getDraftId","publishedId","requestOptions","uri","getDataUrl","json","query","excludeContent","tag","observable","request","omitted","nonExistant","doc","reason","some","fetchCrossDatasetReferences","checkDocumentId","of","currentDataset","config","dataset","url","catchError","statusCode","useInternalReferences","createHookFromObservableFactory","documentStore","listenQuery","fetch","listen","transitions","throttleTime","useCrossDatasetReferences","useReferringDocuments","useClient","DEFAULT_STUDIO_CLIENT_OPTIONS","useDocumentStore","isInternalReferencesLoading","isCrossDatasetReferencesLoading","Array","from","Set","Boolean","sort","projectIds","_temp2","_temp3","_temp4","crossDatasetReference_1","crossDatasetReference","crossDatasetReference_0","DialogBody","LoadingContainer","attrs","align","direction","justify","ConfirmDeleteDialog","onCancel","onConfirm","dialogId","useId","showConfirmButton","text","cancelButton","confirmButton","LoadingBlock","Dialog","ConfirmDeleteDialogContainer","setError","useState","handleRetry","tone","ErrorBoundary","Delay","ms","ready","setReady","timeoutId","setTimeout","clearTimeout","useEffect","PANE_DEBUG","PANE_COLLAPSED_WIDTH","PANE_DEFAULT_MIN_WIDTH","Root","Layer","PaneDivider","disabled","element","resize","dragging","setDragging","event","preventDefault","startX","pageX","handleMouseMove","deltaX","handleMouseUp","e_0","window","removeEventListener","addEventListener","handleMouseDown","Pane","forwardedRef","currentMaxWidthProp","currentMinWidthProp","maxWidthProp","minWidthProp","restProps","currentMinWidth","currentMaxWidth","flex","maxWidth","selected","flexProp","rootElement","setRootElement","collapse","collapsed","layoutCollapsed","expand","expandedElement","mount","p","find","indexOf","paneIndex","nextPane","isLast","expanded","nextCollapsed","useRef","current","useImperativeHandle","refValue","setRef","handleCollapse","handleExpand","contextValue","bb0","bb1","hidden","LegacyLayerProvider","divider","Infinity","t18","style","t19","t20","t21","t22","t23","t24","BoundaryElementProvider","t25","t26","IsLastPaneProvider","t27","t28","displayName","usePane","PaneContext","PaneContent","as","overflow","padding","MENU_GROUP_POPOVER_PROPS","constrainSize","placement","portal","PaneMenuButtonItem","isAfterGroup","node","getI18nText","useGetI18nText","MenuDivider","child","childIndex","key","child_0","childIndex_0","MenuGroup","PaneContextMenuItemResolver","intent","PaneContextMenuItem","tooltipContent","useI18nText","hotkey","split","iconRight","CheckmarkIcon","onAction","MenuItem","TooltipOfDisabled","PaneContextIntentMenuItem","intentLink","useIntentLink","handleClick","href","CONTEXT_MENU_POPOVER_PROPS","nodesHasTone","nodes","PaneContextMenuButton","actionsNodes","hasCritical","hasCaution","ContextMenuButton","nodeIndex","Menu","MenuButton","RootCard","PaneFooter","$border","css","Layout","TitleCard","fg","bg","card","enabled","TitleTextSkeleton","TextSkeleton","TitleText","TabsBox","rgba","base","PaneHeader","actions","backButton","border","contentAfter","loading","subActions","tabs","tabIndex","paneElement","paneRect","useElementRect","height","innerHeight","width","layoutStyle","handleTitleClick","handleLayoutClick","showTabsOrSubActions","LayerProvider","getDisabledReason","disabledReason","ariaLabel","isDisabled","PaneHeaderActionButton","warn","PaneHeaderMenuItemActionButton","hotkeys","StatusButton","PaneHeaderActionIntentButton","PaneHeaderMenuGroupActionButton","idx","_calcPaneResize","cache","left","right","sum","leftMinWidth","rightMinWidth","leftMaxWidth","Math","min","rightMaxWidth","minDeltaX","rightMinDeltaX","maxDeltaX","leftMaxDeltaX","_deltaX","max","leftW","rightW","leftFlex","rightFlex","_getDOMPath","el","path","parentElement","childNodes","unshift","EMPTY_PATH","_sortElements","elements","WeakMap","set","_sortByElementPath","a","b","_a","_b","len","i","aIndex","bIndex","createPaneLayoutController","observers","optionsMap","userCollapsedElementSet","rootWidth","resizeDataMap","Map","resizing","add","_notifyObservers","delete","options","original","splice","leftElement","leftIndex","leftOptions","rightElement","rightOptions","offsetWidth","leftResizeData","rightResizeData","nextRootElement","setRootWidth","nextRootWidth","subscribe","observer","_elements","dataMap","lastElement","collapsedWidth","remaingWidth","userCollapsed","has","sizeCollapsed","resizeData","data","PaneLayout","onCollapse","onExpand","controller","setState","paneLayout","isMenuNodeButton","renderAsButton","isNotMenuNodeButton","negate","resolveMenuNodes","fieldActions","menuItems","menuItemGroups","keyOffset","mapFieldActionToPaneMenuNode","groups","itemGroup","g","i18n","ungroupedItems","group","shortcut","actionHandler","showAsAction","childIdx","IntentButton","linkRef","IntentLink","Link","InsufficientPermissionsMessageTooltip","reveal","currentUser","useCurrentUser","InsufficientPermissionsMessage","POPOVER_PROPS","getIntent","templates","typeName","templateId","baseParams","initialDocumentId","parameters","PaneHeaderCreateButton","templateItems","useTemplates","templatePermissions","isTemplatePermissionsLoading","useTemplatePermissions","every","nothingGranted","reduce","permissionsById","AddIcon","firstItem","granted","itemIndex","disabled_0","intent_0","acc","permission_0","permission","isNonNullable","hashObject","sortObject","v","isArray","Object","entries","keyA","keyB","localeCompare","JSON","stringify","parse","PaneHeaderActions","memo","initialValueTemplateItems","initialValueTemplateItemsFromStructure","actionHandlers","EMPTY_OBJECT","handleAction","useCallback","console","handler","menuNodes","useMemo","actionNodes","contextMenuNodes","initialValueTemplateItemFromMenuItems","menuItemIndex","intentParams","templateParams","description","combinedInitialValueTemplates","uniqBy","MissingSchemaType","Code","getIconWithFallback","defaultIcon","PaneItem","pressed","margin","marginBottom","marginTop","hasSchemaType","clicked","setClicked","isSanityDocument","DocumentIcon","opacity","ChevronRightIcon","FolderIcon","preview","metaKey","RenderActionCollectionState","actionProps","onActionComplete","GetHookCollectionState","RenderBadgeCollectionState","badges","badgeProps","ErrorPane","paneKey","getWaitMessages","thresholds","messageKey","isDev","src","merge","threshold","mapTo","delay","DEFAULT_MESSAGE_KEY","Content","LoadingPane","messageProp","resolvedMessage","currentMessage","setCurrentMessage","sub","unsubscribe","contentElement","setContentElement","mounted","setMounted","_raf2","DELAY","useDocumentPane","documentPane","DocumentPaneContext","CommentsWrapper","CommentsEnabledProvider","CommentsProviderWrapper","useCommentsEnabled","connectionState","onPathOpen","inspector","openInspector","setParams","createPathWithParams","selectedCommentId","comment","paramsRef","useLayoutEffect","commentId","inspect","COMMENTS_INSPECTOR_NAME","location","origin","getCommentLink","handleClearSelectedComment","handleOpenCommentsInspector","CommentsProvider","_DEBUG","EMPTY_PARAMS","LOADING_PANE","DOCUMENT_PANEL_PORTAL_ELEMENT","useStructureTool","structureTool","StructureToolContext","DOCUMENT_PANEL_MIN_WIDTH","DOCUMENT_PANEL_INITIAL_MIN_WIDTH","DOCUMENT_INSPECTOR_MIN_WIDTH","DOCUMENT_INSPECTOR_MAX_WIDTH","INSPECT_ACTION_PREFIX","DEFAULT_MENU_ITEM_GROUPS","HISTORY_INSPECTOR_NAME","VALIDATION_INSPECTOR_NAME","DocumentInspectorMenuItemsResolver","inspectors","onMenuItems","lenRef","setMenuItems","menuItemsRef","newFieldActions","setMenuItem","prev","next","InspectorMenuItems","useMenuItem","defineInspectorMenuItemComponent","InspectorMenuItem","menuItem","useDocumentTitle","editState","subscribed","IGNORE_OPS","DocumentOperationResults","pushToast","documentPaneValue","documentTitleInfo","titleError","useDocumentOperationEvent","prevEvent","paneRouter","includes","op","documentTitleBase","cleanupId","closable","duration","Strong","closeCurrentAndAfter","isLiveEditEnabled","liveEdit","position","zIndex","lineHeight","DocumentInspectorHeader","closeButtonLabel","forwardedAs","onClose","CloseIcon","div","Resizer","onResize","onResizeStart","mouseXRef","Resizable","setElement","elementWidthRef","targetWidth","setTargetWidth","handleResizeStart","w","handleResize","DocumentInspectorPanel","closeInspector","features","handleClose","component","createElement","resizablePanes","STRUCTURE_TOOL_NAMESPACE","useStructureToolSetting","defaultValue","keyValueStore","useKeyValueStore","keyValueStoreKey","getKey","value_0","newValue","setKey","VIEW_MODE_PARSED","VIEW_MODE_RAW","VIEW_MODES","lru","LRU","maxSize","isExpanded","keyPath","cached","toggleExpanded","selectElement","sel","getSelection","range","createRange","removeAllRanges","selectNodeContents","addRange","select","currentTarget","maybeSelectAll","keyCode","ctrlKey","isDocumentLike","JSONInspectorWrapper","fonts","code","family","sizes","fontSize","syntax","property","constant","string","boolean","number","Search","onChange","target","handleChange","TextInput","SearchIcon","InspectDialog","onInspectClose","dialogIdPrefix","viewModeId","onViewModeChange","mode","viewMode","setParsedViewMode","setRawViewMode","bottom","Tab","TabList","outline","JSONInspector","ignoreCase","TabPanel","Banner","Icon","DeletedDocumentBanner","revisionId","restore","useDocumentOperation","navigateIntent","useRouter","execute","handleRestore","ReadOnlyIcon","DeprecatedDocumentTypeBanner","isDeprecatedSchemaType","deprecated","ErrorOutlineIcon","AskToEditDialogOpened","defineEvent","version","AskToEditRequestSent","MAX_NOTE_LENGTH","RequestPermissionDialog","onRequestSubmitted","telemtry","useTelemetry","useProjectId","apiVersion","client","zOffset","useZIndex","isSubmitting","setIsSubmitting","note","setNote","msgError","setMsgError","hasTooManyRequests","setHasTooManyRequests","hasBeenDenied","setHasBeenDenied","adminRole","roles","requestedRole","method","body","requestUrl","then","log","catch","err","response","errMessage","finally","onSubmit","fullscreen","DialogProvider","role_0","role","appliesToUsers","LOADING_STATE","EMPTY_STATE","DECLINED_STATE","PENDING_STATE","EXPIRED_STATE","useRoleRequestsStatus","checkRoleRequests","checkRoleRequests$","requests","projectRequests","resourceId","declinedRequest","isAfter","addWeeks","Date","createdAt","isBefore","InsufficientPermissionBanner","requiredPermission","roleRequestStatus","requestStatusLoading","requestStatusError","requestSent","setRequestSent","requestPending","currentUserRoles","isOnlyViewer","showRequestPermissionDialog","setShowRequestPermissionDialog","listFormat","useListFormat","telemetry","roleTitles","formatToParts","Roles","part","ReferenceChangedBanner","replaceCurrent","routerReferenceId","parentSibling","parentId","hasHistoryOpen","rev","pathFromString","referenceInfoObservable","parentRefPathSegment","keyedSegmentIndex","findIndex","concat","unstable_observePathsDocumentPair","debounceTime","result","availability","pathGet","snapshot","_ref","referenceInfo","handleReloadReference","available","SyncIcon","ResolvedLiveEdit","DraftLiveEditBanner","displayed","isPublishing","setPublishing","isDiscarding","setDiscarding","publish","discardChanges","liveEditResolveType","handlePublish","handleDiscard","isDraftId","TitleContainer","heading","FormHeader","isSingleton","__experimental_formPreviewTitle","Heading","LONG_ENOUGH_BUT_NOT_TOO_LONG","useConditionalToast","ev","FormView","margins","collapsedFieldSets","collapsedPaths","validation","formState","onFocus","onBlur","onSetCollapsedPath","onSetCollapsedFieldSet","onSetActiveFieldGroup","openPath","patchChannel","createPatchChannel","isLocked","transactionSyncLock","conditionalToastParams","pair","documentEvents","tap","prepareMutationEvent","prepareRebaseEvent","hasRev","_rev","patches","formRef","setFormRef","focusedFirstDescendant","setFocusedFirstDescendant","focusPath","focusFirstDescendant","Container","PresenceOverlay","Spinner","FormBuilder","changed","focused","members","readOnly","mutations","mut","patch","fromMutationPatches","remotePatches","remoteMutations","localPatches","localMutations","DocumentBox","Scroller","ScrollContainer","$disabled","DocumentPanel","footerHeight","headerHeight","isInspectOpen","setDocumentPanelPortalElement","activeViewId","views","permissions","isPermissionsLoading","isDeleting","isDeleted","timelineStore","parentPortal","usePortal","portalRef","documentScrollElement","setDocumentScrollElement","formContainerElement","_createdAt","activeView","view","portalElement","splitPanes","formViewHidden","activeViewNode","historical","lastNonDeletedRevId","useTimelineSelector","isLiveEdit","scrollTo","inspectDialog","showInspector","PortalProvider","VirtualizerScrollInstanceProvider","POPOVER_FALLBACK_PLACEMENTS","DIALOG_WIDTH_TO_UI_WIDTH","small","medium","large","full","ConfirmDialog","dialog","referenceElement","Popover","ConfirmDialogContent","cancelButtonIcon","cancelButtonText","confirmButtonIcon","confirmButtonText","isTopLayer","useLayer","useGlobalKeyDown","useClickOutsideEvent","Grid","ModalDialog","footer","showCloseButton","header","PopoverDialog","PopoverDialogContent","DocumentActionPortalProvider","ActionStateDialog","modalId","unknownModal","ActionDialogWrapper","actionStates","actionIndex","setActionIndex","currentAction","ActionMenuButton","idPrefix","setReferenceElement","preventOverflow","popoverProps","actionState","renderActionDialog","ActionMenuListItem","onHandle","String","label","replace","tooltipProps","s","toUpperCase","DISABLED_REASON_TITLE_KEY","NOTHING_TO_DELETE","NOT_READY","DeleteAction","onComplete","setIsDeleting","paneSetIsDeleting","deleteOp","isConfirmDialogOpen","setConfirmDialogOpen","handleCancel","handleConfirm","handle","useDocumentPairPermissions","TrashIcon","DISABLED_REASON_KEY","NO_CHANGES","NOT_PUBLISHED","DiscardChangesAction","ResetIcon","NOTHING_TO_DUPLICATE","DuplicateAction","duplicate","isDuplicating","setDuplicating","dupeId","uuid","duplicateSuccess","firstValueFrom","operationEvents","HistoryRestoreAction","revision","isRevisionInitial","isRevisionLatest","RevertIcon","DocumentPublished","LIVE_EDIT_ENABLED","ALREADY_PUBLISHED","publishedAt","AlreadyPublished","useTemporalPhrase","timeSincePublished","useRelativeTime","PublishAction","publishState","setPublishState","validationStatus","useValidationStatus","syncState","useSyncState","changesOpen","useEditState","isValidationErrorMarker","hasValidationErrors","publishScheduled","setPublishScheduled","isSyncing","isValidating","_updatedAt","hasDraft","doPublish","validationComplete","didPublish","publishedImmediately","previouslyPublished","PublishIcon","UnpublishAction","unpublish","UnpublishIcon","DocumentStatusBarActionsInner","showMenu","states","__internal_tasks","firstActionState","menuActionStates","buttonElement","setButtonElement","Hotkeys","footerAction","DocumentStatusBarActions","allActions","renderDocumentStatusBarActions","HistoryStatusBarActions","isRestoreAction","historyActions","toLowerCase","revTime","DocumentHeaderTabs","tabPanelId","DocumentHeaderTab","isActive","viewId","setView","DocumentHeaderTitle","DocumentPanelHeader","_props","onMenuAction","onPaneClose","onPaneSplit","unstable_languageFilter","hasGroupSiblings","useFieldActions","menuButtonNodes","showTabs","showSplitPaneButton","splitViews","showSplitPaneCloseButton","showBackButton","showPaneGroupCloseButton","renderPaneActions","ArrowLeftIcon","languageFilterComponent","SplitVerticalIcon","DocumentPanelHeaderActionDialogDeferred","useDeferredValue","DocumentPanelHeaderActionDialog","SpacerButton","size","pointerEvents","visibility","BADGE_TONES","primary","success","warning","danger","DocumentBadgesInner","DocumentBadgesDeferred","DocumentBadges","renderDocumentBadges","badge","Badge","whiteSpace","StyledMotionPath","motion","Circle","Arrows","Checkmark","rotateAnimation","keyframes","RotateGroup","root","syncing","scale","transition","saved","changes","circle","strokeDasharray","strokeDashoffset","arrows","checkmark","pathLength","AnimatedStatusIcon","STATUS_DICTIONARY","i18nKey","DocumentStatusPulse","currentStatus","TextWithTone","SYNCING_TIMEOUT","SAVED_TIMEOUT","DocumentStatusLine","singleLine","setStatus","lastUpdated","timerId","timerId_0","StatusText","RevisionStatusLine","date","format","RestoreIcon","useResizeObserver","resizeObserver","observe","unobserve","CONTAINER_BREAKPOINT","DocumentStatusBar","actionsBoxRef","createLinkMetadata","onDocumentChange","CreateLinkedActions","useSanityCreateConfig","components","documentLinkedActions","showingRevision","setCollapsed","contentRect","shouldRender","isSanityCreateLinked","flexShrink","marginLeft","onOlderRevision","KeyboardShortcutResponder","actionsBoxElement","activeIndex","onActionStart","onKeyDown","rootRef","activeAction","matchingStates","isHotkey","matchingState","handleKeyDown","DocumentActionShortcuts","setActiveIndex","renderDocumentActionShortcuts","getInspectorItems","currentInspector","hasValue","inspectorMenuItems","getInspectItem","JsonIcon","getProductionPreviewItem","previewUrl","EarthAmericasIcon","getMenuItems","inspectorItems","items","LinkIcon","usePreviewUrl","resolveProductionUrl","useSource","BehaviorSubject","subject","asObservable","DocumentLayoutError","DIALOG_PROVIDER_POSITION","StyledChangeConnectorRoot","ChangeConnectorRoot","DocumentLayout","inspectOpen","onHistoryOpen","paneParams","zOffsets","getSanityCreateLinkMetadata","CreateLinkedBannerContent","documentLinkedBannerContent","footerElement","setFooterElement","headerElement","setHeaderElement","setActionsBoxElement","documentPanelPortalElement","useGlobalCopyPasteElementHandler","setInspectorMenuItems","rootFieldActionNodes","setRootFieldActionNodes","footerRect","headerRect","handleKeyUp","stopPropagation","onConnectorSetFocus","GetFormValueProvider","FieldActionsResolver","FieldActionsProvider","paneDialog","changesInspectorTab","ShowWhenPaneOpen","pick","plugin","unstable_layout","useDocumentLayoutComponent","defaultComponent","useMiddlewareComponents","DocumentURLCopied","CreatedDraft","getInitialValueTemplateOpts","opts","panePayload","structureNodeTemplate","templateName","urlTemplate","typeTemplates","DocumentPaneProvider","onFocusPath","setDocumentMeta","useCopyPaste","documentActions","documentBadges","unstable_fieldActions","fieldActionsResolver","languageFilterResolver","inspectorsResolver","presenceStore","usePresenceStore","setPaneParams","viewsProp","paneOptions","documentIdRaw","templateParameters","initialValueRaw","useInitialValue","initialValue","validationRaw","useConnectionState","languageFilter","setFocusPath","focusPathRef","timelineMode","setTimelineMode","timelineError","setTimelineError","useTimelineStore","onError","since","sinceAttributes","timelineDisplayed","timelineReady","isPristine","setPresence","subscription","nextPresence","inspectorName","setInspectorName","inspectParamRef","resolvedChangesInspector","compareValue","setTimelineRange","newSince","newRev","handleBlur","blurredPath","disableBlurRef","patchRef","toMutationPatches","closeInspectorName","nextInspectorName","nextInspector","currentParams","onOpen","handleHistoryClose","handleHistoryOpen","reviewChanges","handlePaneClose","closeCurrent","handlePaneSplit","duplicateCurrent","toggleLegacyInspect","toggle","omit","handleMenuAction","open","navigator","clipboard","writeText","toString","startsWith","handleLegacyInspectClose","onSetOpenPath","fieldGroupState","onSetFieldGroupState","onSetCollapsedFieldSets","handleOnSetCollapsedPath","prevState","setAtPath","handleOnSetCollapsedFieldSet","handleSetActiveFieldGroup","groupName","docId","docPermissionsInput","useDocumentValuePermissions","isCreateLinked","isSanityCreateLinkedDocument","isNonExistent","hasNoPermission","updateActionDisabled","isActionEnabled","createActionDisabled","reconnecting","isLiveEditAndDraft","useFormState","comparisonValue","formStateRef","setOpenPath","getExpandOperations","forEach","updatePresence","nextFocusPath","setLocation","lastActiveAt","toISOString","selection","updatePresenceThrottled","throttle","leading","trailing","handleFocus","_nextFocusPath","pathFor","onHistoryClose","timeout","restParams","pathFromUrl","resolveKeyedPath","deepEquals","DocumentPane","parentSourceName","source","CopyPasteProvider","SourceProvider","DocumentPaneInner","resolveNewDocumentOptions","usePaneOptions","isLoaded","isDocumentLoaded","useDocumentType","mergeDocumentType","providerProps","handleEditReference","childParams","routerPanesStateLength","activePath","ReferenceInputOptionsProvider","PARTIAL_PAGE_LIMIT","FULL_LIST_LIMIT","DEFAULT_ORDERING","by","field","EMPTY_RECORD","RootBox","$opacity","CommandListBox","SKELETON_ITEMS","keys","LoadingView","num","DocumentListPaneContent","childItemId","filterIsSimpleTypeConstraint","hasMaxItems","hasSearchQuery","isLazyLoading","loadingVariant","onEndReached","onRetry","paneTitle","searchInputElement","showIcons","setShouldRender","handleEndReached","renderItem","isSelected","isLastItem","showSpinner","showMaxItemsMessage","limit","noDocumentsContent","mainContent","ErrorActions","CommandList","removePublishedWithDrafts","documents","collate","entry","hasPublished","applyOrderingFunctions","order","orderBy","mapWith","fieldType","tryResolveSchemaTypeForPath","fieldExtendsType","jsonType","baseType","pathSegments","PathUtils","fromString","segment","getFieldTypeByName","isKeySegment","isIndexSegment","memberType","otherType","isReferenceSchemaType","refType","otherRefType","to","fieldName","fields","ofType","findTypes","types","isSplat","findStaticTypesInFilter","IMPLICIT_SCHEMA_TYPE_FIELDS","joinReferences","strict","head","tail","schemaField","refTypes","tailFields","tailWrapper","getExtendedProjection","ordering","swr","createSWR","listenSearchQuery","searchQuery","staticTypeNames","maxFieldDepth","searchStrategy","sortBy","extendedProjection","events$","defer","events","includeResult","mergeMap","throwError","share","welcome$","mutationAndReconnect$","partition","swrKey","take","asyncScheduler","exhaustMapWithTrailing","typeNames","getSearchableTypes","search","createSearch","strategy","maxDepth","doFetch","__unstable_extendedProjection","comments","skipSortByScore","hits","hit","fromCache","INITIAL_QUERY_STATE","isLoadingFullList","useDocumentList","searchFilter","paramsProp","sortOrder","useWorkspace","useSearchMaxFieldDepth","typeNameFromFilter","onRetry$","observableCallback","onFetchFullList$","onLoadFullList","queryResults$","listenSearchQueryArgs","partialList$","fullList$","withLatestFrom","takeUntil","caught$","safeError","scan","nonErrorThrownWarning","thrown","rotate","fadeIn","AnimatedSpinnerIcon","SpinnerIcon","SubtleSpinnerIcon","DelayedSubtleSpinnerIcon","DocumentListPane","sortOrderRaw","displayOptions","useShallowUnique","staticTypes","setSearchQuery","searchInputValue","setSearchInputValue","setSearchInputElement","sortWithOrderingFn","trim","handleQueryChange","useObservableEvent","event$","debounce","handleClearSearch","handleSearchKeyDown","enableSearchSpinner","setEnableSearchSpinner","textInputIcon","initialValueTemplates","setLayout","setSortOrder","StructurePaneHeader","DocumentSheetListSelect","row","selectedAnchor","setSelectedAnchor","meta","handleOnClick","shiftKey","shiftClickIndex","lowerIndex","upperIndex","additionalSelectedRows","getRowModel","flatRows","currentSelectedRows","getSelectedRowModel","rows","setRowSelection","nextSelectedRows","rowId","isRowCurrentlySelected","getIsSelected","toggleSelected","Checkbox","paddingLeft","getCanSelect","useDocumentSheetListContext","DocumentSheetListContext","DocumentSheetListProvider","selectedAnchorCellDetails","setSelectedAnchorCellDetails","selectedRangeCellIndexes","setSelectedRangeCellIndexes","clearAndSetFocusSelection","nextAnchorDetails","activeElement","HTMLElement","blur","resetFocusSelection","changeSelectionColumn","visibleColumns","getVisibleLeafColumns","columnIndexAfterMove","col","colId","rowIndex","changeSelectionRange","previousSelection","anchorIndex","getNextIndex","startingIndex","firstSelectedIndex","lastIndexSelected","nextIndex","setSelectedAnchorCell","handleEscapePress","nextAnchorCellDetails","handleUpDownKey","isShiftKey","offset","newSelectedCellRowIndex","handleAnchorKeydown","handleAnchorClick","getElementById","contains","focusAnchorCell","anchorCellDetails","getStateByCellId","submitFocusedCell","DataCell","td","PinnedDataCell","SheetListCellInner","getValue","column","cellId","renderValue","setRenderValue","isDirty","setIsDirty","inputRef","cellState","handleOnFocus","patchDocument","handleProgrammaticFocus","focus","HTMLInputElement","handleOnMouseDown","detail","handleOnEnterDown","handleOnChange","handleOnBlur","handlePaste","clipboardData","getData","handleCopy","getBorderStyle","inputProps","Select","boxShadow","SheetListCell","cell","isPinned","getIsPinned","Cell","borderWidth","getIsLastColumn","getStart","borderRight","getSize","flexRender","columnDef","getContext","VISIBLE_COLUMN_LIMIT","PreviewCell","displayValue","columnHelper","createColumnHelper","SUPPORTED_FIELDS","getColsFromSchemaType","parentalField","tableColumns","nextCol","accessor","enableHiding","info","isObjectSchemaType","columns","isAccessorKeyColumnDef","isGroupColumnDef","flatColumns","cols","flatMap","useDocumentSheetColumns","documentSchemaType","display","getIsSomeRowsSelected","getToggleAllPageRowsSelectedHandler","initialColumnsVisibility","accCols","countAllowedVisible","visibilityKey","ColumnsControl","isVisibleLimitReached","getCanHide","setInitialColumns","resetColumnVisibility","handleColumnOnChange","toggleVisibility","getColumnVisibilityDisabled","isColumnVisible","getIsVisible","isSingleColumnVisible","maxHeight","overflowY","getAllLeafColumns","SearchContainer","DocumentSheetListFilter","useSearchState","filtersVisible","SearchHeader","Filters","Header","th","PinnedHeader","HoverMenu","DocumentSheetListHeader","headerGroup","headerTitle","depth","parent","HeaderTag","canShowHeaderMenu","boxSizing","EllipsisHorizontalIcon","DocumentSheetListPaginator","setPageIndex","getCanPreviousPage","DoubleChevronLeftIcon","previousPage","ChevronLeftIcon","getState","pagination","pageIndex","getPageCount","nextPage","getCanNextPage","DoubleChevronRightIcon","pageSize","setPageSize","Number","createDocumentsSet","documentsReducer","nextDocumentResult","_","restDocuments","updatedDocument","nextDocument","LISTEN_OPTIONS","useDocumentSheetListStore","QUERY","dispatch","useReducer","setIsLoading","res","initialFetch","handleListenerEvent","err_0","listener$","uniques","isDraft","values","dataAsArray","useDocumentSheetList","h","PaneContainer","TableContainer","DocumentSheetListPaneInner","totalRows","useReactTable","getCoreRowModel","getFilteredRowModel","getPaginationRowModel","autoResetPageIndex","initialState","columnPinning","columnVisibility","getRowId","fieldId","renderRow","getVisibleCells","rowsCount","getHeaderGroups","headers","DocumentSheetListPane","schemaTypeName","isDocumentSchemaType","SearchProvider","addSelectedStateToMenuItems","isEqual","valueRef","shallowEquals","defaultLayout","defaultOrdering","sourceName","defaultSortOrder","menuItemsWithSelectedState","isSheetListLayout","SerializeError","constructor","parentPath","pathSegment","hint","withHelpUrl","helpId","HELP_URL","ORDER_BY_UPDATED_AT","ns","ORDER_BY_CREATED_AT","DEFAULT_SELECTED_ORDERING_OPTION","DEFAULT_ORDERING_OPTIONS","maybeSerializeMenuItem","MenuItemBuilder","serialize","_context","spec","clone","getAction","getTitle","getI18n","getGroup","getIcon","getParams","getShowAsAction","TITLE_REQUIRED","ACTION_OR_INTENT_REQUIRED","ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE","withSpec","builder","getOrderingMenuItem","SortIcon","getOrderingMenuItemsForSchemaType","orderings","maybeSerializeMenuItemGroup","MenuItemGroupBuilder","_title","_i18n","getId","ID_REQUIRED","disallowedPattern","validateId","disallowedChar","match","getStructureNodeId","camelCased","camelCase","test","getSlug","ComponentBuilder","getChild","getComponent","getOptions","getMenuItemGroups","canHandleIntent","componentOptions","resolveTypeForDocument","getClient","GenericViewBuilder","kebabCase","isSerializable","maybeSerializeView","isComponentSpec","ComponentViewBuilder","componentOrSpec","userComponent","COMPONENT_REQUIRED","FormViewBuilder","form","createDocumentChildResolver","resolveDocumentNode","itemId","currentSegment","DocumentBuilder","paneId","getDocumentId","getSchemaType","initialValueTemplate","getInitialValueTemplate","getInitialValueTemplateParameters","getViews","urlId","DOCUMENT_ID_REQUIRED","viewIds","dupes","uniq","getDocumentOptions","documentFromEditor","documentFromEditorWithInitialValue","InitialValueTemplateItemBuilder","getDescription","getTemplateId","getParameters","subtitle","defaultInitialValueTemplateItems","getStructureBuilder","getTypeNames","tpl","initialValueTemplateItem","maybeSerializeInitialValueTemplateItem","menuItemsFromInitialValueTemplateItems","DEFAULT_INTENT_HANDLER","defaultIntentChecker","intentName","isEdit","isCreate","typedSpec","paneFilter","getTypeNamesFromFilter","identity","layoutOptions","noChildResolver","shallowIntentChecker","GenericListBuilder","initialValueTemplatesSpecified","getDefaultLayout","getCanHandleIntent","getShowIcons","getInitialValueTemplates","validateFilter","QUERY_PROVIDED_FOR_FILTER","createDocumentChildResolverForItem","parentItem","Promise","resolve","DocumentListBuilder","getApiVersion","getFilter","getDefaultOrdering","FILTER_REQUIRED","generateHelpUrl","API_VERSION_REQUIRED_FOR_CUSTOM_FILTER","inferInitialValueTemplates","inferTypeName","getSpec","option","getTypeNamesFromEqualityFilter","getTypeNamesFromInTypesFilter","pattern","matches","exec","candidate","getArgType","thing","ListBuilder","isPromise","isListItem","defaultCanHandleIntent","isDocumentListItem","resolveChildForItem","maybeSerializeListItem","ListItemBuilder","listItem","gotWhat","helpText","INVALID_LIST_ITEM","getItems","LIST_ITEMS_MUST_BE_ARRAY","serializedItems","val","dupeIds","dupeDesc","LIST_ITEM_IDS_MUST_BE_UNIQUE","showIcon","getShowIcon","titleIsOptional","SCHEMA_TYPE_NOT_FOUND","serializeOptions","listChild","originalChild","childOptions","createDefaultChildResolver","DocumentListItemBuilder","SCHEMA_TYPE_REQUIRED","DocumentTypeListBuilder","cloneWithoutDefaultIntentHandler","override","BUNDLED_DOC_TYPES","isBundledDocType","isDocumentType","isList","collection","getDocumentTypes","n","getDocumentTypeListItems","getDocumentTypeListItem","startCase","childContext","list","getDocumentTypeList","typeNameOrSpec","StackCompactIcon","StackIcon","hasIcon","getDefaultStructure","createStructureBuilder","defaultDocumentNode","configContext","getConfigContextFromSource","structureBuilder","defaults","documentTypeList","args","documentTypeListItem","documentTypeListItems","documentWithInitialValueTemplate","defaultDocument","menuItemGroup","documentList","documentListItem","orderingMenuItem","orderingMenuItemsForType","editor","isValidElementType","uniqueId","LiveEditBadge","activePanes","setActivePanes","getIntentState","routerState","editDocumentId","isTemplate","TIMELINE_ICON_COMPONENTS","create","discardDraft","initial","editDraft","EditIcon","editLive","getTimelineEventIconComponent","hideScrollbarOnExpand","listWrapper","TIMELINE_LIST_WRAPPER_ID","firstChildren","scrollHeight","clientHeight","currentStyle","getComputedStyle","FlipIcon","ExpandableTimelineItemButton","handleExpandClick","StackWrapper","ListWrapper","$maxHeight","$visible","TIMELINE_ITEM_I18N_KEY_MAPPING","UserAvatarStack","maxLength","userIds","withTooltip","userId","UserAvatar","AvatarStack","IconBox","getTheme_v2","$color","avatar","TIMELINE_ITEM_EVENT_TONE","withinSelection","RELATIVE_TIME_OPTIONS","minimal","AvatarSkeleton","Skeleton","NameSkeleton","font","UserLine","user","useUser","TooltipContent","collaborators","TimelineItem","chunk","onSelect","optionsMenu","endTimestamp","timestamp","iconComponent","authors","authorUserIds","collaboratorsUsersIds","isSelectable","dateStyle","timeStyle","dateFormat","useDateTimeFormat","updatedTimeAgo","parsedDate","formattedTimestamp","evt","T3","T4","t29","t30","t31","t32","t33","t34","isNonPublishChunk","isPublishChunk","getPreviousPublishAction","chunks","previousPublish","addChunksMetadata","Timeline","hasMoreChunks","lastChunk","selectedChunk","onLoadMore","listMaxHeight","selectedChunkId","chunksWithMetadata","expandedParents","setExpandedParents","filteredChunks","handleExpandParent","selectedIndex","handleSelectChunk","timelineChunk","c","TimelineError","TIMELINE_MENU_PORTAL","TimelineMenu","setOpen","button","setButton","popoverRef","setPopoverRef","realRevChunk","sinceTime","_temp5","handleOpen","revChunk","sinceId","revId","findRangeForRev","selectRev","sinceChunk","sinceId_0","revId_0","findRangeForSince","selectSince","loadMore","handleLoadMore","revLabel","formatParams","buttonLabel","state_3","state_2","state_1","state_0","ChangesInspector","showChanges","scrollRef","setScrollRef","diff","selectionState","isComparingCurrent","structureT","FieldWrapper","ChangeFieldWrapper","rootDiff","showFromValue","documentContext","NoChanges","ChangeList","DocumentChangeContext","HistorySelector","showList","listHeight","setListHeight","getScrollerRef","FadeInFlex","TABS","isValidTab","tab","ChangesTabs","isReady","paneRouterTab","setPaneRouterTab","changesInspector","getPathTitles","f","itemType","_key","MARKER_ICON","MARKER_TONE","ValidationInspector","marker","ValidationCard","errorInfo","setErrorInfo","level","DocumentNodePathBreadcrumbs","pathTitles","fontWeight","validationMarkers","hasErrors","isValidationError","hasWarnings","isValidationWarning","CheckmarkCircleIcon","validationInspector","legacyEditParamsToState","decodeURIComponent","encodePanesSegment","encodeChunks","encodeURIComponent","legacyEditParamsToPath","toState","parsePanesSegment","toPath","router","route","intents","transform","panePattern","isParam","str","isPayloadLike","exclusiveParams","isTruthy","parseChunks","sibling","tryParseBase64Payload","firstSibling","paneIsFirstSibling","sameAsFirst","encodedPayload","encodeJsonParams","encodedParams","valueFromFirstSibling","flat","parseOldPanesSegment","restOfSiblings","buffer","payloadChunk","tryParsePayload","decodeJsonParams","definePlugin","MasterDetailIcon","prevActions","prevBadges","prevInspectors","tools","lazy","canHandleCreateIntent","canHandleEditIntent","controlsDocumentTitle","bundles","StructureToolProvider","structure","resolveStructure","setLayoutCollapsed","useConfigContextFromSource","S","rootPaneNode","structureContext"],"mappings":"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"}