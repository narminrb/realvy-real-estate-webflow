{"version":3,"file":"index3.js","sources":["../../src/structure/components/paneRouter/PaneRouterProvider.tsx","../../src/structure/structureResolvers/PaneResolutionError.ts","../../src/structure/structureResolvers/assignId.ts","../../src/structure/structureResolvers/createPaneResolver.ts","../../src/structure/structureResolvers/memoBind.ts","../../src/structure/structureResolvers/resolveIntent.ts","../../src/structure/structureResolvers/createResolvedPaneNodeStream.ts","../../src/structure/structureResolvers/useResolvedPanes.ts","../../src/structure/components/structureTool/intentResolver/utils.ts","../../src/structure/components/structureTool/intentResolver/IntentResolver.tsx","../../src/structure/components/structureTool/StructureError.tsx","../../src/structure/panes/unknown/UnknownPaneType.tsx","../../src/structure/panes/StructureToolPane.tsx","../../src/structure/components/structureTool/NoDocumentTypesScreen.tsx","../../src/structure/components/structureTool/StructureTitle.tsx","../../src/structure/components/structureTool/StructureTool.tsx","../../src/structure/components/structureTool/StructureToolBoundary.tsx"],"sourcesContent":["import {toString as pathToString} from '@sanity/util/paths'\nimport {omit} from 'lodash'\nimport {type ReactNode, useCallback, useMemo} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {useRouter, useRouterState} from 'sanity/router'\n\nimport {type RouterPaneGroup, type RouterPanes, type RouterPaneSibling} from '../../types'\nimport {usePaneLayout} from '../pane/usePaneLayout'\nimport {BackLink} from './BackLink'\nimport {ChildLink} from './ChildLink'\nimport {ParameterizedLink} from './ParameterizedLink'\nimport {ReferenceChildLink} from './ReferenceChildLink'\nimport {type PaneRouterContextValue} from './types'\n\nconst emptyArray: never[] = []\n\n/**\n * @internal\n */\nexport function PaneRouterProvider(props: {\n  children: ReactNode\n  flatIndex: number\n  index: number\n  params: Record<string, string | undefined>\n  payload: unknown\n  siblingIndex: number\n}) {\n  const {children, flatIndex, index, params, payload, siblingIndex} = props\n  const {navigate, navigateIntent, resolvePathFromState} = useRouter()\n  const routerState = useRouterState()\n  const {panes, expand} = usePaneLayout()\n  const routerPaneGroups: RouterPaneGroup[] = useMemo(\n    () => (routerState?.panes || emptyArray) as RouterPanes,\n    [routerState?.panes],\n  )\n  const lastPane = useMemo(() => panes?.[panes.length - 2], [panes])\n\n  const groupIndex = index - 1\n\n  const createNextRouterState = useCallback(\n    (modifier: (siblings: RouterPaneGroup, item: RouterPaneSibling) => RouterPaneGroup) => {\n      const currentGroup = routerPaneGroups[groupIndex] || []\n      const currentItem = currentGroup[siblingIndex]\n      const nextGroup = modifier(currentGroup, currentItem)\n      const nextPanes = [\n        ...routerPaneGroups.slice(0, groupIndex),\n        nextGroup,\n        ...routerPaneGroups.slice(groupIndex + 1),\n      ]\n      const nextRouterState = {...(routerState || {}), panes: nextPanes}\n\n      return nextRouterState\n    },\n    [groupIndex, routerPaneGroups, routerState, siblingIndex],\n  )\n\n  const modifyCurrentGroup = useCallback(\n    (modifier: (siblings: RouterPaneGroup, item: RouterPaneSibling) => RouterPaneGroup) => {\n      const nextRouterState = createNextRouterState(modifier)\n      setTimeout(() => navigate(nextRouterState), 0)\n      return nextRouterState\n    },\n    [createNextRouterState, navigate],\n  )\n\n  const createPathWithParams: PaneRouterContextValue['createPathWithParams'] = useCallback(\n    (nextParams) => {\n      const nextRouterState = createNextRouterState((siblings, item) => [\n        ...siblings.slice(0, siblingIndex),\n        {...item, params: nextParams},\n        ...siblings.slice(siblingIndex + 1),\n      ])\n\n      return resolvePathFromState(nextRouterState)\n    },\n    [createNextRouterState, resolvePathFromState, siblingIndex],\n  )\n\n  const setPayload: PaneRouterContextValue['setPayload'] = useCallback(\n    (nextPayload) => {\n      modifyCurrentGroup((siblings, item) => [\n        ...siblings.slice(0, siblingIndex),\n        {...item, payload: nextPayload},\n        ...siblings.slice(siblingIndex + 1),\n      ])\n    },\n    [modifyCurrentGroup, siblingIndex],\n  )\n\n  const setParams: PaneRouterContextValue['setParams'] = useCallback(\n    (nextParams) => {\n      modifyCurrentGroup((siblings, item) => [\n        ...siblings.slice(0, siblingIndex),\n        {...item, params: nextParams},\n        ...siblings.slice(siblingIndex + 1),\n      ])\n    },\n    [modifyCurrentGroup, siblingIndex],\n  )\n\n  const handleEditReference: PaneRouterContextValue['handleEditReference'] = useCallback(\n    ({id, parentRefPath, type, template}) => {\n      navigate({\n        panes: [\n          ...routerPaneGroups.slice(0, groupIndex + 1),\n          [\n            {\n              id,\n              params: {template: template.id, parentRefPath: pathToString(parentRefPath), type},\n              payload: template.params,\n            },\n          ],\n        ],\n      })\n    },\n    [groupIndex, navigate, routerPaneGroups],\n  )\n\n  const ctx: PaneRouterContextValue = useMemo(\n    () => ({\n      // Zero-based index (position) of pane, visually\n      index: flatIndex,\n\n      // Zero-based index of pane group (within URL structure)\n      groupIndex,\n\n      // Zero-based index of pane within sibling group\n      siblingIndex,\n\n      // Payload of the current pane\n      payload,\n\n      // Params of the current pane\n      params,\n\n      // Whether or not the pane has any siblings (within the same group)\n      hasGroupSiblings: routerPaneGroups[groupIndex]\n        ? routerPaneGroups[groupIndex].length > 1\n        : false,\n\n      // The length of the current group\n      groupLength: routerPaneGroups[groupIndex] ? routerPaneGroups[groupIndex].length : 0,\n\n      // Current router state for the \"panes\" property\n      routerPanesState: routerPaneGroups,\n\n      // Curried StateLink that passes the correct state automatically\n      ChildLink,\n\n      // Curried StateLink that pops off the last pane group\n      // Only pass if this is not the first pane\n      BackLink: flatIndex ? BackLink : undefined,\n\n      // A specialized `ChildLink` that takes in the needed props to open a\n      // referenced document to the right\n      ReferenceChildLink,\n\n      // Similar to `ReferenceChildLink` expect without the wrapping component\n      handleEditReference,\n\n      // Curried StateLink that passed the correct state, but merges params/payload\n      ParameterizedLink,\n\n      // Replaces the current pane with a new one\n      replaceCurrent: (opts = {}): void => {\n        modifyCurrentGroup(() => [\n          {id: opts.id || '', payload: opts.payload, params: opts.params || {}},\n        ])\n      },\n\n      // Removes the current pane from the group\n      closeCurrent: (): void => {\n        modifyCurrentGroup((siblings, item) =>\n          siblings.length > 1 ? siblings.filter((sibling) => sibling !== item) : siblings,\n        )\n      },\n\n      // Removes all panes to the right including current\n      closeCurrentAndAfter: (expandLast = true): void => {\n        if (expandLast && lastPane) {\n          expand(lastPane.element)\n        }\n        navigate({\n          panes: [...routerPaneGroups.slice(0, groupIndex)],\n        })\n      },\n\n      // Duplicate the current pane, with optional overrides for payload, parameters\n      duplicateCurrent: (options): void => {\n        modifyCurrentGroup((siblings, item) => {\n          const duplicatedItem = {\n            ...item,\n            payload: options?.payload || item.payload,\n            params: options?.params || item.params,\n          }\n\n          return [\n            ...siblings.slice(0, siblingIndex),\n            duplicatedItem,\n            ...siblings.slice(siblingIndex),\n          ]\n        })\n      },\n\n      // Set the view for the current pane\n      setView: (viewId) => {\n        const restParams = omit(params, 'view')\n        return setParams(viewId ? {...restParams, view: viewId} : restParams)\n      },\n\n      // Set the parameters for the current pane\n      setParams,\n\n      // Set the payload for the current pane\n      setPayload,\n\n      // A function that returns a path with the given parameters\n      createPathWithParams,\n\n      // Proxied navigation to a given intent. Consider just exposing `router` instead?\n      navigateIntent,\n    }),\n    [\n      flatIndex,\n      groupIndex,\n      siblingIndex,\n      payload,\n      params,\n      routerPaneGroups,\n      handleEditReference,\n      setParams,\n      setPayload,\n      createPathWithParams,\n      navigateIntent,\n      modifyCurrentGroup,\n      lastPane,\n      navigate,\n      expand,\n    ],\n  )\n\n  return <PaneRouterContext.Provider value={ctx}>{children}</PaneRouterContext.Provider>\n}\n","import {type RouterPaneSiblingContext} from '../types'\n\nexport interface PaneResolutionErrorOptions {\n  message: string\n  context?: RouterPaneSiblingContext\n  helpId?: string\n  cause?: Error\n}\n\n/**\n * An error thrown during pane resolving. This error is meant to be bubbled up\n * through react and handled in an error boundary. It includes a `cause`\n * property which is the original error caught\n */\nexport class PaneResolutionError extends Error {\n  cause: Error | undefined\n  context: RouterPaneSiblingContext | undefined\n  helpId: string | undefined\n\n  constructor({message, context, helpId, cause}: PaneResolutionErrorOptions) {\n    super(message)\n    this.name = 'PaneResolutionError'\n    this.context = context\n    this.helpId = helpId\n    this.cause = cause\n  }\n}\n","import {nanoid} from 'nanoid'\n\n// `WeakMap`s require the first type param to extend `object`\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst randomIdCache = new WeakMap<object, string>()\n\n/**\n * given an object, this function randomly generates an ID and returns it. this\n * result is then saved in a WeakMap so subsequent requests for the same object\n * will receive the same ID\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function assignId(obj: object): string {\n  const cachedValue = randomIdCache.get(obj)\n  if (cachedValue) return cachedValue\n\n  const id = nanoid()\n  randomIdCache.set(obj, id)\n  return id\n}\n","import {from, isObservable, type Observable, of as observableOf} from 'rxjs'\nimport {publishReplay, refCount, switchMap} from 'rxjs/operators'\nimport {isRecord} from 'sanity'\n\nimport {type PaneNode, type RouterPaneSiblingContext, type UnresolvedPaneNode} from '../types'\nimport {PaneResolutionError} from './PaneResolutionError'\n\ninterface Serializable {\n  serialize: (...args: never[]) => unknown\n}\n\nconst isPromise = (thing: any): thing is PromiseLike<unknown> => {\n  return !!thing && typeof thing?.then === 'function'\n}\nconst isSerializable = (thing: unknown): thing is Serializable => {\n  if (!isRecord(thing)) return false\n  return typeof thing.serialize === 'function'\n}\n\n/**\n * The signature of the function used to take an `UnresolvedPaneNode` and turn\n * it into an `Observable<PaneNode>`.\n */\nexport type PaneResolver = (\n  unresolvedPane: UnresolvedPaneNode | undefined,\n  context: RouterPaneSiblingContext,\n  flatIndex: number,\n) => Observable<PaneNode>\n\nexport type PaneResolverMiddleware = (paneResolveFn: PaneResolver) => PaneResolver\n\nconst rethrowWithPaneResolutionErrors: PaneResolverMiddleware =\n  (next) => (unresolvedPane, context, flatIndex) => {\n    try {\n      return next(unresolvedPane, context, flatIndex)\n    } catch (e) {\n      // re-throw errors that are already `PaneResolutionError`s\n      if (e instanceof PaneResolutionError) {\n        throw e\n      }\n\n      // anything else, wrap with `PaneResolutionError` and set the underlying\n      // error as a the `cause`\n      throw new PaneResolutionError({\n        message: typeof e?.message === 'string' ? e.message : '',\n        context,\n        cause: e,\n      })\n    }\n  }\n\nconst wrapWithPublishReplay: PaneResolverMiddleware =\n  (next) =>\n  (...args) => {\n    return next(...args).pipe(\n      // need to add publishReplay + refCount to ensure new subscribers always\n      // get an emission. without this, memoized observables may get stuck\n      // waiting for their first emissions resulting in a loading pane\n      publishReplay(1),\n      refCount(),\n    )\n  }\n\nexport function createPaneResolver(middleware: PaneResolverMiddleware): PaneResolver {\n  // note: this API includes a middleware/wrapper function because the function\n  // is recursive. we want to call the wrapped version of the function always\n  // (even inside of nested calls) so the identifier invoked for the recursion\n  // should be the wrapped version\n  const resolvePane = rethrowWithPaneResolutionErrors(\n    wrapWithPublishReplay(\n      middleware((unresolvedPane, context, flatIndex) => {\n        if (!unresolvedPane) {\n          throw new PaneResolutionError({\n            message: 'Pane returned no child',\n            context,\n            helpId: 'structure-item-returned-no-child',\n          })\n        }\n\n        if (isPromise(unresolvedPane) || isObservable(unresolvedPane)) {\n          return from(unresolvedPane).pipe(\n            switchMap((result) => resolvePane(result, context, flatIndex)),\n          )\n        }\n\n        if (isSerializable(unresolvedPane)) {\n          return resolvePane(unresolvedPane.serialize(context), context, flatIndex)\n        }\n\n        if (typeof unresolvedPane === 'function') {\n          return resolvePane(unresolvedPane(context.id, context), context, flatIndex)\n        }\n\n        return observableOf(unresolvedPane)\n      }),\n    ),\n  )\n\n  return resolvePane\n}\n","/* eslint-disable @typescript-eslint/ban-types */\n\n// `WeakMap`s require the first type param to extend `object`\nconst bindCache = new WeakMap<object, Map<string, Function>>()\n\n/**\n * An alternative to `obj.method.bind(obj)` that utilizes a weakmap to return\n * the same memory reference for sequent binds.\n */\nexport function memoBind<\n  T extends object,\n  K extends keyof {[P in keyof T]: T[P] extends Function ? T[P] : never},\n>(obj: T, methodKey: K): T[K]\nexport function memoBind(obj: Record<string, unknown>, methodKey: string): Function {\n  const boundMethods = bindCache.get(obj) || new Map<string, Function>()\n  if (boundMethods) {\n    const bound = boundMethods.get(methodKey)\n    if (bound) return bound\n  }\n\n  const method = obj[methodKey]\n\n  if (typeof method !== 'function') {\n    throw new Error(\n      `Expected property \\`${methodKey}\\` to be a function but got ${typeof method} instead.`,\n    )\n  }\n\n  const bound = method.bind(obj)\n  boundMethods.set(methodKey, bound)\n  bindCache.set(obj, boundMethods)\n\n  return bound\n}\n","import {omit} from 'lodash'\nimport {firstValueFrom, type Observable} from 'rxjs'\n\nimport {type StructureContext} from '../structureBuilder'\nimport {\n  type PaneNode,\n  type RouterPanes,\n  type RouterPaneSiblingContext,\n  type UnresolvedPaneNode,\n} from '../types'\nimport {assignId} from './assignId'\nimport {createPaneResolver, type PaneResolverMiddleware} from './createPaneResolver'\nimport {memoBind} from './memoBind'\n\ninterface TraverseOptions {\n  unresolvedPane: UnresolvedPaneNode | undefined\n  intent: string\n  params: {type: string; id: string; [key: string]: string | undefined}\n  payload: unknown\n  parent: PaneNode | null\n  path: string[]\n  currentId: string\n  flatIndex: number\n  levelIndex: number\n  structureContext: StructureContext\n}\n\nexport interface ResolveIntentOptions {\n  rootPaneNode?: UnresolvedPaneNode\n  intent: string\n  params: {type: string; id: string; [key: string]: string | undefined}\n  payload: unknown\n  structureContext: StructureContext\n}\n\n/**\n * Resolves an intent request using breadth first search. If a match is not\n * found, the intent will resolve to the fallback editor.\n *\n * A match is found if:\n * 1. the `PaneNode` is of type `document` and the its ID matches the intent ID\n * 2. the `PaneNode` is of type `documentList` and the `schemaTypeName` matches\n * 3. the `PaneNode`'s `canHandleIntent` method returns true\n *\n * If a `PaneNode` of type `list` is found, it will be searched for a match.\n *\n * @see PaneNode\n */\nexport async function resolveIntent(options: ResolveIntentOptions): Promise<RouterPanes> {\n  const resolvedPaneCache = new Map<string, Observable<PaneNode>>()\n\n  // this is a simple version of the memoizer in `createResolvedPaneNodeStream`\n  const memoize: PaneResolverMiddleware = (nextFn) => (unresolvedPane, context, flatIndex) => {\n    const key = unresolvedPane && `${assignId(unresolvedPane)}-${context.path.join('__')}`\n    const cachedResolvedPane = key && resolvedPaneCache.get(key)\n    if (cachedResolvedPane) return cachedResolvedPane\n\n    const result = nextFn(unresolvedPane, context, flatIndex)\n    if (key) resolvedPaneCache.set(key, result)\n    return result\n  }\n\n  const resolvePane = createPaneResolver(memoize)\n\n  const fallbackEditorPanes: RouterPanes = [\n    [\n      {\n        id: `__edit__${options.params.id}`,\n        params: {...omit(options.params, ['id']), type: options.params.type},\n        payload: options.payload,\n      },\n    ],\n  ]\n\n  async function traverse({\n    currentId,\n    flatIndex,\n    intent,\n    params,\n    parent,\n    path,\n    payload,\n    unresolvedPane,\n    levelIndex,\n    structureContext,\n  }: TraverseOptions): Promise<\n    Array<{panes: RouterPanes; depthIndex: number; levelIndex: number}>\n  > {\n    if (!unresolvedPane) return []\n\n    const {id: targetId, type: schemaTypeName, ...otherParams} = params\n    const context: RouterPaneSiblingContext = {\n      id: currentId,\n      splitIndex: 0,\n      parent,\n      path,\n      index: flatIndex,\n      params: {},\n      payload: undefined,\n      structureContext,\n    }\n    const resolvedPane = await firstValueFrom(resolvePane(unresolvedPane, context, flatIndex))\n\n    // if the resolved pane is a document pane and the pane's ID matches then\n    // resolve the intent to the current path\n    if (resolvedPane.type === 'document' && resolvedPane.id === targetId) {\n      return [\n        {\n          panes: [\n            ...path.slice(0, path.length - 1).map((i) => [{id: i}]),\n            [{id: targetId, params: otherParams, payload}],\n          ],\n          depthIndex: path.length,\n          levelIndex,\n        },\n      ]\n    }\n\n    // NOTE: if you update this logic, please also update the similar handler in\n    // `getIntentState.ts`\n    if (\n      // if the resolve pane's `canHandleIntent` returns true, then resolve\n      resolvedPane.canHandleIntent?.(intent, params, {\n        pane: resolvedPane,\n        index: flatIndex,\n      }) ||\n      // if the pane's `canHandleIntent` did not return true, then match against\n      // this default case. we will resolve the intent if:\n      (resolvedPane.type === 'documentList' &&\n        // 1. the schema type matches (this required for the document to render)\n        resolvedPane.schemaTypeName === schemaTypeName &&\n        // 2. the filter is the default filter.\n        //\n        // NOTE: this case is to prevent false positive matches where the user\n        // has configured a more specific filter for a particular type. In that\n        // case, the user can implement their own `canHandleIntent` function\n        resolvedPane.options.filter === '_type == $type')\n    ) {\n      return [\n        {\n          panes: [\n            // map the current path to router panes\n            ...path.map((id) => [{id}]),\n            // then augment with the intents IDs and params\n            [{id: params.id, params: otherParams, payload}],\n          ],\n          depthIndex: path.length,\n          levelIndex,\n        },\n      ]\n    }\n\n    if (resolvedPane.type === 'list' && resolvedPane.child && resolvedPane.items) {\n      return (\n        await Promise.all(\n          resolvedPane.items.map((item, nextLevelIndex) => {\n            if (item.type === 'divider') return Promise.resolve([])\n\n            return traverse({\n              currentId: item._id || item.id,\n              flatIndex: flatIndex + 1,\n              intent,\n              params,\n              parent: resolvedPane,\n              path: [...path, item.id],\n              payload,\n              unresolvedPane:\n                typeof resolvedPane.child === 'function'\n                  ? memoBind(resolvedPane, 'child')\n                  : resolvedPane.child,\n              levelIndex: nextLevelIndex,\n              structureContext,\n            })\n          }),\n        )\n      ).flat()\n    }\n\n    return []\n  }\n\n  const matchingPanes = await traverse({\n    currentId: 'root',\n    flatIndex: 0,\n    levelIndex: 0,\n    intent: options.intent,\n    params: options.params,\n    parent: null,\n    path: [],\n    payload: options.payload,\n    unresolvedPane: options.rootPaneNode,\n    structureContext: options.structureContext,\n  })\n\n  const closestPaneToRoot = matchingPanes.sort((a, b) => {\n    // break ties with the level index\n    if (a.depthIndex === b.depthIndex) return a.levelIndex - b.levelIndex\n    return a.depthIndex - b.depthIndex\n  })[0]\n\n  if (closestPaneToRoot) {\n    return closestPaneToRoot.panes\n  }\n\n  return fallbackEditorPanes\n}\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {isEqual} from 'lodash'\nimport {concat, NEVER, type Observable, of as observableOf} from 'rxjs'\nimport {distinctUntilChanged, map, pairwise, scan, startWith, switchMap} from 'rxjs/operators'\n\nimport {type StructureContext} from '../structureBuilder'\nimport {\n  type DocumentPaneNode,\n  type PaneNode,\n  type PaneNodeResolver,\n  type RouterPanes,\n  type RouterPaneSibling,\n  type RouterPaneSiblingContext,\n  type UnresolvedPaneNode,\n} from '../types'\nimport {assignId} from './assignId'\nimport {\n  createPaneResolver,\n  type PaneResolver,\n  type PaneResolverMiddleware,\n} from './createPaneResolver'\nimport {memoBind} from './memoBind'\nimport {PaneResolutionError} from './PaneResolutionError'\n\n/**\n * the fallback editor child that is implicitly inserted into the structure tree\n * if the id starts with `__edit__`\n */\nconst fallbackEditorChild: PaneNodeResolver = (nodeId, context): DocumentPaneNode => {\n  const id = nodeId.replace(/^__edit__/, '')\n  const {\n    params,\n    payload,\n    structureContext: {resolveDocumentNode},\n  } = context\n  const {type, template} = params\n\n  if (!type) {\n    throw new Error(\n      `Document type for document with ID ${id} was not provided in the router params.`,\n    )\n  }\n\n  let defaultDocumentBuilder = resolveDocumentNode({schemaType: type, documentId: id}).id('editor')\n\n  if (template) {\n    defaultDocumentBuilder = defaultDocumentBuilder.initialValueTemplate(\n      template,\n      payload as {[key: string]: unknown},\n    )\n  }\n\n  return defaultDocumentBuilder.serialize() as DocumentPaneNode\n}\n\n/**\n * takes in a `RouterPaneSiblingContext` and returns a normalized string\n * representation that can be used for comparisons\n */\nfunction hashContext(context: RouterPaneSiblingContext): string {\n  return `contextHash(${JSON.stringify({\n    id: context.id,\n    parentId: parent && assignId(parent),\n    path: context.path,\n    index: context.index,\n    splitIndex: context.splitIndex,\n    serializeOptionsIndex: context.serializeOptions?.index,\n    serializeOptionsPath: context.serializeOptions?.path,\n  })})`\n}\n\n/**\n * takes in `ResolvedPaneMeta` and returns a normalized string representation\n * that can be used for comparisons\n */\nconst hashResolvedPaneMeta = (meta: ResolvedPaneMeta): string => {\n  const normalized = {\n    type: meta.type,\n    id: meta.routerPaneSibling.id,\n    params: meta.routerPaneSibling.params || {},\n    payload: meta.routerPaneSibling.payload || null,\n    flatIndex: meta.flatIndex,\n    groupIndex: meta.groupIndex,\n    siblingIndex: meta.siblingIndex,\n    path: meta.path,\n    paneNode: meta.type === 'resolvedMeta' ? assignId(meta.paneNode) : null,\n  }\n\n  return `metaHash(${JSON.stringify(normalized)})`\n}\n\n/**\n * Represents one flattened \"router pane\", including the source group and\n * sibling indexes.\n *\n * @see RouterPanes\n */\ninterface FlattenedRouterPane {\n  routerPaneSibling: RouterPaneSibling\n  flatIndex: number\n  groupIndex: number\n  siblingIndex: number\n}\n\n/**\n * The state of the accumulator used to store and manage memo cache state\n */\ninterface CacheState {\n  /**\n   * Holds the memoization results keyed by a combination of `assignId` and a\n   * context hash.\n   */\n  resolvedPaneCache: Map<string, Observable<PaneNode>>\n  /**\n   * Acts as a dictionary that stores cache keys by their flat index. This is\n   * used to clean up the cache between different branches in the pane\n   * structure.\n   *\n   * @see createResolvedPaneNodeStream look inside the `scan` where `wrapFn` is\n   * defined\n   */\n  cacheKeysByFlatIndex: Array<Set<string>>\n  /**\n   * The resulting memoized `PaneResolver` function. This function closes over\n   * the `resolvedPaneCache`.\n   */\n  resolvePane: PaneResolver\n  flattenedRouterPanes: FlattenedRouterPane[]\n}\n\nexport interface CreateResolvedPaneNodeStreamOptions {\n  /**\n   * an input stream of `RouterPanes`\n   * @see RouterPanes\n   */\n  routerPanesStream: Observable<RouterPanes>\n  /**\n   * any `UnresolvedPaneNode` (could be an observable, promise, pane resolver etc)\n   */\n  rootPaneNode: UnresolvedPaneNode\n  /** used primarily for testing */\n  initialCacheState?: CacheState\n\n  structureContext: StructureContext\n}\n\n/**\n * The result of pane resolving\n */\nexport type ResolvedPaneMeta = {\n  groupIndex: number\n  siblingIndex: number\n  flatIndex: number\n  routerPaneSibling: RouterPaneSibling\n  path: string[]\n} & ({type: 'loading'; paneNode: null} | {type: 'resolvedMeta'; paneNode: PaneNode})\n\ninterface ResolvePaneTreeOptions {\n  resolvePane: PaneResolver\n  flattenedRouterPanes: FlattenedRouterPane[]\n  unresolvedPane: UnresolvedPaneNode | undefined\n  parent: PaneNode | null\n  path: string[]\n  structureContext: StructureContext\n}\n\n/**\n * A recursive pane resolving function. Starts at one unresolved pane node and\n * continues until there is no more flattened router panes that can be used as\n * input to the unresolved panes.\n */\nfunction resolvePaneTree({\n  unresolvedPane,\n  flattenedRouterPanes,\n  parent,\n  path,\n  resolvePane,\n  structureContext,\n}: ResolvePaneTreeOptions): Observable<ResolvedPaneMeta[]> {\n  const [current, ...rest] = flattenedRouterPanes\n  const next = rest[0] as FlattenedRouterPane | undefined\n\n  const context: RouterPaneSiblingContext = {\n    id: current.routerPaneSibling.id,\n    splitIndex: current.siblingIndex,\n    parent,\n    path: [...path, current.routerPaneSibling.id],\n    index: current.flatIndex,\n    params: current.routerPaneSibling.params || {},\n    payload: current.routerPaneSibling.payload,\n    structureContext,\n  }\n\n  try {\n    return resolvePane(unresolvedPane, context, current.flatIndex).pipe(\n      // this switch map receives a resolved pane\n      switchMap((paneNode) => {\n        // we can create a `resolvedMeta` type using it\n        const resolvedPaneMeta: ResolvedPaneMeta = {\n          type: 'resolvedMeta',\n          ...current,\n          paneNode: paneNode,\n          path: context.path,\n        }\n\n        // for the other unresolved panes, we can create \"loading panes\"\n        const loadingPanes = rest.map((i, restIndex) => {\n          const loadingPanePath = [\n            ...context.path,\n            ...rest.slice(restIndex).map((_, currentIndex) => `[${i.flatIndex + currentIndex}]`),\n          ]\n\n          const loadingPane: ResolvedPaneMeta = {\n            type: 'loading',\n            path: loadingPanePath,\n            paneNode: null,\n            ...i,\n          }\n\n          return loadingPane\n        })\n\n        if (!rest.length) {\n          return observableOf([resolvedPaneMeta])\n        }\n\n        let nextStream\n\n        if (\n          // the fallback editor case\n          next?.routerPaneSibling.id.startsWith('__edit__')\n        ) {\n          nextStream = resolvePaneTree({\n            unresolvedPane: fallbackEditorChild,\n            flattenedRouterPanes: rest,\n            parent,\n            path: context.path,\n            resolvePane,\n            structureContext,\n          })\n        } else if (current.groupIndex === next?.groupIndex) {\n          // if the next flattened router pane has the same group index as the\n          // current flattened router pane, then the next flattened router pane\n          // belongs to the same group (i.e. it is a split pane)\n          nextStream = resolvePaneTree({\n            unresolvedPane,\n            flattenedRouterPanes: rest,\n            parent,\n            path,\n            resolvePane,\n            structureContext,\n          })\n        } else {\n          // normal children resolving\n          nextStream = resolvePaneTree({\n            unresolvedPane:\n              typeof paneNode.child === 'function'\n                ? (memoBind(paneNode, 'child') as PaneNodeResolver)\n                : paneNode.child,\n            flattenedRouterPanes: rest,\n            parent: paneNode,\n            path: context.path,\n            resolvePane,\n            structureContext,\n          })\n        }\n\n        return concat(\n          // we emit the loading panes first in a concat (this emits immediately)\n          observableOf([resolvedPaneMeta, ...loadingPanes]),\n          // then whenever the next stream is done, the results will be combined.\n          nextStream.pipe(map((nextResolvedPanes) => [resolvedPaneMeta, ...nextResolvedPanes])),\n        )\n      }),\n    )\n  } catch (e) {\n    if (e instanceof PaneResolutionError) {\n      if (e.context) {\n        console.warn(\n          `Pane resolution error at index ${e.context.index}${\n            e.context.splitIndex > 0 ? ` for split pane index ${e.context.splitIndex}` : ''\n          }: ${e.message}${e.helpId ? ` - see ${generateHelpUrl(e.helpId)}` : ''}`,\n          e,\n        )\n      }\n\n      if (e.helpId === 'structure-item-returned-no-child') {\n        // returning an observable of an empty array will remove loading panes\n        // note: this one intentionally does not throw\n        return observableOf([])\n      }\n    }\n\n    throw e\n  }\n}\n\n/**\n * Takes in a stream of `RouterPanes` and an unresolved root pane and returns\n * a stream of `ResolvedPaneMeta`\n */\nexport function createResolvedPaneNodeStream({\n  routerPanesStream,\n  rootPaneNode,\n  initialCacheState = {\n    cacheKeysByFlatIndex: [],\n    flattenedRouterPanes: [],\n    resolvedPaneCache: new Map(),\n    resolvePane: () => NEVER,\n  },\n  structureContext,\n}: CreateResolvedPaneNodeStreamOptions): Observable<ResolvedPaneMeta[]> {\n  const resolvedPanes$ = routerPanesStream.pipe(\n    // add in implicit \"root\" router pane\n    map((rawRouterPanes) => [[{id: 'root'}], ...rawRouterPanes]),\n    // create flattened router panes\n    map((routerPanes) => {\n      const flattenedRouterPanes: FlattenedRouterPane[] = routerPanes\n        .flatMap((routerPaneGroup, groupIndex) =>\n          routerPaneGroup.map((routerPaneSibling, siblingIndex) => ({\n            routerPaneSibling,\n            groupIndex,\n            siblingIndex,\n          })),\n        )\n        // add in the flat index\n        .map((i, index) => ({...i, flatIndex: index}))\n\n      return flattenedRouterPanes\n    }),\n    // calculate a \"diffIndex\" used for clearing the memo cache\n    startWith([] as FlattenedRouterPane[]),\n    pairwise(),\n    map(([prev, curr]) => {\n      for (let i = 0; i < curr.length; i++) {\n        const prevValue = prev[i]\n        const currValue = curr[i]\n\n        if (!isEqual(prevValue, currValue)) {\n          return {\n            flattenedRouterPanes: curr,\n            diffIndex: i,\n          }\n        }\n      }\n\n      return {\n        flattenedRouterPanes: curr,\n        diffIndex: curr.length,\n      }\n    }),\n    // create the memoized `resolvePane` function and manage the memo cache\n    scan((acc, next) => {\n      const {cacheKeysByFlatIndex, resolvedPaneCache} = acc\n      const {flattenedRouterPanes, diffIndex} = next\n\n      // use the `cacheKeysByFlatIndex` like a dictionary to find cache keys to\n      // and cache keys to delete\n      const beforeDiffIndex = cacheKeysByFlatIndex.slice(0, diffIndex + 1)\n      const afterDiffIndex = cacheKeysByFlatIndex.slice(diffIndex + 1)\n\n      const keysToKeep = new Set(beforeDiffIndex.flatMap((keySet) => Array.from(keySet)))\n      const keysToDelete = afterDiffIndex\n        .flatMap((keySet) => Array.from(keySet))\n        .filter((key) => !keysToKeep.has(key))\n\n      for (const key of keysToDelete) {\n        resolvedPaneCache.delete(key)\n      }\n\n      // create a memoizing pane resolver middleware that utilizes the cache\n      // maintained above. this keeps the cache from growing indefinitely\n      const memoize: PaneResolverMiddleware = (nextFn) => (unresolvedPane, context, flatIndex) => {\n        const key = unresolvedPane && `${assignId(unresolvedPane)}-${hashContext(context)}`\n        const cachedResolvedPane = key && resolvedPaneCache.get(key)\n        if (cachedResolvedPane) return cachedResolvedPane\n\n        const result = nextFn(unresolvedPane, context, flatIndex)\n        if (!key) return result\n\n        const cacheKeySet = cacheKeysByFlatIndex[flatIndex] || new Set()\n        cacheKeySet.add(key)\n        cacheKeysByFlatIndex[flatIndex] = cacheKeySet\n        resolvedPaneCache.set(key, result)\n        return result\n      }\n\n      return {\n        flattenedRouterPanes,\n        cacheKeysByFlatIndex,\n        resolvedPaneCache,\n        resolvePane: createPaneResolver(memoize),\n      }\n    }, initialCacheState),\n    // run the memoized, recursive resolving\n    switchMap(({flattenedRouterPanes, resolvePane}) =>\n      resolvePaneTree({\n        unresolvedPane: rootPaneNode,\n        flattenedRouterPanes,\n        parent: null,\n        path: [],\n        resolvePane,\n        structureContext,\n      }),\n    ),\n  )\n\n  // after we've created a stream of `ResolvedPaneMeta[]`, we need to clean up\n  // the results to remove unwanted loading panes and prevent unnecessary\n  // emissions\n  return resolvedPanes$.pipe(\n    // this diffs the previous emission with the current one. if there is a new\n    // loading pane at the same position where a previous pane already had a\n    // resolved value (looking at the IDs to compare), then return the previous\n    // pane instead of the loading pane\n    scan(\n      (prev, next) =>\n        next.map((nextPane, index) => {\n          const prevPane = prev[index] as ResolvedPaneMeta | undefined\n          if (!prevPane) return nextPane\n          if (nextPane.type !== 'loading') return nextPane\n\n          if (prevPane.routerPaneSibling.id === nextPane.routerPaneSibling.id) {\n            return prevPane\n          }\n          return nextPane\n        }),\n      [] as ResolvedPaneMeta[],\n    ),\n    // this prevents duplicate emissions\n    distinctUntilChanged((prev, next) => {\n      if (prev.length !== next.length) return false\n\n      for (let i = 0; i < next.length; i++) {\n        const prevValue = prev[i]\n        const nextValue = next[i]\n        if (hashResolvedPaneMeta(prevValue) !== hashResolvedPaneMeta(nextValue)) {\n          return false\n        }\n      }\n\n      return true\n    }),\n  )\n}\n","import {useEffect, useMemo, useState} from 'react'\nimport {ReplaySubject} from 'rxjs'\nimport {map} from 'rxjs/operators'\nimport {type RouterState, useRouter} from 'sanity/router'\n\nimport {LOADING_PANE} from '../constants'\nimport {type PaneNode, type RouterPaneGroup, type RouterPanes} from '../types'\nimport {useStructureTool} from '../useStructureTool'\nimport {createResolvedPaneNodeStream} from './createResolvedPaneNodeStream'\n\ninterface PaneData {\n  active: boolean\n  childItemId: string | null\n  groupIndex: number\n  index: number\n  itemId: string\n  key: string\n  pane: PaneNode | typeof LOADING_PANE\n  params: Record<string, string | undefined>\n  path: string\n  payload: unknown\n  selected: boolean\n  siblingIndex: number\n}\n\nexport interface Panes {\n  paneDataItems: PaneData[]\n  routerPanes: RouterPanes\n  resolvedPanes: (PaneNode | typeof LOADING_PANE)[]\n}\n\nfunction useRouterPanesStream() {\n  const routerStateSubject = useMemo(() => new ReplaySubject<RouterState>(1), [])\n  const routerPanes$ = useMemo(\n    () =>\n      routerStateSubject\n        .asObservable()\n        .pipe(map((_routerState) => (_routerState?.panes || []) as RouterPanes)),\n    [routerStateSubject],\n  )\n  const {state: routerState} = useRouter()\n  useEffect(() => {\n    routerStateSubject.next(routerState)\n  }, [routerState, routerStateSubject])\n\n  return routerPanes$\n}\n\nexport function useResolvedPanes(): Panes {\n  // used to propagate errors from async effect. throwing inside of the render\n  // will bubble the error to react where it can be picked up by standard error\n  // boundaries\n  const [error, setError] = useState<unknown>()\n  if (error) throw error\n\n  const {structureContext, rootPaneNode} = useStructureTool()\n\n  const [data, setData] = useState<Panes>({\n    paneDataItems: [],\n    resolvedPanes: [],\n    routerPanes: [],\n  })\n\n  const routerPanesStream = useRouterPanesStream()\n\n  useEffect(() => {\n    const resolvedPanes$ = createResolvedPaneNodeStream({\n      rootPaneNode,\n      routerPanesStream,\n      structureContext,\n    }).pipe(\n      map((resolvedPanes) => {\n        const routerPanes = resolvedPanes.reduce<RouterPanes>((acc, next) => {\n          const currentGroup = acc[next.groupIndex] || []\n          currentGroup[next.siblingIndex] = next.routerPaneSibling\n          acc[next.groupIndex] = currentGroup\n          return acc\n        }, [])\n\n        const groupsLen = routerPanes.length\n\n        const paneDataItems = resolvedPanes.map((pane) => {\n          const {groupIndex, flatIndex, siblingIndex, routerPaneSibling, path} = pane\n          const itemId = routerPaneSibling.id\n          const nextGroup = routerPanes[groupIndex + 1] as RouterPaneGroup | undefined\n\n          const paneDataItem: PaneData = {\n            active: groupIndex === groupsLen - 2,\n            childItemId: nextGroup?.[0].id ?? null,\n            index: flatIndex,\n            itemId: routerPaneSibling.id,\n            groupIndex,\n            key: `${\n              pane.type === 'loading' ? 'unknown' : pane.paneNode.id\n            }-${itemId}-${siblingIndex}`,\n            pane: pane.type === 'loading' ? LOADING_PANE : pane.paneNode,\n            params: routerPaneSibling.params || {},\n            path: path.join(';'),\n            payload: routerPaneSibling.payload,\n            selected: flatIndex === resolvedPanes.length - 1,\n            siblingIndex,\n          }\n\n          return paneDataItem\n        })\n\n        return {\n          paneDataItems,\n          routerPanes,\n          resolvedPanes: paneDataItems.map((pane) => pane.pane),\n        }\n      }),\n    )\n\n    const subscription = resolvedPanes$.subscribe({\n      next: (result) => setData(result),\n      error: (e) => setError(e),\n    })\n\n    return () => subscription.unsubscribe()\n  }, [rootPaneNode, routerPanesStream, structureContext])\n\n  return data\n}\n","import {uuid} from '@sanity/uuid'\nimport {firstValueFrom, type Observable} from 'rxjs'\nimport {type DocumentStore, getPublishedId} from 'sanity'\n\nimport {PaneResolutionError} from '../../../structureResolvers'\n\nexport function removeDraftPrefix(documentId: string): string {\n  const publishedId = getPublishedId(documentId)\n\n  if (publishedId !== documentId) {\n    console.warn(\n      'Removed unexpected draft id in document link: All links to documents should have the ' +\n        '`drafts.`-prefix removed and something appears to have made an intent link to `%s`',\n      documentId,\n    )\n  }\n\n  return publishedId\n}\n\nexport async function ensureDocumentIdAndType(\n  documentStore: DocumentStore,\n  id: string | undefined,\n  type: string | undefined,\n): Promise<{id: string; type: string}> {\n  if (id && type) return {id, type}\n  if (!id && type) return {id: uuid(), type}\n  if (id && !type) {\n    const resolvedType = await firstValueFrom(\n      documentStore.resolveTypeForDocument(id) as Observable<string>,\n    )\n\n    return {id, type: resolvedType}\n  }\n\n  throw new PaneResolutionError({\n    message: 'Neither document `id` or `type` was provided when trying to resolve intent.',\n  })\n}\n","import {memo, useCallback, useEffect, useState} from 'react'\nimport {isRecord, useDocumentStore} from 'sanity'\nimport {useRouter, useRouterState} from 'sanity/router'\n\nimport {resolveIntent} from '../../../structureResolvers'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {ensureDocumentIdAndType} from './utils'\n\nconst EMPTY_RECORD: Record<string, unknown> = {}\n\n/**\n * A component that receives an intent from props and redirects to the resolved\n * intent location (while showing a loading spinner during the process)\n */\nexport const IntentResolver = memo(function IntentResolver() {\n  const {navigate} = useRouter()\n  const maybeIntent = useRouterState(\n    useCallback((routerState) => {\n      const intentName = typeof routerState.intent === 'string' ? routerState.intent : undefined\n      return intentName\n        ? {\n            intent: intentName,\n            params: isRecord(routerState.params) ? routerState.params : EMPTY_RECORD,\n            payload: routerState.payload,\n          }\n        : undefined\n    }, []),\n  )\n  const {rootPaneNode, structureContext} = useStructureTool()\n  const documentStore = useDocumentStore()\n  const [error, setError] = useState<unknown>(null)\n\n  // this re-throws errors so that parent ErrorBoundary's can handle them properly\n  if (error) throw error\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    if (maybeIntent) {\n      const {intent, params, payload} = maybeIntent\n\n      let cancelled = false\n      // eslint-disable-next-line no-inner-declarations\n      async function effect() {\n        const {id, type} = await ensureDocumentIdAndType(\n          documentStore,\n          typeof params.id === 'string' ? params.id : undefined,\n          typeof params.type === 'string' ? params.type : undefined,\n        )\n\n        if (cancelled) return\n\n        const panes = await resolveIntent({\n          intent,\n          params: {...params, id, type},\n          payload,\n          rootPaneNode,\n          structureContext,\n        })\n\n        if (cancelled) return\n\n        navigate({panes}, {replace: true})\n      }\n\n      effect().catch(setError)\n\n      return () => {\n        cancelled = true\n      }\n    }\n  }, [documentStore, maybeIntent, navigate, rootPaneNode, structureContext])\n\n  return null\n})\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {SyncIcon} from '@sanity/icons'\nimport {Box, Card, Code, Container, Heading, Stack, Text} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {SerializeError} from '../../structureBuilder'\nimport {PaneResolutionError} from '../../structureResolvers'\n\nconst PathSegment = styled.span`\n  &:not(:last-child)::after {\n    content: ' ➝ ';\n    opacity: 0.5;\n  }\n`\n\nfunction formatStack(stack: string) {\n  return (\n    stack\n      // Prettify builder functions\n      .replace(/\\(\\.\\.\\.\\)\\./g, '(...)\\n  .')\n      // Remove webpack cruft from function names\n      .replace(/__WEBPACK_IMPORTED_MODULE_\\d+_+/g, '')\n      // Remove default export postfix from function names\n      .replace(/___default\\./g, '.')\n      // Replace full host path, leave only path to JS-file\n      .replace(new RegExp(` \\\\(https?:\\\\/\\\\/${window.location.host}`, 'g'), ' (')\n  )\n}\n\ninterface StructureErrorProps {\n  error: unknown\n}\n\nexport function StructureError({error}: StructureErrorProps) {\n  if (!(error instanceof PaneResolutionError)) {\n    throw error\n  }\n  const {cause} = error\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  // Serialize errors are well-formatted and should be readable, in these cases a stack trace is\n  // usually not helpful. Build errors in dev (with HMR) usually also contains a bunch of garbage\n  // instead of an actual error message, so make sure we show the message in these cases as well\n  const stack = cause?.stack || error.stack\n  const showStack =\n    stack && !(cause instanceof SerializeError) && !error.message.includes('Module build failed:')\n\n  const path = cause instanceof SerializeError ? cause.path : []\n  const helpId = (cause instanceof SerializeError && cause.helpId) || error.helpId\n\n  const handleReload = useCallback(() => {\n    window.location.reload()\n  }, [])\n\n  return (\n    <Card height=\"fill\" overflow=\"auto\" padding={4} sizing=\"border\" tone=\"critical\">\n      <Container>\n        <Heading as=\"h2\">{t('structure-error.header.text')}</Heading>\n\n        <Card marginTop={4} padding={4} radius={2} overflow=\"auto\" shadow={1} tone=\"inherit\">\n          {path.length > 0 && (\n            <Stack space={2}>\n              <Text size={1} weight=\"medium\">\n                {t('structure-error.structure-path.label')}\n              </Text>\n              <Code>\n                {/* TODO: it seems like the path is off by one and includes */}\n                {/* `root` twice  */}\n                {path.slice(1).map((segment, i) => (\n                  // eslint-disable-next-line react/no-array-index-key\n                  <PathSegment key={`${segment}-${i}`}>{segment}</PathSegment>\n                ))}\n              </Code>\n            </Stack>\n          )}\n\n          <Stack marginTop={4} space={2}>\n            <Text size={1} weight=\"medium\">\n              {t('structure-error.error.label')}\n            </Text>\n            <Code>{showStack ? formatStack(stack) : error.message}</Code>\n          </Stack>\n\n          {helpId && (\n            <Box marginTop={4}>\n              <Text>\n                <a href={generateHelpUrl(helpId)} rel=\"noopener noreferrer\" target=\"_blank\">\n                  {t('structure-error.docs-link.text')}\n                </a>\n              </Text>\n            </Box>\n          )}\n\n          <Box marginTop={4}>\n            <Button\n              text={t('structure-error.reload-button.text')}\n              icon={SyncIcon}\n              tone=\"primary\"\n              onClick={handleReload}\n            />\n          </Box>\n        </Card>\n      </Container>\n    </Card>\n  )\n}\n","import {Box, Text} from '@sanity/ui'\nimport {isRecord, Translate, useTranslation} from 'sanity'\n\nimport {Pane, PaneContent, PaneHeader} from '../../components/pane'\nimport {structureLocaleNamespace} from '../../i18n'\n\ninterface UnknownPaneProps {\n  isSelected: boolean\n  pane: unknown\n  paneKey: string\n}\n\n/**\n * @internal\n */\nexport function UnknownPane(props: UnknownPaneProps) {\n  const {isSelected, pane, paneKey} = props\n  const type = (isRecord(pane) && pane.type) || null\n  const {t} = useTranslation(structureLocaleNamespace)\n  return (\n    <Pane id={paneKey} selected={isSelected}>\n      <PaneHeader title={t('panes.unknown-pane-type.title')} />\n      <PaneContent>\n        <Box padding={4}>\n          {typeof type === 'string' ? (\n            <Text as=\"p\" muted>\n              <Translate\n                t={t}\n                i18nKey=\"panes.unknown-pane-type.unknown-type.text\"\n                values={{type}}\n              />\n            </Text>\n          ) : (\n            <Text as=\"p\" muted>\n              <Translate t={t} i18nKey=\"panes.unknown-pane-type.missing-type.text\" />\n            </Text>\n          )}\n        </Box>\n      </PaneContent>\n    </Pane>\n  )\n}\n","import {isEqual} from 'lodash'\nimport {lazy, memo, Suspense} from 'react'\n\nimport {PaneRouterProvider} from '../components/paneRouter'\nimport {type PaneNode} from '../types'\nimport {LoadingPane} from './loading'\nimport {UnknownPane} from './unknown'\n\ninterface StructureToolPaneProps {\n  active: boolean\n  childItemId: string | null\n  groupIndex: number\n  index: number\n  itemId: string\n  pane: PaneNode\n  paneKey: string\n  params: Record<string, string | undefined>\n  payload: unknown\n  path: string\n  selected: boolean\n  siblingIndex: number\n}\n\n// TODO: audit this creates separate chunks\nconst paneMap = {\n  component: lazy(() => import('./userComponent')),\n  document: lazy(() => import('./document/pane')),\n  documentList: lazy(() => import('./documentList/pane')),\n  list: lazy(() => import('./list')),\n}\n\n/**\n * NOTE: The same pane might appear multiple times (split pane), so use index as tiebreaker\n *\n * @internal\n */\nexport const StructureToolPane = memo(\n  function StructureToolPane(props: StructureToolPaneProps) {\n    const {\n      active,\n      childItemId,\n      groupIndex,\n      index,\n      itemId,\n      pane,\n      paneKey,\n      params,\n      payload,\n      path,\n      selected,\n      siblingIndex,\n    } = props\n\n    const PaneComponent = paneMap[pane.type] || UnknownPane\n\n    return (\n      <PaneRouterProvider\n        flatIndex={index}\n        index={groupIndex}\n        params={params}\n        payload={payload}\n        siblingIndex={siblingIndex}\n      >\n        <Suspense fallback={<LoadingPane paneKey={paneKey} path={path} selected={selected} />}>\n          <PaneComponent\n            childItemId={childItemId || ''}\n            index={index}\n            itemId={itemId}\n            isActive={active}\n            isSelected={selected}\n            paneKey={paneKey}\n            // @ts-expect-error TS doesn't know how to handle this intersection\n            pane={pane}\n          />\n        </Suspense>\n      </PaneRouterProvider>\n    )\n  },\n  (\n    {params: prevParams = {}, payload: prevPayload = null, ...prev},\n    {params: nextParams = {}, payload: nextPayload = null, ...next},\n  ) => {\n    // deeply compare these objects (it's okay, they're small)\n    if (!isEqual(prevParams, nextParams)) return false\n    if (!isEqual(prevPayload, nextPayload)) return false\n\n    const keys = new Set([...Object.keys(prev), ...Object.keys(next)]) as Set<\n      keyof typeof next | keyof typeof prev\n    >\n\n    // then shallow equal the rest\n    for (const key of keys) {\n      if (prev[key] !== next[key]) return false\n    }\n\n    return true\n  },\n)\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {Box, Card, Container, Flex, Stack, Text} from '@sanity/ui'\nimport {useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../i18n'\n\nexport function NoDocumentTypesScreen() {\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Card height=\"fill\">\n      <Flex align=\"center\" height=\"fill\" justify=\"center\" padding={4} sizing=\"border\">\n        <Container width={0}>\n          <Card padding={4} radius={2} shadow={1} tone=\"caution\">\n            <Flex>\n              <Box>\n                <Text size={1}>\n                  <WarningOutlineIcon />\n                </Text>\n              </Box>\n              <Stack flex={1} marginLeft={3} space={3}>\n                <Text as=\"h1\" size={1} weight=\"medium\">\n                  {t('no-document-types-screen.title')}\n                </Text>\n                <Text as=\"p\" muted size={1}>\n                  {t('no-document-types-screen.subtitle')}\n                </Text>\n                <Text as=\"p\" muted size={1}>\n                  <a\n                    href=\"https://www.sanity.io/docs/create-a-schema-and-configure-sanity-studio\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    {t('no-document-types-screen.link-text')}\n                  </a>\n                </Text>\n              </Stack>\n            </Flex>\n          </Card>\n        </Container>\n      </Flex>\n    </Card>\n  )\n}\n","import {type ObjectSchemaType} from '@sanity/types'\nimport {useEffect} from 'react'\nimport {\n  unstable_useValuePreview as useValuePreview,\n  useEditState,\n  useSchema,\n  useTranslation,\n} from 'sanity'\n\nimport {LOADING_PANE} from '../../constants'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type Panes} from '../../structureResolvers'\nimport {type DocumentPaneNode} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\n\ninterface StructureTitleProps {\n  resolvedPanes: Panes['resolvedPanes']\n}\n\nconst DocumentTitle = (props: {documentId: string; documentType: string}) => {\n  const {documentId, documentType} = props\n  const editState = useEditState(documentId, documentType)\n  const schema = useSchema()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const isNewDocument = !editState?.published && !editState?.draft\n  const documentValue = editState?.draft || editState?.published\n  const schemaType = schema.get(documentType) as ObjectSchemaType | undefined\n\n  const {value, isLoading: previewValueIsLoading} = useValuePreview({\n    enabled: true,\n    schemaType,\n    value: documentValue,\n  })\n\n  const documentTitle = isNewDocument\n    ? t('browser-document-title.new-document', {\n        schemaType: schemaType?.title || schemaType?.name,\n      })\n    : value?.title || t('browser-document-title.untitled-document')\n\n  const settled = editState.ready && !previewValueIsLoading\n  const newTitle = useConstructDocumentTitle(documentTitle)\n  useEffect(() => {\n    if (!settled) return\n    // Set the title as the document title\n    document.title = newTitle\n  }, [documentTitle, settled, newTitle])\n\n  return null\n}\n\nconst PassthroughTitle = (props: {title?: string}) => {\n  const {title} = props\n  const newTitle = useConstructDocumentTitle(title)\n  useEffect(() => {\n    // Set the title as the document title\n    document.title = newTitle\n  }, [newTitle, title])\n  return null\n}\n\nexport const StructureTitle = (props: StructureTitleProps) => {\n  const {resolvedPanes} = props\n\n  if (!resolvedPanes?.length) return null\n\n  const lastPane = resolvedPanes[resolvedPanes.length - 1]\n\n  // If the last pane is loading, display the structure tool title only\n  if (isLoadingPane(lastPane)) {\n    return <PassthroughTitle />\n  }\n\n  // If the last pane is a document\n  if (isDocumentPane(lastPane)) {\n    // Passthrough the document pane's title, which may be defined in structure builder\n    if (lastPane?.title) {\n      return <PassthroughTitle title={lastPane.title} />\n    }\n\n    // Otherwise, display a `document.title` containing the resolved Sanity document title\n    return <DocumentTitle documentId={lastPane.options.id} documentType={lastPane.options.type} />\n  }\n\n  // Otherwise, display the last pane's title (if present)\n  return <PassthroughTitle title={lastPane?.title} />\n}\n\n/**\n * Construct a pipe delimited title containing `activeTitle` (if applicable) and the base structure title.\n *\n * @param activeTitle - Title of the first segment\n *\n * @returns A pipe delimited title in the format `${activeTitle} | %BASE_STRUCTURE_TITLE%`\n * or simply `%BASE_STRUCTURE_TITLE` if `activeTitle` is undefined.\n */\nfunction useConstructDocumentTitle(activeTitle?: string) {\n  const structureToolBaseTitle = useStructureTool().structureContext.title\n  return [activeTitle, structureToolBaseTitle].filter((title) => title).join(' | ')\n}\n\n// Type guards\nfunction isDocumentPane(pane: Panes['resolvedPanes'][number]): pane is DocumentPaneNode {\n  return pane !== LOADING_PANE && pane.type === 'document'\n}\n\nfunction isLoadingPane(pane: Panes['resolvedPanes'][number]): pane is typeof LOADING_PANE {\n  return pane === LOADING_PANE\n}\n","import {PortalProvider, useTheme, useToast} from '@sanity/ui'\nimport {isHotkey} from 'is-hotkey-esm'\nimport {Fragment, memo, useCallback, useEffect, useState} from 'react'\nimport {_isCustomDocumentTypeDefinition, useSchema} from 'sanity'\nimport {useRouterState} from 'sanity/router'\nimport {styled} from 'styled-components'\n\nimport {LOADING_PANE} from '../../constants'\nimport {LoadingPane, StructureToolPane} from '../../panes'\nimport {useResolvedPanes} from '../../structureResolvers'\nimport {type PaneNode} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {PaneLayout} from '../pane'\nimport {NoDocumentTypesScreen} from './NoDocumentTypesScreen'\nimport {StructureTitle} from './StructureTitle'\n\ninterface StructureToolProps {\n  onPaneChange: (panes: Array<PaneNode | typeof LOADING_PANE>) => void\n}\n\nconst StyledPaneLayout = styled(PaneLayout)`\n  min-height: 100%;\n  min-width: 320px;\n`\n\nconst isSaveHotkey = isHotkey('mod+s')\n\n/**\n * @internal\n */\nexport const StructureTool = memo(function StructureTool({onPaneChange}: StructureToolProps) {\n  const {push: pushToast} = useToast()\n  const schema = useSchema()\n  const {layoutCollapsed, setLayoutCollapsed} = useStructureTool()\n  const {paneDataItems, resolvedPanes} = useResolvedPanes()\n  // Intent resolving is processed by the sibling `<IntentResolver />` but it doesn't have a UI for indicating progress.\n  // We handle that here, so if there are only 1 pane (the root structure), and there's an intent state in the router, we need to show a placeholder LoadingPane until\n  // the structure is resolved and we know what panes to load/display\n  const isResolvingIntent = useRouterState(\n    useCallback((routerState) => typeof routerState.intent === 'string', []),\n  )\n  const {\n    sanity: {media},\n  } = useTheme()\n\n  const [portalElement, setPortalElement] = useState<HTMLDivElement | null>(null)\n\n  const handleRootCollapse = useCallback(() => setLayoutCollapsed(true), [setLayoutCollapsed])\n  const handleRootExpand = useCallback(() => setLayoutCollapsed(false), [setLayoutCollapsed])\n\n  useEffect(() => {\n    // we check for length before emitting here to skip the initial empty array\n    // state from the `useResolvedPanes` hook. there should always be a root\n    // pane emitted on subsequent emissions\n    if (resolvedPanes.length) {\n      onPaneChange(resolvedPanes)\n    }\n  }, [onPaneChange, resolvedPanes])\n\n  useEffect(() => {\n    const handleGlobalKeyDown = (event: KeyboardEvent) => {\n      // Prevent `Cmd+S`\n      if (isSaveHotkey(event)) {\n        event.preventDefault()\n\n        pushToast({\n          closable: true,\n          id: 'auto-save-message',\n          status: 'info',\n          title: 'Your work is automatically saved!',\n          duration: 4000,\n        })\n      }\n    }\n\n    window.addEventListener('keydown', handleGlobalKeyDown)\n    return () => window.removeEventListener('keydown', handleGlobalKeyDown)\n  }, [pushToast])\n\n  const hasDefinedDocumentTypes = schema._original?.types.some(_isCustomDocumentTypeDefinition)\n\n  if (!hasDefinedDocumentTypes) {\n    return <NoDocumentTypesScreen />\n  }\n\n  return (\n    <PortalProvider element={portalElement || null}>\n      <StyledPaneLayout\n        flex={1}\n        height={layoutCollapsed ? undefined : 'fill'}\n        minWidth={media[1]}\n        onCollapse={handleRootCollapse}\n        onExpand={handleRootExpand}\n      >\n        {paneDataItems.map(\n          ({\n            active,\n            childItemId,\n            groupIndex,\n            itemId,\n            key: paneKey,\n            pane,\n            index: paneIndex,\n            params: paneParams,\n            path,\n            payload,\n            siblingIndex,\n            selected,\n          }) => (\n            <Fragment key={`${pane === LOADING_PANE ? 'loading' : pane.type}-${paneIndex}`}>\n              {pane === LOADING_PANE ? (\n                <LoadingPane paneKey={paneKey} path={path} selected={selected} />\n              ) : (\n                <StructureToolPane\n                  active={active}\n                  groupIndex={groupIndex}\n                  index={paneIndex}\n                  pane={pane}\n                  childItemId={childItemId}\n                  itemId={itemId}\n                  paneKey={paneKey}\n                  params={paneParams}\n                  payload={payload}\n                  path={path}\n                  selected={selected}\n                  siblingIndex={siblingIndex}\n                />\n              )}\n            </Fragment>\n          ),\n        )}\n        {/* If there's just 1 pane (the root), or less, and we're resolving an intent then it's necessary to show */}\n        {/* a loading indicator as the intent resolving is async, could take a while and can also be interrupted/redirected */}\n        {paneDataItems.length <= 1 && isResolvingIntent && (\n          <LoadingPane paneKey=\"intent-resolver\" />\n        )}\n      </StyledPaneLayout>\n      <StructureTitle resolvedPanes={resolvedPanes} />\n      <div data-portal=\"\" ref={setPortalElement} />\n    </PortalProvider>\n  )\n})\n","import {useEffect, useState} from 'react'\nimport {SourceProvider, type Tool, useWorkspace} from 'sanity'\n\nimport {ErrorBoundary} from '../../../ui-components/errorBoundary'\nimport {setActivePanes} from '../../getIntentState'\nimport {StructureToolProvider} from '../../StructureToolProvider'\nimport {type StructureToolOptions} from '../../types'\nimport {IntentResolver} from './intentResolver'\nimport {StructureError} from './StructureError'\nimport {StructureTool} from './StructureTool'\n\ninterface StructureToolBoundaryProps {\n  tool: Tool<StructureToolOptions>\n}\n\nexport function StructureToolBoundary({tool: {options}}: StructureToolBoundaryProps) {\n  const {unstable_sources: sources} = useWorkspace()\n  const [firstSource] = sources\n  const {source, defaultDocumentNode, structure} = options || {}\n\n  // Set active panes to blank on mount and unmount\n  useEffect(() => {\n    setActivePanes([])\n    return () => setActivePanes([])\n  }, [])\n\n  const [{error}, setError] = useState<{error: unknown}>({error: null})\n\n  // this re-throws if the error it catches is not a PaneResolutionError\n  if (error) return <StructureError error={error} />\n\n  return (\n    <ErrorBoundary onCatch={setError}>\n      <SourceProvider name={source || firstSource.name}>\n        <StructureToolProvider defaultDocumentNode={defaultDocumentNode} structure={structure}>\n          <StructureTool onPaneChange={setActivePanes} />\n          <IntentResolver />\n        </StructureToolProvider>\n      </SourceProvider>\n    </ErrorBoundary>\n  )\n}\n"],"names":["emptyArray","PaneRouterProvider","props","$","_c","children","flatIndex","index","params","payload","siblingIndex","navigate","navigateIntent","resolvePathFromState","useRouter","routerState","useRouterState","panes","expand","usePaneLayout","t0","routerPaneGroups","t1","length","lastPane","groupIndex","t2","modifier","currentGroup","currentItem","nextGroup","nextPanes","slice","createNextRouterState","t3","modifier_0","nextRouterState_0","setTimeout","nextRouterState","modifyCurrentGroup","t4","nextParams","nextRouterState_1","siblings","item","createPathWithParams","t5","nextPayload","siblings_0","item_0","setPayload","t6","nextParams_0","siblings_1","item_1","setParams","t7","t8","id","parentRefPath","type","template","pathToString","handleEditReference","t9","t10","t11","BackLink","undefined","t12","t13","t14","opts","_temp","t15","element","options","siblings_3","item_3","duplicatedItem","t16","viewId","restParams","omit","view","t17","hasGroupSiblings","groupLength","routerPanesState","ChildLink","ReferenceChildLink","ParameterizedLink","replaceCurrent","closeCurrent","closeCurrentAndAfter","duplicateCurrent","setView","ctx","t18","jsx","PaneRouterContext","siblings_2","item_2","filter","sibling","PaneResolutionError","Error","constructor","message","context","helpId","cause","name","randomIdCache","WeakMap","assignId","obj","cachedValue","get","nanoid","set","isPromise","thing","then","isSerializable","isRecord","serialize","rethrowWithPaneResolutionErrors","next","unresolvedPane","e","wrapWithPublishReplay","args","pipe","publishReplay","refCount","createPaneResolver","middleware","resolvePane","isObservable","from","switchMap","result","observableOf","bindCache","memoBind","methodKey","boundMethods","Map","bound","method","bind","resolveIntent","resolvedPaneCache","nextFn","key","path","join","cachedResolvedPane","fallbackEditorPanes","traverse","currentId","intent","parent","levelIndex","structureContext","targetId","schemaTypeName","otherParams","resolvedPane","firstValueFrom","splitIndex","map","i","depthIndex","canHandleIntent","pane","child","items","Promise","all","nextLevelIndex","resolve","_id","flat","closestPaneToRoot","rootPaneNode","sort","a","b","fallbackEditorChild","nodeId","replace","resolveDocumentNode","defaultDocumentBuilder","schemaType","documentId","initialValueTemplate","hashContext","JSON","stringify","parentId","serializeOptionsIndex","serializeOptions","serializeOptionsPath","hashResolvedPaneMeta","meta","normalized","routerPaneSibling","paneNode","resolvePaneTree","flattenedRouterPanes","current","rest","resolvedPaneMeta","loadingPanes","restIndex","_","currentIndex","nextStream","startsWith","concat","nextResolvedPanes","console","warn","generateHelpUrl","createResolvedPaneNodeStream","routerPanesStream","initialCacheState","cacheKeysByFlatIndex","NEVER","rawRouterPanes","routerPanes","flatMap","routerPaneGroup","startWith","pairwise","prev","curr","prevValue","currValue","isEqual","diffIndex","scan","acc","beforeDiffIndex","afterDiffIndex","keysToKeep","Set","keySet","Array","keysToDelete","has","delete","cacheKeySet","add","nextPane","prevPane","distinctUntilChanged","nextValue","useRouterPanesStream","routerStateSubject","useMemo","ReplaySubject","routerPanes$","asObservable","_routerState","state","useEffect","useResolvedPanes","error","setError","useState","useStructureTool","Symbol","for","paneDataItems","resolvedPanes","data","setData","subscription","_temp4","subscribe","unsubscribe","reduce","_temp2","groupsLen","itemId","active","childItemId","LOADING_PANE","selected","_temp3","pane_0","ensureDocumentIdAndType","documentStore","uuid","resolvedType","resolveTypeForDocument","EMPTY_RECORD","IntentResolver","memo","maybeIntent","useDocumentStore","cancelled","catch","intentName","PathSegment","styled","span","formatStack","stack","RegExp","window","location","host","StructureError","t","useTranslation","structureLocaleNamespace","showStack","SerializeError","includes","handleReload","Heading","jsxs","Stack","Text","Code","Box","Button","SyncIcon","Card","Container","segment","reload","UnknownPane","isSelected","paneKey","PaneHeader","PaneContent","Translate","Pane","paneMap","component","lazy","document","documentList","list","StructureToolPane","PaneComponent","LoadingPane","Suspense","prevParams","prevPayload","keys","Object","NoDocumentTypesScreen","WarningOutlineIcon","Flex","DocumentTitle","documentType","editState","useEditState","schema","useSchema","isNewDocument","published","draft","documentValue","value","isLoading","previewValueIsLoading","useValuePreview","enabled","documentTitle","title","settled","ready","newTitle","useConstructDocumentTitle","PassthroughTitle","StructureTitle","isLoadingPane","isDocumentPane","activeTitle","structureToolBaseTitle","StyledPaneLayout","PaneLayout","isSaveHotkey","isHotkey","StructureTool","onPaneChange","push","pushToast","useToast","layoutCollapsed","setLayoutCollapsed","isResolvingIntent","sanity","useTheme","media","portalElement","setPortalElement","handleRootCollapse","handleRootExpand","handleGlobalKeyDown","event","preventDefault","closable","status","duration","addEventListener","removeEventListener","_original","types","some","_isCustomDocumentTypeDefinition","PortalProvider","paneIndex","paneParams","Fragment","StructureToolBoundary","tool","unstable_sources","sources","useWorkspace","firstSource","source","defaultDocumentNode","structure","setActivePanes","StructureToolProvider","ErrorBoundary","SourceProvider"],"mappings":"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"}