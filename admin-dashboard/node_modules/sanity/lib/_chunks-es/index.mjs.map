{"version":3,"file":"index.mjs","sources":["../../src/structure/panes/userComponent/UserComponentPaneContent.tsx","../../src/structure/panes/userComponent/UserComponentPaneHeader.tsx","../../src/structure/panes/userComponent/UserComponentPane.tsx"],"sourcesContent":["import {Box} from '@sanity/ui'\nimport {type ReactNode} from 'react'\nimport {styled} from 'styled-components'\n\nimport {usePane} from '../../components'\n\ninterface UserComponentPaneContentProps {\n  children: ReactNode\n}\n\nconst Root = styled(Box)`\n  position: relative;\n`\n\nexport function UserComponentPaneContent(props: UserComponentPaneContentProps) {\n  const {children} = props\n  const {collapsed} = usePane()\n\n  return (\n    <Root hidden={collapsed} height=\"fill\" overflow=\"auto\">\n      {children}\n    </Root>\n  )\n}\n","import {ArrowLeftIcon} from '@sanity/icons'\n\nimport {Button} from '../../../ui-components'\nimport {BackLink, PaneHeader, PaneHeaderActions} from '../../components'\nimport {\n  type PaneMenuItem,\n  type PaneMenuItemGroup,\n  type StructureToolPaneActionHandler,\n} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\n\ninterface UserComponentPaneHeaderProps {\n  actionHandlers?: Record<string, StructureToolPaneActionHandler>\n  index: number\n  menuItems?: PaneMenuItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  title: string\n}\n\nexport function UserComponentPaneHeader(props: UserComponentPaneHeaderProps) {\n  const {actionHandlers, index, menuItems, menuItemGroups, title} = props\n  const {features} = useStructureTool()\n\n  if (!menuItems?.length && !title) {\n    return null\n  }\n\n  return (\n    <PaneHeader\n      actions={\n        <PaneHeaderActions\n          menuItems={menuItems}\n          menuItemGroups={menuItemGroups}\n          actionHandlers={actionHandlers}\n        />\n      }\n      backButton={\n        features.backButton &&\n        index > 0 && (\n          <Button\n            as={BackLink}\n            data-as=\"a\"\n            icon={ArrowLeftIcon}\n            mode=\"bleed\"\n            tooltipProps={{content: 'Back'}}\n          />\n        )\n      }\n      title={title}\n    />\n  )\n}\n","import {createElement, isValidElement, useState} from 'react'\nimport {isValidElementType} from 'react-is'\nimport {useI18nText} from 'sanity'\n\nimport {Pane} from '../../components'\nimport {type StructureToolPaneActionHandler} from '../../types'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {UserComponentPaneContent} from './UserComponentPaneContent'\nimport {UserComponentPaneHeader} from './UserComponentPaneHeader'\n\ntype UserComponentPaneProps = BaseStructureToolPaneProps<'component'>\n\n/**\n * @internal\n */\nexport function UserComponentPane(props: UserComponentPaneProps) {\n  const {index, pane, paneKey, ...restProps} = props\n  const {\n    child,\n    component,\n    menuItems,\n    menuItemGroups,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    type: _unused,\n    ...restPane\n  } = pane\n  const [ref, setRef] = useState<{\n    actionHandlers?: Record<string, StructureToolPaneActionHandler>\n  } | null>(null)\n  const {title = ''} = useI18nText(pane)\n\n  return (\n    <Pane id={paneKey} minWidth={320} selected={restProps.isSelected}>\n      <UserComponentPaneHeader\n        actionHandlers={ref?.actionHandlers}\n        index={index}\n        menuItems={menuItems}\n        menuItemGroups={menuItemGroups}\n        title={title}\n      />\n\n      <UserComponentPaneContent>\n        {isValidElementType(component) &&\n          createElement(component, {\n            ...restProps,\n            ...restPane,\n            // NOTE: here we're utilizing the function form of refs so setting\n            // the ref causes a re-render for `UserComponentPaneHeader`\n            ...({ref: setRef} as any),\n            child: child as any, // @todo: Fix typings\n            paneKey,\n          })}\n\n        {isValidElement(component) && component}\n      </UserComponentPaneContent>\n    </Pane>\n  )\n}\n"],"names":["Root","styled","Box","UserComponentPaneContent","props","$","_c","children","collapsed","usePane","t0","UserComponentPaneHeader","actionHandlers","index","menuItems","menuItemGroups","title","features","useStructureTool","length","t1","backButton","BackLink","ArrowLeftIcon","content","t2","UserComponentPane","pane","paneKey","restProps","child","component","restPane","t3","type","_unused","t4","ref","setRef","useState","useI18nText","undefined","isValidElementType","createElement","isValidElement","t5","t6","isSelected"],"mappings":"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"}