import { Tooltip, TooltipDelayGroupProvider, Button, Dialog, ErrorBoundary, MenuGroup, MenuItem, MenuButton, Tab, generateHelpUrl, Popover as Popover$1 } from "./generate-help-url.esm.mjs";
import "../_singletons.mjs";
import { jsx, Fragment, jsxs } from "react/jsx-runtime";
import { c } from "react-compiler-runtime";
import { Box, rem, Flex, Text, Inline, useToast, Stack, Card, Layer, BoundaryElementProvider, MenuDivider, Menu, TextSkeleton, rgba, useElementRect, LayerProvider, _raf2, TextInput, Code, TabList, TabPanel, DialogProvider, Heading, focusFirstDescendant, Container, Spinner, usePortal, PortalProvider, Popover, useLayer, useGlobalKeyDown, useClickOutsideEvent, Button as Button$1, Grid as Grid$1, Dialog as Dialog$1, Badge, Checkbox, Select, AvatarStack, Skeleton } from "@sanity/ui";
import { isValidElement, forwardRef, useContext, useId, useState, useEffect, useRef, useImperativeHandle, memo, useCallback, useMemo, useLayoutEffect, createElement, useDeferredValue, useReducer, Fragment as Fragment$1, lazy } from "react";
import { PaneRouterContext, PaneLayoutContext, PaneContext, DocumentPaneContext, StructureToolContext, DocumentSheetListContext, DocumentChangeContext } from "sanity/_singletons";
import { InfoOutlineIcon, DocumentsIcon, ChevronDownIcon, CopyIcon, UnknownIcon, WarningOutlineIcon, CheckmarkIcon, AddIcon, ChevronRightIcon, DocumentIcon, FolderIcon, CloseIcon, SearchIcon, ReadOnlyIcon, ErrorOutlineIcon, SyncIcon, TrashIcon, ResetIcon, RevertIcon, PublishIcon, UnpublishIcon, ArrowLeftIcon, SplitVerticalIcon, RestoreIcon, LinkIcon, JsonIcon, EarthAmericasIcon, SpinnerIcon, EllipsisHorizontalIcon, DoubleChevronLeftIcon, ChevronLeftIcon, DoubleChevronRightIcon, SortIcon, StackCompactIcon, StackIcon, EditIcon, CheckmarkCircleIcon, MasterDetailIcon } from "@sanity/icons";
import camelCase from "lodash/camelCase.js";
import speakingurl from "speakingurl";
import uniqueId from "lodash/uniqueId.js";
import { isValidElementType } from "react-is";
import { defineLocaleResourceBundle, useSchema, useTranslation, unstable_useValuePreview, isRecord, getPreviewStateObservable, getPreviewValueWithFallback, DocumentPreviewPresence, DocumentStatusIndicator, DocumentStatus, SanityDefaultPreview, useUnique, getPublishedId, useDocumentPresence, useDocumentPreviewStore, PreviewCard, Translate, createHookFromObservableFactory, getDraftId, useClient, DEFAULT_STUDIO_CLIENT_OPTIONS, useDocumentStore, LoadingBlock, LegacyLayerProvider, IsLastPaneProvider, useGetI18nText, useI18nText, TooltipOfDisabled, ContextMenuButton, StatusButton, useCurrentUser, InsufficientPermissionsMessage, useTemplates, useTemplatePermissions, EMPTY_ARRAY as EMPTY_ARRAY$2, EMPTY_OBJECT, GetHookCollectionState, isDev, CommentsEnabledProvider, useCommentsEnabled, COMMENTS_INSPECTOR_NAME, CommentsProvider, useDocumentOperationEvent, useKeyValueStore, isString as isString$1, useDocumentOperation, isDeprecatedSchemaType, useProjectId, useZIndex, useListFormat, isDraftId, createPatchChannel, PresenceOverlay, FormBuilder, fromMutationPatches, ScrollContainer, useTimelineSelector, VirtualizerScrollInstanceProvider, useDocumentPairPermissions, useValidationStatus, useSyncState, useEditState, useRelativeTime, Hotkeys, useFieldActions, TextWithTone, resizeObserver, useSanityCreateConfig, isSanityCreateLinked, useSource, ChangeConnectorRoot, getSanityCreateLinkMetadata, useGlobalCopyPasteElementHandler, GetFormValueProvider, FieldActionsResolver, FieldActionsProvider, useMiddlewareComponents, useCopyPaste, usePresenceStore, useInitialValue, useConnectionState, useTimelineStore, toMutationPatches, setAtPath, useDocumentValuePermissions, isSanityCreateLinkedDocument, useFormState, getExpandOperations, CopyPasteProvider, SourceProvider, useDocumentType, ReferenceInputOptionsProvider, ErrorActions, CommandList, collate, createSWR, getSearchableTypes, createSearch, useWorkspace, useSearchMaxFieldDepth, useSearchState, SearchHeader, Filters, SearchProvider, getConfigContextFromSource, UserAvatar, useDateTimeFormat, useUser, ChangeFieldWrapper, NoChanges, ChangeList, isArray, isValidationError, isValidationWarning, definePlugin, useConfigContextFromSource } from "sanity";
import uniq from "lodash/uniq.js";
import kebabCase from "lodash/kebabCase.js";
import find from "lodash/find.js";
import startCase from "lodash/startCase.js";
import { uuid } from "@sanity/uuid";
import { styled, css, keyframes } from "styled-components";
import { getTheme_v2 } from "@sanity/ui/theme";
import omit from "lodash/omit.js";
import { StateLink, useIntentLink, IntentLink, useRouter, route, encodeJsonParams, decodeJsonParams } from "sanity/router";
import * as PathUtils from "@sanity/util/paths";
import { toString, fromString, get, pathFor, resolveKeyedPath } from "@sanity/util/paths";
import { fromEvent, timer, EMPTY, of, merge, map as map$1, startWith as startWith$1, catchError as catchError$1, concat, firstValueFrom, filter, BehaviorSubject, from, defer, mergeMap, throwError, share, partition, take, throttleTime, asyncScheduler, tap as tap$1, debounce } from "rxjs";
import { switchMap, startWith, map, distinctUntilChanged, shareReplay, catchError, mapTo, delay, debounceTime, tap, withLatestFrom, filter as filter$1, take as take$1, mergeMap as mergeMap$1, share as share$1, takeUntil, scan } from "rxjs/operators";
import { isHotkey } from "is-hotkey-esm";
import { useTranslation as useTranslation$1 } from "react-i18next";
import JSONInspector from "@rexxars/react-json-inspector";
import QuickLRU from "quick-lru";
import { useTelemetry } from "@sanity/telemetry/react";
import { useObservable, useObservableEvent } from "react-rx";
import { defineEvent } from "@sanity/telemetry";
import { isAfter, addWeeks, isBefore, format } from "date-fns";
import { isSanityDocument as isSanityDocument$1, isValidationErrorMarker, isKeySegment, isIndexSegment, isReferenceSchemaType, isObjectSchemaType, isDocumentSchemaType } from "@sanity/types";
import { motion } from "framer-motion";
import { isActionEnabled } from "@sanity/schema/_internal";
import throttle from "lodash/throttle.js";
import deepCompare from "react-fast-compare";
import isEqual from "lodash/isEqual.js";
import shallowEquals from "shallow-equals";
import CopyToClipboard from "react-copy-to-clipboard";
import isNumber from "lodash/isNumber.js";
import isString from "lodash/isString.js";
import uniqBy from "lodash/uniqBy.js";
import negate from "lodash/negate.js";
import { parse } from "groq-js";
import { observableCallback } from "observable-callback";
import { exhaustMapWithTrailing } from "rxjs-exhaustmap-with-trailing";
import { flexRender, createColumnHelper, useReactTable, getCoreRowModel, getFilteredRowModel, getPaginationRowModel } from "@tanstack/react-table";
const structureLocaleNamespace = "structure", structureUsEnglishLocaleBundle = defineLocaleResourceBundle({
  locale: "en-US",
  namespace: structureLocaleNamespace,
  resources: () => import("./resources4.mjs")
});
function DocTitle(props) {
  const $ = c(21), {
    document: documentValue
  } = props, schema = useSchema();
  let t0;
  $[0] !== documentValue._type || $[1] !== schema ? (t0 = schema.get(documentValue._type), $[0] = documentValue._type, $[1] = schema, $[2] = t0) : t0 = $[2];
  const schemaType = t0, {
    t
  } = useTranslation(structureLocaleNamespace);
  let t1;
  $[3] !== documentValue || $[4] !== schemaType ? (t1 = {
    schemaType,
    value: documentValue
  }, $[3] = documentValue, $[4] = schemaType, $[5] = t1) : t1 = $[5];
  const {
    error,
    value
  } = unstable_useValuePreview(t1);
  if (!schemaType) {
    let t22;
    $[6] !== documentValue._type || $[7] !== t ? (t22 = t("doc-title.unknown-schema-type.text", {
      schemaType: documentValue._type
    }), $[6] = documentValue._type, $[7] = t, $[8] = t22) : t22 = $[8];
    let t32;
    return $[9] !== t22 ? (t32 = /* @__PURE__ */ jsx("code", { children: t22 }), $[9] = t22, $[10] = t32) : t32 = $[10], t32;
  }
  if (error) {
    let t22;
    $[11] !== error.message || $[12] !== t ? (t22 = t("doc-title.error.text", {
      errorMessage: error.message
    }), $[11] = error.message, $[12] = t, $[13] = t22) : t22 = $[13];
    let t32;
    return $[14] !== t22 ? (t32 = /* @__PURE__ */ jsx(Fragment, { children: t22 }), $[14] = t22, $[15] = t32) : t32 = $[15], t32;
  }
  let t2;
  $[16] !== t || $[17] !== value?.title ? (t2 = value?.title || /* @__PURE__ */ jsx("span", { style: {
    color: "var(--card-muted-fg-color)"
  }, children: t("doc-title.fallback.text") }), $[16] = t, $[17] = value?.title, $[18] = t2) : t2 = $[18];
  let t3;
  return $[19] !== t2 ? (t3 = /* @__PURE__ */ jsx(Fragment, { children: t2 }), $[19] = t2, $[20] = t3) : t3 = $[20], t3;
}
const ChevronWrapper = styled(Box)`
  margin-left: auto;
`, CrossDatasetReferencesDetails = styled.details`
  flex: none;

  &[open] ${ChevronWrapper} {
    transform: rotate(180deg);
  }
`, CrossDatasetReferencesSummary = styled.summary`
  list-style: none;

  &::-webkit-details-marker {
    display: none;
  }
`, Table$1 = styled.table`
  width: 100%;
  text-align: left;
  padding: 0 ${({
  theme
}) => rem(theme.sanity.space[2])};
  border-collapse: collapse;

  th {
    padding: ${({
  theme
}) => rem(theme.sanity.space[1])};
  }

  td {
    padding: 0 ${({
  theme
}) => rem(theme.sanity.space[1])};
  }

  tr > *:last-child {
    text-align: right;
  }
`, DocumentIdFlex = styled(Flex)`
  min-height: 33px;
`, OtherReferenceCount = (props) => {
  const $ = c(13), {
    t
  } = useTranslation(structureLocaleNamespace), difference = props.totalCount - props.references.length;
  if (!difference)
    return null;
  let t0;
  $[0] !== difference || $[1] !== t ? (t0 = t("confirm-delete-dialog.other-reference-count.title", {
    count: difference
  }), $[0] = difference, $[1] = t, $[2] = t0) : t0 = $[2];
  let t1;
  $[3] !== t0 ? (t1 = /* @__PURE__ */ jsx(Text, { size: 1, muted: !0, children: t0 }), $[3] = t0, $[4] = t1) : t1 = $[4];
  let t2;
  $[5] !== t ? (t2 = t("confirm-delete-dialog.other-reference-count.tooltip"), $[5] = t, $[6] = t2) : t2 = $[6];
  let t3;
  $[7] === Symbol.for("react.memo_cache_sentinel") ? (t3 = /* @__PURE__ */ jsx(Text, { size: 1, muted: !0, children: /* @__PURE__ */ jsx(InfoOutlineIcon, {}) }), $[7] = t3) : t3 = $[7];
  let t4;
  $[8] !== t2 ? (t4 = /* @__PURE__ */ jsx(Tooltip, { portal: !0, placement: "top", content: t2, children: t3 }), $[8] = t2, $[9] = t4) : t4 = $[9];
  let t5;
  return $[10] !== t1 || $[11] !== t4 ? (t5 = /* @__PURE__ */ jsx(Box, { padding: 2, children: /* @__PURE__ */ jsxs(Inline, { space: 2, children: [
    t1,
    t4
  ] }) }), $[10] = t1, $[11] = t4, $[12] = t5) : t5 = $[12], t5;
};
function PaneItemPreview(props) {
  const $ = c(25), {
    icon,
    layout,
    presence,
    schemaType,
    value
  } = props, title = isRecord(value.title) && isValidElement(value.title) || isString(value.title) || isNumber(value.title) ? value.title : null;
  let t0, t1;
  $[0] !== props.documentPreviewStore || $[1] !== schemaType || $[2] !== title || $[3] !== value._id ? (t1 = getPreviewStateObservable(props.documentPreviewStore, schemaType, value._id, title), $[0] = props.documentPreviewStore, $[1] = schemaType, $[2] = title, $[3] = value._id, $[4] = t1) : t1 = $[4], t0 = t1;
  const previewStateObservable = t0;
  let t2;
  $[5] === Symbol.for("react.memo_cache_sentinel") ? (t2 = {
    draft: null,
    isLoading: !0,
    published: null
  }, $[5] = t2) : t2 = $[5];
  const {
    draft,
    published,
    isLoading
  } = useObservable(previewStateObservable, t2);
  let t3;
  $[6] !== draft || $[7] !== isLoading || $[8] !== presence || $[9] !== published ? (t3 = isLoading ? null : /* @__PURE__ */ jsx(TooltipDelayGroupProvider, { children: /* @__PURE__ */ jsxs(Flex, { align: "center", gap: 3, children: [
    presence && presence.length > 0 && /* @__PURE__ */ jsx(DocumentPreviewPresence, { presence }),
    /* @__PURE__ */ jsx(DocumentStatusIndicator, { draft, published })
  ] }) }), $[6] = draft, $[7] = isLoading, $[8] = presence, $[9] = published, $[10] = t3) : t3 = $[10];
  const status = t3;
  let t4;
  $[11] !== draft || $[12] !== published ? (t4 = /* @__PURE__ */ jsx(DocumentStatus, { draft, published }), $[11] = draft, $[12] = published, $[13] = t4) : t4 = $[13];
  const tooltip = t4;
  let t5;
  $[14] !== draft || $[15] !== published || $[16] !== value ? (t5 = getPreviewValueWithFallback({
    value,
    draft,
    published
  }), $[14] = draft, $[15] = published, $[16] = value, $[17] = t5) : t5 = $[17];
  let t6;
  return $[18] !== icon || $[19] !== isLoading || $[20] !== layout || $[21] !== status || $[22] !== t5 || $[23] !== tooltip ? (t6 = /* @__PURE__ */ jsx(SanityDefaultPreview, { ...t5, isPlaceholder: isLoading, icon, layout, status, tooltip }), $[18] = icon, $[19] = isLoading, $[20] = layout, $[21] = status, $[22] = t5, $[23] = tooltip, $[24] = t6) : t6 = $[24], t6;
}
const BackLink = forwardRef(function(props, ref) {
  const $ = c(9), {
    routerPanesState,
    groupIndex
  } = useContext(PaneRouterContext);
  let t0, t1;
  $[0] !== groupIndex || $[1] !== routerPanesState ? (t1 = routerPanesState.slice(0, groupIndex), $[0] = groupIndex, $[1] = routerPanesState, $[2] = t1) : t1 = $[2], t0 = t1;
  const panes = t0;
  let t2, t3;
  $[3] !== panes ? (t3 = {
    panes
  }, $[3] = panes, $[4] = t3) : t3 = $[4], t2 = t3;
  const state2 = t2;
  let t4;
  return $[5] !== props || $[6] !== ref || $[7] !== state2 ? (t4 = /* @__PURE__ */ jsx(StateLink, { ...props, ref, state: state2 }), $[5] = props, $[6] = ref, $[7] = state2, $[8] = t4) : t4 = $[8], t4;
});
function usePaneLayout() {
  const pane2 = useContext(PaneLayoutContext);
  if (!pane2)
    throw new Error("PaneLayout: missing context value");
  return pane2;
}
const ChildLink = forwardRef(function(props, ref) {
  const $ = c(19);
  let childId, childParameters, childPayload, rest;
  $[0] !== props ? ({
    childId,
    childPayload,
    childParameters,
    ...rest
  } = props, $[0] = props, $[1] = childId, $[2] = childParameters, $[3] = childPayload, $[4] = rest) : (childId = $[1], childParameters = $[2], childPayload = $[3], rest = $[4]);
  const {
    routerPanesState,
    groupIndex
  } = useContext(PaneRouterContext);
  let t0;
  $[5] !== groupIndex || $[6] !== routerPanesState ? (t0 = routerPanesState.slice(0, groupIndex + 1), $[5] = groupIndex, $[6] = routerPanesState, $[7] = t0) : t0 = $[7];
  let t1;
  $[8] !== childId || $[9] !== childParameters || $[10] !== childPayload ? (t1 = [{
    id: childId,
    params: childParameters,
    payload: childPayload
  }], $[8] = childId, $[9] = childParameters, $[10] = childPayload, $[11] = t1) : t1 = $[11];
  let t2;
  $[12] !== t0 || $[13] !== t1 ? (t2 = {
    panes: [...t0, t1]
  }, $[12] = t0, $[13] = t1, $[14] = t2) : t2 = $[14];
  let t3;
  return $[15] !== ref || $[16] !== rest || $[17] !== t2 ? (t3 = /* @__PURE__ */ jsx(StateLink, { ...rest, ref, state: t2 }), $[15] = ref, $[16] = rest, $[17] = t2, $[18] = t3) : t3 = $[18], t3;
}), ParameterizedLink = forwardRef(function(props, ref) {
  const $ = c(34), {
    routerPanesState: currentPanes,
    groupIndex,
    siblingIndex
  } = useContext(PaneRouterContext);
  let params, payload, rest;
  $[0] !== props ? ({
    params,
    payload,
    ...rest
  } = props, $[0] = props, $[1] = params, $[2] = payload, $[3] = rest) : (params = $[1], payload = $[2], rest = $[3]);
  const nextParams = useUnique(params), nextPayload = useUnique(payload);
  let t0;
  const currentGroup = currentPanes[groupIndex], currentSibling = currentGroup[siblingIndex], t1 = nextParams ?? currentSibling.params, t2 = nextPayload ?? currentSibling.payload;
  let t3;
  $[4] !== currentSibling || $[5] !== t1 || $[6] !== t2 ? (t3 = {
    ...currentSibling,
    params: t1,
    payload: t2
  }, $[4] = currentSibling, $[5] = t1, $[6] = t2, $[7] = t3) : t3 = $[7];
  const nextSibling = t3;
  let t4;
  $[8] !== currentGroup || $[9] !== siblingIndex ? (t4 = currentGroup.slice(0, siblingIndex), $[8] = currentGroup, $[9] = siblingIndex, $[10] = t4) : t4 = $[10];
  let t5;
  $[11] !== currentGroup || $[12] !== siblingIndex ? (t5 = currentGroup.slice(siblingIndex + 1), $[11] = currentGroup, $[12] = siblingIndex, $[13] = t5) : t5 = $[13];
  let t6;
  $[14] !== nextSibling || $[15] !== t4 || $[16] !== t5 ? (t6 = [...t4, nextSibling, ...t5], $[14] = nextSibling, $[15] = t4, $[16] = t5, $[17] = t6) : t6 = $[17];
  const nextGroup = t6;
  let t7;
  $[18] !== currentPanes || $[19] !== groupIndex ? (t7 = currentPanes.slice(0, groupIndex), $[18] = currentPanes, $[19] = groupIndex, $[20] = t7) : t7 = $[20];
  let t8;
  $[21] !== currentPanes || $[22] !== groupIndex ? (t8 = currentPanes.slice(groupIndex + 1), $[21] = currentPanes, $[22] = groupIndex, $[23] = t8) : t8 = $[23];
  let t9;
  $[24] !== nextGroup || $[25] !== t7 || $[26] !== t8 ? (t9 = [...t7, nextGroup, ...t8], $[24] = nextGroup, $[25] = t7, $[26] = t8, $[27] = t9) : t9 = $[27];
  const nextPanes = t9;
  let t10;
  $[28] !== nextPanes ? (t10 = {
    panes: nextPanes
  }, $[28] = nextPanes, $[29] = t10) : t10 = $[29], t0 = t10;
  const nextState = t0;
  let t11;
  return $[30] !== nextState || $[31] !== ref || $[32] !== rest ? (t11 = /* @__PURE__ */ jsx(StateLink, { ref, ...rest, state: nextState }), $[30] = nextState, $[31] = ref, $[32] = rest, $[33] = t11) : t11 = $[33], t11;
}), ReferenceChildLink = forwardRef(function(t0, ref) {
  const $ = c(22);
  let children, documentId, documentType, parentRefPath, rest, template;
  $[0] !== t0 ? ({
    documentId,
    documentType,
    parentRefPath,
    children,
    template,
    ...rest
  } = t0, $[0] = t0, $[1] = children, $[2] = documentId, $[3] = documentType, $[4] = parentRefPath, $[5] = rest, $[6] = template) : (children = $[1], documentId = $[2], documentType = $[3], parentRefPath = $[4], rest = $[5], template = $[6]);
  const t1 = template?.params;
  let t2;
  $[7] !== parentRefPath ? (t2 = toString(parentRefPath), $[7] = parentRefPath, $[8] = t2) : t2 = $[8];
  let t3;
  $[9] !== template ? (t3 = template && {
    template: template?.id
  }, $[9] = template, $[10] = t3) : t3 = $[10];
  let t4;
  $[11] !== documentType || $[12] !== t2 || $[13] !== t3 ? (t4 = {
    type: documentType,
    parentRefPath: t2,
    ...t3
  }, $[11] = documentType, $[12] = t2, $[13] = t3, $[14] = t4) : t4 = $[14];
  let t5;
  return $[15] !== children || $[16] !== documentId || $[17] !== ref || $[18] !== rest || $[19] !== t1 || $[20] !== t4 ? (t5 = /* @__PURE__ */ jsx(ChildLink, { ...rest, ref, childId: documentId, childPayload: t1, childParameters: t4, children }), $[15] = children, $[16] = documentId, $[17] = ref, $[18] = rest, $[19] = t1, $[20] = t4, $[21] = t5) : t5 = $[21], t5;
});
function usePaneRouter() {
  return useContext(PaneRouterContext);
}
const EMPTY_ARRAY$1 = [];
function ReferencePreviewLink(props) {
  const $ = c(16), {
    onClick,
    type,
    value
  } = props, t0 = value?._id;
  let t1;
  $[0] !== t0 ? (t1 = getPublishedId(t0), $[0] = t0, $[1] = t1) : t1 = $[1];
  const documentPresence = useDocumentPresence(t1), documentPreviewStore = useDocumentPreviewStore(), {
    ReferenceChildLink: ReferenceChildLink2
  } = usePaneRouter();
  let t2;
  $[2] !== ReferenceChildLink2 || $[3] !== type?.name || $[4] !== value?._id ? (t2 = function(linkProps) {
    return /* @__PURE__ */ jsx(ReferenceChildLink2, { documentId: value?._id, documentType: type?.name, parentRefPath: EMPTY_ARRAY$1, ...linkProps });
  }, $[2] = ReferenceChildLink2, $[3] = type?.name, $[4] = value?._id, $[5] = t2) : t2 = $[5];
  const t3 = t2, t4 = type?.icon, t5 = documentPresence?.length > 0 ? documentPresence : EMPTY_ARRAY$1;
  let t6;
  $[6] !== documentPreviewStore || $[7] !== t4 || $[8] !== t5 || $[9] !== type || $[10] !== value ? (t6 = /* @__PURE__ */ jsx(PaneItemPreview, { documentPreviewStore, icon: t4, layout: "compact", presence: t5, schemaType: type, value }), $[6] = documentPreviewStore, $[7] = t4, $[8] = t5, $[9] = type, $[10] = value, $[11] = t6) : t6 = $[11];
  let t7;
  return $[12] !== onClick || $[13] !== t3 || $[14] !== t6 ? (t7 = /* @__PURE__ */ jsx(PreviewCard, { __unstable_focusRing: !0, as: t3, "data-as": "a", onClick, radius: 2, children: t6 }), $[12] = onClick, $[13] = t3, $[14] = t6, $[15] = t7) : t7 = $[15], t7;
}
function ConfirmDeleteDialogBody(t0) {
  const $ = c(78), {
    crossDatasetReferences,
    internalReferences,
    documentTitle,
    totalCount,
    action,
    datasetNames,
    hasUnknownDatasetNames,
    onReferenceLinkClick
  } = t0, schema = useSchema(), toast = useToast(), {
    t
  } = useTranslation(structureLocaleNamespace);
  let t1;
  $[0] !== onReferenceLinkClick || $[1] !== schema || $[2] !== t ? (t1 = (item) => {
    const type = schema.get(item._type);
    return type ? /* @__PURE__ */ jsx(ReferencePreviewLink, { type, value: item, onClick: onReferenceLinkClick }) : /* @__PURE__ */ jsx(Box, { padding: 2, children: /* @__PURE__ */ jsx(SanityDefaultPreview, { icon: UnknownIcon, title: t("confirm-delete-dialog.preview-item.preview-unavailable.title"), subtitle: t("confirm-delete-dialog.preview-item.preview-unavailable.subtitle", {
      documentId: item._id
    }), layout: "default" }) });
  }, $[0] = onReferenceLinkClick, $[1] = schema, $[2] = t, $[3] = t1) : t1 = $[3];
  const renderPreviewItem = t1;
  if (internalReferences?.totalCount === 0 && crossDatasetReferences?.totalCount === 0) {
    let t22;
    $[4] !== documentTitle ? (t22 = {
      DocumentTitle: () => /* @__PURE__ */ jsx("strong", { children: documentTitle })
    }, $[4] = documentTitle, $[5] = t22) : t22 = $[5];
    let t32;
    return $[6] !== action || $[7] !== t || $[8] !== t22 ? (t32 = /* @__PURE__ */ jsx(Text, { as: "p", size: 1, children: /* @__PURE__ */ jsx(Translate, { t, i18nKey: "confirm-delete-dialog.confirmation.text", context: action, components: t22 }) }), $[6] = action, $[7] = t, $[8] = t22, $[9] = t32) : t32 = $[9], t32;
  }
  let T0, T1, T2, t10, t11, t12, t2, t3, t4, t5, t6, t7, t8, t9;
  if ($[10] !== action || $[11] !== crossDatasetReferences || $[12] !== datasetNames || $[13] !== documentTitle || $[14] !== hasUnknownDatasetNames || $[15] !== internalReferences || $[16] !== renderPreviewItem || $[17] !== t || $[18] !== toast || $[19] !== totalCount) {
    const normalizedDatasetNames = [...datasetNames, ...hasUnknownDatasetNames ? ["unavailable"] : []], datasetSubtitle = t("confirm-delete-dialog.cdr-summary.subtitle", {
      count: normalizedDatasetNames.length,
      datasets: normalizedDatasetNames.join(", "),
      context: hasUnknownDatasetNames && normalizedDatasetNames.length ? "unavailable" : ""
    });
    T2 = Flex, t9 = "column", t10 = 4;
    let t132;
    $[34] === Symbol.for("react.memo_cache_sentinel") ? (t132 = /* @__PURE__ */ jsx(Text, { "aria-hidden": "true", size: 1, children: /* @__PURE__ */ jsx(WarningOutlineIcon, {}) }), $[34] = t132) : t132 = $[34];
    let t142;
    $[35] !== documentTitle ? (t142 = {
      DocumentTitle: () => documentTitle
    }, $[35] = documentTitle, $[36] = t142) : t142 = $[36];
    let t152;
    $[37] !== totalCount ? (t152 = {
      count: totalCount
    }, $[37] = totalCount, $[38] = t152) : t152 = $[38], $[39] !== t || $[40] !== t142 || $[41] !== t152 ? (t11 = /* @__PURE__ */ jsx(Card, { padding: 3, radius: 2, tone: "caution", flex: "none", children: /* @__PURE__ */ jsxs(Flex, { children: [
      t132,
      /* @__PURE__ */ jsx(Box, { flex: 1, marginLeft: 3, children: /* @__PURE__ */ jsx(Text, { size: 1, children: /* @__PURE__ */ jsx(Translate, { i18nKey: "confirm-delete-dialog.referring-document-count.text", components: t142, t, values: t152 }) }) })
    ] }) }), $[39] = t, $[40] = t142, $[41] = t152, $[42] = t11) : t11 = $[42];
    let t162;
    $[43] !== documentTitle ? (t162 = {
      DocumentTitle: () => documentTitle
    }, $[43] = documentTitle, $[44] = t162) : t162 = $[44], $[45] !== action || $[46] !== t || $[47] !== t162 ? (t12 = /* @__PURE__ */ jsx(Box, { flex: "none", children: /* @__PURE__ */ jsx(Text, { size: 1, children: /* @__PURE__ */ jsx(Translate, { i18nKey: "confirm-delete-dialog.referring-documents-descriptor.text", t, context: action, components: t162 }) }) }), $[45] = action, $[46] = t, $[47] = t162, $[48] = t12) : t12 = $[48], T1 = Card, t5 = 2, t6 = 1, t7 = "auto", t8 = 2, T0 = Flex, t2 = "column", $[49] !== internalReferences || $[50] !== renderPreviewItem ? (t3 = internalReferences.totalCount > 0 && /* @__PURE__ */ jsxs(Stack, { as: "ul", marginBottom: 2, space: 2, "data-testid": "internal-references", children: [
      internalReferences?.references.map((item_0) => /* @__PURE__ */ jsx(Box, { as: "li", children: renderPreviewItem(item_0) }, item_0._id)),
      internalReferences.totalCount > internalReferences.references.length && /* @__PURE__ */ jsx(Box, { as: "li", padding: 3, children: /* @__PURE__ */ jsx(OtherReferenceCount, { ...internalReferences }) })
    ] }), $[49] = internalReferences, $[50] = renderPreviewItem, $[51] = t3) : t3 = $[51], t4 = crossDatasetReferences.totalCount > 0 && /* @__PURE__ */ jsxs(CrossDatasetReferencesDetails, { "data-testid": "cross-dataset-references", style: {
      borderTop: internalReferences.totalCount > 0 ? "1px solid var(--card-shadow-outline-color)" : void 0
    }, children: [
      /* @__PURE__ */ jsx(CrossDatasetReferencesSummary, { children: /* @__PURE__ */ jsx(Card, { as: "a", marginTop: internalReferences.totalCount > 0 ? 2 : 0, radius: 2, shadow: 1, paddingY: 1, children: /* @__PURE__ */ jsxs(Flex, { align: "center", gap: 3, paddingX: 3, paddingY: 1, children: [
        /* @__PURE__ */ jsx(Text, { size: 1, children: /* @__PURE__ */ jsx(DocumentsIcon, {}) }),
        /* @__PURE__ */ jsxs(Stack, { space: 2, children: [
          /* @__PURE__ */ jsx(Text, { textOverflow: "ellipsis", size: 1, children: t("confirm-delete-dialog.cdr-summary.title", {
            count: normalizedDatasetNames.length,
            documentCount: t("confirm-delete-dialog.cdr-summary.document-count", {
              count: crossDatasetReferences.totalCount
            })
          }) }),
          /* @__PURE__ */ jsx(Text, { title: datasetSubtitle, textOverflow: "ellipsis", size: 1, muted: !0, children: datasetSubtitle })
        ] }),
        /* @__PURE__ */ jsx(ChevronWrapper, { children: /* @__PURE__ */ jsx(Text, { muted: !0, size: 1, children: /* @__PURE__ */ jsx(ChevronDownIcon, {}) }) })
      ] }) }) }),
      /* @__PURE__ */ jsxs(Box, { overflow: "auto", paddingTop: 2, children: [
        /* @__PURE__ */ jsxs(Table$1, { children: [
          /* @__PURE__ */ jsx("thead", { children: /* @__PURE__ */ jsxs("tr", { children: [
            /* @__PURE__ */ jsx("th", { children: /* @__PURE__ */ jsx(Text, { muted: !0, size: 1, style: {
              minWidth: "5rem"
            }, weight: "medium", children: t("confirm-delete-dialog.cdr-table.project-id.label") }) }),
            /* @__PURE__ */ jsx("th", { children: /* @__PURE__ */ jsx(Text, { muted: !0, size: 1, weight: "medium", children: t("confirm-delete-dialog.cdr-table.dataset.label") }) }),
            /* @__PURE__ */ jsx("th", { children: /* @__PURE__ */ jsx(Text, { muted: !0, size: 1, weight: "medium", children: t("confirm-delete-dialog.cdr-table.document-id.label") }) })
          ] }) }),
          /* @__PURE__ */ jsx("tbody", { children: crossDatasetReferences.references.filter(_temp$h).map((t172, index) => {
            const {
              projectId,
              datasetName,
              documentId
            } = t172;
            return /* @__PURE__ */ jsxs("tr", { children: [
              /* @__PURE__ */ jsx("td", { children: /* @__PURE__ */ jsx(Text, { size: 1, children: projectId }) }),
              /* @__PURE__ */ jsx("td", { children: /* @__PURE__ */ jsx(Text, { size: 1, children: datasetName || "unavailable" }) }),
              /* @__PURE__ */ jsx("td", { children: /* @__PURE__ */ jsxs(DocumentIdFlex, { align: "center", gap: 2, justify: "flex-end", children: [
                /* @__PURE__ */ jsx(Text, { textOverflow: "ellipsis", size: 1, children: documentId || "unavailable" }),
                documentId && /* @__PURE__ */ jsx(CopyToClipboard, { text: documentId, onCopy: () => {
                  toast.push({
                    title: t("confirm-delete-dialog.cdr-table.id-copied-toast.title"),
                    status: "success"
                  });
                }, children: /* @__PURE__ */ jsx(Button, { mode: "bleed", icon: CopyIcon, tooltipProps: {
                  content: t("confirm-delete-dialog.cdr-table.copy-id-button.tooltip")
                } }) })
              ] }) })
            ] }, `${documentId}-${index}`);
          }) })
        ] }),
        /* @__PURE__ */ jsx(OtherReferenceCount, { ...crossDatasetReferences })
      ] })
    ] }), $[10] = action, $[11] = crossDatasetReferences, $[12] = datasetNames, $[13] = documentTitle, $[14] = hasUnknownDatasetNames, $[15] = internalReferences, $[16] = renderPreviewItem, $[17] = t, $[18] = toast, $[19] = totalCount, $[20] = T0, $[21] = T1, $[22] = T2, $[23] = t10, $[24] = t11, $[25] = t12, $[26] = t2, $[27] = t3, $[28] = t4, $[29] = t5, $[30] = t6, $[31] = t7, $[32] = t8, $[33] = t9;
  } else
    T0 = $[20], T1 = $[21], T2 = $[22], t10 = $[23], t11 = $[24], t12 = $[25], t2 = $[26], t3 = $[27], t4 = $[28], t5 = $[29], t6 = $[30], t7 = $[31], t8 = $[32], t9 = $[33];
  let t13;
  $[52] !== T0 || $[53] !== t2 || $[54] !== t3 || $[55] !== t4 ? (t13 = /* @__PURE__ */ jsxs(T0, { direction: t2, children: [
    t3,
    t4
  ] }), $[52] = T0, $[53] = t2, $[54] = t3, $[55] = t4, $[56] = t13) : t13 = $[56];
  let t14;
  $[57] !== T1 || $[58] !== t13 || $[59] !== t5 || $[60] !== t6 || $[61] !== t7 || $[62] !== t8 ? (t14 = /* @__PURE__ */ jsx(T1, { radius: t5, shadow: t6, flex: t7, padding: t8, children: t13 }), $[57] = T1, $[58] = t13, $[59] = t5, $[60] = t6, $[61] = t7, $[62] = t8, $[63] = t14) : t14 = $[63];
  let t15;
  $[64] !== documentTitle ? (t15 = {
    DocumentTitle: () => documentTitle
  }, $[64] = documentTitle, $[65] = t15) : t15 = $[65];
  let t16;
  $[66] !== action || $[67] !== t || $[68] !== t15 ? (t16 = /* @__PURE__ */ jsx(Box, { flex: "none", children: /* @__PURE__ */ jsx(Text, { size: 1, children: /* @__PURE__ */ jsx(Translate, { i18nKey: "confirm-delete-dialog.referential-integrity-disclaimer.text", t, context: action, components: t15 }) }) }), $[66] = action, $[67] = t, $[68] = t15, $[69] = t16) : t16 = $[69];
  let t17;
  return $[70] !== T2 || $[71] !== t10 || $[72] !== t11 || $[73] !== t12 || $[74] !== t14 || $[75] !== t16 || $[76] !== t9 ? (t17 = /* @__PURE__ */ jsxs(T2, { direction: t9, gap: t10, children: [
    t11,
    t12,
    t14,
    t16
  ] }), $[70] = T2, $[71] = t10, $[72] = t11, $[73] = t12, $[74] = t14, $[75] = t16, $[76] = t9, $[77] = t17) : t17 = $[77], t17;
}
function _temp$h(reference) {
  return "projectId" in reference;
}
function isClientError(e) {
  return typeof e != "object" || !e ? !1 : "statusCode" in e && "response" in e;
}
const POLL_INTERVAL = 5e3;
let visiblePoll$;
const getVisiblePoll$ = () => (visiblePoll$ || (visiblePoll$ = fromEvent(document, "visibilitychange").pipe(
  // add empty emission to have this fire on creation
  startWith(null),
  map(() => document.visibilityState === "visible"),
  distinctUntilChanged(),
  switchMap((visible) => visible ? (
    // using timer instead of interval since timer will emit on creation
    timer(0, POLL_INTERVAL)
  ) : EMPTY),
  shareReplay({
    refCount: !0,
    bufferSize: 1
  })
)), visiblePoll$);
function getDocumentExistence(documentId, {
  versionedClient
}) {
  const draftId = getDraftId(documentId), publishedId = getPublishedId(documentId), requestOptions = {
    uri: versionedClient.getDataUrl("doc", `${draftId},${publishedId}`),
    json: !0,
    query: {
      excludeContent: "true"
    },
    tag: "use-referring-documents.document-existence"
  };
  return versionedClient.observable.request(requestOptions).pipe(map(({
    omitted
  }) => {
    const nonExistant = omitted.filter((doc) => doc.reason === "existence");
    if (nonExistant.length !== 2)
      return nonExistant.length === 0 || nonExistant.some((doc) => doc.id === draftId) ? publishedId : draftId;
  }));
}
function fetchCrossDatasetReferences(documentId, context) {
  const {
    versionedClient
  } = context;
  return getVisiblePoll$().pipe(switchMap(() => getDocumentExistence(documentId, context)), switchMap((checkDocumentId) => {
    if (!checkDocumentId)
      return of({
        totalCount: 0,
        references: []
      });
    const currentDataset = versionedClient.config().dataset;
    return versionedClient.observable.request({
      url: `/data/references/${currentDataset}/documents/${checkDocumentId}/to?excludeInternalReferences=true&excludePaths=true`,
      tag: "use-referring-documents.external"
    }).pipe(catchError((e) => {
      if (isClientError(e) && e.statusCode === 404)
        return of({
          totalCount: 0,
          references: []
        });
      throw e;
    }));
  }));
}
const useInternalReferences = createHookFromObservableFactory(([documentId, documentStore]) => documentStore.listenQuery({
  fetch: '{"references":*[references($documentId)][0...100]{_id,_type},"totalCount":count(*[references($documentId)])}',
  listen: "*[references($documentId)]"
}, {
  documentId
}, {
  tag: "use-referring-documents",
  transitions: ["appear", "disappear"],
  throttleTime: 5e3
})), useCrossDatasetReferences = createHookFromObservableFactory(([documentId, versionedClient]) => getVisiblePoll$().pipe(switchMap(() => fetchCrossDatasetReferences(documentId, {
  versionedClient
}))));
function useReferringDocuments(documentId) {
  const $ = c(24), versionedClient = useClient(DEFAULT_STUDIO_CLIENT_OPTIONS), documentStore = useDocumentStore();
  let t0;
  $[0] !== documentId ? (t0 = getPublishedId(documentId), $[0] = documentId, $[1] = t0) : t0 = $[1];
  const publishedId = t0;
  let t1, t2;
  $[2] !== documentStore || $[3] !== publishedId ? (t2 = [publishedId, documentStore], $[2] = documentStore, $[3] = publishedId, $[4] = t2) : t2 = $[4], t1 = t2;
  const [internalReferences, isInternalReferencesLoading] = useInternalReferences(t1);
  let t3, t4;
  $[5] !== publishedId || $[6] !== versionedClient ? (t4 = [publishedId, versionedClient], $[5] = publishedId, $[6] = versionedClient, $[7] = t4) : t4 = $[7], t3 = t4;
  const [crossDatasetReferences, isCrossDatasetReferencesLoading] = useCrossDatasetReferences(t3);
  let t5;
  $[8] !== crossDatasetReferences?.references ? (t5 = () => Array.from(new Set(crossDatasetReferences?.references.map(_temp$g).filter(Boolean))).sort(), $[8] = crossDatasetReferences?.references, $[9] = t5) : t5 = $[9];
  let t6;
  $[10] !== t5 ? (t6 = t5(), $[10] = t5, $[11] = t6) : t6 = $[11];
  const projectIds = t6;
  let t7, t8;
  $[12] !== crossDatasetReferences?.references ? (t8 = Array.from(new Set(crossDatasetReferences?.references.map(_temp2$8).filter(_temp3$4))).sort(), $[12] = crossDatasetReferences?.references, $[13] = t8) : t8 = $[13], t7 = t8;
  const datasetNames = t7;
  let t9;
  $[14] !== crossDatasetReferences?.references ? (t9 = () => !!crossDatasetReferences?.references.some(_temp4$3), $[14] = crossDatasetReferences?.references, $[15] = t9) : t9 = $[15];
  const hasUnknownDatasetNames = t9(), t10 = (internalReferences?.totalCount || 0) + (crossDatasetReferences?.totalCount || 0), t11 = isInternalReferencesLoading || isCrossDatasetReferencesLoading;
  let t12;
  return $[16] !== crossDatasetReferences || $[17] !== datasetNames || $[18] !== hasUnknownDatasetNames || $[19] !== internalReferences || $[20] !== projectIds || $[21] !== t10 || $[22] !== t11 ? (t12 = {
    totalCount: t10,
    projectIds,
    datasetNames,
    hasUnknownDatasetNames,
    internalReferences,
    crossDatasetReferences,
    isLoading: t11
  }, $[16] = crossDatasetReferences, $[17] = datasetNames, $[18] = hasUnknownDatasetNames, $[19] = internalReferences, $[20] = projectIds, $[21] = t10, $[22] = t11, $[23] = t12) : t12 = $[23], t12;
}
function _temp4$3(crossDatasetReference_1) {
  return typeof crossDatasetReference_1.datasetName != "string";
}
function _temp3$4(datasetName) {
  return !!datasetName && datasetName !== "";
}
function _temp2$8(crossDatasetReference_0) {
  return crossDatasetReference_0?.datasetName || "";
}
function _temp$g(crossDatasetReference) {
  return crossDatasetReference.projectId;
}
const DialogBody$1 = styled(Box)`
  box-sizing: border-box;
`, LoadingContainer = styled(Flex).attrs({
  align: "center",
  direction: "column",
  justify: "center"
})`
  height: 110px;
`;
function ConfirmDeleteDialog(t0) {
  const $ = c(40), {
    id,
    type,
    action: t1,
    onCancel,
    onConfirm
  } = t0, action = t1 === void 0 ? "delete" : t1, {
    t
  } = useTranslation(structureLocaleNamespace), dialogId = `deletion-confirmation-${useId()}`, {
    internalReferences,
    crossDatasetReferences,
    isLoading,
    totalCount,
    projectIds,
    datasetNames,
    hasUnknownDatasetNames
  } = useReferringDocuments(id);
  let t2, t3;
  $[0] !== id || $[1] !== type ? (t3 = {
    _id: id,
    _type: type
  }, $[0] = id, $[1] = type, $[2] = t3) : t3 = $[2], t2 = t3;
  let t4;
  $[3] !== t2 ? (t4 = /* @__PURE__ */ jsx(DocTitle, { document: t2 }), $[3] = t2, $[4] = t4) : t4 = $[4];
  const documentTitle = t4, showConfirmButton = !isLoading;
  let t5;
  $[5] !== action || $[6] !== t ? (t5 = t("confirm-delete-dialog.header.text", {
    context: action
  }), $[5] = action, $[6] = t, $[7] = t5) : t5 = $[7];
  let t6;
  $[8] !== t ? (t6 = t("confirm-delete-dialog.cancel-button.text"), $[8] = t, $[9] = t6) : t6 = $[9];
  let t7;
  $[10] !== onCancel || $[11] !== t6 ? (t7 = {
    onClick: onCancel,
    text: t6
  }, $[10] = onCancel, $[11] = t6, $[12] = t7) : t7 = $[12];
  let t8;
  $[13] !== action || $[14] !== onConfirm || $[15] !== showConfirmButton || $[16] !== t || $[17] !== totalCount ? (t8 = showConfirmButton ? {
    text: totalCount > 0 ? t("confirm-delete-dialog.confirm-anyway-button.text", {
      context: action
    }) : t("confirm-delete-dialog.confirm-button.text", {
      context: action
    }),
    onClick: onConfirm
  } : void 0, $[13] = action, $[14] = onConfirm, $[15] = showConfirmButton, $[16] = t, $[17] = totalCount, $[18] = t8) : t8 = $[18];
  let t9;
  $[19] !== t7 || $[20] !== t8 ? (t9 = {
    cancelButton: t7,
    confirmButton: t8
  }, $[19] = t7, $[20] = t8, $[21] = t9) : t9 = $[21];
  let t10;
  $[22] !== action || $[23] !== crossDatasetReferences || $[24] !== datasetNames || $[25] !== documentTitle || $[26] !== hasUnknownDatasetNames || $[27] !== internalReferences || $[28] !== isLoading || $[29] !== onCancel || $[30] !== projectIds || $[31] !== t || $[32] !== totalCount ? (t10 = /* @__PURE__ */ jsx(DialogBody$1, { children: crossDatasetReferences && internalReferences && !isLoading ? /* @__PURE__ */ jsx(ConfirmDeleteDialogBody, { crossDatasetReferences, internalReferences, documentTitle, isLoading, totalCount, action, projectIds, datasetNames, hasUnknownDatasetNames, onReferenceLinkClick: onCancel }) : /* @__PURE__ */ jsx(LoadingContainer, { "data-testid": "loading-container", children: /* @__PURE__ */ jsx(LoadingBlock, { showText: !0, title: t("confirm-delete-dialog.loading.text") }) }) }), $[22] = action, $[23] = crossDatasetReferences, $[24] = datasetNames, $[25] = documentTitle, $[26] = hasUnknownDatasetNames, $[27] = internalReferences, $[28] = isLoading, $[29] = onCancel, $[30] = projectIds, $[31] = t, $[32] = totalCount, $[33] = t10) : t10 = $[33];
  let t11;
  return $[34] !== dialogId || $[35] !== onCancel || $[36] !== t10 || $[37] !== t5 || $[38] !== t9 ? (t11 = /* @__PURE__ */ jsx(Dialog, { width: 1, id: dialogId, header: t5, footer: t9, onClose: onCancel, onClickOutside: onCancel, children: t10 }), $[34] = dialogId, $[35] = onCancel, $[36] = t10, $[37] = t5, $[38] = t9, $[39] = t11) : t11 = $[39], t11;
}
function ConfirmDeleteDialogContainer(props) {
  const $ = c(6), {
    t
  } = useTranslation(structureLocaleNamespace), id = useId(), [error, setError] = useState(null);
  let t0;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = () => setError(null), $[0] = t0) : t0 = $[0];
  const handleRetry = t0;
  let t1;
  return $[1] !== error || $[2] !== id || $[3] !== props || $[4] !== t ? (t1 = error ? /* @__PURE__ */ jsx(Dialog, { id: `dialog-error-${id}`, "data-testid": "confirm-delete-error-dialog", header: t("confirm-delete-dialog.error.title.text"), footer: {
    confirmButton: {
      text: t("confirm-delete-dialog.error.retry-button.text"),
      onClick: handleRetry,
      tone: "default"
    }
  }, onClose: props.onCancel, children: /* @__PURE__ */ jsx(Box, { padding: 4, children: /* @__PURE__ */ jsx(Text, { size: 1, children: t("confirm-delete-dialog.error.message.text") }) }) }) : /* @__PURE__ */ jsx(ErrorBoundary, { onCatch: setError, children: /* @__PURE__ */ jsx(ConfirmDeleteDialog, { ...props }) }), $[1] = error, $[2] = id, $[3] = props, $[4] = t, $[5] = t1) : t1 = $[5], t1;
}
function Delay(t0) {
  const $ = c(6), {
    children,
    ms: t1
  } = t0, ms = t1 === void 0 ? 0 : t1, [ready, setReady] = useState(ms <= 0);
  let t2, t3;
  if ($[0] !== ms ? (t2 = () => {
    if (ms <= 0)
      return;
    const timeoutId = setTimeout(() => setReady(!0), ms);
    return () => {
      clearTimeout(timeoutId);
    };
  }, t3 = [ms], $[0] = ms, $[1] = t2, $[2] = t3) : (t2 = $[1], t3 = $[2]), useEffect(t2, t3), !ready || !children) {
    let t42;
    return $[3] === Symbol.for("react.memo_cache_sentinel") ? (t42 = /* @__PURE__ */ jsx(Fragment, {}), $[3] = t42) : t42 = $[3], t42;
  }
  let t4;
  return $[4] !== children ? (t4 = typeof children == "function" ? children() : children, $[4] = children, $[5] = t4) : t4 = $[5], t4;
}
const PANE_DEBUG = !1, PANE_COLLAPSED_WIDTH = 51, PANE_DEFAULT_MIN_WIDTH = 204, Root$a = styled(Layer)`
  position: relative;
  width: 1px;
  min-width: 1px;

  &:before {
    content: '';
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    width: 1px;
    background-color: var(--card-border-color);
  }

  &:not([data-disabled]) {
    cursor: ew-resize;
    width: 9px;
    min-width: 9px;
    margin: 0 -4px;

    &:before {
      left: 4px;
    }

    &:after {
      content: '';
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      width: 9px;
      bottom: 0;
      background-color: var(--card-border-color);
      opacity: 0;
      transition: opacity 150ms;
    }

    &[data-dragging]:after,
    &:hover:after {
      opacity: 0.2;
    }
  }
`;
function PaneDivider(t0) {
  const $ = c(7), {
    disabled,
    element
  } = t0, {
    resize
  } = usePaneLayout(), [dragging, setDragging] = useState(!1);
  let t1;
  $[0] !== element || $[1] !== resize ? (t1 = (event) => {
    if (!element)
      return;
    setDragging(!0), event.preventDefault();
    const startX = event.pageX;
    resize("start", element, 0);
    const handleMouseMove = (e) => {
      e.preventDefault();
      const deltaX = e.pageX - startX;
      resize("move", element, deltaX);
    }, handleMouseUp = (e_0) => {
      e_0.preventDefault(), setDragging(!1), window.removeEventListener("mousemove", handleMouseMove), window.removeEventListener("mouseup", handleMouseUp), resize("end", element, 0);
    };
    window.addEventListener("mousemove", handleMouseMove), window.addEventListener("mouseup", handleMouseUp);
  }, $[0] = element, $[1] = resize, $[2] = t1) : t1 = $[2];
  const handleMouseDown = t1, t2 = disabled ? "" : void 0, t3 = dragging ? "" : void 0;
  let t4;
  return $[3] !== handleMouseDown || $[4] !== t2 || $[5] !== t3 ? (t4 = /* @__PURE__ */ jsx(Root$a, { "data-disabled": t2, "data-dragging": t3, onMouseDown: handleMouseDown }), $[3] = handleMouseDown, $[4] = t2, $[5] = t3, $[6] = t4) : t4 = $[6], t4;
}
const Root$9 = styled(Card)`
  outline: none;

  // NOTE: This will render a border to the right side of each pane
  // without taking up physical space.
  box-shadow: 1px 0 0 var(--card-border-color);
`, Pane = forwardRef(function(props, forwardedRef) {
  const $ = c(86);
  let children, currentMaxWidthProp, currentMinWidthProp, id, maxWidthProp, minWidthProp, restProps, t0, t1;
  $[0] !== props ? ({
    children,
    currentMinWidth: currentMinWidthProp,
    currentMaxWidth: currentMaxWidthProp,
    flex: t0,
    id,
    minWidth: minWidthProp,
    maxWidth: maxWidthProp,
    selected: t1,
    ...restProps
  } = props, $[0] = props, $[1] = children, $[2] = currentMaxWidthProp, $[3] = currentMinWidthProp, $[4] = id, $[5] = maxWidthProp, $[6] = minWidthProp, $[7] = restProps, $[8] = t0, $[9] = t1) : (children = $[1], currentMaxWidthProp = $[2], currentMinWidthProp = $[3], id = $[4], maxWidthProp = $[5], minWidthProp = $[6], restProps = $[7], t0 = $[8], t1 = $[9]);
  const flexProp = t0 === void 0 ? 1 : t0, selected = t1 === void 0 ? !1 : t1, [rootElement, setRootElement] = useState(null), {
    collapse,
    collapsed: layoutCollapsed,
    expand,
    expandedElement,
    mount,
    panes
  } = usePaneLayout();
  let pane2, t2;
  if ($[10] !== panes || $[11] !== rootElement) {
    let t32;
    $[14] !== rootElement ? (t32 = (p) => p.element === rootElement, $[14] = rootElement, $[15] = t32) : t32 = $[15], pane2 = panes.find(t32), t2 = pane2 && panes.indexOf(pane2), $[10] = panes, $[11] = rootElement, $[12] = pane2, $[13] = t2;
  } else
    pane2 = $[12], t2 = $[13];
  const paneIndex = t2, nextPane = typeof paneIndex == "number" ? panes[paneIndex + 1] : void 0, isLast = paneIndex === panes.length - 1, expanded = expandedElement === rootElement, collapsed = layoutCollapsed ? !1 : pane2?.collapsed || !1, nextCollapsed = nextPane?.collapsed || !1, ref = useRef(null), flex = pane2?.flex ?? flexProp, currentMinWidth = pane2?.currentMinWidth ?? currentMinWidthProp, currentMaxWidth = pane2?.currentMaxWidth ?? currentMaxWidthProp;
  let t3;
  $[16] === Symbol.for("react.memo_cache_sentinel") ? (t3 = () => ref.current, $[16] = t3) : t3 = $[16], useImperativeHandle(forwardedRef, t3);
  let t4;
  $[17] === Symbol.for("react.memo_cache_sentinel") ? (t4 = (refValue) => {
    setRootElement(refValue), ref.current = refValue;
  }, $[17] = t4) : t4 = $[17];
  const setRef = t4;
  let t5, t6;
  $[18] !== currentMaxWidthProp || $[19] !== currentMinWidthProp || $[20] !== flexProp || $[21] !== id || $[22] !== maxWidthProp || $[23] !== minWidthProp || $[24] !== mount || $[25] !== rootElement ? (t5 = () => {
    if (rootElement)
      return mount(rootElement, {
        currentMinWidth: currentMinWidthProp,
        currentMaxWidth: currentMaxWidthProp,
        flex: flexProp,
        id,
        minWidth: minWidthProp,
        maxWidth: maxWidthProp
      });
  }, t6 = [currentMinWidthProp, currentMaxWidthProp, flexProp, id, minWidthProp, maxWidthProp, mount, rootElement], $[18] = currentMaxWidthProp, $[19] = currentMinWidthProp, $[20] = flexProp, $[21] = id, $[22] = maxWidthProp, $[23] = minWidthProp, $[24] = mount, $[25] = rootElement, $[26] = t5, $[27] = t6) : (t5 = $[26], t6 = $[27]), useEffect(t5, t6);
  let t7;
  $[28] !== collapse || $[29] !== rootElement ? (t7 = () => {
    rootElement && collapse(rootElement);
  }, $[28] = collapse, $[29] = rootElement, $[30] = t7) : t7 = $[30];
  const handleCollapse = t7;
  let t8;
  $[31] !== expand || $[32] !== rootElement ? (t8 = () => {
    rootElement && expand(rootElement);
  }, $[31] = expand, $[32] = rootElement, $[33] = t8) : t8 = $[33];
  const handleExpand = t8;
  let t9;
  const t10 = layoutCollapsed ? !1 : collapsed;
  let t11;
  $[34] !== handleCollapse || $[35] !== handleExpand || $[36] !== isLast || $[37] !== paneIndex || $[38] !== rootElement || $[39] !== t10 ? (t11 = {
    collapse: handleCollapse,
    collapsed: t10,
    expand: handleExpand,
    index: paneIndex,
    isLast,
    rootElement
  }, $[34] = handleCollapse, $[35] = handleExpand, $[36] = isLast, $[37] = paneIndex, $[38] = rootElement, $[39] = t10, $[40] = t11) : t11 = $[40], t9 = t11;
  const contextValue = t9;
  let t12;
  bb0: {
    if (layoutCollapsed) {
      t12 = void 0;
      break bb0;
    }
    if (collapsed) {
      t12 = PANE_COLLAPSED_WIDTH;
      break bb0;
    }
    if (currentMinWidth === 0) {
      t12 = minWidthProp || PANE_DEFAULT_MIN_WIDTH;
      break bb0;
    }
    if (isLast) {
      t12 = minWidthProp || PANE_DEFAULT_MIN_WIDTH;
      break bb0;
    }
    t12 = currentMinWidth || minWidthProp || PANE_DEFAULT_MIN_WIDTH;
  }
  const minWidth = t12;
  let t13;
  bb1: {
    if (collapsed) {
      t13 = PANE_COLLAPSED_WIDTH;
      break bb1;
    }
    if (layoutCollapsed && isLast) {
      t13 = void 0;
      break bb1;
    }
    if (isLast) {
      if (maxWidthProp) {
        t13 = currentMaxWidth ?? maxWidthProp;
        break bb1;
      }
      t13 = void 0;
      break bb1;
    }
    t13 = currentMaxWidth ?? maxWidthProp;
  }
  const maxWidth = t13, hidden = layoutCollapsed && !isLast;
  let t14, t15;
  $[41] !== collapsed || $[42] !== isLast || $[43] !== layoutCollapsed || $[44] !== nextCollapsed || $[45] !== rootElement ? (t15 = !isLast && !layoutCollapsed && /* @__PURE__ */ jsx(LegacyLayerProvider, { zOffset: "paneResizer", children: /* @__PURE__ */ jsx(PaneDivider, { disabled: collapsed || nextCollapsed, element: rootElement }) }), $[41] = collapsed, $[42] = isLast, $[43] = layoutCollapsed, $[44] = nextCollapsed, $[45] = rootElement, $[46] = t15) : t15 = $[46], t14 = t15;
  const divider = t14;
  let t16;
  const t17 = maxWidth === 1 / 0 ? void 0 : maxWidth;
  let t18;
  $[47] !== flex || $[48] !== minWidth || $[49] !== t17 ? (t18 = {
    flex,
    minWidth,
    maxWidth: t17
  }, $[47] = flex, $[48] = minWidth, $[49] = t17, $[50] = t18) : t18 = $[50], t16 = t18;
  const style = t16, t19 = layoutCollapsed ? void 0 : "hidden", t20 = collapsed ? "" : void 0, t21 = selected ? "" : void 0;
  let t22;
  $[51] !== collapsed || $[52] !== currentMaxWidth || $[53] !== currentMinWidth || $[54] !== expanded || $[55] !== flex || $[56] !== maxWidth || $[57] !== minWidth || $[58] !== paneIndex ? (t22 = PANE_DEBUG, $[51] = collapsed, $[52] = currentMaxWidth, $[53] = currentMinWidth, $[54] = expanded, $[55] = flex, $[56] = maxWidth, $[57] = minWidth, $[58] = paneIndex, $[59] = t22) : t22 = $[59];
  let t23;
  $[60] !== children || $[61] !== hidden ? (t23 = !hidden && /* @__PURE__ */ jsx(Flex, { direction: "column", height: "fill", children }), $[60] = children, $[61] = hidden, $[62] = t23) : t23 = $[62];
  let t24;
  $[63] !== rootElement || $[64] !== t23 ? (t24 = /* @__PURE__ */ jsx(BoundaryElementProvider, { element: rootElement, children: t23 }), $[63] = rootElement, $[64] = t23, $[65] = t24) : t24 = $[65];
  let t25;
  $[66] !== hidden || $[67] !== id || $[68] !== paneIndex || $[69] !== restProps || $[70] !== style || $[71] !== t19 || $[72] !== t20 || $[73] !== t21 || $[74] !== t22 || $[75] !== t24 ? (t25 = /* @__PURE__ */ jsxs(Root$9, { "data-testid": "pane", "data-ui": "Pane", tone: "inherit", hidden, id, overflow: t19, ...restProps, "data-pane-collapsed": t20, "data-pane-index": paneIndex, "data-pane-selected": t21, ref: setRef, style, children: [
    t22,
    t24
  ] }), $[66] = hidden, $[67] = id, $[68] = paneIndex, $[69] = restProps, $[70] = style, $[71] = t19, $[72] = t20, $[73] = t21, $[74] = t22, $[75] = t24, $[76] = t25) : t25 = $[76];
  let t26;
  $[77] !== isLast || $[78] !== t25 ? (t26 = /* @__PURE__ */ jsx(IsLastPaneProvider, { isLastPane: isLast, children: t25 }), $[77] = isLast, $[78] = t25, $[79] = t26) : t26 = $[79];
  let t27;
  $[80] !== contextValue || $[81] !== t26 ? (t27 = /* @__PURE__ */ jsx(LegacyLayerProvider, { zOffset: "pane", children: /* @__PURE__ */ jsx(PaneContext.Provider, { value: contextValue, children: t26 }) }), $[80] = contextValue, $[81] = t26, $[82] = t27) : t27 = $[82];
  let t28;
  return $[83] !== divider || $[84] !== t27 ? (t28 = /* @__PURE__ */ jsxs(Fragment, { children: [
    t27,
    divider
  ] }), $[83] = divider, $[84] = t27, $[85] = t28) : t28 = $[85], t28;
}), Root$8 = styled(Card)`
  position: relative;
  outline: none;
`;
Root$8.displayName = "PaneContent__root";
function usePane() {
  const pane2 = useContext(PaneContext);
  if (!pane2)
    throw new Error("Pane: missing context value");
  return pane2;
}
const PaneContent = forwardRef(function(props, ref) {
  const $ = c(14);
  let as, children, overflow, padding, restProps;
  $[0] !== props ? ({
    as,
    children,
    overflow,
    padding,
    ...restProps
  } = props, $[0] = props, $[1] = as, $[2] = children, $[3] = overflow, $[4] = padding, $[5] = restProps) : (as = $[1], children = $[2], overflow = $[3], padding = $[4], restProps = $[5]);
  const {
    collapsed
  } = usePane(), {
    collapsed: layoutCollapsed
  } = usePaneLayout(), t0 = layoutCollapsed ? void 0 : overflow;
  let t1;
  return $[6] !== as || $[7] !== children || $[8] !== collapsed || $[9] !== padding || $[10] !== ref || $[11] !== restProps || $[12] !== t0 ? (t1 = /* @__PURE__ */ jsx(Root$8, { "data-testid": "pane-content", forwardedAs: as, ...restProps, flex: 1, hidden: collapsed, overflow: t0, padding, ref, tone: "inherit", children }), $[6] = as, $[7] = children, $[8] = collapsed, $[9] = padding, $[10] = ref, $[11] = restProps, $[12] = t0, $[13] = t1) : t1 = $[13], t1;
}), MENU_GROUP_POPOVER_PROPS = {
  constrainSize: !0,
  placement: "left-start",
  portal: !0
};
function PaneMenuButtonItem(props) {
  const $ = c(35), {
    disabled,
    isAfterGroup,
    node
  } = props, getI18nText = useGetI18nText("i18n" in node ? node : void 0);
  if (node.type === "divider") {
    let t02;
    return $[0] === Symbol.for("react.memo_cache_sentinel") ? (t02 = /* @__PURE__ */ jsx(MenuDivider, {}), $[0] = t02) : t02 = $[0], t02;
  }
  let t0;
  $[1] !== getI18nText || $[2] !== node ? (t0 = getI18nText(node), $[1] = getI18nText, $[2] = node, $[3] = t0) : t0 = $[3];
  const {
    title
  } = t0;
  if (node.type === "group") {
    if (node.children.length === 0)
      return null;
    if (node.expanded) {
      let t13;
      $[4] !== isAfterGroup ? (t13 = isAfterGroup && /* @__PURE__ */ jsx(MenuDivider, {}), $[4] = isAfterGroup, $[5] = t13) : t13 = $[5];
      let t23;
      $[6] !== disabled || $[7] !== node.children || $[8] !== node.disabled ? (t23 = node.children.map((child, childIndex) => /* @__PURE__ */ jsx(PaneMenuButtonItem, { disabled: disabled || !!node.disabled, isAfterGroup: node.children[childIndex - 1]?.type === "group", node: child }, child.key)), $[6] = disabled, $[7] = node.children, $[8] = node.disabled, $[9] = t23) : t23 = $[9];
      let t33;
      return $[10] !== t13 || $[11] !== t23 ? (t33 = /* @__PURE__ */ jsxs(Fragment, { children: [
        t13,
        t23
      ] }), $[10] = t13, $[11] = t23, $[12] = t33) : t33 = $[12], t33;
    }
    let t12;
    $[13] !== isAfterGroup ? (t12 = isAfterGroup && /* @__PURE__ */ jsx(MenuDivider, {}), $[13] = isAfterGroup, $[14] = t12) : t12 = $[14];
    const t22 = node.icon;
    let t32;
    $[15] !== disabled || $[16] !== node.children || $[17] !== node.disabled ? (t32 = node.children.map((child_0, childIndex_0) => /* @__PURE__ */ jsx(PaneMenuButtonItem, { disabled: disabled || !!node.disabled, isAfterGroup: node.children[childIndex_0 - 1]?.type === "group", node: child_0 }, child_0.key)), $[15] = disabled, $[16] = node.children, $[17] = node.disabled, $[18] = t32) : t32 = $[18];
    let t4;
    $[19] !== disabled || $[20] !== node.icon || $[21] !== t32 || $[22] !== title ? (t4 = /* @__PURE__ */ jsx(MenuGroup, { disabled, icon: t22, popover: MENU_GROUP_POPOVER_PROPS, text: title, children: t32 }), $[19] = disabled, $[20] = node.icon, $[21] = t32, $[22] = title, $[23] = t4) : t4 = $[23];
    let t5;
    return $[24] !== t12 || $[25] !== t4 ? (t5 = /* @__PURE__ */ jsxs(Fragment, { children: [
      t12,
      t4
    ] }), $[24] = t12, $[25] = t4, $[26] = t5) : t5 = $[26], t5;
  }
  let t1;
  $[27] !== isAfterGroup ? (t1 = isAfterGroup && /* @__PURE__ */ jsx(MenuDivider, {}), $[27] = isAfterGroup, $[28] = t1) : t1 = $[28];
  let t2;
  $[29] !== disabled || $[30] !== node ? (t2 = /* @__PURE__ */ jsx(PaneContextMenuItemResolver, { disabled, node }), $[29] = disabled, $[30] = node, $[31] = t2) : t2 = $[31];
  let t3;
  return $[32] !== t1 || $[33] !== t2 ? (t3 = /* @__PURE__ */ jsxs(Fragment, { children: [
    t1,
    t2
  ] }), $[32] = t1, $[33] = t2, $[34] = t3) : t3 = $[34], t3;
}
function PaneContextMenuItemResolver(props) {
  const $ = c(5), {
    node
  } = props;
  if (node.intent) {
    let t02;
    return $[0] !== node.intent || $[1] !== props ? (t02 = /* @__PURE__ */ jsx(PaneContextIntentMenuItem, { ...props, intent: node.intent }), $[0] = node.intent, $[1] = props, $[2] = t02) : t02 = $[2], t02;
  }
  let t0;
  return $[3] !== props ? (t0 = /* @__PURE__ */ jsx(PaneContextMenuItem, { ...props }), $[3] = props, $[4] = t0) : t0 = $[4], t0;
}
function PaneContextMenuItem(props) {
  const $ = c(16), {
    disabled,
    node
  } = props;
  let t0;
  $[0] !== node.disabled ? (t0 = typeof node.disabled == "object" && /* @__PURE__ */ jsx(Text, { size: 1, children: node.disabled.reason }), $[0] = node.disabled, $[1] = t0) : t0 = $[1];
  const tooltipContent = t0, {
    title
  } = useI18nText(node), t1 = disabled || !!node.disabled;
  let t2;
  $[2] !== node.hotkey ? (t2 = node.hotkey?.split("+"), $[2] = node.hotkey, $[3] = t2) : t2 = $[3];
  const t3 = node.iconRight || node.selected && CheckmarkIcon;
  let t4;
  $[4] !== node.icon || $[5] !== node.onAction || $[6] !== node.selected || $[7] !== node.tone || $[8] !== t1 || $[9] !== t2 || $[10] !== t3 || $[11] !== title ? (t4 = /* @__PURE__ */ jsx(MenuItem, { disabled: t1, hotkeys: t2, icon: node.icon, iconRight: t3, onClick: node.onAction, pressed: node.selected, text: title, tone: node.tone }), $[4] = node.icon, $[5] = node.onAction, $[6] = node.selected, $[7] = node.tone, $[8] = t1, $[9] = t2, $[10] = t3, $[11] = title, $[12] = t4) : t4 = $[12];
  let t5;
  return $[13] !== t4 || $[14] !== tooltipContent ? (t5 = /* @__PURE__ */ jsx(TooltipOfDisabled, { content: tooltipContent, placement: "left", children: t4 }), $[13] = t4, $[14] = tooltipContent, $[15] = t5) : t5 = $[15], t5;
}
function PaneContextIntentMenuItem(props) {
  const $ = c(23), {
    disabled,
    intent,
    node
  } = props;
  let t0;
  $[0] !== node.disabled ? (t0 = typeof node.disabled == "object" && /* @__PURE__ */ jsx(Text, { size: 1, children: node.disabled.reason }), $[0] = node.disabled, $[1] = t0) : t0 = $[1];
  const tooltipContent = t0;
  let t1;
  $[2] !== intent.params || $[3] !== intent.type ? (t1 = {
    intent: intent.type,
    params: intent.params
  }, $[2] = intent.params, $[3] = intent.type, $[4] = t1) : t1 = $[4];
  const intentLink = useIntentLink(t1);
  let t2;
  $[5] !== intentLink || $[6] !== node ? (t2 = (event) => {
    intentLink.onClick(event), node.onAction();
  }, $[5] = intentLink, $[6] = node, $[7] = t2) : t2 = $[7];
  const handleClick = t2, {
    title
  } = useI18nText(node), t3 = disabled || !!node.disabled;
  let t4;
  $[8] !== node.hotkey ? (t4 = node.hotkey?.split("+"), $[8] = node.hotkey, $[9] = t4) : t4 = $[9];
  const t5 = node.selected ? CheckmarkIcon : void 0;
  let t6;
  $[10] !== handleClick || $[11] !== intentLink.href || $[12] !== node.icon || $[13] !== node.selected || $[14] !== node.tone || $[15] !== t3 || $[16] !== t4 || $[17] !== t5 || $[18] !== title ? (t6 = /* @__PURE__ */ jsx(MenuItem, { as: "a", disabled: t3, hotkeys: t4, href: intentLink.href, icon: node.icon, iconRight: t5, onClick: handleClick, pressed: node.selected, text: title, tone: node.tone }), $[10] = handleClick, $[11] = intentLink.href, $[12] = node.icon, $[13] = node.selected, $[14] = node.tone, $[15] = t3, $[16] = t4, $[17] = t5, $[18] = title, $[19] = t6) : t6 = $[19];
  let t7;
  return $[20] !== t6 || $[21] !== tooltipContent ? (t7 = /* @__PURE__ */ jsx(TooltipOfDisabled, { content: tooltipContent, placement: "left", children: t6 }), $[20] = t6, $[21] = tooltipContent, $[22] = t7) : t7 = $[22], t7;
}
const CONTEXT_MENU_POPOVER_PROPS = {
  constrainSize: !0,
  placement: "bottom",
  portal: !0
};
function nodesHasTone(nodes, tone) {
  return nodes.some((node) => node.type === "item" && node.tone === tone || node.type === "group" && nodesHasTone(node.children, tone));
}
function PaneContextMenuButton(props) {
  const $ = c(13), {
    nodes,
    actionsNodes
  } = props, id = useId(), hasCritical = nodesHasTone(nodes, "critical"), hasCaution = nodesHasTone(nodes, "caution"), t0 = hasCritical ? "critical" : hasCaution ? "caution" : void 0;
  let t1;
  $[0] !== t0 ? (t1 = /* @__PURE__ */ jsx(ContextMenuButton, { tone: t0, "data-testid": "pane-context-menu-button" }), $[0] = t0, $[1] = t1) : t1 = $[1];
  let t2;
  $[2] !== actionsNodes ? (t2 = actionsNodes && /* @__PURE__ */ jsxs(Fragment, { children: [
    actionsNodes,
    /* @__PURE__ */ jsx(MenuDivider, {})
  ] }), $[2] = actionsNodes, $[3] = t2) : t2 = $[3];
  let t3;
  $[4] !== nodes ? (t3 = nodes.map((node, nodeIndex) => {
    const isAfterGroup = nodes[nodeIndex - 1]?.type === "group";
    return /* @__PURE__ */ jsx(PaneMenuButtonItem, { isAfterGroup, node }, node.key);
  }), $[4] = nodes, $[5] = t3) : t3 = $[5];
  let t4;
  $[6] !== t2 || $[7] !== t3 ? (t4 = /* @__PURE__ */ jsxs(Menu, { children: [
    t2,
    t3
  ] }), $[6] = t2, $[7] = t3, $[8] = t4) : t4 = $[8];
  let t5;
  return $[9] !== id || $[10] !== t1 || $[11] !== t4 ? (t5 = /* @__PURE__ */ jsx(MenuButton, { button: t1, id, menu: t4, popover: CONTEXT_MENU_POPOVER_PROPS }), $[9] = id, $[10] = t1, $[11] = t4, $[12] = t5) : t5 = $[12], t5;
}
const Root$7 = styled(Layer)`
  position: sticky;
  bottom: 0;

  &:before {
    content: '';
    display: block;
    position: absolute;
    left: 0;
    right: 0;
    top: -1px;
    border-bottom: 1px solid var(--card-border-color);
  }
`, RootCard = styled(Card)`
  padding-bottom: env(safe-area-inset-bottom);
`, PaneFooter = forwardRef(function(props, ref) {
  const $ = c(7), {
    children,
    padding
  } = props, {
    collapsed
  } = usePane();
  let t0;
  $[0] !== children || $[1] !== padding ? (t0 = /* @__PURE__ */ jsx(RootCard, { tone: "inherit", children: /* @__PURE__ */ jsx(Box, { padding, children }) }), $[0] = children, $[1] = padding, $[2] = t0) : t0 = $[2];
  let t1;
  return $[3] !== collapsed || $[4] !== ref || $[5] !== t0 ? (t1 = /* @__PURE__ */ jsx(LegacyLayerProvider, { zOffset: "paneFooter", children: /* @__PURE__ */ jsx(Root$7, { "data-testid": "pane-footer", hidden: collapsed, ref, children: t0 }) }), $[3] = collapsed, $[4] = ref, $[5] = t0, $[6] = t1) : t1 = $[6], t1;
}), Root$6 = styled(Layer)(({
  $border
}) => css`
    line-height: 0;
    position: sticky;
    top: 0;

    &:not([data-collapsed]):after {
      content: '';
      display: block;
      position: absolute;
      left: 0;
      right: 0;
      bottom: -1px;
      border-bottom: 1px solid ${$border ? "var(--card-border-color)" : "transparent"};
      opacity: 1;
    }
  `), Layout = styled(Flex)`
  transform-origin: calc(51px / 2);

  [data-collapsed] > div > & {
    transform: rotate(90deg);
  }
`, TitleCard = styled(Card)(({
  theme
}) => {
  const {
    fg,
    bg
  } = theme.sanity.color.card.enabled;
  return css`
    background-color: ${bg};

    [data-ui='Text'] {
      color: ${fg};
    }
  `;
}), TitleTextSkeleton = styled(TextSkeleton)`
  width: 66%;
  max-width: 175px;
`, TitleText = styled(Text)`
  cursor: default;
  outline: none;
`, TabsBox = styled(Box)(({
  theme
}) => {
  const {
    color,
    space
  } = theme.sanity;
  return css`
    overflow: hidden;
    overflow: clip;
    position: relative;

    & > div {
      white-space: nowrap;
      overflow: auto;
      /* Hide scrollbars */
      scrollbar-width: none;
      &::-webkit-scrollbar {
        width: 0;
        height: 0;
      }
    }

    /* right padding */
    & > div:after {
      content: '';
      display: inline-block;
      top: 0;
      right: 0;
      bottom: 0;
      width: ${space[3]}px;
      height: 1px;
    }

    /* Gradient that makes it look like tabs disappear into nothing (looks nicer) */
    &:after {
      content: '';
      display: block;
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(to right, ${rgba(color.base.bg, 0)}, var(--card-bg-color));
      width: ${space[3]}px;
      pointer-events: none;
    }
  `;
}), PaneHeader$1 = forwardRef(function(props, ref) {
  const $ = c(46), {
    actions,
    backButton,
    border,
    contentAfter,
    loading,
    subActions,
    tabs,
    tabIndex,
    title
  } = props, {
    collapse,
    collapsed,
    expand,
    rootElement: paneElement
  } = usePane(), paneRect = useElementRect(paneElement || null);
  let t0;
  const t1 = collapsed ? paneRect?.height || window.innerHeight : void 0;
  let t2;
  $[0] !== t1 ? (t2 = {
    width: t1
  }, $[0] = t1, $[1] = t2) : t2 = $[1], t0 = t2;
  const layoutStyle = t0;
  let t3;
  $[2] !== collapse || $[3] !== collapsed ? (t3 = () => {
    collapsed || collapse();
  }, $[2] = collapse, $[3] = collapsed, $[4] = t3) : t3 = $[4];
  const handleTitleClick = t3;
  let t4;
  $[5] !== collapsed || $[6] !== expand ? (t4 = () => {
    collapsed && expand();
  }, $[5] = collapsed, $[6] = expand, $[7] = t4) : t4 = $[7];
  const handleLayoutClick = t4, showTabsOrSubActions = !!(!collapsed && (tabs || subActions)), t5 = collapsed ? "" : void 0, t6 = collapsed ? "" : void 0, t7 = collapsed ? 3 : 2;
  let t8;
  $[8] !== backButton ? (t8 = backButton && /* @__PURE__ */ jsx(Box, { flex: "none", children: backButton }), $[8] = backButton, $[9] = t8) : t8 = $[9];
  const t9 = backButton ? 1 : 2;
  let t10;
  $[10] !== loading ? (t10 = loading && /* @__PURE__ */ jsx(TitleTextSkeleton, { animated: !0, radius: 1, size: 1 }), $[10] = loading, $[11] = t10) : t10 = $[11];
  let t11;
  $[12] !== loading || $[13] !== title ? (t11 = !loading && /* @__PURE__ */ jsx(TitleText, { size: 1, textOverflow: "ellipsis", weight: "semibold", children: title }), $[12] = loading, $[13] = title, $[14] = t11) : t11 = $[14];
  let t12;
  $[15] !== handleTitleClick || $[16] !== t10 || $[17] !== t11 || $[18] !== t9 || $[19] !== tabIndex ? (t12 = /* @__PURE__ */ jsxs(TitleCard, { __unstable_focusRing: !0, flex: 1, forwardedAs: "button", onClick: handleTitleClick, paddingLeft: t9, padding: 2, tabIndex, children: [
    t10,
    t11
  ] }), $[15] = handleTitleClick, $[16] = t10, $[17] = t11, $[18] = t9, $[19] = tabIndex, $[20] = t12) : t12 = $[20];
  let t13;
  $[21] !== actions || $[22] !== collapsed ? (t13 = actions && /* @__PURE__ */ jsx(Flex, { align: "center", hidden: collapsed, children: /* @__PURE__ */ jsx(LegacyLayerProvider, { zOffset: "paneHeader", children: actions }) }), $[21] = actions, $[22] = collapsed, $[23] = t13) : t13 = $[23];
  let t14;
  $[24] !== handleLayoutClick || $[25] !== layoutStyle || $[26] !== t12 || $[27] !== t13 || $[28] !== t7 || $[29] !== t8 ? (t14 = /* @__PURE__ */ jsxs(Layout, { gap: 1, onClick: handleLayoutClick, padding: 3, paddingBottom: t7, sizing: "border", style: layoutStyle, children: [
    t8,
    t12,
    t13
  ] }), $[24] = handleLayoutClick, $[25] = layoutStyle, $[26] = t12, $[27] = t13, $[28] = t7, $[29] = t8, $[30] = t14) : t14 = $[30];
  let t15;
  $[31] !== collapsed || $[32] !== showTabsOrSubActions || $[33] !== subActions || $[34] !== tabs ? (t15 = showTabsOrSubActions && /* @__PURE__ */ jsxs(Flex, { align: "center", hidden: collapsed, overflow: "auto", paddingBottom: 3, paddingX: 3, children: [
    /* @__PURE__ */ jsx(TabsBox, { flex: 1, marginRight: subActions ? 3 : 0, children: tabs }),
    subActions && subActions
  ] }), $[31] = collapsed, $[32] = showTabsOrSubActions, $[33] = subActions, $[34] = tabs, $[35] = t15) : t15 = $[35];
  const t16 = !collapsed && contentAfter && contentAfter;
  let t17;
  $[36] !== t14 || $[37] !== t15 || $[38] !== t16 || $[39] !== t6 ? (t17 = /* @__PURE__ */ jsx(LegacyLayerProvider, { zOffset: "paneHeader", children: /* @__PURE__ */ jsxs(Card, { "data-collapsed": t6, tone: "inherit", children: [
    t14,
    t15,
    t16
  ] }) }), $[36] = t14, $[37] = t15, $[38] = t16, $[39] = t6, $[40] = t17) : t17 = $[40];
  let t18;
  return $[41] !== border || $[42] !== ref || $[43] !== t17 || $[44] !== t5 ? (t18 = /* @__PURE__ */ jsx(LayerProvider, { zOffset: 100, children: /* @__PURE__ */ jsx(Root$6, { $border: border, "data-collapsed": t5, "data-testid": "pane-header", ref, children: t17 }) }), $[41] = border, $[42] = ref, $[43] = t17, $[44] = t5, $[45] = t18) : t18 = $[45], t18;
});
function getDisabledReason$1(node) {
  if (!node.disabled)
    return {
      disabledReason: void 0,
      ariaLabel: void 0,
      isDisabled: !1
    };
  const disabledReason = typeof node.disabled == "object" ? node.disabled.reason : void 0, ariaLabel = typeof node.disabled == "object" && typeof node.disabled?.reason == "string" ? node.disabled.reason : "This is disabled";
  return {
    disabledReason,
    ariaLabel,
    isDisabled: !!node.disabled
  };
}
function PaneHeaderActionButton(props) {
  const $ = c(4), {
    node
  } = props;
  if (node.type === "item") {
    let t0;
    return $[0] !== node ? (t0 = /* @__PURE__ */ jsx(PaneHeaderMenuItemActionButton, { node }), $[0] = node, $[1] = t0) : t0 = $[1], t0;
  }
  if (node.type === "group") {
    let t0;
    return $[2] !== node ? (t0 = /* @__PURE__ */ jsx(PaneHeaderMenuGroupActionButton, { node }), $[2] = node, $[3] = t0) : t0 = $[3], t0;
  }
  return console.warn('unknown menu node (expected `type: "item" | "group"`):', node), null;
}
function PaneHeaderMenuItemActionButton(props) {
  const $ = c(23), {
    node
  } = props, {
    title
  } = useI18nText(node), {
    t
  } = useTranslation();
  if (node.intent) {
    let t02;
    return $[0] !== node.intent || $[1] !== props ? (t02 = /* @__PURE__ */ jsx(PaneHeaderActionIntentButton, { ...props, intent: node.intent }), $[0] = node.intent, $[1] = props, $[2] = t02) : t02 = $[2], t02;
  }
  let t0;
  $[3] !== node ? (t0 = getDisabledReason$1(node), $[3] = node, $[4] = t0) : t0 = $[4];
  const {
    disabledReason,
    ariaLabel,
    isDisabled
  } = t0;
  let t1;
  $[5] !== ariaLabel || $[6] !== t || $[7] !== title ? (t1 = ariaLabel || title || t("status-button.aria-label"), $[5] = ariaLabel, $[6] = t, $[7] = title, $[8] = t1) : t1 = $[8];
  let t2;
  $[9] !== isDisabled || $[10] !== node.hotkey ? (t2 = !isDisabled && node.hotkey ? node.hotkey.split("+") : void 0, $[9] = isDisabled, $[10] = node.hotkey, $[11] = t2) : t2 = $[11];
  const t3 = isDisabled ? disabledReason : title;
  let t4;
  $[12] !== t2 || $[13] !== t3 ? (t4 = {
    hotkeys: t2,
    content: t3
  }, $[12] = t2, $[13] = t3, $[14] = t4) : t4 = $[14];
  let t5;
  return $[15] !== isDisabled || $[16] !== node.icon || $[17] !== node.onAction || $[18] !== node.selected || $[19] !== node.tone || $[20] !== t1 || $[21] !== t4 ? (t5 = /* @__PURE__ */ jsx(StatusButton, { disabled: isDisabled, icon: node.icon, onClick: node.onAction, selected: node.selected, tone: node.tone, "aria-label": t1, tooltipProps: t4 }), $[15] = isDisabled, $[16] = node.icon, $[17] = node.onAction, $[18] = node.selected, $[19] = node.tone, $[20] = t1, $[21] = t4, $[22] = t5) : t5 = $[22], t5;
}
function PaneHeaderActionIntentButton(props) {
  const $ = c(27), {
    intent,
    node
  } = props;
  let t0;
  $[0] !== intent.params || $[1] !== intent.type ? (t0 = {
    intent: intent.type,
    params: intent.params
  }, $[0] = intent.params, $[1] = intent.type, $[2] = t0) : t0 = $[2];
  const intentLink = useIntentLink(t0), {
    t
  } = useTranslation();
  let t1;
  $[3] !== intentLink || $[4] !== node ? (t1 = (event) => {
    intentLink.onClick(event), node.onAction();
  }, $[3] = intentLink, $[4] = node, $[5] = t1) : t1 = $[5];
  const handleClick = t1;
  let t2;
  $[6] !== node ? (t2 = getDisabledReason$1(node), $[6] = node, $[7] = t2) : t2 = $[7];
  const {
    disabledReason,
    ariaLabel,
    isDisabled
  } = t2;
  let t3;
  $[8] !== ariaLabel || $[9] !== node.title || $[10] !== t ? (t3 = ariaLabel || node.title || t("status-button.aria-label"), $[8] = ariaLabel, $[9] = node.title, $[10] = t, $[11] = t3) : t3 = $[11];
  let t4;
  $[12] !== isDisabled || $[13] !== node.hotkey ? (t4 = !isDisabled && node.hotkey ? node.hotkey.split("+") : void 0, $[12] = isDisabled, $[13] = node.hotkey, $[14] = t4) : t4 = $[14];
  const t5 = isDisabled ? disabledReason : node.title;
  let t6;
  $[15] !== t4 || $[16] !== t5 ? (t6 = {
    hotkeys: t4,
    content: t5,
    placement: "bottom",
    portal: !0
  }, $[15] = t4, $[16] = t5, $[17] = t6) : t6 = $[17];
  let t7;
  return $[18] !== handleClick || $[19] !== intentLink.href || $[20] !== isDisabled || $[21] !== node.icon || $[22] !== node.selected || $[23] !== node.tone || $[24] !== t3 || $[25] !== t6 ? (t7 = /* @__PURE__ */ jsx(StatusButton, { forwardedAs: "a", disabled: isDisabled, href: intentLink.href, icon: node.icon, onClick: handleClick, selected: node.selected, tone: node.tone, "aria-label": t3, tooltipProps: t6 }), $[18] = handleClick, $[19] = intentLink.href, $[20] = isDisabled, $[21] = node.icon, $[22] = node.selected, $[23] = node.tone, $[24] = t3, $[25] = t6, $[26] = t7) : t7 = $[26], t7;
}
function PaneHeaderMenuGroupActionButton(props) {
  const $ = c(16), {
    node
  } = props, {
    title
  } = useI18nText(node), t0 = !!node.disabled, t1 = node.icon ?? UnknownIcon;
  let t2;
  $[0] !== node.title ? (t2 = {
    content: node.title,
    portal: !0
  }, $[0] = node.title, $[1] = t2) : t2 = $[1];
  let t3;
  $[2] !== t0 || $[3] !== t1 || $[4] !== t2 || $[5] !== title ? (t3 = /* @__PURE__ */ jsx(Button, { disabled: t0, icon: t1, label: title, mode: "bleed", tooltipProps: t2 }), $[2] = t0, $[3] = t1, $[4] = t2, $[5] = title, $[6] = t3) : t3 = $[6];
  const t4 = useId();
  let t5;
  $[7] !== node.children || $[8] !== node.disabled ? (t5 = node.children.map((child, idx) => /* @__PURE__ */ jsx(PaneMenuButtonItem, { disabled: !!node.disabled, isAfterGroup: node.children[idx - 1]?.type === "group", node: child }, child.key)), $[7] = node.children, $[8] = node.disabled, $[9] = t5) : t5 = $[9];
  let t6;
  $[10] !== t5 ? (t6 = /* @__PURE__ */ jsx(Menu, { children: t5 }), $[10] = t5, $[11] = t6) : t6 = $[11];
  let t7;
  return $[12] !== t3 || $[13] !== t4 || $[14] !== t6 ? (t7 = /* @__PURE__ */ jsx(MenuButton, { button: t3, id: t4, menu: t6 }), $[12] = t3, $[13] = t4, $[14] = t6, $[15] = t7) : t7 = $[15], t7;
}
const Root$5 = styled(Card)`
  transition: opacity 200ms;
  position: relative;
  z-index: 1;
  padding-left: env(safe-area-inset-left);
  padding-right: env(safe-area-inset-right);
  opacity: 0;

  &:not([hidden]) {
    display: flex;
  }

  &:not([data-collapsed]) {
    overflow: auto;
  }

  &[data-mounted] {
    opacity: 1;
  }

  &[data-resizing] {
    pointer-events: none;
  }
`;
function _calcPaneResize(cache, left, right, deltaX) {
  const sum = {
    flex: cache.left.flex + cache.right.flex,
    width: cache.left.width + cache.right.width
  }, leftMinWidth = left.minWidth ?? PANE_DEFAULT_MIN_WIDTH, rightMinWidth = right.minWidth ?? PANE_DEFAULT_MIN_WIDTH, leftMaxWidth = Math.min(left.maxWidth || 1 / 0, sum.width - rightMinWidth), rightMaxWidth = Math.min(right.maxWidth || 1 / 0, sum.width - leftMinWidth);
  let minDeltaX = leftMinWidth - cache.left.width;
  const rightMinDeltaX = cache.right.width - rightMaxWidth;
  minDeltaX < rightMinDeltaX && (minDeltaX = rightMinDeltaX);
  let maxDeltaX = cache.right.width - rightMinWidth;
  const leftMaxDeltaX = leftMaxWidth - cache.left.width;
  maxDeltaX > leftMaxDeltaX && (maxDeltaX = leftMaxDeltaX);
  const _deltaX = Math.min(Math.max(deltaX, minDeltaX), maxDeltaX), leftW = cache.left.width + _deltaX, rightW = cache.right.width - _deltaX, leftFlex = leftW / sum.width * sum.flex, rightFlex = rightW / sum.width * sum.flex;
  return {
    leftFlex,
    leftW,
    rightFlex,
    rightW
  };
}
function _getDOMPath(rootElement, el) {
  const path = [];
  let e = el;
  for (; e !== rootElement; ) {
    const parentElement = e.parentElement;
    if (!parentElement) return path;
    const index = Array.from(parentElement.childNodes).indexOf(e);
    if (path.unshift(index), parentElement === rootElement)
      return path;
    e = parentElement;
  }
  return path;
}
const EMPTY_PATH = [];
function _sortElements(rootElement, elements) {
  const map2 = /* @__PURE__ */ new WeakMap();
  for (const element of elements)
    map2.set(element, _getDOMPath(rootElement, element));
  const _sortByElementPath = (a, b) => {
    const _a = map2.get(a) || EMPTY_PATH, _b = map2.get(b) || EMPTY_PATH, len = Math.max(_a.length, _b.length);
    for (let i = 0; i < len; i += 1) {
      const aIndex = _a[i] || -1, bIndex = _b[i] || -1;
      if (aIndex !== bIndex)
        return aIndex - bIndex;
    }
    return 0;
  };
  elements.sort(_sortByElementPath);
}
function createPaneLayoutController() {
  const observers = [], elements = [], optionsMap = /* @__PURE__ */ new WeakMap(), userCollapsedElementSet = /* @__PURE__ */ new Set(), cache = {};
  let rootElement = null, rootWidth = 0, expandedElement = null, resizeDataMap = /* @__PURE__ */ new Map(), resizing = !1;
  function collapse(element) {
    userCollapsedElementSet.add(element), expandedElement === element && (expandedElement = null), _notifyObservers();
  }
  function expand(element) {
    userCollapsedElementSet.delete(element), expandedElement = element, _notifyObservers();
  }
  function mount(element, options) {
    return optionsMap.set(element, {
      ...options,
      original: options
    }), elements.push(element), rootElement && _sortElements(rootElement, elements), expand(element), () => {
      const idx = elements.indexOf(element);
      idx > -1 && elements.splice(idx, 1), optionsMap.delete(element), _notifyObservers();
    };
  }
  function resize(type, leftElement, deltaX) {
    const leftIndex = elements.indexOf(leftElement), leftOptions = optionsMap.get(leftElement);
    if (!leftOptions) return;
    const rightElement = elements[leftIndex + 1], rightOptions = optionsMap.get(rightElement);
    if (rightOptions) {
      if (type === "start" && (resizing = !0, cache.left = {
        element: leftElement,
        flex: leftOptions.flex || 1,
        width: leftElement.offsetWidth
      }, cache.right = {
        element: rightElement,
        flex: rightOptions.flex || 1,
        width: rightElement.offsetWidth
      }, _notifyObservers()), type === "move" && cache.left && cache.right) {
        resizeDataMap = /* @__PURE__ */ new Map();
        const {
          leftW,
          rightW,
          leftFlex,
          rightFlex
        } = _calcPaneResize(cache, leftOptions, rightOptions, deltaX);
        resizeDataMap.set(leftElement, {
          flex: leftFlex,
          width: leftW
        }), resizeDataMap.set(rightElement, {
          flex: rightFlex,
          width: rightW
        }), _notifyObservers();
      }
      if (type === "end") {
        resizing = !1;
        const leftResizeData = resizeDataMap.get(leftElement), rightResizeData = resizeDataMap.get(rightElement);
        optionsMap.set(leftElement, {
          ...leftOptions,
          currentMinWidth: 0,
          currentMaxWidth: leftOptions.maxWidth ?? 1 / 0,
          flex: leftResizeData?.flex ?? leftOptions.flex
        }), optionsMap.set(rightElement, {
          ...rightOptions,
          currentMinWidth: 0,
          currentMaxWidth: leftOptions.maxWidth ?? 1 / 0,
          flex: rightResizeData?.flex ?? rightOptions.flex
        }), resizeDataMap = /* @__PURE__ */ new Map(), delete cache.left, delete cache.right, _notifyObservers();
      }
    }
  }
  function setRootElement(nextRootElement) {
    rootElement = nextRootElement;
  }
  function setRootWidth(nextRootWidth) {
    rootWidth = nextRootWidth, _notifyObservers();
  }
  function subscribe(observer) {
    return observers.push(observer), () => {
      const idx = observers.push(observer);
      idx > -1 && observers.splice(idx, 1);
    };
  }
  return {
    collapse,
    expand,
    mount,
    resize,
    setRootElement,
    setRootWidth,
    subscribe
  };
  function _notifyObservers() {
    if (!rootWidth) return;
    const _elements = [];
    for (const element of elements)
      element !== expandedElement && _elements.unshift(element);
    expandedElement && _elements.unshift(expandedElement);
    const dataMap = /* @__PURE__ */ new WeakMap(), len = _elements.length, lastElement = _elements[0], collapsedWidth = (len - 1) * PANE_COLLAPSED_WIDTH;
    let remaingWidth = rootWidth - collapsedWidth;
    for (const element of _elements) {
      const options = optionsMap.get(element);
      if (!options)
        continue;
      const minWidth = options.currentMinWidth || options.minWidth || PANE_DEFAULT_MIN_WIDTH, isLast = element === lastElement, userCollapsed = userCollapsedElementSet.has(element), sizeCollapsed = minWidth > remaingWidth, collapsed = isLast ? !1 : userCollapsed || sizeCollapsed, resizeData = resizeDataMap.get(element);
      dataMap.set(element, {
        element,
        collapsed,
        currentMinWidth: resizeData?.width ?? options.currentMinWidth,
        currentMaxWidth: resizeData?.width ?? options.currentMaxWidth,
        flex: resizeData?.flex ?? options.flex ?? 1
      }), collapsed ? remaingWidth -= PANE_COLLAPSED_WIDTH : remaingWidth -= minWidth - PANE_COLLAPSED_WIDTH;
    }
    const panes = [];
    for (const element of elements) {
      const data = dataMap.get(element);
      data && panes.push(data);
    }
    for (const observer of observers)
      observer({
        expandedElement: expandedElement || elements[elements.length - 1] || null,
        panes,
        resizing
      });
  }
}
function PaneLayout(props) {
  const $ = c(35);
  let children, minWidth, onCollapse, onExpand, restProps;
  $[0] !== props ? ({
    children,
    minWidth,
    onCollapse,
    onExpand,
    ...restProps
  } = props, $[0] = props, $[1] = children, $[2] = minWidth, $[3] = onCollapse, $[4] = onExpand, $[5] = restProps) : (children = $[1], minWidth = $[2], onCollapse = $[3], onExpand = $[4], restProps = $[5]);
  let t0, t1;
  $[6] === Symbol.for("react.memo_cache_sentinel") ? (t1 = createPaneLayoutController(), $[6] = t1) : t1 = $[6], t0 = t1;
  const controller = t0, [rootElement, setRootElement] = useState(null), width = useElementRect(rootElement)?.width || 0, collapsed = width === void 0 || !minWidth ? void 0 : width < minWidth;
  let t2;
  $[7] === Symbol.for("react.memo_cache_sentinel") ? (t2 = {
    expandedElement: null,
    panes: [],
    resizing: !1
  }, $[7] = t2) : t2 = $[7];
  const [state2, setState] = useState(t2);
  let t3, t4;
  $[8] !== rootElement ? (t3 = () => controller.setRootElement(rootElement), t4 = [controller, rootElement], $[8] = rootElement, $[9] = t3, $[10] = t4) : (t3 = $[9], t4 = $[10]), useEffect(t3, t4);
  let t5, t6;
  $[11] !== width ? (t5 = () => controller.setRootWidth(width), t6 = [controller, width], $[11] = width, $[12] = t5, $[13] = t6) : (t5 = $[12], t6 = $[13]), useEffect(t5, t6);
  let t7, t8;
  $[14] === Symbol.for("react.memo_cache_sentinel") ? (t7 = () => controller.subscribe(setState), t8 = [controller], $[14] = t7, $[15] = t8) : (t7 = $[14], t8 = $[15]), useEffect(t7, t8);
  let t10, t9;
  $[16] !== collapsed || $[17] !== onCollapse || $[18] !== onExpand ? (t9 = () => {
    collapsed !== void 0 && (collapsed && onCollapse && onCollapse(), !collapsed && onExpand && onExpand());
  }, t10 = [collapsed, onCollapse, onExpand], $[16] = collapsed, $[17] = onCollapse, $[18] = onExpand, $[19] = t10, $[20] = t9) : (t10 = $[19], t9 = $[20]), useEffect(t9, t10);
  let t11, t12;
  $[21] !== collapsed || $[22] !== state2.expandedElement || $[23] !== state2.panes || $[24] !== state2.resizing ? (t12 = {
    collapse: controller.collapse,
    collapsed,
    expand: controller.expand,
    expandedElement: state2.expandedElement,
    mount: controller.mount,
    panes: state2.panes,
    resize: controller.resize,
    resizing: state2.resizing
  }, $[21] = collapsed, $[22] = state2.expandedElement, $[23] = state2.panes, $[24] = state2.resizing, $[25] = t12) : t12 = $[25], t11 = t12;
  const paneLayout = t11, t13 = collapsed ? "" : void 0, t14 = state2.resizing ? "" : void 0, t15 = width ? "" : void 0;
  let t16;
  $[26] !== children || $[27] !== restProps || $[28] !== t13 || $[29] !== t14 || $[30] !== t15 ? (t16 = /* @__PURE__ */ jsx(Root$5, { "data-ui": "PaneLayout", ...restProps, "data-collapsed": t13, "data-resizing": t14, "data-mounted": t15, ref: setRootElement, children }), $[26] = children, $[27] = restProps, $[28] = t13, $[29] = t14, $[30] = t15, $[31] = t16) : t16 = $[31];
  let t17;
  return $[32] !== paneLayout || $[33] !== t16 ? (t17 = /* @__PURE__ */ jsx(PaneLayoutContext.Provider, { value: paneLayout, children: t16 }), $[32] = paneLayout, $[33] = t16, $[34] = t17) : t17 = $[34], t17;
}
function isMenuNodeButton(node) {
  return (node.type === "item" || node.type === "group") && node.renderAsButton;
}
const isNotMenuNodeButton = negate(isMenuNodeButton);
function resolveMenuNodes(params) {
  const {
    fieldActions = [],
    menuItems,
    menuItemGroups
  } = params, nodes = [];
  let keyOffset = 0;
  for (let i = 0; i < fieldActions.length; i += 1) {
    const a = fieldActions[i];
    nodes.push(mapFieldActionToPaneMenuNode(a, `${i}-${a.type}`));
  }
  keyOffset += nodes.length;
  const groups = [];
  for (const itemGroup of menuItemGroups)
    groups.find((g) => g.key === itemGroup.id) || groups.push({
      type: "group",
      key: itemGroup.id,
      children: [],
      expanded: !0,
      renderAsButton: !1,
      title: itemGroup.title,
      i18n: itemGroup.i18n
    });
  const ungroupedItems = [];
  for (let i = 0; i < menuItems.length; i += 1) {
    const item = menuItems[i];
    let group = item.group && groups.find((g) => g.key === item.group);
    item.group && !group && (group = {
      type: "group",
      key: item.group,
      expanded: !0,
      icon: item.icon,
      title: item.group,
      children: [],
      renderAsButton: !1
    }, groups.push(group)), group ? group.children.push({
      type: "item",
      key: `${keyOffset + i}-item`,
      hotkey: item.shortcut,
      icon: item.icon,
      intent: item.intent,
      onAction: () => params.actionHandler(item),
      renderAsButton: item.showAsAction ?? !1,
      selected: item.selected,
      title: item.title,
      i18n: item.i18n,
      tone: item.tone
    }) : ungroupedItems.push({
      type: "item",
      key: `${keyOffset + i}-item`,
      hotkey: item.shortcut,
      icon: item.icon,
      intent: item.intent,
      onAction: () => params.actionHandler(item),
      renderAsButton: item.showAsAction ?? !1,
      selected: item.selected,
      title: item.title,
      i18n: item.i18n,
      tone: item.tone
    });
  }
  return [...ungroupedItems, ...groups, ...nodes];
}
function mapFieldActionToPaneMenuNode(a, key) {
  return a.type === "divider" ? {
    type: "divider",
    key
  } : a.type === "group" ? {
    type: "group",
    key,
    children: a.children.map((child, childIdx) => mapFieldActionToPaneMenuNode(child, `${key}-${childIdx}-${child.type}`)),
    disabled: a.disabled,
    expanded: a.expanded ?? !0,
    icon: a.icon,
    title: a.title,
    i18n: a.i18n,
    renderAsButton: a.renderAsButton ?? !1
  } : {
    type: "item",
    key,
    intent: a.intent,
    disabled: a.disabled,
    icon: a.icon,
    iconRight: a.iconRight,
    onAction: a.onAction,
    renderAsButton: a.renderAsButton ?? !1,
    selected: a.selected,
    title: a.title,
    i18n: a.i18n,
    tone: a.tone
  };
}
const IntentButton = forwardRef(function(props, ref) {
  const $ = c(11);
  let intent, restProps;
  $[0] !== props ? ({
    intent,
    ...restProps
  } = props, $[0] = props, $[1] = intent, $[2] = restProps) : (intent = $[1], restProps = $[2]);
  let t0, t1;
  $[3] !== intent.params || $[4] !== intent.type ? (t1 = forwardRef(function(linkProps, linkRef) {
    return /* @__PURE__ */ jsx(IntentLink, { ...linkProps, intent: intent.type, params: intent.params, ref: linkRef });
  }), $[3] = intent.params, $[4] = intent.type, $[5] = t1) : t1 = $[5], t0 = t1;
  const Link = t0;
  let t2;
  return $[6] !== Link || $[7] !== props.disabled || $[8] !== ref || $[9] !== restProps ? (t2 = props.disabled ? /* @__PURE__ */ jsx(Button, { ...restProps, as: "a", role: "link", "aria-disabled": "true" }) : /* @__PURE__ */ jsx(Button, { ...restProps, as: Link, "data-as": "a", ref }), $[6] = Link, $[7] = props.disabled, $[8] = ref, $[9] = restProps, $[10] = t2) : t2 = $[10], t2;
});
function InsufficientPermissionsMessageTooltip(t0) {
  const $ = c(12), {
    reveal,
    context,
    loading,
    children
  } = t0, currentUser = useCurrentUser(), {
    t
  } = useTranslation(structureLocaleNamespace);
  if (!reveal) {
    let t12;
    return $[0] !== children ? (t12 = /* @__PURE__ */ jsx(Fragment, { children }), $[0] = children, $[1] = t12) : t12 = $[1], t12;
  }
  let t1;
  $[2] !== context || $[3] !== currentUser || $[4] !== loading || $[5] !== t ? (t1 = loading ? t("insufficient-permissions-message-tooltip.loading-text") : /* @__PURE__ */ jsx(InsufficientPermissionsMessage, { context, currentUser }), $[2] = context, $[3] = currentUser, $[4] = loading, $[5] = t, $[6] = t1) : t1 = $[6];
  let t2;
  $[7] !== children ? (t2 = /* @__PURE__ */ jsx("div", { children }), $[7] = children, $[8] = t2) : t2 = $[8];
  let t3;
  return $[9] !== t1 || $[10] !== t2 ? (t3 = /* @__PURE__ */ jsx(Tooltip, { content: t1, portal: !0, children: t2 }), $[9] = t1, $[10] = t2, $[11] = t3) : t3 = $[11], t3;
}
const POPOVER_PROPS = {
  constrainSize: !0,
  placement: "bottom",
  portal: !0
}, getIntent = (schema, templates, item) => {
  const typeName = templates.find((t) => t.id === item.templateId)?.schemaType;
  if (!typeName) return null;
  const baseParams = {
    template: item.templateId,
    type: typeName,
    id: item.initialDocumentId
  };
  return {
    type: "create",
    params: item.parameters ? [baseParams, item.parameters] : baseParams
  };
};
function PaneHeaderCreateButton(t0) {
  const $ = c(59), {
    templateItems
  } = t0, schema = useSchema(), templates = useTemplates(), {
    t
  } = useTranslation(structureLocaleNamespace);
  let t1;
  $[0] !== templateItems || $[1] !== templates ? (t1 = [...templateItems, ...templates], $[0] = templateItems, $[1] = templates, $[2] = t1) : t1 = $[2];
  const getI18nText = useGetI18nText(t1);
  let t2;
  $[3] !== templateItems ? (t2 = {
    templateItems
  }, $[3] = templateItems, $[4] = t2) : t2 = $[4];
  const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions(t2);
  let t3;
  t3 = !isTemplatePermissionsLoading && templatePermissions?.every(_temp$f);
  const nothingGranted = t3;
  let t4;
  bb0: {
    if (!templatePermissions) {
      let t53;
      $[5] === Symbol.for("react.memo_cache_sentinel") ? (t53 = {}, $[5] = t53) : t53 = $[5], t4 = t53;
      break bb0;
    }
    let t52;
    $[6] !== templatePermissions ? (t52 = templatePermissions.reduce(_temp2$7, {}), $[6] = templatePermissions, $[7] = t52) : t52 = $[7], t4 = t52;
  }
  const permissionsById = t4;
  if (nothingGranted) {
    let t52;
    $[8] !== t ? (t52 = t("pane-header.disabled-created-button.aria-label"), $[8] = t, $[9] = t52) : t52 = $[9];
    let t62;
    $[10] !== t52 ? (t62 = /* @__PURE__ */ jsx(Button, { "aria-label": t52, icon: AddIcon, "data-testid": "action-intent-button", disabled: !0, mode: "bleed", tooltipProps: null }), $[10] = t52, $[11] = t62) : t62 = $[11];
    let t72;
    return $[12] !== isTemplatePermissionsLoading || $[13] !== t62 ? (t72 = /* @__PURE__ */ jsx(InsufficientPermissionsMessageTooltip, { context: "create-document-type", reveal: !0, loading: isTemplatePermissionsLoading, children: t62 }), $[12] = isTemplatePermissionsLoading, $[13] = t62, $[14] = t72) : t72 = $[14], t72;
  }
  if (templateItems.length === 1) {
    const firstItem = templateItems[0], disabled = !permissionsById[firstItem.id]?.granted;
    let t52;
    $[15] !== firstItem || $[16] !== schema || $[17] !== templates ? (t52 = getIntent(schema, templates, firstItem), $[15] = firstItem, $[16] = schema, $[17] = templates, $[18] = t52) : t52 = $[18];
    const intent = t52;
    if (!intent)
      return null;
    let t62;
    $[19] !== firstItem || $[20] !== getI18nText ? (t62 = getI18nText(firstItem), $[19] = firstItem, $[20] = getI18nText, $[21] = t62) : t62 = $[21];
    const t72 = firstItem.icon || AddIcon;
    let t82;
    $[22] !== disabled || $[23] !== t ? (t82 = disabled ? null : {
      content: t("pane-header.create-new-button.tooltip")
    }, $[22] = disabled, $[23] = t, $[24] = t82) : t82 = $[24];
    let t92;
    $[25] !== disabled || $[26] !== intent || $[27] !== t62.title || $[28] !== t72 || $[29] !== t82 ? (t92 = /* @__PURE__ */ jsx(IntentButton, { "aria-label": t62.title, icon: t72, intent, mode: "bleed", disabled, "data-testid": "action-intent-button", tooltipProps: t82 }), $[25] = disabled, $[26] = intent, $[27] = t62.title, $[28] = t72, $[29] = t82, $[30] = t92) : t92 = $[30];
    let t10;
    return $[31] !== disabled || $[32] !== isTemplatePermissionsLoading || $[33] !== t92 ? (t10 = /* @__PURE__ */ jsx(InsufficientPermissionsMessageTooltip, { reveal: disabled, loading: isTemplatePermissionsLoading, context: "create-document-type", children: t92 }), $[31] = disabled, $[32] = isTemplatePermissionsLoading, $[33] = t92, $[34] = t10) : t10 = $[34], t10;
  }
  let t5;
  $[35] !== t ? (t5 = t("pane-header.create-new-button.tooltip"), $[35] = t, $[36] = t5) : t5 = $[36];
  let t6;
  $[37] !== t5 ? (t6 = /* @__PURE__ */ jsx(Button, { icon: AddIcon, mode: "bleed", "data-testid": "multi-action-intent-button", tooltipProps: {
    content: t5
  } }), $[37] = t5, $[38] = t6) : t6 = $[38];
  let t7;
  if ($[39] !== getI18nText || $[40] !== isTemplatePermissionsLoading || $[41] !== permissionsById || $[42] !== schema || $[43] !== t || $[44] !== templateItems || $[45] !== templates) {
    let t82;
    $[47] !== getI18nText || $[48] !== isTemplatePermissionsLoading || $[49] !== permissionsById || $[50] !== schema || $[51] !== t || $[52] !== templates ? (t82 = (item, itemIndex) => {
      const disabled_0 = !permissionsById[item.id]?.granted, intent_0 = getIntent(schema, templates, item), template = templates.find((i) => i.id === item.templateId);
      if (!template || !intent_0)
        return null;
      const Link = forwardRef((linkProps, linkRef) => disabled_0 ? /* @__PURE__ */ jsx("button", { type: "button", disabled: !0, ...linkProps, ref: linkRef }) : /* @__PURE__ */ jsx(IntentLink, { ...linkProps, intent: intent_0.type, params: intent_0.params, ref: linkRef }));
      Link.displayName = "Link";
      const {
        title
      } = getI18nText({
        ...item,
        title: item.title || getI18nText(template).title
      });
      return /* @__PURE__ */ jsx(InsufficientPermissionsMessageTooltip, { context: "create-document-type", reveal: disabled_0, loading: isTemplatePermissionsLoading, children: /* @__PURE__ */ jsx(MenuItem, { as: Link, "data-as": disabled_0 ? "button" : "a", text: title, "aria-label": disabled_0 ? t("pane-header.disabled-created-button.aria-label") : title, disabled: disabled_0, "data-testid": `action-intent-button-${itemIndex}` }) }, item.id);
    }, $[47] = getI18nText, $[48] = isTemplatePermissionsLoading, $[49] = permissionsById, $[50] = schema, $[51] = t, $[52] = templates, $[53] = t82) : t82 = $[53], t7 = templateItems.map(t82), $[39] = getI18nText, $[40] = isTemplatePermissionsLoading, $[41] = permissionsById, $[42] = schema, $[43] = t, $[44] = templateItems, $[45] = templates, $[46] = t7;
  } else
    t7 = $[46];
  let t8;
  $[54] !== t7 ? (t8 = /* @__PURE__ */ jsx(Menu, { children: t7 }), $[54] = t7, $[55] = t8) : t8 = $[55];
  let t9;
  return $[56] !== t6 || $[57] !== t8 ? (t9 = /* @__PURE__ */ jsx(MenuButton, { button: t6, id: "create-menu", menu: t8, popover: POPOVER_PROPS }), $[56] = t6, $[57] = t8, $[58] = t9) : t9 = $[58], t9;
}
function _temp2$7(acc, permission_0) {
  return acc[permission_0.id] = permission_0, acc;
}
function _temp$f(permission) {
  return !permission.granted;
}
function isNonNullable(value) {
  return value != null;
}
const hashObject = (value) => {
  const sortObject = (v) => typeof v != "object" || !v ? v : Array.isArray(v) ? v.map(sortObject) : Object.entries(v).sort(([keyA], [keyB]) => keyA.localeCompare(keyB, "en"));
  return JSON.stringify(sortObject(((v) => JSON.parse(JSON.stringify(v)))(value)));
}, PaneHeaderActions = memo(function(props) {
  const {
    initialValueTemplateItems: initialValueTemplateItemsFromStructure = EMPTY_ARRAY$2,
    menuItems = EMPTY_ARRAY$2,
    menuItemGroups = EMPTY_ARRAY$2,
    actionHandlers = EMPTY_OBJECT
  } = props, templates = useTemplates(), handleAction = useCallback((item) => {
    if (typeof item.action == "string" && !(item.action in actionHandlers))
      return console.warn("No handler for action:", item.action), !1;
    const handler = (
      // eslint-disable-next-line no-nested-ternary
      typeof item.action == "function" ? item.action : typeof item.action == "string" ? actionHandlers[item.action] : null
    );
    return handler ? (handler(item.params), !0) : !1;
  }, [actionHandlers]), menuNodes = useMemo(() => resolveMenuNodes({
    actionHandler: handleAction,
    menuItemGroups,
    menuItems: menuItems.filter((item_0) => item_0.intent?.type !== "create")
  }), [handleAction, menuItemGroups, menuItems]), actionNodes = useMemo(() => menuNodes.filter(isMenuNodeButton), [menuNodes]), contextMenuNodes = useMemo(() => menuNodes.filter(isNotMenuNodeButton), [menuNodes]), initialValueTemplateItemFromMenuItems = useMemo(() => menuItems.map((item_1, menuItemIndex) => {
    if (item_1.intent?.type !== "create") return null;
    const {
      params
    } = item_1.intent;
    if (!params) return null;
    const intentParams = Array.isArray(params) ? params[0] : params, templateParams = Array.isArray(params) ? params[1] : void 0, templateId = intentParams.template || intentParams.type;
    if (!templateId) return null;
    const template = templates.find((t) => t.id === templateId);
    if (!template) return null;
    const initialDocumentId = intentParams.id;
    return {
      item: item_1,
      template,
      templateParams,
      menuItemIndex,
      initialDocumentId
    };
  }).filter(isNonNullable).map(({
    initialDocumentId: initialDocumentId_0,
    item: item_2,
    template: template_0,
    menuItemIndex: menuItemIndex_0,
    templateParams: templateParams_0
  }) => ({
    id: `menuItem${menuItemIndex_0}`,
    initialDocumentId: initialDocumentId_0,
    templateId: template_0.id,
    type: "initialValueTemplateItem",
    title: item_2.title || template_0.title,
    i18n: item_2.i18n || template_0.i18n,
    icon: item_2.icon,
    description: template_0.description,
    parameters: templateParams_0,
    schemaType: template_0.schemaType
  })), [menuItems, templates]), combinedInitialValueTemplates = useMemo(() => uniqBy([...initialValueTemplateItemFromMenuItems, ...initialValueTemplateItemsFromStructure], (item_3) => hashObject([item_3.initialDocumentId, item_3.templateId, item_3.parameters])), [initialValueTemplateItemFromMenuItems, initialValueTemplateItemsFromStructure]);
  return /* @__PURE__ */ jsxs(Flex, { gap: 1, children: [
    combinedInitialValueTemplates.length > 0 && /* @__PURE__ */ jsx(PaneHeaderCreateButton, { templateItems: combinedInitialValueTemplates }),
    actionNodes.map((node) => /* @__PURE__ */ jsx(PaneHeaderActionButton, { node }, node.key)),
    contextMenuNodes.length > 0 && /* @__PURE__ */ jsx(PaneContextMenuButton, { nodes: contextMenuNodes })
  ] });
});
function MissingSchemaType(props) {
  const $ = c(16), {
    t
  } = useTranslation(structureLocaleNamespace), {
    layout,
    value
  } = props;
  let t0;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = {
    Code: "code"
  }, $[0] = t0) : t0 = $[0];
  let t1;
  $[1] !== value._type ? (t1 = {
    documentType: value._type
  }, $[1] = value._type, $[2] = t1) : t1 = $[2];
  let t2;
  $[3] !== t || $[4] !== t1 ? (t2 = /* @__PURE__ */ jsx("em", { children: /* @__PURE__ */ jsx(Translate, { t, i18nKey: "pane-item.missing-schema-type.title", components: t0, values: t1 }) }), $[3] = t, $[4] = t1, $[5] = t2) : t2 = $[5];
  let t3;
  $[6] === Symbol.for("react.memo_cache_sentinel") ? (t3 = {
    Code: "code"
  }, $[6] = t3) : t3 = $[6];
  let t4;
  $[7] !== value._id ? (t4 = {
    documentId: value._id
  }, $[7] = value._id, $[8] = t4) : t4 = $[8];
  let t5;
  $[9] !== t || $[10] !== t4 ? (t5 = /* @__PURE__ */ jsx(Translate, { t, i18nKey: "pane-item.missing-schema-type.subtitle", components: t3, values: t4 }), $[9] = t, $[10] = t4, $[11] = t5) : t5 = $[11];
  let t6;
  return $[12] !== layout || $[13] !== t2 || $[14] !== t5 ? (t6 = /* @__PURE__ */ jsx(SanityDefaultPreview, { title: t2, subtitle: t5, media: _temp$e, layout }), $[12] = layout, $[13] = t2, $[14] = t5, $[15] = t6) : t6 = $[15], t6;
}
function _temp$e() {
  return /* @__PURE__ */ jsx(WarningOutlineIcon, {});
}
function getIconWithFallback(icon, schemaType, defaultIcon) {
  return icon === !1 ? !1 : icon || schemaType && schemaType.icon || defaultIcon || !1;
}
function PaneItem(props) {
  const $ = c(36), {
    icon,
    id,
    layout: t0,
    pressed,
    schemaType,
    selected,
    title,
    value,
    margin,
    marginBottom,
    marginTop
  } = props, layout = t0 === void 0 ? "default" : t0, schema = useSchema(), documentPreviewStore = useDocumentPreviewStore(), {
    ChildLink: ChildLink2
  } = usePaneRouter(), documentPresence = useDocumentPresence(id), hasSchemaType = !!(schemaType && schemaType.name && schema.get(schemaType.name)), [clicked, setClicked] = useState(!1);
  let t1;
  bb0: {
    if (value && isSanityDocument$1(value)) {
      if (!schemaType || !hasSchemaType) {
        let t24;
        $[0] !== value ? (t24 = /* @__PURE__ */ jsx(MissingSchemaType, { value }), $[0] = value, $[1] = t24) : t24 = $[1], t1 = t24;
        break bb0;
      }
      let t23;
      $[2] !== icon || $[3] !== schemaType ? (t23 = getIconWithFallback(icon, schemaType, DocumentIcon), $[2] = icon, $[3] = schemaType, $[4] = t23) : t23 = $[4];
      let t33;
      $[5] !== documentPresence || $[6] !== documentPreviewStore || $[7] !== layout || $[8] !== schemaType || $[9] !== t23 || $[10] !== value ? (t33 = /* @__PURE__ */ jsx(PaneItemPreview, { documentPreviewStore, icon: t23, layout, schemaType, value, presence: documentPresence }), $[5] = documentPresence, $[6] = documentPreviewStore, $[7] = layout, $[8] = schemaType, $[9] = t23, $[10] = value, $[11] = t33) : t33 = $[11], t1 = t33;
      break bb0;
    }
    let t22;
    $[12] === Symbol.for("react.memo_cache_sentinel") ? (t22 = {
      opacity: 0.5
    }, $[12] = t22) : t22 = $[12];
    let t32;
    $[13] === Symbol.for("react.memo_cache_sentinel") ? (t32 = /* @__PURE__ */ jsx(Box, { style: t22, children: /* @__PURE__ */ jsx(Text, { muted: !0, size: 1, children: /* @__PURE__ */ jsx(ChevronRightIcon, {}) }) }), $[13] = t32) : t32 = $[13];
    let t42;
    $[14] !== icon || $[15] !== schemaType ? (t42 = getIconWithFallback(icon, schemaType, FolderIcon), $[14] = icon, $[15] = schemaType, $[16] = t42) : t42 = $[16];
    let t52;
    $[17] !== t42 || $[18] !== title ? (t52 = /* @__PURE__ */ jsx(SanityDefaultPreview, { status: t32, icon: t42, layout: "compact", title }), $[17] = t42, $[18] = title, $[19] = t52) : t52 = $[19], t1 = t52;
  }
  const preview = t1;
  let t2, t3;
  $[20] !== ChildLink2 || $[21] !== id ? (t3 = function(linkProps) {
    return /* @__PURE__ */ jsx(ChildLink2, { ...linkProps, childId: id });
  }, $[20] = ChildLink2, $[21] = id, $[22] = t3) : t3 = $[22], t2 = t3;
  const Link = t2;
  let t4;
  $[23] === Symbol.for("react.memo_cache_sentinel") ? (t4 = (e) => {
    if (e.metaKey) {
      setClicked(!1);
      return;
    }
    setClicked(!0);
  }, $[23] = t4) : t4 = $[23];
  const handleClick = t4;
  let t5;
  $[24] === Symbol.for("react.memo_cache_sentinel") ? (t5 = () => setClicked(!1), $[24] = t5) : t5 = $[24];
  let t6;
  $[25] !== selected ? (t6 = [selected], $[25] = selected, $[26] = t6) : t6 = $[26], useEffect(t5, t6);
  const t7 = `pane-item-${title}`, t8 = Link, t9 = selected || clicked;
  let t10;
  return $[27] !== margin || $[28] !== marginBottom || $[29] !== marginTop || $[30] !== pressed || $[31] !== preview || $[32] !== t7 || $[33] !== t8 || $[34] !== t9 ? (t10 = /* @__PURE__ */ jsx(PreviewCard, { "data-testid": t7, __unstable_focusRing: !0, as: t8, "data-as": "a", margin, marginBottom, marginTop, onClick: handleClick, pressed, radius: 2, selected: t9, sizing: "border", tabIndex: -1, tone: "inherit", children: preview }), $[27] = margin, $[28] = marginBottom, $[29] = marginTop, $[30] = pressed, $[31] = preview, $[32] = t7, $[33] = t8, $[34] = t9, $[35] = t10) : t10 = $[35], t10;
}
const RenderActionCollectionState = memo((props) => {
  const $ = c(6), {
    actions,
    children,
    actionProps,
    onActionComplete,
    group
  } = props;
  let t0;
  return $[0] !== actionProps || $[1] !== actions || $[2] !== children || $[3] !== group || $[4] !== onActionComplete ? (t0 = /* @__PURE__ */ jsx(GetHookCollectionState, { onReset: onActionComplete, hooks: actions, args: actionProps, group, children }), $[0] = actionProps, $[1] = actions, $[2] = children, $[3] = group, $[4] = onActionComplete, $[5] = t0) : t0 = $[5], t0;
});
RenderActionCollectionState.displayName = "Memo(RenderActionCollectionState)";
const RenderBadgeCollectionState = memo((props) => {
  const $ = c(4), {
    badges,
    children,
    badgeProps
  } = props;
  let t0;
  return $[0] !== badgeProps || $[1] !== badges || $[2] !== children ? (t0 = /* @__PURE__ */ jsx(GetHookCollectionState, { hooks: badges, args: badgeProps, children }), $[0] = badgeProps, $[1] = badges, $[2] = children, $[3] = t0) : t0 = $[3], t0;
});
RenderBadgeCollectionState.displayName = "Memo(RenderBadgeCollectionState)";
function ErrorPane(props) {
  const $ = c(12), {
    children,
    currentMinWidth,
    flex,
    minWidth,
    paneKey,
    title: t0,
    tone: t1
  } = props, title = t0 === void 0 ? "Error" : t0, tone = t1 === void 0 ? "critical" : t1;
  let t2;
  $[0] !== title ? (t2 = /* @__PURE__ */ jsx(PaneHeader$1, { title }), $[0] = title, $[1] = t2) : t2 = $[1];
  let t3;
  $[2] !== children ? (t3 = /* @__PURE__ */ jsx(PaneContent, { overflow: "auto", children: /* @__PURE__ */ jsx(Box, { paddingX: 4, paddingY: 5, children }) }), $[2] = children, $[3] = t3) : t3 = $[3];
  let t4;
  return $[4] !== currentMinWidth || $[5] !== flex || $[6] !== minWidth || $[7] !== paneKey || $[8] !== t2 || $[9] !== t3 || $[10] !== tone ? (t4 = /* @__PURE__ */ jsxs(Pane, { currentMinWidth, flex, id: paneKey, minWidth, tone, children: [
    t2,
    t3
  ] }), $[4] = currentMinWidth, $[5] = flex, $[6] = minWidth, $[7] = paneKey, $[8] = t2, $[9] = t3, $[10] = tone, $[11] = t4) : t4 = $[11], t4;
}
function getWaitMessages(path) {
  const thresholds = [{
    ms: 300,
    messageKey: "panes.resolving.default-message"
  }, {
    ms: 5e3,
    messageKey: "panes.resolving.slow-resolve-message"
  }];
  if (isDev) {
    const message = ["Check console for errors?", "Is your observable/promise resolving?", path.length > 0 ? `Structure path: ${path.join(" \u279D ")}` : ""];
    thresholds.push({
      ms: 1e4,
      message: message.join(`
`)
    });
  }
  const src = of(null);
  return merge(...thresholds.map((threshold) => src.pipe(mapTo("messageKey" in threshold ? {
    messageKey: threshold.messageKey
  } : {
    message: threshold.message
  }), delay(threshold.ms))));
}
const DEFAULT_MESSAGE_KEY = "panes.resolving.default-message", Content$1 = styled(Flex)`
  opacity: 0;
  transition: opacity 200ms;

  &[data-mounted] {
    opacity: 1;
  }
`, LoadingPane = memo((props) => {
  const $ = c(28), {
    delay: t0,
    flex,
    message: t1,
    minWidth,
    paneKey,
    path,
    selected,
    title,
    tone
  } = props, delay2 = t0 === void 0 ? 300 : t0, messageProp = t1 === void 0 ? getWaitMessages : t1, {
    t
  } = useTranslation(structureLocaleNamespace);
  let t2;
  bb0: {
    if (typeof messageProp == "function") {
      let t32;
      $[0] !== messageProp || $[1] !== path ? (t32 = messageProp(path ? path.split(";") : []), $[0] = messageProp, $[1] = path, $[2] = t32) : t32 = $[2], t2 = t32;
      break bb0;
    }
    t2 = messageProp;
  }
  const resolvedMessage = t2;
  let t3;
  $[3] !== resolvedMessage || $[4] !== t ? (t3 = () => typeof resolvedMessage == "string" ? resolvedMessage : t(DEFAULT_MESSAGE_KEY), $[3] = resolvedMessage, $[4] = t, $[5] = t3) : t3 = $[5];
  const [currentMessage, setCurrentMessage] = useState(t3);
  let t4, t5;
  $[6] !== resolvedMessage || $[7] !== t ? (t4 = () => {
    if (typeof resolvedMessage != "object" || typeof resolvedMessage.subscribe != "function")
      return;
    const sub = resolvedMessage.subscribe((message) => {
      setCurrentMessage("messageKey" in message ? t(message.messageKey) : message.message);
    });
    return () => sub.unsubscribe();
  }, t5 = [resolvedMessage, t], $[6] = resolvedMessage, $[7] = t, $[8] = t4, $[9] = t5) : (t4 = $[8], t5 = $[9]), useEffect(t4, t5);
  const [contentElement, setContentElement] = useState(null), [mounted, setMounted] = useState(!1);
  let t6, t7;
  $[10] !== contentElement ? (t6 = () => {
    if (contentElement)
      return _raf2(() => setMounted(!0));
  }, t7 = [contentElement], $[10] = contentElement, $[11] = t6, $[12] = t7) : (t6 = $[11], t7 = $[12]), useEffect(t6, t7);
  const t8 = mounted ? "" : void 0, t9 = title || currentMessage;
  let t10;
  $[13] !== t9 ? (t10 = /* @__PURE__ */ jsx(LoadingBlock, { showText: !0, title: t9 }), $[13] = t9, $[14] = t10) : t10 = $[14];
  let t11;
  $[15] !== t10 || $[16] !== t8 ? (t11 = /* @__PURE__ */ jsx(Content$1, { align: "center", "data-mounted": t8, direction: "column", height: "fill", justify: "center", ref: setContentElement, children: t10 }), $[15] = t10, $[16] = t8, $[17] = t11) : t11 = $[17];
  const content = t11;
  let t12;
  $[18] !== content || $[19] !== delay2 ? (t12 = /* @__PURE__ */ jsx(PaneContent, { children: content }), $[18] = content, $[19] = delay2, $[20] = t12) : t12 = $[20];
  let t13;
  return $[21] !== flex || $[22] !== minWidth || $[23] !== paneKey || $[24] !== selected || $[25] !== t12 || $[26] !== tone ? (t13 = /* @__PURE__ */ jsx(Pane, { flex, id: paneKey, minWidth, selected, tone, children: t12 }), $[21] = flex, $[22] = minWidth, $[23] = paneKey, $[24] = selected, $[25] = t12, $[26] = tone, $[27] = t13) : t13 = $[27], t13;
});
LoadingPane.displayName = "Memo(LoadingPane)";
function useDocumentPane() {
  const documentPane = useContext(DocumentPaneContext);
  if (!documentPane)
    throw new Error("DocumentPane: missing context value");
  return documentPane;
}
function CommentsWrapper(props) {
  const $ = c(8), {
    children,
    documentId,
    documentType
  } = props;
  let t0;
  $[0] !== children || $[1] !== documentId || $[2] !== documentType ? (t0 = /* @__PURE__ */ jsx(CommentsProviderWrapper, { documentId, documentType, children }), $[0] = children, $[1] = documentId, $[2] = documentType, $[3] = t0) : t0 = $[3];
  let t1;
  return $[4] !== documentId || $[5] !== documentType || $[6] !== t0 ? (t1 = /* @__PURE__ */ jsx(CommentsEnabledProvider, { documentId, documentType, children: t0 }), $[4] = documentId, $[5] = documentType, $[6] = t0, $[7] = t1) : t1 = $[7], t1;
}
function CommentsProviderWrapper(props) {
  const $ = c(23), {
    children,
    documentId,
    documentType
  } = props, {
    enabled
  } = useCommentsEnabled(), {
    connectionState,
    onPathOpen,
    inspector,
    openInspector
  } = useDocumentPane(), {
    params,
    setParams,
    createPathWithParams
  } = usePaneRouter(), selectedCommentId = params?.comment, paramsRef = useRef(params);
  let t0, t1;
  $[0] !== params ? (t0 = () => {
    paramsRef.current = params;
  }, t1 = [params], $[0] = params, $[1] = t0, $[2] = t1) : (t0 = $[1], t1 = $[2]), useLayoutEffect(t0, t1);
  let t2;
  $[3] !== createPathWithParams ? (t2 = (commentId) => {
    const path = createPathWithParams({
      ...paramsRef.current,
      comment: commentId,
      inspect: COMMENTS_INSPECTOR_NAME
    });
    return `${window.location.origin}${path}`;
  }, $[3] = createPathWithParams, $[4] = t2) : t2 = $[4];
  const getCommentLink = t2;
  let t3;
  $[5] !== setParams ? (t3 = () => {
    setParams({
      ...paramsRef.current,
      comment: void 0
    });
  }, $[5] = setParams, $[6] = t3) : t3 = $[6];
  const handleClearSelectedComment = t3;
  let t4;
  $[7] !== inspector?.name || $[8] !== openInspector ? (t4 = () => {
    inspector?.name !== COMMENTS_INSPECTOR_NAME && openInspector(COMMENTS_INSPECTOR_NAME);
  }, $[7] = inspector?.name, $[8] = openInspector, $[9] = t4) : t4 = $[9];
  const handleOpenCommentsInspector = t4;
  if (!enabled) {
    let t52;
    return $[10] !== children ? (t52 = /* @__PURE__ */ jsx(Fragment, { children }), $[10] = children, $[11] = t52) : t52 = $[11], t52;
  }
  const t5 = inspector?.name === COMMENTS_INSPECTOR_NAME, t6 = connectionState === "connecting";
  let t7;
  return $[12] !== children || $[13] !== documentId || $[14] !== documentType || $[15] !== getCommentLink || $[16] !== handleClearSelectedComment || $[17] !== handleOpenCommentsInspector || $[18] !== onPathOpen || $[19] !== selectedCommentId || $[20] !== t5 || $[21] !== t6 ? (t7 = /* @__PURE__ */ jsx(CommentsProvider, { documentId, documentType, getCommentLink, isCommentsOpen: t5, isConnecting: t6, onClearSelectedComment: handleClearSelectedComment, onCommentsOpen: handleOpenCommentsInspector, onPathOpen, selectedCommentId, sortOrder: "desc", type: "field", children }), $[12] = children, $[13] = documentId, $[14] = documentType, $[15] = getCommentLink, $[16] = handleClearSelectedComment, $[17] = handleOpenCommentsInspector, $[18] = onPathOpen, $[19] = selectedCommentId, $[20] = t5, $[21] = t6, $[22] = t7) : t7 = $[22], t7;
}
const _DEBUG = !1, EMPTY_PARAMS$2 = {}, LOADING_PANE = Symbol("LOADING_PANE"), DOCUMENT_PANEL_PORTAL_ELEMENT = "documentPanelPortalElement";
function useStructureTool() {
  const structureTool2 = useContext(StructureToolContext);
  if (!structureTool2)
    throw new Error("StructureTool: missing context value");
  return structureTool2;
}
const DOCUMENT_PANEL_MIN_WIDTH = 320, DOCUMENT_PANEL_INITIAL_MIN_WIDTH = 600, DOCUMENT_INSPECTOR_MIN_WIDTH = 320, DOCUMENT_INSPECTOR_MAX_WIDTH = 540, EMPTY_PARAMS$1 = {}, INSPECT_ACTION_PREFIX = "inspect:", DEFAULT_MENU_ITEM_GROUPS = [{
  id: "inspectors"
}, {
  id: "links"
}], HISTORY_INSPECTOR_NAME = "sanity/structure/history", VALIDATION_INSPECTOR_NAME = "sanity/structure/validation";
function DocumentInspectorMenuItemsResolver(props) {
  const {
    documentId,
    documentType,
    inspectors: inspectors2,
    onMenuItems
  } = props, len = inspectors2.length, lenRef = useRef(len), [menuItems, setMenuItems] = useState(() => Array.from(new Array(len))), menuItemsRef = useRef(menuItems);
  useEffect(() => {
    if (lenRef.current !== len) {
      const newFieldActions = Array.from(new Array(len));
      for (let i = 0; i < len; i++)
        newFieldActions[i] = menuItemsRef.current[i];
      lenRef.current = len, setMenuItems(() => (menuItemsRef.current = newFieldActions, newFieldActions));
    }
  }, [len]);
  const setMenuItem = useCallback((index, node) => {
    setMenuItems((prev) => {
      const next = [...prev];
      return next[index] = node, menuItemsRef.current = next, next;
    });
  }, []);
  useEffect(() => {
    onMenuItems(menuItems.filter(Boolean));
  }, [menuItems, onMenuItems]);
  const InspectorMenuItems = useMemo(() => inspectors2.map((inspector, index_0) => inspector.useMenuItem ? [defineInspectorMenuItemComponent({
    documentId,
    documentType,
    index: index_0,
    setMenuItem,
    useMenuItem: inspector.useMenuItem
  }), inspector.name] : [() => null, ""]), [documentId, documentType, inspectors2, setMenuItem]);
  return /* @__PURE__ */ jsx(Fragment, { children: InspectorMenuItems.map(([InspectorMenuItem, key]) => key && /* @__PURE__ */ jsx(InspectorMenuItem, {}, key)) });
}
function defineInspectorMenuItemComponent({
  documentId,
  documentType,
  index,
  setMenuItem,
  useMenuItem: useMenuItem2
}) {
  return memo(function() {
    const $ = c(4);
    let t0;
    $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = {
      documentId,
      documentType
    }, $[0] = t0) : t0 = $[0];
    const menuItem = useMenuItem2(t0), node = useUnique(menuItem);
    let t1, t2;
    return $[1] !== node ? (t1 = () => {
      setMenuItem(index, node);
    }, t2 = [node], $[1] = node, $[2] = t1, $[3] = t2) : (t1 = $[2], t2 = $[3]), useEffect(t1, t2), null;
  });
}
function useDocumentTitle() {
  const $ = c(13), {
    connectionState,
    schemaType,
    title,
    editState
  } = useDocumentPane(), documentValue = editState?.draft || editState?.published, subscribed = !!documentValue;
  let t0;
  $[0] !== documentValue || $[1] !== schemaType || $[2] !== subscribed ? (t0 = {
    enabled: subscribed,
    schemaType,
    value: documentValue
  }, $[0] = documentValue, $[1] = schemaType, $[2] = subscribed, $[3] = t0) : t0 = $[3];
  const {
    error,
    value
  } = unstable_useValuePreview(t0);
  if (connectionState === "connecting" && !subscribed) {
    let t12;
    return $[4] === Symbol.for("react.memo_cache_sentinel") ? (t12 = {
      error: void 0,
      title: void 0
    }, $[4] = t12) : t12 = $[4], t12;
  }
  if (title) {
    let t12;
    return $[5] !== title ? (t12 = {
      error: void 0,
      title
    }, $[5] = title, $[6] = t12) : t12 = $[6], t12;
  }
  if (!documentValue) {
    const t12 = `New ${schemaType?.title || schemaType?.name}`;
    let t22;
    return $[7] !== t12 ? (t22 = {
      error: void 0,
      title: t12
    }, $[7] = t12, $[8] = t22) : t22 = $[8], t22;
  }
  if (error) {
    const t12 = `Error: ${error.message}`;
    let t22;
    return $[9] !== t12 ? (t22 = {
      error: t12,
      title: void 0
    }, $[9] = t12, $[10] = t22) : t22 = $[10], t22;
  }
  const t1 = value?.title;
  let t2;
  return $[11] !== t1 ? (t2 = {
    error: void 0,
    title: t1
  }, $[11] = t1, $[12] = t2) : t2 = $[12], t2;
}
const IGNORE_OPS = ["patch", "commit"], DocumentOperationResults = memo(function() {
  const $ = c(12), {
    push: pushToast
  } = useToast(), {
    documentId,
    documentType,
    value: documentPaneValue
  } = useDocumentPane(), documentTitleInfo = useDocumentTitle(), titleError = documentTitleInfo.error, event = useDocumentOperationEvent(documentId, documentType), prevEvent = useRef(event), paneRouter = usePaneRouter(), {
    t
  } = useTranslation(structureLocaleNamespace);
  let t0;
  bb0: {
    if (!documentTitleInfo.title && !titleError && !IGNORE_OPS.includes(event?.op) && typeof documentPaneValue.title == "string" && event?.type === "success") {
      t0 = documentPaneValue.title;
      break bb0;
    }
    t0 = documentTitleInfo.title;
  }
  const title = t0;
  let t1;
  $[0] !== t || $[1] !== title ? (t1 = title || t("panes.document-operation-results.operation-undefined-title"), $[0] = t, $[1] = title, $[2] = t1) : t1 = $[2];
  const documentTitleBase = t1;
  let t2;
  $[3] !== documentTitleBase ? (t2 = documentTitleBase.length > 25 ? `${documentTitleBase.slice(0, 25)}...` : documentTitleBase, $[3] = documentTitleBase, $[4] = t2) : t2 = $[4];
  const documentTitle = t2;
  let t3, t4;
  return $[5] !== documentTitle || $[6] !== event || $[7] !== paneRouter || $[8] !== pushToast || $[9] !== t ? (t3 = () => {
    if (!event || event === prevEvent.current)
      return;
    let cleanupId;
    return event.type === "error" && pushToast({
      closable: !0,
      duration: 3e4,
      status: "error",
      title: t("panes.document-operation-results.operation-error", {
        context: event.op
      }),
      description: /* @__PURE__ */ jsxs("details", { children: [
        /* @__PURE__ */ jsx("summary", { children: t("panes.document-operation-results.error.summary.title") }),
        event.error.message
      ] })
    }), event.type === "success" && !IGNORE_OPS.includes(event.op) && pushToast({
      closable: !0,
      status: "success",
      title: /* @__PURE__ */ jsx(Translate, { context: event.op, i18nKey: "panes.document-operation-results.operation-success", t, values: {
        op: event.op,
        title: documentTitle
      }, components: {
        Strong: "strong"
      } })
    }), event.type === "success" && event.op === "delete" && (cleanupId = setTimeout(() => paneRouter.closeCurrentAndAfter(), 0)), prevEvent.current = event, () => clearTimeout(cleanupId);
  }, t4 = [event, paneRouter, pushToast, t, documentTitle], $[5] = documentTitle, $[6] = event, $[7] = paneRouter, $[8] = pushToast, $[9] = t, $[10] = t3, $[11] = t4) : (t3 = $[10], t4 = $[11]), useEffect(t3, t4), null;
}), isLiveEditEnabled = (schemaType) => schemaType.liveEdit === !0, Root$4 = styled(Card)({
  position: "relative",
  zIndex: 1,
  lineHeight: 0
});
function DocumentInspectorHeader(props) {
  const $ = c(25);
  let children, closeButtonLabel, forwardedAs, onClose, restProps, title;
  $[0] !== props ? ({
    as: forwardedAs,
    children,
    closeButtonLabel,
    onClose,
    title,
    ...restProps
  } = props, $[0] = props, $[1] = children, $[2] = closeButtonLabel, $[3] = forwardedAs, $[4] = onClose, $[5] = restProps, $[6] = title) : (children = $[1], closeButtonLabel = $[2], forwardedAs = $[3], onClose = $[4], restProps = $[5], title = $[6]);
  const {
    t
  } = useTranslation(structureLocaleNamespace);
  let t0;
  $[7] !== title ? (t0 = /* @__PURE__ */ jsx(Box, { flex: 1, padding: 3, children: /* @__PURE__ */ jsx(Text, { as: "h1", size: 1, weight: "medium", children: title }) }), $[7] = title, $[8] = t0) : t0 = $[8];
  let t1;
  $[9] !== t ? (t1 = t("document-inspector.close-button.tooltip"), $[9] = t, $[10] = t1) : t1 = $[10];
  let t2;
  $[11] !== t1 ? (t2 = {
    content: t1
  }, $[11] = t1, $[12] = t2) : t2 = $[12];
  let t3;
  $[13] !== closeButtonLabel || $[14] !== onClose || $[15] !== t2 ? (t3 = /* @__PURE__ */ jsx(Box, { flex: "none", padding: 1, children: /* @__PURE__ */ jsx(Button, { "aria-label": closeButtonLabel, icon: CloseIcon, mode: "bleed", onClick: onClose, tooltipProps: t2 }) }), $[13] = closeButtonLabel, $[14] = onClose, $[15] = t2, $[16] = t3) : t3 = $[16];
  let t4;
  $[17] !== t0 || $[18] !== t3 ? (t4 = /* @__PURE__ */ jsxs(Flex, { padding: 2, children: [
    t0,
    t3
  ] }), $[17] = t0, $[18] = t3, $[19] = t4) : t4 = $[19];
  let t5;
  return $[20] !== children || $[21] !== forwardedAs || $[22] !== restProps || $[23] !== t4 ? (t5 = /* @__PURE__ */ jsxs(Root$4, { ...restProps, as: forwardedAs, children: [
    t4,
    children
  ] }), $[20] = children, $[21] = forwardedAs, $[22] = restProps, $[23] = t4, $[24] = t5) : t5 = $[24], t5;
}
const Root$3 = styled.div`
  position: absolute;
  top: 0;
  left: -4px;
  bottom: 0;
  width: 9px;
  z-index: 201;
  cursor: ew-resize;

  /* Border */
  & > span:nth-child(1) {
    display: block;
    border-left: 1px solid var(--card-border-color);
    position: absolute;
    top: 0;
    left: 4px;
    bottom: 0;
    transition: opacity 200ms;
  }

  /* Hover effect */
  & > span:nth-child(2) {
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    width: 9px;
    bottom: 0;
    background-color: var(--card-border-color);
    opacity: 0;
    transition: opacity 150ms;
  }

  @media (hover: hover) {
    &:hover > span:nth-child(2) {
      opacity: 0.2;
    }
  }
`;
function Resizer(props) {
  const $ = c(7), {
    onResize,
    onResizeStart
  } = props, mouseXRef = useRef(0);
  let t0;
  $[0] !== onResize || $[1] !== onResizeStart ? (t0 = (event) => {
    event.preventDefault(), mouseXRef.current = event.pageX, onResizeStart();
    const handleMouseMove = (e) => {
      e.preventDefault(), onResize(e.pageX - mouseXRef.current);
    }, handleMouseUp = () => {
      window.removeEventListener("mousemove", handleMouseMove), window.removeEventListener("mouseup", handleMouseUp);
    };
    window.addEventListener("mousemove", handleMouseMove), window.addEventListener("mouseup", handleMouseUp);
  }, $[0] = onResize, $[1] = onResizeStart, $[2] = t0) : t0 = $[2];
  const handleMouseDown = t0;
  let t1, t2;
  $[3] === Symbol.for("react.memo_cache_sentinel") ? (t1 = /* @__PURE__ */ jsx("span", {}), t2 = /* @__PURE__ */ jsx("span", {}), $[3] = t1, $[4] = t2) : (t1 = $[3], t2 = $[4]);
  let t3;
  return $[5] !== handleMouseDown ? (t3 = /* @__PURE__ */ jsxs(Root$3, { onMouseDown: handleMouseDown, children: [
    t1,
    t2
  ] }), $[5] = handleMouseDown, $[6] = t3) : t3 = $[6], t3;
}
const Root$2 = styled(Box)`
  position: relative;
  flex: 1;
  padding-left: 1px;
`;
function Resizable(props) {
  const $ = c(24);
  let children, forwardedAs, maxWidth, minWidth, restProps;
  $[0] !== props ? ({
    as: forwardedAs,
    children,
    minWidth,
    maxWidth,
    ...restProps
  } = props, $[0] = props, $[1] = children, $[2] = forwardedAs, $[3] = maxWidth, $[4] = minWidth, $[5] = restProps) : (children = $[1], forwardedAs = $[2], maxWidth = $[3], minWidth = $[4], restProps = $[5]);
  const [element, setElement] = useState(null), elementWidthRef = useRef(), [targetWidth, setTargetWidth] = useState();
  let t0;
  $[6] !== element?.offsetWidth ? (t0 = () => {
    elementWidthRef.current = element?.offsetWidth;
  }, $[6] = element?.offsetWidth, $[7] = t0) : t0 = $[7];
  const handleResizeStart = t0;
  let t1;
  $[8] !== maxWidth || $[9] !== minWidth ? (t1 = (deltaX) => {
    const w = elementWidthRef.current;
    w && setTargetWidth(Math.min(Math.max(w - deltaX, minWidth), maxWidth));
  }, $[8] = maxWidth, $[9] = minWidth, $[10] = t1) : t1 = $[10];
  const handleResize = t1;
  let t2, t3;
  $[11] !== maxWidth || $[12] !== minWidth || $[13] !== targetWidth ? (t3 = targetWidth ? {
    flex: "none",
    width: targetWidth
  } : {
    minWidth,
    maxWidth
  }, $[11] = maxWidth, $[12] = minWidth, $[13] = targetWidth, $[14] = t3) : t3 = $[14], t2 = t3;
  const style = t2;
  let t4;
  $[15] !== handleResize || $[16] !== handleResizeStart ? (t4 = /* @__PURE__ */ jsx(Resizer, { onResize: handleResize, onResizeStart: handleResizeStart }), $[15] = handleResize, $[16] = handleResizeStart, $[17] = t4) : t4 = $[17];
  let t5;
  return $[18] !== children || $[19] !== forwardedAs || $[20] !== restProps || $[21] !== style || $[22] !== t4 ? (t5 = /* @__PURE__ */ jsxs(Root$2, { as: forwardedAs, ...restProps, ref: setElement, style, children: [
    children,
    t4
  ] }), $[18] = children, $[19] = forwardedAs, $[20] = restProps, $[21] = style, $[22] = t4, $[23] = t5) : t5 = $[23], t5;
}
function DocumentInspectorPanel(props) {
  const $ = c(14), {
    documentId,
    documentType,
    flex
  } = props, {
    collapsed
  } = usePane(), {
    closeInspector,
    inspector
  } = useDocumentPane(), {
    features
  } = useStructureTool();
  let t0;
  $[0] !== closeInspector || $[1] !== inspector ? (t0 = () => {
    inspector && closeInspector(inspector.name);
  }, $[0] = closeInspector, $[1] = inspector, $[2] = t0) : t0 = $[2];
  const handleClose = t0;
  if (collapsed || !inspector)
    return null;
  let t1;
  $[3] !== documentId || $[4] !== documentType || $[5] !== handleClose || $[6] !== inspector.component ? (t1 = createElement(inspector.component, {
    onClose: handleClose,
    documentId,
    documentType
  }), $[3] = documentId, $[4] = documentType, $[5] = handleClose, $[6] = inspector.component, $[7] = t1) : t1 = $[7];
  const element = t1;
  if (features.resizablePanes) {
    let t22;
    return $[8] !== element || $[9] !== flex ? (t22 = /* @__PURE__ */ jsx(Resizable, { as: "aside", "data-ui": "DocumentInspectorPanel", flex, maxWidth: DOCUMENT_INSPECTOR_MAX_WIDTH, minWidth: DOCUMENT_INSPECTOR_MIN_WIDTH, children: element }), $[8] = element, $[9] = flex, $[10] = t22) : t22 = $[10], t22;
  }
  let t2;
  return $[11] !== element || $[12] !== flex ? (t2 = /* @__PURE__ */ jsx(Box, { as: "aside", "data-ui": "DocumentInspectorPanel", flex, children: element }), $[11] = element, $[12] = flex, $[13] = t2) : t2 = $[13], t2;
}
const STRUCTURE_TOOL_NAMESPACE = "studio.structure-tool";
function useStructureToolSetting(namespace, key, defaultValue) {
  const $ = c(16), keyValueStore = useKeyValueStore();
  let t0;
  $[0] !== key || $[1] !== namespace ? (t0 = [STRUCTURE_TOOL_NAMESPACE, namespace, key].filter(Boolean), $[0] = key, $[1] = namespace, $[2] = t0) : t0 = $[2];
  const keyValueStoreKey = t0.join(".");
  let t1, t2;
  if ($[3] !== defaultValue || $[4] !== keyValueStore || $[5] !== keyValueStoreKey) {
    let t32;
    $[7] !== defaultValue ? (t32 = (value) => value === null ? defaultValue : value, $[7] = defaultValue, $[8] = t32) : t32 = $[8], t2 = keyValueStore.getKey(keyValueStoreKey).pipe(map(t32)), $[3] = defaultValue, $[4] = keyValueStore, $[5] = keyValueStoreKey, $[6] = t2;
  } else
    t2 = $[6];
  t1 = t2;
  const value_0 = useObservable(t1, defaultValue);
  let t3;
  $[9] !== keyValueStore || $[10] !== keyValueStoreKey || $[11] !== value_0 ? (t3 = (newValue) => {
    newValue !== value_0 && keyValueStore.setKey(keyValueStoreKey, newValue);
  }, $[9] = keyValueStore, $[10] = keyValueStoreKey, $[11] = value_0, $[12] = t3) : t3 = $[12];
  const set = t3;
  let t4, t5;
  return $[13] !== set || $[14] !== value_0 ? (t5 = [value_0, set], $[13] = set, $[14] = value_0, $[15] = t5) : t5 = $[15], t4 = t5, t4;
}
const VIEW_MODE_PARSED = {
  id: "parsed",
  title: "document-inspector.view-mode.parsed"
}, VIEW_MODE_RAW = {
  id: "raw",
  title: "document-inspector.view-mode.raw-json"
}, VIEW_MODES = [VIEW_MODE_PARSED, VIEW_MODE_RAW], lru = new QuickLRU({
  maxSize: 1e3
});
function isExpanded(keyPath, value) {
  const cached = lru.get(keyPath);
  return cached === void 0 ? (lru.set(keyPath, Array.isArray(value) || isRecord(value)), isExpanded(keyPath, value)) : cached;
}
function toggleExpanded(event) {
  const {
    path
  } = event, current = lru.get(path);
  current !== void 0 && lru.set(path, !current);
}
function selectElement(element) {
  const sel = window.getSelection();
  if (sel) {
    const range = document.createRange();
    sel.removeAllRanges(), range.selectNodeContents(element), sel.addRange(range);
  }
}
function select(event) {
  selectElement(event.currentTarget);
}
function maybeSelectAll(event) {
  event.keyCode === 65 && (event.metaKey || event.ctrlKey) && (event.preventDefault(), selectElement(event.currentTarget));
}
function isDocumentLike(value) {
  return isRecord(value) && isString$1(value._id) && isString$1(value._type);
}
const JSONInspectorWrapper = styled.div(({
  theme
}) => {
  const {
    color,
    fonts,
    space
  } = theme.sanity;
  return css`
    & .json-inspector,
    & .json-inspector .json-inspector__selection {
      font-family: ${fonts.code.family};
      font-size: ${fonts.code.sizes[1].fontSize}px;
      line-height: ${fonts.code.sizes[1].lineHeight}px;
      color: var(--card-code-fg-color);
    }

    & .json-inspector .json-inspector__leaf {
      padding-left: ${rem(space[4])};
    }

    & .json-inspector .json-inspector__leaf.json-inspector__leaf_root {
      padding-top: ${rem(space[3])};
      padding-left: 0;
    }

    & .json-inspector > .json-inspector__leaf_root > .json-inspector__line > .json-inspector__key {
      display: none;
    }

    & .json-inspector .json-inspector__line {
      display: block;
      position: relative;
      cursor: default;
    }

    & .json-inspector .json-inspector__line::after {
      content: '';
      position: absolute;
      top: 0;
      left: -200px;
      right: -50px;
      bottom: 0;
      z-index: -1;
      pointer-events: none;
    }

    & .json-inspector .json-inspector__line:hover::after {
      background: var(--card-code-bg-color);
    }

    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line {
      cursor: pointer;
    }

    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line::before {
      content: '▸ ';
      margin-left: calc(0 - ${rem(space[4])} + 3px);
      font-size: ${fonts.code.sizes[1].fontSize}px;
      line-height: ${fonts.code.sizes[1].lineHeight}px;
    }

    &
      .json-inspector
      .json-inspector__leaf_expanded.json-inspector__leaf_composite
      > .json-inspector__line::before {
      content: '▾ ';
      font-size: ${fonts.code.sizes[1].fontSize}px;
      line-height: ${fonts.code.sizes[1].lineHeight}px;
    }

    & .json-inspector .json-inspector__radio,
    & .json-inspector .json-inspector__flatpath {
      display: none;
    }

    & .json-inspector .json-inspector__value {
      margin-left: ${rem(space[4] / 2)};
    }

    &
      .json-inspector
      > .json-inspector__leaf_root
      > .json-inspector__line
      > .json-inspector__key
      + .json-inspector__value {
      margin: 0;
    }

    & .json-inspector .json-inspector__key {
      color: ${color.syntax.property};
    }

    & .json-inspector .json-inspector__value_helper,
    & .json-inspector .json-inspector__value_null {
      color: ${color.syntax.constant};
    }

    & .json-inspector .json-inspector__not-found {
      padding-top: ${rem(space[3])};
    }

    & .json-inspector .json-inspector__value_string {
      color: ${color.syntax.string};
    }

    & .json-inspector .json-inspector__value_boolean {
      color: ${color.syntax.boolean};
    }

    & .json-inspector .json-inspector__value_number {
      color: ${color.syntax.number};
    }

    & .json-inspector .json-inspector__show-original {
      display: inline-block;
      padding: 0 6px;
      cursor: pointer;
    }

    & .json-inspector .json-inspector__show-original:hover {
      color: inherit;
    }

    & .json-inspector .json-inspector__show-original::before {
      content: '↔';
    }

    & .json-inspector .json-inspector__show-original:hover::after {
      content: ' expand';
    }
  `;
});
function Search(props) {
  const $ = c(8), {
    onChange,
    query
  } = props;
  let t0;
  $[0] !== onChange ? (t0 = (event) => onChange(event.target.value), $[0] = onChange, $[1] = t0) : t0 = $[1];
  const handleChange = t0, {
    t
  } = useTranslation(structureLocaleNamespace);
  let t1;
  $[2] !== t ? (t1 = t("document-inspector.search.placeholder"), $[2] = t, $[3] = t1) : t1 = $[3];
  const t2 = query || "";
  let t3;
  return $[4] !== handleChange || $[5] !== t1 || $[6] !== t2 ? (t3 = /* @__PURE__ */ jsx(TextInput, { icon: SearchIcon, onChange: handleChange, placeholder: t1, radius: 2, value: t2 }), $[4] = handleChange, $[5] = t1, $[6] = t2, $[7] = t3) : t3 = $[7], t3;
}
function InspectDialog(props) {
  const $ = c(49), {
    value
  } = props, {
    onInspectClose,
    paneKey
  } = useDocumentPane(), dialogIdPrefix = `${paneKey}_inspect_`, [viewModeId, onViewModeChange] = useStructureToolSetting("inspect-view-mode", null, "parsed");
  let t0;
  $[0] !== viewModeId ? (t0 = VIEW_MODES.find((mode) => mode.id === viewModeId), $[0] = viewModeId, $[1] = t0) : t0 = $[1];
  const viewMode = t0;
  let t1;
  $[2] !== onViewModeChange ? (t1 = () => {
    onViewModeChange(VIEW_MODE_PARSED.id);
  }, $[2] = onViewModeChange, $[3] = t1) : t1 = $[3];
  const setParsedViewMode = t1;
  let t2;
  $[4] !== onViewModeChange ? (t2 = () => {
    onViewModeChange(VIEW_MODE_RAW.id);
  }, $[4] = onViewModeChange, $[5] = t2) : t2 = $[5];
  const setRawViewMode = t2, {
    t
  } = useTranslation(structureLocaleNamespace), t3 = `${dialogIdPrefix}dialog`;
  let t4;
  $[6] !== t || $[7] !== value ? (t4 = isDocumentLike(value) ? /* @__PURE__ */ jsx(Translate, { t, i18nKey: "document-inspector.dialog.title", components: {
    DocumentTitle: () => /* @__PURE__ */ jsx("em", { children: /* @__PURE__ */ jsx(DocTitle, { document: value }) })
  } }) : /* @__PURE__ */ jsx("em", { children: t("document-inspector.dialog.title-no-value") }), $[6] = t, $[7] = value, $[8] = t4) : t4 = $[8];
  let t5;
  $[9] === Symbol.for("react.memo_cache_sentinel") ? (t5 = {
    position: "sticky",
    bottom: 0,
    zIndex: 3
  }, $[9] = t5) : t5 = $[9];
  const t6 = `${dialogIdPrefix}tabpanel`, t7 = `${dialogIdPrefix}tab-${VIEW_MODE_PARSED.id}`;
  let t8;
  $[10] !== t ? (t8 = t(VIEW_MODE_PARSED.title), $[10] = t, $[11] = t8) : t8 = $[11];
  const t9 = viewMode === VIEW_MODE_PARSED;
  let t10;
  $[12] !== setParsedViewMode || $[13] !== t6 || $[14] !== t7 || $[15] !== t8 || $[16] !== t9 ? (t10 = /* @__PURE__ */ jsx(Tab, { "aria-controls": t6, id: t7, label: t8, onClick: setParsedViewMode, selected: t9 }), $[12] = setParsedViewMode, $[13] = t6, $[14] = t7, $[15] = t8, $[16] = t9, $[17] = t10) : t10 = $[17];
  const t11 = `${dialogIdPrefix}tabpanel`, t12 = `${dialogIdPrefix}tab-${VIEW_MODE_RAW.id}`;
  let t13;
  $[18] !== t ? (t13 = t(VIEW_MODE_RAW.title), $[18] = t, $[19] = t13) : t13 = $[19];
  const t14 = viewMode === VIEW_MODE_RAW;
  let t15;
  $[20] !== setRawViewMode || $[21] !== t11 || $[22] !== t12 || $[23] !== t13 || $[24] !== t14 ? (t15 = /* @__PURE__ */ jsx(Tab, { "aria-controls": t11, id: t12, label: t13, onClick: setRawViewMode, selected: t14 }), $[20] = setRawViewMode, $[21] = t11, $[22] = t12, $[23] = t13, $[24] = t14, $[25] = t15) : t15 = $[25];
  let t16;
  $[26] !== t10 || $[27] !== t15 ? (t16 = /* @__PURE__ */ jsx(Card, { padding: 3, paddingTop: 0, shadow: 1, style: t5, children: /* @__PURE__ */ jsxs(TabList, { space: 1, children: [
    t10,
    t15
  ] }) }), $[26] = t10, $[27] = t15, $[28] = t16) : t16 = $[28];
  const t17 = `${dialogIdPrefix}tab-${viewModeId}`, t18 = `${dialogIdPrefix}tabpanel`;
  let t19;
  $[29] === Symbol.for("react.memo_cache_sentinel") ? (t19 = {
    outline: "none"
  }, $[29] = t19) : t19 = $[29];
  let t20;
  $[30] !== value || $[31] !== viewMode ? (t20 = viewMode === VIEW_MODE_PARSED && /* @__PURE__ */ jsx(JSONInspectorWrapper, { children: /* @__PURE__ */ jsx(JSONInspector, { data: value, isExpanded, onClick: toggleExpanded, search: Search, filterOptions: {
    ignoreCase: !0
  } }) }), $[30] = value, $[31] = viewMode, $[32] = t20) : t20 = $[32];
  let t21;
  $[33] !== value || $[34] !== viewMode ? (t21 = viewMode === VIEW_MODE_RAW && /* @__PURE__ */ jsx(Code, { language: "json", tabIndex: 0, onKeyDown: maybeSelectAll, onDoubleClick: select, onFocus: select, size: 1, children: JSON.stringify(value, null, 2) }), $[33] = value, $[34] = viewMode, $[35] = t21) : t21 = $[35];
  let t22;
  $[36] !== t17 || $[37] !== t18 || $[38] !== t20 || $[39] !== t21 ? (t22 = /* @__PURE__ */ jsxs(TabPanel, { "aria-labelledby": t17, flex: 1, id: t18, overflow: "auto", padding: 4, style: t19, children: [
    t20,
    t21
  ] }), $[36] = t17, $[37] = t18, $[38] = t20, $[39] = t21, $[40] = t22) : t22 = $[40];
  let t23;
  $[41] !== t16 || $[42] !== t22 ? (t23 = /* @__PURE__ */ jsxs(Flex, { direction: "column", height: "fill", children: [
    t16,
    t22
  ] }), $[41] = t16, $[42] = t22, $[43] = t23) : t23 = $[43];
  let t24;
  return $[44] !== onInspectClose || $[45] !== t23 || $[46] !== t3 || $[47] !== t4 ? (t24 = /* @__PURE__ */ jsx(Dialog, { bodyHeight: "fill", id: t3, header: t4, onClose: onInspectClose, onClickOutside: onInspectClose, padding: !1, width: 2, children: t23 }), $[44] = onInspectClose, $[45] = t23, $[46] = t3, $[47] = t4, $[48] = t24) : t24 = $[48], t24;
}
function Banner(props) {
  const $ = c(20);
  let Icon, action, content, rest, t0;
  $[0] !== props ? ({
    action,
    content,
    icon: Icon,
    tone: t0,
    ...rest
  } = props, $[0] = props, $[1] = Icon, $[2] = action, $[3] = content, $[4] = rest, $[5] = t0) : (Icon = $[1], action = $[2], content = $[3], rest = $[4], t0 = $[5]);
  const tone = t0 === void 0 ? "transparent" : t0;
  let t1;
  $[6] !== Icon ? (t1 = Icon && /* @__PURE__ */ jsx(Text, { size: 0, children: /* @__PURE__ */ jsx(Icon, {}) }), $[6] = Icon, $[7] = t1) : t1 = $[7];
  let t2;
  $[8] !== content ? (t2 = /* @__PURE__ */ jsx(Flex, { align: "center", flex: 1, gap: 2, paddingY: 3, children: content }), $[8] = content, $[9] = t2) : t2 = $[9];
  let t3;
  $[10] !== action ? (t3 = action && /* @__PURE__ */ jsx(Button, { ...action, mode: action.mode || "ghost", tone: action.tone || "default" }), $[10] = action, $[11] = t3) : t3 = $[11];
  let t4;
  $[12] !== t1 || $[13] !== t2 || $[14] !== t3 ? (t4 = /* @__PURE__ */ jsxs(Flex, { align: "center", gap: 3, children: [
    t1,
    t2,
    t3
  ] }), $[12] = t1, $[13] = t2, $[14] = t3, $[15] = t4) : t4 = $[15];
  let t5;
  return $[16] !== rest || $[17] !== t4 || $[18] !== tone ? (t5 = /* @__PURE__ */ jsx(Card, { borderBottom: !0, paddingX: 4, paddingY: 2, tone, ...rest, children: t4 }), $[16] = rest, $[17] = t4, $[18] = tone, $[19] = t5) : t5 = $[19], t5;
}
function DeletedDocumentBanner(t0) {
  const $ = c(17), {
    revisionId
  } = t0, {
    documentId,
    documentType
  } = useDocumentPane(), {
    restore
  } = useDocumentOperation(documentId, documentType), {
    navigateIntent
  } = useRouter();
  let t1;
  $[0] !== documentId || $[1] !== documentType || $[2] !== navigateIntent || $[3] !== restore || $[4] !== revisionId ? (t1 = () => {
    revisionId && (restore.execute(revisionId), navigateIntent("edit", {
      id: documentId,
      type: documentType
    }));
  }, $[0] = documentId, $[1] = documentType, $[2] = navigateIntent, $[3] = restore, $[4] = revisionId, $[5] = t1) : t1 = $[5];
  const handleRestore = t1, {
    t
  } = useTranslation(structureLocaleNamespace);
  let t2;
  $[6] !== handleRestore || $[7] !== revisionId || $[8] !== t ? (t2 = revisionId ? {
    onClick: handleRestore,
    text: t("banners.deleted-document-banner.restore-button.text")
  } : void 0, $[6] = handleRestore, $[7] = revisionId, $[8] = t, $[9] = t2) : t2 = $[9];
  let t3;
  $[10] !== t ? (t3 = t("banners.deleted-document-banner.text"), $[10] = t, $[11] = t3) : t3 = $[11];
  let t4;
  $[12] !== t3 ? (t4 = /* @__PURE__ */ jsx(Text, { size: 1, weight: "medium", children: t3 }), $[12] = t3, $[13] = t4) : t4 = $[13];
  let t5;
  return $[14] !== t2 || $[15] !== t4 ? (t5 = /* @__PURE__ */ jsx(Banner, { action: t2, content: t4, "data-testid": "deleted-document-banner", icon: ReadOnlyIcon }), $[14] = t2, $[15] = t4, $[16] = t5) : t5 = $[16], t5;
}
function DeprecatedDocumentTypeBanner() {
  const $ = c(5), {
    schemaType
  } = useDocumentPane(), {
    t
  } = useTranslation(structureLocaleNamespace);
  if (!isDeprecatedSchemaType(schemaType))
    return null;
  let t0;
  $[0] !== t ? (t0 = /* @__PURE__ */ jsx(Translate, { t, i18nKey: "banners.deprecated-document-type-banner.text" }), $[0] = t, $[1] = t0) : t0 = $[1];
  let t1;
  return $[2] !== schemaType.deprecated.reason || $[3] !== t0 ? (t1 = /* @__PURE__ */ jsx(Banner, { content: /* @__PURE__ */ jsxs(Text, { size: 1, weight: "medium", children: [
    t0,
    " ",
    schemaType.deprecated.reason
  ] }), "data-testid": "deprecated-document-type-banner", icon: ErrorOutlineIcon }), $[2] = schemaType.deprecated.reason, $[3] = t0, $[4] = t1) : t1 = $[4], t1;
}
const AskToEditDialogOpened = defineEvent({
  name: "Ask To Edit Dialog Opened",
  version: 1,
  description: 'User clicked the "Ask to edit" button in the document permissions banner'
}), AskToEditRequestSent = defineEvent({
  name: "Ask To Edit Request Sent",
  version: 1,
  description: "User sent a role change request from the dialog"
}), MAX_NOTE_LENGTH = 150, DialogBody = styled(Box)`
  box-sizing: border-box;
`;
styled(Flex).attrs({
  align: "center",
  direction: "column",
  justify: "center"
})`
  height: 110px;
`;
function RequestPermissionDialog(t0) {
  const $ = c(56), {
    onClose,
    onRequestSubmitted
  } = t0, {
    t
  } = useTranslation(structureLocaleNamespace), telemtry = useTelemetry(), dialogId = `request-permissions-${useId()}`, projectId = useProjectId();
  let t1;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t1 = {
    apiVersion: "2024-09-26"
  }, $[0] = t1) : t1 = $[0];
  const client = useClient(t1), toast = useToast(), zOffset = useZIndex(), [isSubmitting, setIsSubmitting] = useState(!1), [note, setNote] = useState(""), [msgError, setMsgError] = useState(), [hasTooManyRequests, setHasTooManyRequests] = useState(!1), [hasBeenDenied, setHasBeenDenied] = useState(!1);
  let t2;
  bb0: {
    const adminRole = "administrator";
    if (!projectId || !client) {
      let t33;
      $[1] === Symbol.for("react.memo_cache_sentinel") ? (t33 = of(adminRole), $[1] = t33) : t33 = $[1], t2 = t33;
      break bb0;
    }
    let t32;
    if ($[2] !== client.observable || $[3] !== projectId) {
      let t42;
      $[5] === Symbol.for("react.memo_cache_sentinel") ? (t42 = (roles) => roles.filter(_temp$d).find(_temp2$6) ? "editor" : adminRole, $[5] = t42) : t42 = $[5];
      let t52;
      $[6] === Symbol.for("react.memo_cache_sentinel") ? (t52 = () => of(adminRole), $[6] = t52) : t52 = $[6], t32 = client.observable.request({
        url: `/projects/${projectId}/roles`
      }).pipe(map$1(t42), startWith$1(adminRole), catchError$1(t52)), $[2] = client.observable, $[3] = projectId, $[4] = t32;
    } else
      t32 = $[4];
    t2 = t32;
  }
  const requestedRole = useObservable(t2);
  let t3;
  $[7] !== client || $[8] !== note || $[9] !== onRequestSubmitted || $[10] !== projectId || $[11] !== requestedRole || $[12] !== telemtry || $[13] !== toast ? (t3 = () => {
    setIsSubmitting(!0), client.request({
      url: `/access/project/${projectId}/requests`,
      method: "post",
      body: {
        note,
        requestUrl: window?.location.href,
        requestedRole,
        type: "role"
      }
    }).then((request) => {
      request && (onRequestSubmitted && onRequestSubmitted(), telemtry.log(AskToEditRequestSent), toast.push({
        title: "Edit access requested"
      }));
    }).catch((err) => {
      const statusCode = err?.response?.statusCode, errMessage = err?.response?.body?.message;
      statusCode === 429 && (setHasTooManyRequests(!0), setMsgError(errMessage)), statusCode === 409 ? (setHasBeenDenied(!0), setMsgError(errMessage)) : toast.push({
        title: "There was a problem submitting your request.",
        status: "error"
      });
    }).finally(() => {
      setIsSubmitting(!1);
    });
  }, $[7] = client, $[8] = note, $[9] = onRequestSubmitted, $[10] = projectId, $[11] = requestedRole, $[12] = telemtry, $[13] = toast, $[14] = t3) : t3 = $[14];
  const onSubmit = t3, t4 = zOffset.fullscreen;
  let t5;
  $[15] !== t ? (t5 = t("request-permission-dialog.header.text"), $[15] = t, $[16] = t5) : t5 = $[16];
  let t6;
  $[17] !== t ? (t6 = t("confirm-dialog.cancel-button.fallback-text"), $[17] = t, $[18] = t6) : t6 = $[18];
  let t7;
  $[19] !== onClose || $[20] !== t6 ? (t7 = {
    onClick: onClose,
    text: t6
  }, $[19] = onClose, $[20] = t6, $[21] = t7) : t7 = $[21];
  const t8 = hasTooManyRequests || hasBeenDenied;
  let t9;
  $[22] !== t ? (t9 = t("request-permission-dialog.confirm-button.text"), $[22] = t, $[23] = t9) : t9 = $[23];
  let t10;
  $[24] !== isSubmitting || $[25] !== onSubmit || $[26] !== t8 || $[27] !== t9 ? (t10 = {
    onClick: onSubmit,
    loading: isSubmitting,
    disabled: t8,
    text: t9,
    tone: "primary",
    type: "submit"
  }, $[24] = isSubmitting, $[25] = onSubmit, $[26] = t8, $[27] = t9, $[28] = t10) : t10 = $[28];
  let t11;
  $[29] !== t10 || $[30] !== t7 ? (t11 = {
    cancelButton: t7,
    confirmButton: t10
  }, $[29] = t10, $[30] = t7, $[31] = t11) : t11 = $[31];
  let t12;
  $[32] !== t ? (t12 = t("request-permission-dialog.description.text"), $[32] = t, $[33] = t12) : t12 = $[33];
  let t13;
  $[34] !== t12 ? (t13 = /* @__PURE__ */ jsx(Text, { children: t12 }), $[34] = t12, $[35] = t13) : t13 = $[35];
  let t14;
  $[36] !== hasBeenDenied || $[37] !== hasTooManyRequests || $[38] !== isSubmitting || $[39] !== msgError || $[40] !== note || $[41] !== onSubmit || $[42] !== t ? (t14 = hasTooManyRequests || hasBeenDenied ? /* @__PURE__ */ jsx(Card, { tone: "caution", padding: 3, radius: 2, shadow: 1, children: /* @__PURE__ */ jsxs(Text, { size: 1, children: [
    hasTooManyRequests && /* @__PURE__ */ jsx(Fragment, { children: msgError ?? t("request-permission-dialog.warning.limit-reached.text") }),
    hasBeenDenied && /* @__PURE__ */ jsx(Fragment, { children: msgError ?? t("request-permission-dialog.warning.denied.text") })
  ] }) }) : /* @__PURE__ */ jsxs(Stack, { space: 3, paddingBottom: 0, children: [
    /* @__PURE__ */ jsx(TextInput, { placeholder: t("request-permission-dialog.note-input.placeholder.text"), disabled: isSubmitting, onKeyDown: (e) => {
      e.key === "Enter" && onSubmit();
    }, maxLength: MAX_NOTE_LENGTH, value: note, onChange: (e_0) => {
      setNote(e_0.currentTarget.value);
    } }),
    /* @__PURE__ */ jsx(Text, { align: "right", muted: !0, size: 1, children: `${note.length}/${MAX_NOTE_LENGTH}` })
  ] }), $[36] = hasBeenDenied, $[37] = hasTooManyRequests, $[38] = isSubmitting, $[39] = msgError, $[40] = note, $[41] = onSubmit, $[42] = t, $[43] = t14) : t14 = $[43];
  let t15;
  $[44] !== t13 || $[45] !== t14 ? (t15 = /* @__PURE__ */ jsx(DialogBody, { children: /* @__PURE__ */ jsxs(Stack, { space: 4, children: [
    t13,
    t14
  ] }) }), $[44] = t13, $[45] = t14, $[46] = t15) : t15 = $[46];
  let t16;
  $[47] !== dialogId || $[48] !== onClose || $[49] !== t11 || $[50] !== t15 || $[51] !== t5 ? (t16 = /* @__PURE__ */ jsx(Dialog, { width: 1, id: dialogId, header: t5, footer: t11, onClose, onClickOutside: onClose, children: t15 }), $[47] = dialogId, $[48] = onClose, $[49] = t11, $[50] = t15, $[51] = t5, $[52] = t16) : t16 = $[52];
  let t17;
  return $[53] !== t16 || $[54] !== zOffset.fullscreen ? (t17 = /* @__PURE__ */ jsx(DialogProvider, { position: "fixed", zOffset: t4, children: t16 }), $[53] = t16, $[54] = zOffset.fullscreen, $[55] = t17) : t17 = $[55], t17;
}
function _temp2$6(role_0) {
  return role_0.name === "editor";
}
function _temp$d(role) {
  return role?.appliesToUsers;
}
const LOADING_STATE = {
  loading: !0,
  error: !1,
  status: void 0
}, EMPTY_STATE = {
  loading: !1,
  error: !1,
  status: "none"
}, DECLINED_STATE = {
  loading: !1,
  error: !1,
  status: "declined"
}, PENDING_STATE = {
  loading: !1,
  error: !1,
  status: "pending"
}, EXPIRED_STATE = {
  loading: !1,
  error: !1,
  status: "expired"
}, useRoleRequestsStatus = () => {
  const $ = c(9);
  let t0;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = {
    apiVersion: "2024-07-01"
  }, $[0] = t0) : t0 = $[0];
  const client = useClient(t0), projectId = useProjectId();
  let t1;
  bb0: {
    if (!client || !projectId) {
      let t23;
      $[1] === Symbol.for("react.memo_cache_sentinel") ? (t23 = of(EMPTY_STATE), $[1] = t23) : t23 = $[1], t1 = t23;
      break bb0;
    }
    let t22;
    $[2] !== client || $[3] !== projectId ? (t22 = checkRoleRequests(client, projectId), $[2] = client, $[3] = projectId, $[4] = t22) : t22 = $[4], t1 = t22;
  }
  const checkRoleRequests$ = t1, {
    loading,
    error,
    status
  } = useObservable(checkRoleRequests$, LOADING_STATE);
  let t2;
  return $[5] !== error || $[6] !== loading || $[7] !== status ? (t2 = {
    data: status,
    loading,
    error
  }, $[5] = error, $[6] = loading, $[7] = status, $[8] = t2) : t2 = $[8], t2;
};
function checkRoleRequests(client, projectId) {
  return client.observable.request({
    url: "/access/requests/me",
    tag: "use-role-requests-status"
  }).pipe(
    map((requests) => {
      if (!requests || requests.length === 0)
        return EMPTY_STATE;
      const projectRequests = requests.filter((request) => request.resourceId === projectId && request.type === "role"), declinedRequest = projectRequests.find((request) => request.status === "declined");
      return declinedRequest && isAfter(addWeeks(new Date(declinedRequest.createdAt), 2), /* @__PURE__ */ new Date()) ? DECLINED_STATE : projectRequests.find((request) => request.status === "pending" && isAfter(addWeeks(new Date(request.createdAt), 2), /* @__PURE__ */ new Date())) ? PENDING_STATE : projectRequests.find((request) => request.status === "pending" && isBefore(addWeeks(new Date(request.createdAt), 2), /* @__PURE__ */ new Date())) ? EXPIRED_STATE : EMPTY_STATE;
    }),
    catchError((err) => (console.error("Failed to fetch access requests", err), of({
      loading: !1,
      error: !0,
      status: void 0
    }))),
    startWith(LOADING_STATE)
    // Start with loading state
  );
}
function InsufficientPermissionBanner(t0) {
  const $ = c(33), {
    requiredPermission
  } = t0, currentUser = useCurrentUser(), {
    data: roleRequestStatus,
    loading: requestStatusLoading,
    error: requestStatusError
  } = useRoleRequestsStatus(), [requestSent, setRequestSent] = useState(!1);
  let t1;
  t1 = roleRequestStatus === "pending" || roleRequestStatus === "declined" || requestSent;
  const requestPending = t1;
  let t2;
  $[0] !== currentUser?.roles ? (t2 = currentUser?.roles || [], $[0] = currentUser?.roles, $[1] = t2) : t2 = $[1];
  const currentUserRoles = t2, isOnlyViewer = currentUserRoles.length === 1 && currentUserRoles[0].name === "viewer", [showRequestPermissionDialog, setShowRequestPermissionDialog] = useState(!1);
  let t3;
  $[2] === Symbol.for("react.memo_cache_sentinel") ? (t3 = {
    style: "short"
  }, $[2] = t3) : t3 = $[2];
  const listFormat = useListFormat(t3), {
    t
  } = useTranslation(structureLocaleNamespace), telemetry = useTelemetry();
  let roleTitles, t4;
  $[3] !== currentUserRoles || $[4] !== listFormat ? (roleTitles = currentUserRoles.map(_temp$c), t4 = listFormat.formatToParts(roleTitles).map(_temp2$5), $[3] = currentUserRoles, $[4] = listFormat, $[5] = roleTitles, $[6] = t4) : (roleTitles = $[5], t4 = $[6]);
  const roles = t4;
  let t5;
  $[7] !== roles ? (t5 = {
    Roles: () => /* @__PURE__ */ jsx(Fragment, { children: roles })
  }, $[7] = roles, $[8] = t5) : t5 = $[8];
  let t6;
  $[9] !== roleTitles || $[10] !== roles.length ? (t6 = {
    count: roles.length,
    roles: roleTitles
  }, $[9] = roleTitles, $[10] = roles.length, $[11] = t6) : t6 = $[11];
  let t7;
  $[12] !== requiredPermission || $[13] !== t || $[14] !== t5 || $[15] !== t6 ? (t7 = /* @__PURE__ */ jsx(Text, { size: 1, weight: "medium", children: /* @__PURE__ */ jsx(Translate, { t, i18nKey: "banners.permission-check-banner.missing-permission", components: t5, values: t6, context: requiredPermission }) }), $[12] = requiredPermission, $[13] = t, $[14] = t5, $[15] = t6, $[16] = t7) : t7 = $[16];
  let t8;
  $[17] !== isOnlyViewer || $[18] !== requestPending || $[19] !== requestStatusError || $[20] !== requestStatusLoading || $[21] !== roleRequestStatus || $[22] !== t || $[23] !== telemetry ? (t8 = isOnlyViewer && roleRequestStatus && !requestStatusError && !requestStatusLoading ? {
    onClick: requestPending ? void 0 : () => {
      setShowRequestPermissionDialog(!0), telemetry.log(AskToEditDialogOpened);
    },
    text: t(requestPending ? "banners.permission-check-banner.request-permission-button.sent" : "banners.permission-check-banner.request-permission-button.text"),
    tone: requestPending ? "default" : "primary",
    disabled: requestPending,
    mode: requestPending ? "bleed" : void 0
  } : void 0, $[17] = isOnlyViewer, $[18] = requestPending, $[19] = requestStatusError, $[20] = requestStatusLoading, $[21] = roleRequestStatus, $[22] = t, $[23] = telemetry, $[24] = t8) : t8 = $[24];
  let t9;
  $[25] !== t7 || $[26] !== t8 ? (t9 = /* @__PURE__ */ jsx(Banner, { content: t7, action: t8, "data-testid": "permission-check-banner", icon: ReadOnlyIcon }), $[25] = t7, $[26] = t8, $[27] = t9) : t9 = $[27];
  let t10;
  $[28] !== showRequestPermissionDialog ? (t10 = showRequestPermissionDialog && /* @__PURE__ */ jsx(RequestPermissionDialog, { onClose: () => setShowRequestPermissionDialog(!1), onRequestSubmitted: () => {
    setRequestSent(!0), setShowRequestPermissionDialog(!1);
  } }), $[28] = showRequestPermissionDialog, $[29] = t10) : t10 = $[29];
  let t11;
  return $[30] !== t10 || $[31] !== t9 ? (t11 = /* @__PURE__ */ jsxs(Fragment, { children: [
    t9,
    t10
  ] }), $[30] = t10, $[31] = t9, $[32] = t11) : t11 = $[32], t11;
}
function _temp2$5(part) {
  return part.type === "element" ? /* @__PURE__ */ jsx("code", { children: part.value }, part.value) : part.value;
}
function _temp$c(role) {
  return role.title;
}
const ReferenceChangedBanner = memo(() => {
  const documentPreviewStore = useDocumentPreviewStore(), {
    params,
    groupIndex,
    routerPanesState,
    replaceCurrent,
    BackLink: BackLink2
  } = usePaneRouter(), routerReferenceId = routerPanesState[groupIndex]?.[0].id, parentSibling = routerPanesState[groupIndex - 1]?.[0], parentId = parentSibling?.id, hasHistoryOpen = !!parentSibling?.params?.rev, parentRefPath = useMemo(() => params?.parentRefPath && fromString(params.parentRefPath) || null, [params?.parentRefPath]), {
    t
  } = useTranslation(structureLocaleNamespace), referenceInfoObservable = useMemo(() => {
    const parentRefPathSegment = parentRefPath?.[0];
    if (!parentId || !parentRefPathSegment || !parentRefPath)
      return of({
        loading: !1
      });
    const publishedId = getPublishedId(parentId), path = fromString(parentRefPathSegment), keyedSegmentIndex = path.findIndex((p) => typeof p == "object" && "_key" in p);
    return concat(
      // emit a loading state instantly
      of({
        loading: !0
      }),
      // then emit the values from watching the published ID's path
      documentPreviewStore.unstable_observePathsDocumentPair(publishedId, keyedSegmentIndex === -1 ? path : path.slice(0, keyedSegmentIndex)).pipe(
        // this debounce time is needed to prevent flashing banners due to
        // the router state updating faster than the content-lake state. we
        // debounce to wait for more emissions because the value pulled
        // initially could be stale.
        debounceTime(750),
        map(({
          draft,
          published
        }) => ({
          loading: !1,
          result: {
            availability: {
              draft: draft.availability,
              published: published.availability
            },
            refValue: get(draft.snapshot || published.snapshot, parentRefPath)?._ref
          }
        }))
      )
    );
  }, [documentPreviewStore, parentId, parentRefPath]), referenceInfo = useObservable(referenceInfoObservable, {
    loading: !0
  }), handleReloadReference = useCallback(() => {
    referenceInfo.loading || referenceInfo.result?.refValue && replaceCurrent({
      id: referenceInfo.result.refValue,
      params
    });
  }, [referenceInfo.loading, referenceInfo.result, replaceCurrent, params]);
  return (
    // if `parentId` or `parentRefPath` is not present then this banner is n/a
    !parentId || !parentRefPath || // if viewing this pane via history, then hide
    hasHistoryOpen || // if loading, hide
    referenceInfo.loading || // if the parent document is not available (e.g. due to permission denied or
    // not found) we don't want to display a warning here, but instead rely on the
    // parent view to display the appropriate message
    !referenceInfo.result?.availability.draft.available && !referenceInfo.result?.availability.published.available || // if the references are the same, then hide the reference changed banner
    referenceInfo.result?.refValue === routerReferenceId ? null : /* @__PURE__ */ jsx(Banner, { action: referenceInfo.result?.refValue ? {
      onClick: handleReloadReference,
      icon: SyncIcon,
      text: t("banners.reference-changed-banner.reason-changed.reload-button.text")
    } : {
      as: BackLink2,
      icon: CloseIcon,
      text: t("banners.reference-changed-banner.reason-removed.close-button.text")
    }, "data-testid": "reference-changed-banner", content: /* @__PURE__ */ jsx(Text, { size: 1, weight: "medium", children: referenceInfo.result?.refValue ? t("banners.reference-changed-banner.reason-changed.text") : t("banners.reference-changed-banner.reason-removed.text") }), icon: WarningOutlineIcon, tone: "caution" })
  );
});
ReferenceChangedBanner.displayName = "Memo(ReferenceChangedBanner)";
const ResolvedLiveEdit = defineEvent({
  name: "Resolved LiveEdit Draft",
  version: 1,
  description: "User resolved a draft of a live edit document to continue editing"
});
function DraftLiveEditBanner(t0) {
  const $ = c(38), {
    displayed,
    documentId,
    schemaType
  } = t0, {
    t
  } = useTranslation(structureLocaleNamespace), [isPublishing, setPublishing] = useState(!1), [isDiscarding, setDiscarding] = useState(!1), telemetry = useTelemetry(), {
    publish,
    discardChanges
  } = useDocumentOperation(documentId, displayed?._type || "");
  let t1;
  $[0] !== publish || $[1] !== telemetry ? (t1 = () => {
    publish.execute(), setPublishing(!0), telemetry.log(ResolvedLiveEdit, {
      liveEditResolveType: "publish"
    });
  }, $[0] = publish, $[1] = telemetry, $[2] = t1) : t1 = $[2];
  const handlePublish = t1;
  let t2;
  $[3] !== discardChanges || $[4] !== telemetry ? (t2 = () => {
    discardChanges.execute(), setDiscarding(!0), telemetry.log(ResolvedLiveEdit, {
      liveEditResolveType: "discard"
    });
  }, $[3] = discardChanges, $[4] = telemetry, $[5] = t2) : t2 = $[5];
  const handleDiscard = t2;
  let t3;
  if ($[6] === Symbol.for("react.memo_cache_sentinel") ? (t3 = () => () => {
    setPublishing(!1), setDiscarding(!1);
  }, $[6] = t3) : t3 = $[6], useEffect(t3), displayed && displayed._id && !isDraftId(displayed._id))
    return null;
  let t4;
  $[7] !== schemaType.title ? (t4 = {
    schemaType: schemaType.title
  }, $[7] = schemaType.title, $[8] = t4) : t4 = $[8];
  let t5;
  $[9] !== t || $[10] !== t4 ? (t5 = /* @__PURE__ */ jsx(Text, { size: 1, weight: "medium", children: /* @__PURE__ */ jsx(Translate, { t, i18nKey: "banners.live-edit-draft-banner.text", values: t4 }) }), $[9] = t, $[10] = t4, $[11] = t5) : t5 = $[11];
  let t6;
  $[12] !== t ? (t6 = t("action.publish.live-edit.label"), $[12] = t, $[13] = t6) : t6 = $[13];
  let t7;
  $[14] !== t ? (t7 = t("banners.live-edit-draft-banner.publish.tooltip"), $[14] = t, $[15] = t7) : t7 = $[15];
  let t8;
  $[16] !== t7 ? (t8 = {
    content: t7
  }, $[16] = t7, $[17] = t8) : t8 = $[17];
  let t9;
  $[18] !== handlePublish || $[19] !== isPublishing || $[20] !== t6 || $[21] !== t8 ? (t9 = /* @__PURE__ */ jsx(Button, { onClick: handlePublish, text: t6, tooltipProps: t8, loading: isPublishing }), $[18] = handlePublish, $[19] = isPublishing, $[20] = t6, $[21] = t8, $[22] = t9) : t9 = $[22];
  let t10;
  $[23] !== t ? (t10 = t("banners.live-edit-draft-banner.discard.tooltip"), $[23] = t, $[24] = t10) : t10 = $[24];
  let t11;
  $[25] !== t ? (t11 = t("banners.live-edit-draft-banner.discard.tooltip"), $[25] = t, $[26] = t11) : t11 = $[26];
  let t12;
  $[27] !== t11 ? (t12 = {
    content: t11
  }, $[27] = t11, $[28] = t12) : t12 = $[28];
  let t13;
  $[29] !== handleDiscard || $[30] !== isDiscarding || $[31] !== t10 || $[32] !== t12 ? (t13 = /* @__PURE__ */ jsx(Button, { onClick: handleDiscard, text: t10, tooltipProps: t12, loading: isDiscarding }), $[29] = handleDiscard, $[30] = isDiscarding, $[31] = t10, $[32] = t12, $[33] = t13) : t13 = $[33];
  let t14;
  return $[34] !== t13 || $[35] !== t5 || $[36] !== t9 ? (t14 = /* @__PURE__ */ jsx(Banner, { content: /* @__PURE__ */ jsxs(Flex, { align: "center", justify: "space-between", gap: 1, children: [
    t5,
    t9,
    t13
  ] }), "data-testid": "live-edit-type-banner", icon: ErrorOutlineIcon }), $[34] = t13, $[35] = t5, $[36] = t9, $[37] = t14) : t14 = $[37], t14;
}
const TitleContainer = styled(Stack)`
  ${({
  theme
}) => css`
      @supports not (container-type: inline-size) {
        display: none !important;
      }

      container-type: inline-size;

      [data-heading] {
        font-size: ${theme.sanity.fonts.heading.sizes[4].fontSize}px;
        line-height: ${theme.sanity.fonts.heading.sizes[4].lineHeight}px;
        overflow-wrap: break-word;
        text-wrap: pretty;
      }

      @container (max-width: 560px) {
        [data-heading] {
          font-size: ${theme.sanity.fonts.heading.sizes[3].fontSize}px;
          line-height: ${theme.sanity.fonts.heading.sizes[3].lineHeight}px;
        }
      }

      @container (max-width: 420px) {
        [data-heading] {
          font-size: ${theme.sanity.fonts.heading.sizes[2].fontSize}px;
          line-height: ${theme.sanity.fonts.heading.sizes[2].lineHeight}px;
        }
      }
    `}
`, FormHeader = (t0) => {
  const $ = c(13), {
    documentId,
    schemaType,
    title
  } = t0, isSingleton = documentId === schemaType.name, {
    t
  } = useTranslation$1(structureLocaleNamespace);
  if (schemaType.__experimental_formPreviewTitle === !1)
    return null;
  let t1;
  $[0] !== isSingleton || $[1] !== schemaType.name || $[2] !== schemaType.title ? (t1 = !isSingleton && /* @__PURE__ */ jsx(Text, { muted: !0, size: 1, children: schemaType.title ?? schemaType.name }), $[0] = isSingleton, $[1] = schemaType.name, $[2] = schemaType.title, $[3] = t1) : t1 = $[3];
  const t2 = !title;
  let t3;
  $[4] !== t || $[5] !== title ? (t3 = title ?? t("document-view.form-view.form-title-fallback"), $[4] = t, $[5] = title, $[6] = t3) : t3 = $[6];
  let t4;
  $[7] !== t2 || $[8] !== t3 ? (t4 = /* @__PURE__ */ jsx(Heading, { as: "h2", "data-heading": !0, muted: t2, "data-testid": "document-panel-document-title", children: t3 }), $[7] = t2, $[8] = t3, $[9] = t4) : t4 = $[9];
  let t5;
  return $[10] !== t1 || $[11] !== t4 ? (t5 = /* @__PURE__ */ jsxs(TitleContainer, { marginBottom: 6, space: 4, children: [
    t1,
    t4
  ] }), $[10] = t1, $[11] = t4, $[12] = t5) : t5 = $[12], t5;
}, LONG_ENOUGH_BUT_NOT_TOO_LONG = 1e3 * 60 * 60 * 24 * 24;
function useConditionalToast(params) {
  const $ = c(4), toast = useToast();
  let t0, t1;
  $[0] !== params || $[1] !== toast ? (t0 = () => (params.enabled && toast.push({
    ...params,
    duration: LONG_ENOUGH_BUT_NOT_TOO_LONG
  }), () => {
    params.enabled && toast.push({
      ...params,
      duration: 0.01
    });
  }), t1 = [params, toast], $[0] = params, $[1] = toast, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), useEffect(t0, t1);
}
const preventDefault = (ev) => ev.preventDefault(), FormView = forwardRef(function(props, ref) {
  const {
    hidden,
    margins
  } = props, {
    collapsedFieldSets,
    collapsedPaths,
    displayed: value,
    editState,
    documentId,
    documentType,
    fieldActions,
    onChange,
    validation,
    ready,
    formState,
    onFocus,
    connectionState,
    onBlur,
    onSetCollapsedPath,
    onPathOpen,
    onSetCollapsedFieldSet,
    onSetActiveFieldGroup,
    openPath
  } = useDocumentPane(), documentStore = useDocumentStore(), presence = useDocumentPresence(documentId), {
    title
  } = useDocumentTitle(), patchChannel = useMemo(() => createPatchChannel(), []), isLocked = editState?.transactionSyncLock?.enabled, {
    t
  } = useTranslation(structureLocaleNamespace), conditionalToastParams = useMemo(() => ({
    id: "sync-lock",
    status: "warning",
    enabled: isLocked,
    title: t("document-view.form-view.sync-lock-toast.title"),
    description: t("document-view.form-view.sync-lock-toast.description"),
    closable: !0
  }), [isLocked, t]);
  useConditionalToast(conditionalToastParams), useEffect(() => {
    const sub = documentStore.pair.documentEvents(documentId, documentType).pipe(tap((event) => {
      event.type === "mutation" && patchChannel.publish(prepareMutationEvent(event)), event.type === "rebase" && patchChannel.publish(prepareRebaseEvent(event));
    })).subscribe();
    return () => {
      sub.unsubscribe();
    };
  }, [documentId, documentStore, documentType, patchChannel]);
  const hasRev = !!value?._rev;
  useEffect(() => {
    hasRev && patchChannel.publish({
      type: "mutation",
      patches: [],
      snapshot: value
    });
  }, [hasRev]);
  const [formRef, setFormRef] = useState(null), [focusedFirstDescendant, setFocusedFirstDescendant] = useState(!1);
  useEffect(() => {
    !focusedFirstDescendant && ready && !formState?.focusPath.length && formRef && (setFocusedFirstDescendant(!0), focusFirstDescendant(formRef));
  }, [focusedFirstDescendant, formRef, formState?.focusPath.length, ready]);
  const setRef = useCallback((node) => {
    setFormRef(node), typeof ref == "function" ? ref(node) : ref && (ref.current = node);
  }, [ref]);
  return /* @__PURE__ */ jsx(Container, { hidden, paddingX: 4, paddingTop: 5, paddingBottom: 9, sizing: "border", width: 1, children: /* @__PURE__ */ jsx(PresenceOverlay, { margins, children: /* @__PURE__ */ jsx(Box, { as: "form", onSubmit: preventDefault, ref: setRef, children: connectionState === "connecting" && !editState?.draft && !editState?.published ? /* @__PURE__ */ jsx(Delay, { ms: 300, children: /* @__PURE__ */ jsxs(Flex, { align: "center", direction: "column", height: "fill", justify: "center", children: [
    /* @__PURE__ */ jsx(Spinner, { muted: !0 }),
    /* @__PURE__ */ jsx(Box, { marginTop: 3, children: /* @__PURE__ */ jsx(Text, { align: "center", muted: !0, size: 1, children: t("document-view.form-view.loading") }) })
  ] }) }) : formState === null || hidden ? /* @__PURE__ */ jsx(Box, { padding: 2, children: /* @__PURE__ */ jsx(Text, { children: t("document-view.form-view.form-hidden") }) }) : /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(FormHeader, { documentId, schemaType: formState.schemaType, title }),
    /* @__PURE__ */ jsx(FormBuilder, { __internal_fieldActions: fieldActions, __internal_patchChannel: patchChannel, changed: formState.changed, collapsedFieldSets, collapsedPaths, focused: formState.focused, focusPath: formState.focusPath, groups: formState.groups, id: "root", members: formState.members, onChange, onFieldGroupSelect: onSetActiveFieldGroup, onPathBlur: onBlur, onPathFocus: onFocus, onPathOpen, onSetFieldSetCollapsed: onSetCollapsedFieldSet, onSetPathCollapsed: onSetCollapsedPath, openPath, presence, readOnly: connectionState === "reconnecting" || formState.readOnly || !editState?.ready, schemaType: formState.schemaType, validation, value: (
      // note: the form state doesn't have a typed concept of a "document" value
      // but these should be compatible
      formState.value
    ) })
  ] }) }) }) });
});
function prepareMutationEvent(event) {
  const patches = event.mutations.map((mut) => mut.patch).filter(Boolean);
  return {
    type: "mutation",
    snapshot: event.document,
    patches: fromMutationPatches(event.origin, patches)
  };
}
function prepareRebaseEvent(event) {
  const remotePatches = event.remoteMutations.map((mut) => mut.patch).filter(Boolean), localPatches = event.localMutations.map((mut) => mut.patch).filter(Boolean);
  return {
    type: "rebase",
    snapshot: event.document,
    patches: fromMutationPatches("remote", remotePatches).concat(fromMutationPatches("local", localPatches))
  };
}
const DocumentBox = styled(Box)({
  position: "relative"
}), Scroller$2 = styled(ScrollContainer)(({
  $disabled
}) => $disabled ? {
  height: "100%"
} : css`
    height: 100%;
    overflow: auto;
    position: relative;
    scroll-behavior: smooth;
    outline: none;
  `), DocumentPanel = function(props) {
  const {
    footerHeight,
    headerHeight,
    isInspectOpen,
    rootElement,
    setDocumentPanelPortalElement
  } = props, {
    activeViewId,
    displayed,
    documentId,
    editState,
    inspector,
    value,
    views: views2,
    ready,
    schemaType,
    permissions,
    isPermissionsLoading,
    isDeleting,
    isDeleted,
    timelineStore
  } = useDocumentPane(), {
    collapsed: layoutCollapsed
  } = usePaneLayout(), {
    collapsed
  } = usePane(), parentPortal = usePortal(), {
    features
  } = useStructureTool(), portalRef = useRef(null), [documentScrollElement, setDocumentScrollElement] = useState(null), formContainerElement = useRef(null), requiredPermission = value._createdAt ? "update" : "create", activeView = useMemo(() => views2.find((view) => view.id === activeViewId) || views2[0] || {
    type: "form"
  }, [activeViewId, views2]), portalElement = features.splitPanes && portalRef.current || parentPortal.element, margins = useMemo(() => layoutCollapsed ? [headerHeight || 0, 0, footerHeight ? footerHeight + 2 : 2, 0] : [0, 0, 2, 0], [layoutCollapsed, footerHeight, headerHeight]), formViewHidden = activeView.type !== "form", activeViewNode = useMemo(() => activeView.type === "component" && activeView.component && createElement(activeView.component, {
    document: {
      draft: editState?.draft || null,
      displayed: displayed || value,
      historical: displayed,
      published: editState?.published || null
    },
    documentId,
    options: activeView.options,
    schemaType
  }), [activeView, displayed, documentId, editState?.draft, editState?.published, schemaType, value]), lastNonDeletedRevId = useTimelineSelector(timelineStore, (state2) => state2.lastNonDeletedRevId), isLiveEdit = isLiveEditEnabled(schemaType);
  useEffect(() => {
    documentScrollElement?.scrollTo && documentScrollElement.scrollTo(0, 0);
  }, [documentId, documentScrollElement]), useEffect(() => {
    portalElement && setDocumentPanelPortalElement(portalElement);
  }, [portalElement, setDocumentPanelPortalElement]);
  const inspectDialog = useMemo(() => isInspectOpen ? /* @__PURE__ */ jsx(InspectDialog, { value: displayed || value }) : null, [isInspectOpen, displayed, value]), showInspector = !!(!collapsed && inspector);
  return /* @__PURE__ */ jsx(PaneContent, { children: /* @__PURE__ */ jsxs(Flex, { height: "fill", children: [
    (features.resizablePanes || !showInspector) && /* @__PURE__ */ jsx(DocumentBox, { flex: 2, overflow: "hidden", children: /* @__PURE__ */ jsx(PortalProvider, { element: portalElement, __unstable_elements: {
      documentScrollElement
    }, children: /* @__PURE__ */ jsx(BoundaryElementProvider, { element: documentScrollElement, children: /* @__PURE__ */ jsxs(VirtualizerScrollInstanceProvider, { scrollElement: documentScrollElement, containerElement: formContainerElement, children: [
      activeView.type === "form" && isLiveEdit && ready && /* @__PURE__ */ jsx(DraftLiveEditBanner, { displayed, documentId, schemaType }),
      activeView.type === "form" && !isPermissionsLoading && ready && /* @__PURE__ */ jsxs(Fragment, { children: [
        !permissions?.granted && /* @__PURE__ */ jsx(InsufficientPermissionBanner, { requiredPermission }),
        !isDeleting && isDeleted && /* @__PURE__ */ jsx(DeletedDocumentBanner, { revisionId: lastNonDeletedRevId }),
        /* @__PURE__ */ jsx(ReferenceChangedBanner, {}),
        /* @__PURE__ */ jsx(DeprecatedDocumentTypeBanner, {})
      ] }),
      /* @__PURE__ */ jsxs(Scroller$2, { $disabled: layoutCollapsed || !1, "data-testid": "document-panel-scroller", ref: setDocumentScrollElement, children: [
        /* @__PURE__ */ jsx(FormView, { hidden: formViewHidden, margins, ref: formContainerElement }),
        activeViewNode
      ] }),
      inspectDialog,
      /* @__PURE__ */ jsx("div", { "data-testid": "document-panel-portal", ref: portalRef })
    ] }) }) }) }),
    showInspector && /* @__PURE__ */ jsx(BoundaryElementProvider, { element: rootElement, children: /* @__PURE__ */ jsx(DocumentInspectorPanel, { documentId, documentType: schemaType.name, flex: 1 }) })
  ] }) });
}, POPOVER_FALLBACK_PLACEMENTS = ["left", "bottom"], DIALOG_WIDTH_TO_UI_WIDTH = {
  small: 0,
  medium: 1,
  large: 2,
  full: "auto"
};
function ConfirmDialog(props) {
  const $ = c(5), {
    dialog,
    referenceElement
  } = props;
  let t0;
  $[0] !== dialog ? (t0 = /* @__PURE__ */ jsx(ConfirmDialogContent, { dialog }), $[0] = dialog, $[1] = t0) : t0 = $[1];
  let t1;
  return $[2] !== referenceElement || $[3] !== t0 ? (t1 = /* @__PURE__ */ jsx(Popover, { content: t0, fallbackPlacements: POPOVER_FALLBACK_PLACEMENTS, open: !0, placement: "top", portal: !0, preventOverflow: !0, referenceElement }), $[2] = referenceElement, $[3] = t0, $[4] = t1) : t1 = $[4], t1;
}
function ConfirmDialogContent(props) {
  const $ = c(29), {
    dialog
  } = props, {
    cancelButtonIcon,
    cancelButtonText,
    confirmButtonIcon,
    confirmButtonText,
    message,
    onCancel,
    onConfirm,
    tone
  } = dialog, {
    t
  } = useTranslation(structureLocaleNamespace), {
    isTopLayer
  } = useLayer(), ref = useRef(null);
  let t0;
  $[0] !== isTopLayer || $[1] !== onCancel ? (t0 = (event) => {
    event.key === "Escape" && isTopLayer && onCancel();
  }, $[0] = isTopLayer, $[1] = onCancel, $[2] = t0) : t0 = $[2], useGlobalKeyDown(t0);
  let t1;
  $[3] === Symbol.for("react.memo_cache_sentinel") ? (t1 = () => [ref.current], $[3] = t1) : t1 = $[3], useClickOutsideEvent(isTopLayer && onCancel, t1);
  let t2;
  $[4] === Symbol.for("react.memo_cache_sentinel") ? (t2 = {
    minWidth: 304,
    maxWidth: 400
  }, $[4] = t2) : t2 = $[4];
  let t3;
  $[5] !== message ? (t3 = /* @__PURE__ */ jsx(Box, { flex: 1, overflow: "auto", padding: 4, children: /* @__PURE__ */ jsx(Text, { children: message }) }), $[5] = message, $[6] = t3) : t3 = $[6];
  let t4;
  $[7] === Symbol.for("react.memo_cache_sentinel") ? (t4 = {
    borderTop: "1px solid var(--card-border-color)"
  }, $[7] = t4) : t4 = $[7];
  let t5;
  $[8] !== cancelButtonText || $[9] !== t ? (t5 = cancelButtonText || t("confirm-dialog.cancel-button.fallback-text"), $[8] = cancelButtonText, $[9] = t, $[10] = t5) : t5 = $[10];
  let t6;
  $[11] !== cancelButtonIcon || $[12] !== onCancel || $[13] !== t5 ? (t6 = /* @__PURE__ */ jsx(Button$1, { "data-testid": "confirm-dialog-cancel-button", icon: cancelButtonIcon, onClick: onCancel, mode: "ghost", text: t5 }), $[11] = cancelButtonIcon, $[12] = onCancel, $[13] = t5, $[14] = t6) : t6 = $[14];
  let t7;
  $[15] !== confirmButtonText || $[16] !== t ? (t7 = confirmButtonText || t("confirm-dialog.confirm-button.fallback-text"), $[15] = confirmButtonText, $[16] = t, $[17] = t7) : t7 = $[17];
  let t8;
  $[18] !== confirmButtonIcon || $[19] !== onConfirm || $[20] !== t7 || $[21] !== tone ? (t8 = /* @__PURE__ */ jsx(Button$1, { "data-testid": "confirm-dialog-confirm-button", icon: confirmButtonIcon, onClick: onConfirm, text: t7, tone }), $[18] = confirmButtonIcon, $[19] = onConfirm, $[20] = t7, $[21] = tone, $[22] = t8) : t8 = $[22];
  let t9;
  $[23] !== t6 || $[24] !== t8 ? (t9 = /* @__PURE__ */ jsx(Box, { paddingX: 4, paddingY: 3, style: t4, children: /* @__PURE__ */ jsxs(Grid$1, { columns: 2, gap: 2, children: [
    t6,
    t8
  ] }) }), $[23] = t6, $[24] = t8, $[25] = t9) : t9 = $[25];
  let t10;
  return $[26] !== t3 || $[27] !== t9 ? (t10 = /* @__PURE__ */ jsxs(Flex, { direction: "column", ref, style: t2, children: [
    t3,
    t9
  ] }), $[26] = t3, $[27] = t9, $[28] = t10) : t10 = $[28], t10;
}
function ModalDialog(props) {
  const $ = c(12), {
    dialog
  } = props, dialogId = useId();
  let t0;
  $[0] !== dialog.footer ? (t0 = dialog.footer && /* @__PURE__ */ jsx(Box, { paddingX: 4, paddingY: 3, children: dialog.footer }), $[0] = dialog.footer, $[1] = t0) : t0 = $[1];
  const footer = t0, t1 = dialog.showCloseButton === !1, t2 = dialog.width === void 0 ? 1 : DIALOG_WIDTH_TO_UI_WIDTH[dialog.width];
  let t3;
  $[2] !== dialog.content ? (t3 = /* @__PURE__ */ jsx(Box, { padding: 4, children: dialog.content }), $[2] = dialog.content, $[3] = t3) : t3 = $[3];
  let t4;
  return $[4] !== dialog.header || $[5] !== dialog.onClose || $[6] !== dialogId || $[7] !== footer || $[8] !== t1 || $[9] !== t2 || $[10] !== t3 ? (t4 = /* @__PURE__ */ jsx(LegacyLayerProvider, { zOffset: "fullscreen", children: /* @__PURE__ */ jsx(Dialog$1, { animate: !0, __unstable_hideCloseButton: t1, footer, header: dialog.header, id: dialogId, onClose: dialog.onClose, onClickOutside: dialog.onClose, width: t2, children: t3 }) }), $[4] = dialog.header, $[5] = dialog.onClose, $[6] = dialogId, $[7] = footer, $[8] = t1, $[9] = t2, $[10] = t3, $[11] = t4) : t4 = $[11], t4;
}
function PopoverDialog(props) {
  const $ = c(5), {
    dialog,
    referenceElement
  } = props;
  let t0;
  $[0] !== dialog ? (t0 = /* @__PURE__ */ jsx(PopoverDialogContent, { dialog }), $[0] = dialog, $[1] = t0) : t0 = $[1];
  let t1;
  return $[2] !== referenceElement || $[3] !== t0 ? (t1 = /* @__PURE__ */ jsx(Popover, { content: t0, fallbackPlacements: POPOVER_FALLBACK_PLACEMENTS, open: !0, placement: "top", portal: !0, preventOverflow: !0, referenceElement }), $[2] = referenceElement, $[3] = t0, $[4] = t1) : t1 = $[4], t1;
}
function PopoverDialogContent(props) {
  const $ = c(6), {
    dialog
  } = props, {
    content,
    onClose
  } = dialog, {
    isTopLayer
  } = useLayer(), ref = useRef(null);
  let t0;
  $[0] !== isTopLayer || $[1] !== onClose ? (t0 = (event) => {
    event.key === "Escape" && isTopLayer && onClose();
  }, $[0] = isTopLayer, $[1] = onClose, $[2] = t0) : t0 = $[2], useGlobalKeyDown(t0);
  let t1;
  $[3] === Symbol.for("react.memo_cache_sentinel") ? (t1 = () => [ref.current], $[3] = t1) : t1 = $[3], useClickOutsideEvent(isTopLayer && onClose, t1);
  let t2;
  return $[4] !== content ? (t2 = /* @__PURE__ */ jsx("div", { ref, children: content }), $[4] = content, $[5] = t2) : t2 = $[5], t2;
}
function DocumentActionPortalProvider(props) {
  const $ = c(3), {
    children
  } = props, {
    element,
    elements
  } = usePortal(), portalElement = elements?.[DOCUMENT_PANEL_PORTAL_ELEMENT] || element;
  let t0;
  return $[0] !== children || $[1] !== portalElement ? (t0 = /* @__PURE__ */ jsx(PortalProvider, { element: portalElement, children }), $[0] = children, $[1] = portalElement, $[2] = t0) : t0 = $[2], t0;
}
function ActionStateDialog(props) {
  const $ = c(17), {
    dialog,
    referenceElement: t0
  } = props, referenceElement = t0 === void 0 ? null : t0, modalId = useId();
  if (dialog.type === "confirm") {
    let t12;
    return $[0] !== dialog || $[1] !== referenceElement ? (t12 = /* @__PURE__ */ jsx(ConfirmDialog, { dialog, referenceElement }), $[0] = dialog, $[1] = referenceElement, $[2] = t12) : t12 = $[2], t12;
  }
  if (dialog.type === "popover") {
    let t12;
    return $[3] !== dialog || $[4] !== referenceElement ? (t12 = /* @__PURE__ */ jsx(PopoverDialog, { dialog, referenceElement }), $[3] = dialog, $[4] = referenceElement, $[5] = t12) : t12 = $[5], t12;
  }
  if (dialog.type === "dialog" || !dialog.type) {
    let t12;
    return $[6] !== dialog ? (t12 = /* @__PURE__ */ jsx(DocumentActionPortalProvider, { children: /* @__PURE__ */ jsx(ModalDialog, { dialog }) }), $[6] = dialog, $[7] = t12) : t12 = $[7], t12;
  }
  if (dialog.type === "custom") {
    const t12 = dialog?.component;
    let t22;
    return $[8] !== t12 ? (t22 = /* @__PURE__ */ jsx(DocumentActionPortalProvider, { children: t12 }), $[8] = t12, $[9] = t22) : t22 = $[9], t22;
  }
  const unknownModal = dialog;
  console.warn(`Unsupported modal type ${unknownModal.type}`);
  let t1;
  $[10] !== unknownModal.content || $[11] !== unknownModal.type ? (t1 = unknownModal.content || /* @__PURE__ */ jsxs(Text, { size: 1, children: [
    "Unexpected modal type (",
    /* @__PURE__ */ jsx("code", { children: unknownModal.type }),
    ")"
  ] }), $[10] = unknownModal.content, $[11] = unknownModal.type, $[12] = t1) : t1 = $[12];
  let t2;
  return $[13] !== modalId || $[14] !== t1 || $[15] !== unknownModal.onClose ? (t2 = /* @__PURE__ */ jsx(Dialog, { id: modalId, onClose: unknownModal.onClose, onClickOutside: unknownModal.onClose, width: 1, children: t1 }), $[13] = modalId, $[14] = t1, $[15] = unknownModal.onClose, $[16] = t2) : t2 = $[16], t2;
}
const ActionDialogWrapper = memo(function(t0) {
  const $ = c(9), {
    actionStates,
    children,
    referenceElement
  } = t0, [actionIndex, setActionIndex] = useState(-1);
  let t1;
  t1 = actionStates[actionIndex];
  const currentAction = t1;
  let t2;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t2 = (idx) => {
    setActionIndex(idx);
  }, $[0] = t2) : t2 = $[0];
  const handleAction = t2;
  let t3, t4;
  $[1] !== children ? (t4 = children({
    handleAction
  }), $[1] = children, $[2] = t4) : t4 = $[2], t3 = t4;
  const result = t3;
  let t5;
  $[3] !== currentAction || $[4] !== referenceElement ? (t5 = currentAction && currentAction.dialog && /* @__PURE__ */ jsx(LegacyLayerProvider, { zOffset: "paneFooter", children: /* @__PURE__ */ jsx(ActionStateDialog, { dialog: currentAction.dialog, referenceElement }) }), $[3] = currentAction, $[4] = referenceElement, $[5] = t5) : t5 = $[5];
  let t6;
  return $[6] !== result || $[7] !== t5 ? (t6 = /* @__PURE__ */ jsxs(Fragment, { children: [
    t5,
    result
  ] }), $[6] = result, $[7] = t5, $[8] = t6) : t6 = $[8], t6;
});
function ActionMenuButton(props) {
  const $ = c(10), {
    actionStates,
    disabled
  } = props, idPrefix = useId(), [referenceElement, setReferenceElement] = useState(null);
  let t0, t1;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t1 = {
    placement: "top-end",
    portal: !0,
    preventOverflow: !0
  }, $[0] = t1) : t1 = $[0], t0 = t1;
  const popoverProps = t0, {
    t
  } = useTranslation(structureLocaleNamespace);
  let t2;
  $[1] !== actionStates || $[2] !== disabled || $[3] !== idPrefix || $[4] !== t ? (t2 = (t32) => {
    const {
      handleAction
    } = t32;
    return /* @__PURE__ */ jsx(MenuButton, { id: `${idPrefix}-action-menu`, button: /* @__PURE__ */ jsx(ContextMenuButton, { "aria-label": t("buttons.action-menu-button.aria-label"), disabled, "data-testid": "action-menu-button", size: "large", tooltipProps: {
      content: t("buttons.action-menu-button.tooltip")
    } }), menu: /* @__PURE__ */ jsx(Menu, { padding: 1, children: actionStates.map((actionState, idx) => /* @__PURE__ */ jsx(ActionMenuListItem, { actionState, disabled, index: idx, onAction: handleAction }, idx)) }), popover: popoverProps, ref: setReferenceElement });
  }, $[1] = actionStates, $[2] = disabled, $[3] = idPrefix, $[4] = t, $[5] = t2) : t2 = $[5];
  const renderActionDialog = t2;
  let t3;
  return $[6] !== actionStates || $[7] !== referenceElement || $[8] !== renderActionDialog ? (t3 = /* @__PURE__ */ jsx(ActionDialogWrapper, { actionStates, referenceElement, children: renderActionDialog }), $[6] = actionStates, $[7] = referenceElement, $[8] = renderActionDialog, $[9] = t3) : t3 = $[9], t3;
}
function ActionMenuListItem(props) {
  const $ = c(18), {
    actionState,
    disabled,
    index,
    onAction
  } = props, {
    onHandle
  } = actionState;
  let t0;
  $[0] !== index || $[1] !== onAction || $[2] !== onHandle ? (t0 = () => {
    onAction(index), onHandle && onHandle();
  }, $[0] = index, $[1] = onAction, $[2] = onHandle, $[3] = t0) : t0 = $[3];
  const handleClick = t0;
  let t1, t2;
  $[4] !== actionState.shortcut ? (t2 = actionState.shortcut ? String(actionState.shortcut).split("+").map(_temp$b) : void 0, $[4] = actionState.shortcut, $[5] = t2) : t2 = $[5], t1 = t2;
  const hotkeys = t1, t3 = `action-${actionState.label.replace(" ", "")}`, t4 = disabled || !!actionState.disabled;
  let t5;
  $[6] !== actionState.disabled || $[7] !== actionState.title ? (t5 = actionState.disabled && {
    tooltipProps: {
      content: actionState.title
    }
  }, $[6] = actionState.disabled, $[7] = actionState.title, $[8] = t5) : t5 = $[8];
  let t6;
  return $[9] !== actionState.icon || $[10] !== actionState.label || $[11] !== actionState.tone || $[12] !== handleClick || $[13] !== hotkeys || $[14] !== t3 || $[15] !== t4 || $[16] !== t5 ? (t6 = /* @__PURE__ */ jsx(MenuItem, { "data-testid": t3, disabled: t4, hotkeys, icon: actionState.icon, onClick: handleClick, text: actionState.label, tone: actionState.tone, ...t5 }), $[9] = actionState.icon, $[10] = actionState.label, $[11] = actionState.tone, $[12] = handleClick, $[13] = hotkeys, $[14] = t3, $[15] = t4, $[16] = t5, $[17] = t6) : t6 = $[17], t6;
}
function _temp$b(s) {
  return s.slice(0, 1).toUpperCase() + s.slice(1);
}
const DISABLED_REASON_TITLE_KEY$1 = {
  NOTHING_TO_DELETE: "action.delete.disabled.nothing-to-delete",
  NOT_READY: "action.delete.disabled.not-ready"
}, DeleteAction = (t0) => {
  const $ = c(35), {
    id,
    type,
    draft,
    onComplete
  } = t0, {
    setIsDeleting: paneSetIsDeleting
  } = useDocumentPane(), {
    delete: deleteOp
  } = useDocumentOperation(id, type), [isDeleting, setIsDeleting] = useState(!1), [isConfirmDialogOpen, setConfirmDialogOpen] = useState(!1), {
    t
  } = useTranslation(structureLocaleNamespace);
  let t1;
  $[0] !== onComplete ? (t1 = () => {
    setConfirmDialogOpen(!1), onComplete();
  }, $[0] = onComplete, $[1] = t1) : t1 = $[1];
  const handleCancel = t1;
  let t2;
  $[2] !== deleteOp || $[3] !== onComplete || $[4] !== paneSetIsDeleting ? (t2 = () => {
    setIsDeleting(!0), setConfirmDialogOpen(!1), paneSetIsDeleting(!0), deleteOp.execute(), onComplete();
  }, $[2] = deleteOp, $[3] = onComplete, $[4] = paneSetIsDeleting, $[5] = t2) : t2 = $[5];
  const handleConfirm = t2;
  let t3;
  $[6] === Symbol.for("react.memo_cache_sentinel") ? (t3 = () => {
    setConfirmDialogOpen(!0);
  }, $[6] = t3) : t3 = $[6];
  const handle = t3;
  let t4;
  $[7] !== id || $[8] !== type ? (t4 = {
    id,
    type,
    permission: "delete"
  }, $[7] = id, $[8] = type, $[9] = t4) : t4 = $[9];
  const [permissions, isPermissionsLoading] = useDocumentPairPermissions(t4), currentUser = useCurrentUser();
  let t5;
  bb0: {
    if (!isPermissionsLoading && !permissions?.granted) {
      let t62;
      $[10] !== t ? (t62 = t("action.delete.label"), $[10] = t, $[11] = t62) : t62 = $[11];
      let t72;
      $[12] !== currentUser ? (t72 = /* @__PURE__ */ jsx(InsufficientPermissionsMessage, { context: "delete-document", currentUser }), $[12] = currentUser, $[13] = t72) : t72 = $[13];
      let t82;
      $[14] !== t62 || $[15] !== t72 ? (t82 = {
        tone: "critical",
        icon: TrashIcon,
        disabled: !0,
        label: t62,
        title: t72
      }, $[14] = t62, $[15] = t72, $[16] = t82) : t82 = $[16], t5 = t82;
      break bb0;
    }
    const t6 = isDeleting || !!deleteOp.disabled || isPermissionsLoading;
    let t7;
    $[17] !== deleteOp.disabled || $[18] !== t ? (t7 = deleteOp.disabled && t(DISABLED_REASON_TITLE_KEY$1[deleteOp.disabled]) || "", $[17] = deleteOp.disabled, $[18] = t, $[19] = t7) : t7 = $[19];
    let t8;
    $[20] !== isDeleting || $[21] !== t ? (t8 = t(isDeleting ? "action.delete.running.label" : "action.delete.label"), $[20] = isDeleting, $[21] = t, $[22] = t8) : t8 = $[22];
    let t9;
    $[23] !== draft?._id || $[24] !== handleCancel || $[25] !== handleConfirm || $[26] !== id || $[27] !== isConfirmDialogOpen || $[28] !== type ? (t9 = isConfirmDialogOpen && {
      type: "custom",
      component: /* @__PURE__ */ jsx(ConfirmDeleteDialogContainer, { action: "delete", id: draft?._id || id, type, onCancel: handleCancel, onConfirm: handleConfirm })
    }, $[23] = draft?._id, $[24] = handleCancel, $[25] = handleConfirm, $[26] = id, $[27] = isConfirmDialogOpen, $[28] = type, $[29] = t9) : t9 = $[29];
    let t10;
    $[30] !== t6 || $[31] !== t7 || $[32] !== t8 || $[33] !== t9 ? (t10 = {
      tone: "critical",
      icon: TrashIcon,
      disabled: t6,
      title: t7,
      label: t8,
      shortcut: "Ctrl+Alt+D",
      onHandle: handle,
      dialog: t9
    }, $[30] = t6, $[31] = t7, $[32] = t8, $[33] = t9, $[34] = t10) : t10 = $[34], t5 = t10;
  }
  return t5;
};
DeleteAction.action = "delete";
DeleteAction.displayName = "DeleteAction";
const DISABLED_REASON_KEY$2 = {
  NO_CHANGES: "action.discard-changes.disabled.no-change",
  NOT_PUBLISHED: "action.discard-changes.disabled.not-published",
  NOT_READY: "action.discard-changes.disabled.not-ready"
}, DiscardChangesAction = (t0) => {
  const $ = c(23), {
    id,
    type,
    published,
    liveEdit,
    onComplete
  } = t0, {
    discardChanges
  } = useDocumentOperation(id, type), [isConfirmDialogOpen, setConfirmDialogOpen] = useState(!1);
  let t1;
  $[0] !== id || $[1] !== type ? (t1 = {
    id,
    type,
    permission: "discardDraft"
  }, $[0] = id, $[1] = type, $[2] = t1) : t1 = $[2];
  const [permissions, isPermissionsLoading] = useDocumentPairPermissions(t1), currentUser = useCurrentUser(), {
    t
  } = useTranslation(structureLocaleNamespace);
  let t2;
  $[3] !== discardChanges || $[4] !== onComplete ? (t2 = () => {
    discardChanges.execute(), onComplete();
  }, $[3] = discardChanges, $[4] = onComplete, $[5] = t2) : t2 = $[5];
  const handleConfirm = t2;
  let t3;
  $[6] === Symbol.for("react.memo_cache_sentinel") ? (t3 = () => {
    setConfirmDialogOpen(!0);
  }, $[6] = t3) : t3 = $[6];
  const handle = t3;
  let t4, t5;
  $[7] !== handleConfirm || $[8] !== isConfirmDialogOpen || $[9] !== onComplete || $[10] !== t ? (t5 = isConfirmDialogOpen && {
    type: "confirm",
    tone: "critical",
    onCancel: onComplete,
    onConfirm: handleConfirm,
    message: t("action.discard-changes.confirm-dialog.confirm-discard-changes")
  }, $[7] = handleConfirm, $[8] = isConfirmDialogOpen, $[9] = onComplete, $[10] = t, $[11] = t5) : t5 = $[11], t4 = t5;
  const dialog = t4;
  let t6;
  $[12] !== currentUser || $[13] !== dialog || $[14] !== discardChanges.disabled || $[15] !== isPermissionsLoading || $[16] !== liveEdit || $[17] !== permissions?.granted || $[18] !== published || $[19] !== t ? (t6 = () => !published || liveEdit ? null : !isPermissionsLoading && !permissions?.granted ? {
    tone: "critical",
    icon: ResetIcon,
    disabled: !0,
    label: t("action.discard-changes.label"),
    title: /* @__PURE__ */ jsx(InsufficientPermissionsMessage, { context: "discard-changes", currentUser })
  } : {
    tone: "critical",
    icon: ResetIcon,
    disabled: !!discardChanges.disabled || isPermissionsLoading,
    title: discardChanges.disabled && DISABLED_REASON_KEY$2[discardChanges.disabled] || "",
    label: t("action.discard-changes.label"),
    onHandle: handle,
    dialog
  }, $[12] = currentUser, $[13] = dialog, $[14] = discardChanges.disabled, $[15] = isPermissionsLoading, $[16] = liveEdit, $[17] = permissions?.granted, $[18] = published, $[19] = t, $[20] = t6) : t6 = $[20];
  let t7;
  return $[21] !== t6 ? (t7 = t6(), $[21] = t6, $[22] = t7) : t7 = $[22], t7;
};
DiscardChangesAction.action = "discardChanges";
DiscardChangesAction.displayName = "DiscardChangesAction";
const DISABLED_REASON_KEY$1 = {
  NOTHING_TO_DUPLICATE: "action.duplicate.disabled.nothing-to-duplicate",
  NOT_READY: "action.duplicate.disabled.not-ready"
}, DuplicateAction = (t0) => {
  const $ = c(28), {
    id,
    type,
    onComplete
  } = t0, documentStore = useDocumentStore(), {
    duplicate
  } = useDocumentOperation(id, type), {
    navigateIntent
  } = useRouter(), [isDuplicating, setDuplicating] = useState(!1);
  let t1;
  $[0] !== id || $[1] !== type ? (t1 = {
    id,
    type,
    permission: "duplicate"
  }, $[0] = id, $[1] = type, $[2] = t1) : t1 = $[2];
  const [permissions, isPermissionsLoading] = useDocumentPairPermissions(t1), {
    t
  } = useTranslation(structureLocaleNamespace), currentUser = useCurrentUser();
  let t2;
  $[3] !== documentStore.pair || $[4] !== duplicate || $[5] !== id || $[6] !== navigateIntent || $[7] !== onComplete || $[8] !== type ? (t2 = async () => {
    const dupeId = uuid();
    setDuplicating(!0);
    const duplicateSuccess = firstValueFrom(documentStore.pair.operationEvents(id, type).pipe(filter(_temp$a)));
    duplicate.execute(dupeId), await duplicateSuccess, navigateIntent("edit", {
      id: dupeId,
      type
    }), onComplete();
  }, $[3] = documentStore.pair, $[4] = duplicate, $[5] = id, $[6] = navigateIntent, $[7] = onComplete, $[8] = type, $[9] = t2) : t2 = $[9];
  const handle = t2;
  let t3;
  bb0: {
    if (!isPermissionsLoading && !permissions?.granted) {
      let t42;
      $[10] !== t ? (t42 = t("action.duplicate.label"), $[10] = t, $[11] = t42) : t42 = $[11];
      let t52;
      $[12] !== currentUser ? (t52 = /* @__PURE__ */ jsx(InsufficientPermissionsMessage, { context: "duplicate-document", currentUser }), $[12] = currentUser, $[13] = t52) : t52 = $[13];
      let t62;
      $[14] !== t42 || $[15] !== t52 ? (t62 = {
        icon: CopyIcon,
        disabled: !0,
        label: t42,
        title: t52
      }, $[14] = t42, $[15] = t52, $[16] = t62) : t62 = $[16], t3 = t62;
      break bb0;
    }
    const t4 = isDuplicating || !!duplicate.disabled || isPermissionsLoading;
    let t5;
    $[17] !== isDuplicating || $[18] !== t ? (t5 = t(isDuplicating ? "action.duplicate.running.label" : "action.duplicate.label"), $[17] = isDuplicating, $[18] = t, $[19] = t5) : t5 = $[19];
    let t6;
    $[20] !== duplicate.disabled || $[21] !== t ? (t6 = duplicate.disabled ? t(DISABLED_REASON_KEY$1[duplicate.disabled]) : "", $[20] = duplicate.disabled, $[21] = t, $[22] = t6) : t6 = $[22];
    let t7;
    $[23] !== handle || $[24] !== t4 || $[25] !== t5 || $[26] !== t6 ? (t7 = {
      icon: CopyIcon,
      disabled: t4,
      label: t5,
      title: t6,
      onHandle: handle
    }, $[23] = handle, $[24] = t4, $[25] = t5, $[26] = t6, $[27] = t7) : t7 = $[27], t3 = t7;
  }
  return t3;
};
DuplicateAction.action = "duplicate";
DuplicateAction.displayName = "DuplicateAction";
function _temp$a(e) {
  return e.op === "duplicate" && e.type === "success";
}
const HistoryRestoreAction = (t0) => {
  const $ = c(27), {
    id,
    type,
    revision,
    onComplete
  } = t0, {
    restore
  } = useDocumentOperation(id, type), event = useDocumentOperationEvent(id, type), {
    navigateIntent
  } = useRouter(), prevEvent = useRef(event), [isConfirmDialogOpen, setConfirmDialogOpen] = useState(!1), {
    t
  } = useTranslation(structureLocaleNamespace);
  let t1;
  $[0] !== onComplete || $[1] !== restore || $[2] !== revision ? (t1 = () => {
    restore.execute(revision), onComplete();
  }, $[0] = onComplete, $[1] = restore, $[2] = revision, $[3] = t1) : t1 = $[3];
  const handleConfirm = t1;
  let t2, t3;
  $[4] !== event || $[5] !== id || $[6] !== navigateIntent || $[7] !== type ? (t2 = () => {
    !event || event === prevEvent.current || (event.type === "success" && event.op === "restore" && navigateIntent("edit", {
      id,
      type
    }), prevEvent.current = event);
  }, t3 = [event, id, navigateIntent, type], $[4] = event, $[5] = id, $[6] = navigateIntent, $[7] = type, $[8] = t2, $[9] = t3) : (t2 = $[8], t3 = $[9]), useEffect(t2, t3);
  let t4;
  $[10] === Symbol.for("react.memo_cache_sentinel") ? (t4 = () => {
    setConfirmDialogOpen(!0);
  }, $[10] = t4) : t4 = $[10];
  const handle = t4;
  let t5;
  bb0: {
    if (isConfirmDialogOpen) {
      let t62;
      $[11] !== t ? (t62 = t("action.restore.confirm.message"), $[11] = t, $[12] = t62) : t62 = $[12];
      let t7;
      $[13] !== handleConfirm || $[14] !== onComplete || $[15] !== t62 ? (t7 = {
        type: "confirm",
        tone: "critical",
        onCancel: onComplete,
        onConfirm: handleConfirm,
        message: t62
      }, $[13] = handleConfirm, $[14] = onComplete, $[15] = t62, $[16] = t7) : t7 = $[16], t5 = t7;
      break bb0;
    }
    t5 = null;
  }
  const dialog = t5, isRevisionInitial = revision === "@initial", isRevisionLatest = revision === void 0;
  let t6;
  bb1: {
    if (isRevisionLatest) {
      t6 = null;
      break bb1;
    }
    let t7;
    $[17] !== t ? (t7 = t("action.restore.label"), $[17] = t, $[18] = t7) : t7 = $[18];
    const t8 = isRevisionInitial ? "action.restore.disabled.cannot-restore-initial" : "action.restore.tooltip";
    let t9;
    $[19] !== t || $[20] !== t8 ? (t9 = t(t8), $[19] = t, $[20] = t8, $[21] = t9) : t9 = $[21];
    let t10;
    $[22] !== dialog || $[23] !== isRevisionInitial || $[24] !== t7 || $[25] !== t9 ? (t10 = {
      label: t7,
      tone: "caution",
      onHandle: handle,
      title: t9,
      icon: RevertIcon,
      dialog,
      disabled: isRevisionInitial
    }, $[22] = dialog, $[23] = isRevisionInitial, $[24] = t7, $[25] = t9, $[26] = t10) : t10 = $[26], t6 = t10;
  }
  return t6;
};
HistoryRestoreAction.action = "restore";
HistoryRestoreAction.displayName = "HistoryRestoreAction";
const DocumentPublished = defineEvent({
  name: "Document Published",
  version: 1,
  description: 'User clicked the "Publish" button in the document pane'
}), DISABLED_REASON_TITLE_KEY = {
  LIVE_EDIT_ENABLED: "action.publish.live-edit.publish-disabled",
  ALREADY_PUBLISHED: "action.publish.already-published.no-time-ago.tooltip",
  NO_CHANGES: "action.publish.no-changes.tooltip",
  NOT_READY: "action.publish.disabled.not-ready"
};
function getDisabledReason(reason, publishedAt, t) {
  return reason === "ALREADY_PUBLISHED" && publishedAt ? /* @__PURE__ */ jsx(AlreadyPublished, { publishedAt }) : t(DISABLED_REASON_TITLE_KEY[reason]);
}
function AlreadyPublished(t0) {
  const $ = c(6), {
    publishedAt
  } = t0, {
    t
  } = useTranslation(structureLocaleNamespace);
  let t1;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t1 = {
    useTemporalPhrase: !0
  }, $[0] = t1) : t1 = $[0];
  const timeSincePublished = useRelativeTime(publishedAt, t1);
  let t2;
  $[1] !== t || $[2] !== timeSincePublished ? (t2 = t("action.publish.already-published.tooltip", {
    timeSincePublished
  }), $[1] = t, $[2] = timeSincePublished, $[3] = t2) : t2 = $[3];
  let t3;
  return $[4] !== t2 ? (t3 = /* @__PURE__ */ jsx("span", { children: t2 }), $[4] = t2, $[5] = t3) : t3 = $[5], t3;
}
const PublishAction = (props) => {
  const $ = c(72), {
    id,
    type,
    liveEdit,
    draft,
    published
  } = props, [publishState, setPublishState] = useState(null), {
    publish
  } = useDocumentOperation(id, type), validationStatus = useValidationStatus(id, type), syncState = useSyncState(id, type), {
    changesOpen,
    documentId,
    documentType
  } = useDocumentPane(), editState = useEditState(documentId, documentType), {
    t
  } = useTranslation(structureLocaleNamespace);
  let t0;
  $[0] !== editState?.draft || $[1] !== editState?.published ? (t0 = editState?.draft || editState?.published || {}, $[0] = editState?.draft, $[1] = editState?.published, $[2] = t0) : t0 = $[2];
  const revision = t0._rev;
  let t1;
  $[3] !== validationStatus.validation ? (t1 = validationStatus.validation.some(isValidationErrorMarker), $[3] = validationStatus.validation, $[4] = t1) : t1 = $[4];
  const hasValidationErrors = t1, [publishScheduled, setPublishScheduled] = useState(!1), isSyncing = syncState.isSyncing, isValidating = validationStatus.isValidating;
  let t2;
  $[5] !== id || $[6] !== type ? (t2 = {
    id,
    type,
    permission: "publish"
  }, $[5] = id, $[6] = type, $[7] = t2) : t2 = $[7];
  const [permissions, isPermissionsLoading] = useDocumentPairPermissions(t2), currentUser = useCurrentUser();
  let t3;
  $[8] !== hasValidationErrors || $[9] !== publish.disabled || $[10] !== published || $[11] !== t ? (t3 = publish.disabled ? getDisabledReason(publish.disabled, (published || {})._updatedAt, t) || "" : hasValidationErrors ? t("action.publish.validation-issues.tooltip") : "", $[8] = hasValidationErrors, $[9] = publish.disabled, $[10] = published, $[11] = t, $[12] = t3) : t3 = $[12];
  const title = t3, hasDraft = !!draft;
  let t4;
  $[13] !== publish ? (t4 = () => {
    publish.execute(), setPublishState("publishing");
  }, $[13] = publish, $[14] = t4) : t4 = $[14];
  const doPublish = t4;
  let t5;
  $[15] !== doPublish || $[16] !== hasValidationErrors || $[17] !== isSyncing || $[18] !== publishScheduled || $[19] !== revision || $[20] !== validationStatus.isValidating || $[21] !== validationStatus.revision ? (t5 = () => {
    const validationComplete = validationStatus.isValidating === !1 && validationStatus.revision !== revision;
    !publishScheduled || isSyncing || !validationComplete || (hasValidationErrors || doPublish(), setPublishScheduled(!1));
  }, $[15] = doPublish, $[16] = hasValidationErrors, $[17] = isSyncing, $[18] = publishScheduled, $[19] = revision, $[20] = validationStatus.isValidating, $[21] = validationStatus.revision, $[22] = t5) : t5 = $[22];
  let t6;
  $[23] !== doPublish || $[24] !== hasValidationErrors || $[25] !== isSyncing || $[26] !== isValidating || $[27] !== publishScheduled || $[28] !== revision || $[29] !== validationStatus.isValidating || $[30] !== validationStatus.revision ? (t6 = [isSyncing, doPublish, hasValidationErrors, publishScheduled, validationStatus.revision, revision, isValidating, validationStatus.isValidating], $[23] = doPublish, $[24] = hasValidationErrors, $[25] = isSyncing, $[26] = isValidating, $[27] = publishScheduled, $[28] = revision, $[29] = validationStatus.isValidating, $[30] = validationStatus.revision, $[31] = t6) : t6 = $[31], useEffect(t5, t6);
  let t7;
  $[32] !== hasDraft || $[33] !== publishState ? (t7 = () => {
    const didPublish = publishState === "publishing" && !hasDraft, nextState = didPublish ? "published" : null, timer2 = setTimeout(() => {
      setPublishState(nextState);
    }, didPublish ? 200 : 4e3);
    return () => clearTimeout(timer2);
  }, $[32] = hasDraft, $[33] = publishState, $[34] = t7) : t7 = $[34];
  let t8;
  $[35] !== changesOpen || $[36] !== hasDraft || $[37] !== publishState ? (t8 = [changesOpen, publishState, hasDraft], $[35] = changesOpen, $[36] = hasDraft, $[37] = publishState, $[38] = t8) : t8 = $[38], useEffect(t7, t8);
  const telemetry = useTelemetry();
  let t9;
  $[39] !== doPublish || $[40] !== draft?._createdAt || $[41] !== published || $[42] !== revision || $[43] !== syncState.isSyncing || $[44] !== telemetry || $[45] !== validationStatus.isValidating || $[46] !== validationStatus.revision ? (t9 = () => {
    telemetry.log(DocumentPublished, {
      publishedImmediately: !draft?._createdAt,
      previouslyPublished: !!published
    }), syncState.isSyncing || validationStatus.isValidating || validationStatus.revision !== revision ? setPublishScheduled(!0) : doPublish();
  }, $[39] = doPublish, $[40] = draft?._createdAt, $[41] = published, $[42] = revision, $[43] = syncState.isSyncing, $[44] = telemetry, $[45] = validationStatus.isValidating, $[46] = validationStatus.revision, $[47] = t9) : t9 = $[47];
  const handle = t9;
  let t10;
  bb0: {
    if (liveEdit) {
      let t112;
      $[48] !== t ? (t112 = t("action.publish.live-edit.label"), $[48] = t, $[49] = t112) : t112 = $[49];
      let t122;
      $[50] !== t ? (t122 = t("action.publish.live-edit.tooltip"), $[50] = t, $[51] = t122) : t122 = $[51];
      let t132;
      $[52] !== t112 || $[53] !== t122 ? (t132 = {
        tone: "default",
        icon: PublishIcon,
        label: t112,
        title: t122,
        disabled: !0
      }, $[52] = t112, $[53] = t122, $[54] = t132) : t132 = $[54], t10 = t132;
      break bb0;
    }
    if (!isPermissionsLoading && !permissions?.granted) {
      let t112;
      $[55] !== currentUser ? (t112 = {
        tone: "default",
        icon: PublishIcon,
        label: "Publish",
        title: /* @__PURE__ */ jsx(InsufficientPermissionsMessage, { context: "publish-document", currentUser }),
        disabled: !0
      }, $[55] = currentUser, $[56] = t112) : t112 = $[56], t10 = t112;
      break bb0;
    }
    const disabled = !!(publishScheduled || editState?.transactionSyncLock?.enabled || publishState === "publishing" || publishState === "published" || hasValidationErrors || publish.disabled), t11 = disabled || isPermissionsLoading;
    let t12;
    $[57] !== publishScheduled || $[58] !== publishState || $[59] !== t ? (t12 = t(publishState === "published" ? "action.publish.published.label" : publishScheduled || publishState === "publishing" ? "action.publish.running.label" : "action.publish.draft.label"), $[57] = publishScheduled, $[58] = publishState, $[59] = t, $[60] = t12) : t12 = $[60];
    let t13;
    $[61] !== publishScheduled || $[62] !== publishState || $[63] !== t || $[64] !== title ? (t13 = publishScheduled ? t("action.publish.waiting") : publishState === "published" || publishState === "publishing" ? null : title, $[61] = publishScheduled, $[62] = publishState, $[63] = t, $[64] = title, $[65] = t13) : t13 = $[65];
    const t14 = disabled || publishScheduled ? null : "Ctrl+Alt+P";
    let t15;
    $[66] !== handle || $[67] !== t11 || $[68] !== t12 || $[69] !== t13 || $[70] !== t14 ? (t15 = {
      disabled: t11,
      tone: "default",
      label: t12,
      icon: PublishIcon,
      title: t13,
      shortcut: t14,
      onHandle: handle
    }, $[66] = handle, $[67] = t11, $[68] = t12, $[69] = t13, $[70] = t14, $[71] = t15) : t15 = $[71], t10 = t15;
  }
  return t10;
};
PublishAction.action = "publish";
PublishAction.displayName = "PublishAction";
const DISABLED_REASON_KEY = {
  NOT_PUBLISHED: "action.unpublish.disabled.not-published",
  NOT_READY: "action.unpublish.disabled.not-ready",
  LIVE_EDIT_ENABLED: "action.unpublish.disabled.live-edit-enabled"
}, UnpublishAction = ({
  id,
  type,
  draft,
  onComplete,
  liveEdit
}) => {
  const {
    unpublish
  } = useDocumentOperation(id, type), [isConfirmDialogOpen, setConfirmDialogOpen] = useState(!1), [permissions, isPermissionsLoading] = useDocumentPairPermissions({
    id,
    type,
    permission: "unpublish"
  }), currentUser = useCurrentUser(), {
    t
  } = useTranslation(structureLocaleNamespace), handleCancel = useCallback(() => {
    setConfirmDialogOpen(!1), onComplete();
  }, [onComplete]), handleConfirm = useCallback(() => {
    setConfirmDialogOpen(!1), unpublish.execute(), onComplete();
  }, [onComplete, unpublish]), dialog = useMemo(() => isConfirmDialogOpen ? {
    type: "dialog",
    onClose: onComplete,
    content: /* @__PURE__ */ jsx(
      ConfirmDeleteDialogContainer,
      {
        id: draft?._id || id,
        type,
        action: "unpublish",
        onCancel: handleCancel,
        onConfirm: handleConfirm
      }
    )
  } : null, [draft, id, handleCancel, handleConfirm, isConfirmDialogOpen, onComplete, type]);
  return useMemo(() => liveEdit ? null : !isPermissionsLoading && !permissions?.granted ? {
    tone: "critical",
    icon: UnpublishIcon,
    label: "Unpublish",
    title: /* @__PURE__ */ jsx(InsufficientPermissionsMessage, { context: "unpublish-document", currentUser }),
    disabled: !0
  } : {
    tone: "critical",
    icon: UnpublishIcon,
    disabled: !!unpublish.disabled || isPermissionsLoading,
    label: t("action.unpublish.label"),
    title: unpublish.disabled ? t(DISABLED_REASON_KEY[unpublish.disabled]) : "",
    onHandle: () => setConfirmDialogOpen(!0),
    dialog
  }, [currentUser, dialog, isPermissionsLoading, liveEdit, permissions?.granted, t, unpublish.disabled]);
};
UnpublishAction.action = "unpublish";
UnpublishAction.displayName = "UnpublishAction";
const DocumentStatusBarActionsInner = memo(function(props) {
  const $ = c(27), {
    disabled,
    showMenu,
    states
  } = props, {
    __internal_tasks
  } = useDocumentPane();
  let firstActionState, menuActionStates;
  $[0] !== states ? ([firstActionState, ...menuActionStates] = states, $[0] = states, $[1] = firstActionState, $[2] = menuActionStates) : (firstActionState = $[1], menuActionStates = $[2]);
  const [buttonElement, setButtonElement] = useState(null);
  let t0;
  bb0: {
    if (!firstActionState || !firstActionState.title && !firstActionState.shortcut) {
      t0 = null;
      break bb0;
    }
    let t12;
    $[3] === Symbol.for("react.memo_cache_sentinel") ? (t12 = {
      maxWidth: 300
    }, $[3] = t12) : t12 = $[3];
    let t22;
    $[4] !== firstActionState.title ? (t22 = firstActionState.title && /* @__PURE__ */ jsx(Text, { size: 1, children: firstActionState.title }), $[4] = firstActionState.title, $[5] = t22) : t22 = $[5];
    let t32;
    $[6] !== firstActionState.shortcut ? (t32 = firstActionState.shortcut && /* @__PURE__ */ jsx(Hotkeys, { "data-testid": "document-status-bar-hotkeys", fontSize: 1, style: {
      marginTop: -4,
      marginBottom: -4
    }, keys: String(firstActionState.shortcut).split("+").map(_temp$9) }), $[6] = firstActionState.shortcut, $[7] = t32) : t32 = $[7];
    let t42;
    $[8] !== t22 || $[9] !== t32 ? (t42 = /* @__PURE__ */ jsxs(Flex, { style: t12, align: "center", gap: 3, children: [
      t22,
      t32
    ] }), $[8] = t22, $[9] = t32, $[10] = t42) : t42 = $[10], t0 = t42;
  }
  const tooltipContent = t0, t1 = __internal_tasks && __internal_tasks.footerAction;
  let t2;
  $[11] !== disabled || $[12] !== firstActionState || $[13] !== tooltipContent ? (t2 = firstActionState && /* @__PURE__ */ jsx(LayerProvider, { zOffset: 200, children: /* @__PURE__ */ jsx(Tooltip, { disabled: !tooltipContent, content: tooltipContent, placement: "top", children: /* @__PURE__ */ jsx(Stack, { children: /* @__PURE__ */ jsx(Button, { "data-testid": `action-${firstActionState.label}`, disabled: disabled || !!firstActionState.disabled, icon: firstActionState.icon, onClick: firstActionState.onHandle, ref: setButtonElement, size: "large", text: firstActionState.label, tone: firstActionState.tone || "primary" }) }) }) }), $[11] = disabled, $[12] = firstActionState, $[13] = tooltipContent, $[14] = t2) : t2 = $[14];
  let t3;
  $[15] !== disabled || $[16] !== menuActionStates || $[17] !== showMenu ? (t3 = showMenu && menuActionStates.length > 0 && /* @__PURE__ */ jsx(ActionMenuButton, { actionStates: menuActionStates, disabled }), $[15] = disabled, $[16] = menuActionStates, $[17] = showMenu, $[18] = t3) : t3 = $[18];
  let t4;
  $[19] !== buttonElement || $[20] !== firstActionState ? (t4 = firstActionState && firstActionState.dialog && /* @__PURE__ */ jsx(ActionStateDialog, { dialog: firstActionState.dialog, referenceElement: buttonElement }), $[19] = buttonElement, $[20] = firstActionState, $[21] = t4) : t4 = $[21];
  let t5;
  return $[22] !== t1 || $[23] !== t2 || $[24] !== t3 || $[25] !== t4 ? (t5 = /* @__PURE__ */ jsxs(Flex, { align: "center", gap: 1, children: [
    t1,
    t2,
    t3,
    t4
  ] }), $[22] = t1, $[23] = t2, $[24] = t3, $[25] = t4, $[26] = t5) : t5 = $[26], t5;
}), DocumentStatusBarActions = memo(function() {
  const $ = c(12), {
    actions: allActions,
    connectionState,
    documentId,
    editState
  } = useDocumentPane();
  let t0, t1;
  $[0] !== allActions ? (t1 = allActions ?? [], $[0] = allActions, $[1] = t1) : t1 = $[1];
  let t2;
  $[2] !== t1 ? (t2 = t1.filter(_temp2$4), $[2] = t1, $[3] = t2) : t2 = $[3], t0 = t2;
  const actions = t0;
  let t3;
  $[4] !== actions.length || $[5] !== connectionState || $[6] !== documentId ? (t3 = (t42) => {
    const {
      states
    } = t42;
    return /* @__PURE__ */ jsx(DocumentStatusBarActionsInner, { disabled: connectionState !== "connected", showMenu: actions.length > 1, states }, documentId);
  }, $[4] = actions.length, $[5] = connectionState, $[6] = documentId, $[7] = t3) : t3 = $[7];
  const renderDocumentStatusBarActions = t3;
  if (actions.length === 0 || !editState)
    return null;
  let t4;
  return $[8] !== actions || $[9] !== editState || $[10] !== renderDocumentStatusBarActions ? (t4 = /* @__PURE__ */ jsx(RenderActionCollectionState, { actions, actionProps: editState, group: "default", children: renderDocumentStatusBarActions }), $[8] = actions, $[9] = editState, $[10] = renderDocumentStatusBarActions, $[11] = t4) : t4 = $[11], t4;
}), HistoryStatusBarActions = memo(function() {
  const $ = c(16), {
    actions,
    connectionState,
    editState,
    timelineStore
  } = useDocumentPane(), revision = useTimelineSelector(timelineStore, _temp3$3)?.id || "", disabled = (editState?.draft || editState?.published || {})._rev === revision;
  let t0, t1;
  $[0] !== editState ? (t1 = editState || {}, $[0] = editState, $[1] = t1) : t1 = $[1];
  let t2;
  $[2] !== revision || $[3] !== t1 ? (t2 = {
    ...t1,
    revision
  }, $[2] = revision, $[3] = t1, $[4] = t2) : t2 = $[4], t0 = t2;
  const actionProps = t0;
  let t3, t4;
  $[5] !== actions ? (t4 = actions ?? [], $[5] = actions, $[6] = t4) : t4 = $[6];
  let t5;
  $[7] !== t4 ? (t5 = t4.filter(isRestoreAction).slice(-1), $[7] = t4, $[8] = t5) : t5 = $[8], t3 = t5;
  const historyActions = t3;
  let t6;
  $[9] !== connectionState || $[10] !== disabled ? (t6 = (t72) => {
    const {
      states
    } = t72;
    return /* @__PURE__ */ jsx(DocumentStatusBarActionsInner, { disabled: connectionState !== "connected" || !!disabled, showMenu: !1, states });
  }, $[9] = connectionState, $[10] = disabled, $[11] = t6) : t6 = $[11];
  const renderDocumentStatusBarActions = t6, t7 = actionProps;
  let t8;
  return $[12] !== historyActions || $[13] !== renderDocumentStatusBarActions || $[14] !== t7 ? (t8 = /* @__PURE__ */ jsx(RenderActionCollectionState, { actions: historyActions, actionProps: t7, group: "default", children: renderDocumentStatusBarActions }), $[12] = historyActions, $[13] = renderDocumentStatusBarActions, $[14] = t7, $[15] = t8) : t8 = $[15], t8;
});
function isRestoreAction(action) {
  return action.action === HistoryRestoreAction.action;
}
function _temp$9(s) {
  return s.slice(0, 1).toUpperCase() + s.slice(1).toLowerCase();
}
function _temp2$4(action) {
  return !isRestoreAction(action);
}
function _temp3$3(state2) {
  return state2.revTime;
}
function DocumentHeaderTabs() {
  const $ = c(11), {
    activeViewId,
    paneKey,
    views: views2
  } = useDocumentPane(), tabPanelId = `${paneKey}tabpanel`;
  let t0;
  if ($[0] !== activeViewId || $[1] !== paneKey || $[2] !== tabPanelId || $[3] !== views2) {
    let t12;
    $[5] !== activeViewId || $[6] !== paneKey || $[7] !== tabPanelId ? (t12 = (view, index) => /* @__PURE__ */ jsx(DocumentHeaderTab, { icon: view.icon, id: `${paneKey}tab-${view.id}`, isActive: activeViewId === view.id, label: view.title, tabPanelId, viewId: index === 0 ? null : view.id ?? null }, view.id), $[5] = activeViewId, $[6] = paneKey, $[7] = tabPanelId, $[8] = t12) : t12 = $[8], t0 = views2.map(t12), $[0] = activeViewId, $[1] = paneKey, $[2] = tabPanelId, $[3] = views2, $[4] = t0;
  } else
    t0 = $[4];
  let t1;
  return $[9] !== t0 ? (t1 = /* @__PURE__ */ jsx(TabList, { space: 1, children: t0 }), $[9] = t0, $[10] = t1) : t1 = $[10], t1;
}
function DocumentHeaderTab(props) {
  const $ = c(20);
  let icon, id, isActive, label, rest, tabPanelId, viewId;
  $[0] !== props ? ({
    icon,
    id,
    isActive,
    label,
    tabPanelId,
    viewId,
    ...rest
  } = props, $[0] = props, $[1] = icon, $[2] = id, $[3] = isActive, $[4] = label, $[5] = rest, $[6] = tabPanelId, $[7] = viewId) : (icon = $[1], id = $[2], isActive = $[3], label = $[4], rest = $[5], tabPanelId = $[6], viewId = $[7]);
  const {
    ready,
    editState
  } = useDocumentPane(), {
    setView
  } = usePaneRouter();
  let t0;
  $[8] !== setView || $[9] !== viewId ? (t0 = () => setView(viewId), $[8] = setView, $[9] = viewId, $[10] = t0) : t0 = $[10];
  const handleClick = t0, t1 = !ready && !editState?.draft && !editState?.published;
  let t2;
  return $[11] !== handleClick || $[12] !== icon || $[13] !== id || $[14] !== isActive || $[15] !== label || $[16] !== rest || $[17] !== t1 || $[18] !== tabPanelId ? (t2 = /* @__PURE__ */ jsx(Tab, { ...rest, "aria-controls": tabPanelId, disabled: t1, icon, id, label, onClick: handleClick, selected: isActive }), $[11] = handleClick, $[12] = icon, $[13] = id, $[14] = isActive, $[15] = label, $[16] = rest, $[17] = t1, $[18] = tabPanelId, $[19] = t2) : t2 = $[19], t2;
}
function DocumentHeaderTitle() {
  const $ = c(22), {
    connectionState,
    schemaType,
    title,
    editState
  } = useDocumentPane(), documentValue = editState?.draft || editState?.published, subscribed = !!documentValue;
  let t0;
  $[0] !== documentValue || $[1] !== schemaType || $[2] !== subscribed ? (t0 = {
    enabled: subscribed,
    schemaType,
    value: documentValue
  }, $[0] = documentValue, $[1] = schemaType, $[2] = subscribed, $[3] = t0) : t0 = $[3];
  const {
    error,
    value
  } = unstable_useValuePreview(t0), {
    t
  } = useTranslation(structureLocaleNamespace);
  if (connectionState === "connecting" && !subscribed) {
    let t12;
    return $[4] === Symbol.for("react.memo_cache_sentinel") ? (t12 = /* @__PURE__ */ jsx(Fragment, {}), $[4] = t12) : t12 = $[4], t12;
  }
  if (title) {
    let t12;
    return $[5] !== title ? (t12 = /* @__PURE__ */ jsx(Fragment, { children: title }), $[5] = title, $[6] = t12) : t12 = $[6], t12;
  }
  if (!documentValue) {
    const t12 = schemaType?.title || schemaType?.name;
    let t22;
    $[7] !== t || $[8] !== t12 ? (t22 = t("panes.document-header-title.new.text", {
      schemaType: t12
    }), $[7] = t, $[8] = t12, $[9] = t22) : t22 = $[9];
    let t3;
    return $[10] !== t22 ? (t3 = /* @__PURE__ */ jsx(Fragment, { children: t22 }), $[10] = t22, $[11] = t3) : t3 = $[11], t3;
  }
  if (error) {
    let t12;
    $[12] !== error.message || $[13] !== t ? (t12 = t("panes.document-header-title.error.text", {
      error: error.message
    }), $[12] = error.message, $[13] = t, $[14] = t12) : t12 = $[14];
    let t22;
    return $[15] !== t12 ? (t22 = /* @__PURE__ */ jsx(Fragment, { children: t12 }), $[15] = t12, $[16] = t22) : t22 = $[16], t22;
  }
  let t1;
  $[17] !== t || $[18] !== value?.title ? (t1 = value?.title || /* @__PURE__ */ jsx("span", { style: {
    color: "var(--card-muted-fg-color)"
  }, children: t("panes.document-header-title.untitled.text") }), $[17] = t, $[18] = value?.title, $[19] = t1) : t1 = $[19];
  let t2;
  return $[20] !== t1 ? (t2 = /* @__PURE__ */ jsx(Fragment, { children: t1 }), $[20] = t1, $[21] = t2) : t2 = $[21], t2;
}
const DocumentPanelHeader = memo(forwardRef(function(_props, ref) {
  const {
    menuItems
  } = _props, {
    actions: allActions,
    editState,
    onMenuAction,
    onPaneClose,
    onPaneSplit,
    menuItemGroups,
    schemaType,
    connectionState,
    views: views2,
    unstable_languageFilter
  } = useDocumentPane(), {
    features
  } = useStructureTool(), {
    index,
    BackLink: BackLink2,
    hasGroupSiblings
  } = usePaneRouter(), {
    actions: fieldActions
  } = useFieldActions(), [referenceElement, setReferenceElement] = useState(null), actions = useMemo(() => (allActions ?? []).filter((action) => !isRestoreAction(action)), [allActions]), menuNodes = useMemo(() => resolveMenuNodes({
    actionHandler: onMenuAction,
    fieldActions,
    menuItems,
    menuItemGroups
  }), [onMenuAction, fieldActions, menuItemGroups, menuItems]), menuButtonNodes = useMemo(() => menuNodes.filter(isMenuNodeButton), [menuNodes]), contextMenuNodes = useMemo(() => menuNodes.filter(isNotMenuNodeButton), [menuNodes]), showTabs = views2.length > 1, {
    collapsed,
    isLast
  } = usePane(), tabIndex = isLast && !collapsed ? -1 : 0, showSplitPaneButton = features.splitViews && onPaneSplit && views2.length > 1, showSplitPaneCloseButton = showSplitPaneButton && hasGroupSiblings, showBackButton = features.backButton && index > 0, showPaneGroupCloseButton = !showSplitPaneCloseButton && !showBackButton && !!BackLink2, {
    t
  } = useTranslation(structureLocaleNamespace), renderPaneActions = useCallback(({
    states
  }) => /* @__PURE__ */ jsx(DocumentPanelHeaderActionDialogDeferred, { contextMenuNodes, setReferenceElement, referenceElement, states }), [contextMenuNodes, referenceElement]);
  return /* @__PURE__ */ jsx(TooltipDelayGroupProvider, { children: /* @__PURE__ */ jsx(PaneHeader$1, { border: !0, ref, loading: connectionState === "connecting" && !editState?.draft && !editState?.published, title: /* @__PURE__ */ jsx(DocumentHeaderTitle, {}), tabs: showTabs && /* @__PURE__ */ jsx(DocumentHeaderTabs, {}), tabIndex, backButton: showBackButton && /* @__PURE__ */ jsx(Button, { as: BackLink2, "data-as": "a", icon: ArrowLeftIcon, mode: "bleed", tooltipProps: {
    content: t("pane-header.back-button.text")
  } }), actions: /* @__PURE__ */ jsxs(Flex, { align: "center", gap: 1, children: [
    unstable_languageFilter.length > 0 && /* @__PURE__ */ jsx(Fragment, { children: unstable_languageFilter.map((languageFilterComponent, idx) => createElement(languageFilterComponent, {
      // eslint-disable-next-line react/no-array-index-key
      key: `language-filter-${idx}`,
      schemaType
    })) }),
    menuButtonNodes.map((item) => /* @__PURE__ */ jsx(PaneHeaderActionButton, { node: item }, item.key)),
    editState && /* @__PURE__ */ jsx(RenderActionCollectionState, { actions, actionProps: editState, group: "paneActions", children: renderPaneActions }),
    showSplitPaneButton && /* @__PURE__ */ jsx(Button, { "aria-label": t("buttons.split-pane-button.aria-label"), icon: SplitVerticalIcon, mode: "bleed", onClick: onPaneSplit, tooltipProps: {
      content: t("buttons.split-pane-button.tooltip")
    } }, "split-pane-button"),
    showSplitPaneCloseButton && /* @__PURE__ */ jsx(Button, { icon: CloseIcon, mode: "bleed", onClick: onPaneClose, tooltipProps: {
      content: t("buttons.split-pane-close-button.title")
    } }, "close-view-button"),
    showPaneGroupCloseButton && /* @__PURE__ */ jsx(Button, { icon: CloseIcon, mode: "bleed", tooltipProps: {
      content: t("buttons.split-pane-close-group-button.title")
    }, as: BackLink2 }, "close-view-button")
  ] }) }) });
})), DocumentPanelHeaderActionDialogDeferred = memo(function(props) {
  const $ = c(5), {
    setReferenceElement,
    referenceElement,
    contextMenuNodes
  } = props, states = useDeferredValue(props.states);
  let t0;
  return $[0] !== contextMenuNodes || $[1] !== referenceElement || $[2] !== setReferenceElement || $[3] !== states ? (t0 = /* @__PURE__ */ jsx(DocumentPanelHeaderActionDialog, { setReferenceElement, referenceElement, contextMenuNodes, states }), $[0] = contextMenuNodes, $[1] = referenceElement, $[2] = setReferenceElement, $[3] = states, $[4] = t0) : t0 = $[4], t0;
}), DocumentPanelHeaderActionDialog = memo(function(props) {
  const $ = c(8), {
    states,
    setReferenceElement,
    contextMenuNodes,
    referenceElement
  } = props;
  let t0;
  $[0] !== contextMenuNodes || $[1] !== setReferenceElement || $[2] !== states ? (t0 = (t12) => {
    const {
      handleAction
    } = t12;
    return /* @__PURE__ */ jsx("div", { ref: setReferenceElement, children: /* @__PURE__ */ jsx(PaneContextMenuButton, { nodes: contextMenuNodes, actionsNodes: states.length > 0 ? states.map((actionState, actionIndex) => /* @__PURE__ */ jsx(ActionMenuListItem, { actionState, disabled: !!actionState.disabled, index: actionIndex, onAction: handleAction }, actionState.label)) : void 0 }, "context-menu") });
  }, $[0] = contextMenuNodes, $[1] = setReferenceElement, $[2] = states, $[3] = t0) : t0 = $[3];
  const renderActionDialog = t0;
  let t1;
  return $[4] !== referenceElement || $[5] !== renderActionDialog || $[6] !== states ? (t1 = /* @__PURE__ */ jsx(ActionDialogWrapper, { actionStates: states, referenceElement, children: renderActionDialog }), $[4] = referenceElement, $[5] = renderActionDialog, $[6] = states, $[7] = t1) : t1 = $[7], t1;
});
function SpacerButton(t0) {
  const $ = c(3), {
    size
  } = t0;
  let t1;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t1 = {
    pointerEvents: "none",
    visibility: "hidden",
    width: 0
  }, $[0] = t1) : t1 = $[0];
  let t2;
  return $[1] !== size ? (t2 = /* @__PURE__ */ jsx(Button, { "aria-hidden": !0, disabled: !0, size, style: t1, text: "-" }), $[1] = size, $[2] = t2) : t2 = $[2], t2;
}
const BADGE_TONES = {
  primary: "primary",
  success: "positive",
  warning: "caution",
  danger: "critical"
}, DocumentBadgesInner = memo(function(t0) {
  const $ = c(4), {
    states
  } = t0;
  if (states.length === 0)
    return null;
  let t1;
  $[0] !== states ? (t1 = states.map(_temp$8), $[0] = states, $[1] = t1) : t1 = $[1];
  let t2;
  return $[2] !== t1 ? (t2 = /* @__PURE__ */ jsx(Inline, { space: 1, children: t1 }), $[2] = t1, $[3] = t2) : t2 = $[3], t2;
}), DocumentBadgesDeferred = memo(function(props) {
  const $ = c(2), states = useDeferredValue(props.states);
  let t0;
  return $[0] !== states ? (t0 = /* @__PURE__ */ jsx(DocumentBadgesInner, { states }), $[0] = states, $[1] = t0) : t0 = $[1], t0;
});
function DocumentBadges() {
  const $ = c(3), {
    badges,
    editState
  } = useDocumentPane(), renderDocumentBadges = _temp2$3;
  if (!editState || !badges)
    return null;
  let t0;
  return $[0] !== badges || $[1] !== editState ? (t0 = /* @__PURE__ */ jsx(RenderBadgeCollectionState, { badges, badgeProps: editState, children: renderDocumentBadges }), $[0] = badges, $[1] = editState, $[2] = t0) : t0 = $[2], t0;
}
function _temp2$3(t0) {
  const {
    states
  } = t0;
  return /* @__PURE__ */ jsx(DocumentBadgesDeferred, { states });
}
function _temp$8(badge, index) {
  return /* @__PURE__ */ jsx(Tooltip, { content: badge.title, disabled: !badge.title, placement: "top", portal: !0, children: /* @__PURE__ */ jsx(Badge, { fontSize: 1, mode: "outline", paddingX: 2, paddingY: 1, radius: 4, tone: badge.color ? BADGE_TONES[badge.color] : void 0, style: {
    whiteSpace: "nowrap"
  }, children: badge.label }) }, `${badge.label}-${index}`);
}
const StyledMotionPath = styled(motion.path)`
  transform-origin: center;
`, Circle = (props) => /* @__PURE__ */ jsx(motion.circle, { fill: "none", r: "8", cx: "12.5", cy: "12.5", strokeWidth: "1.2", ...props }), Arrows = (props) => /* @__PURE__ */ jsx(StyledMotionPath, { fill: "none", d: "M14 17.5619L11.5 20.5L14.5 23.0619M11 7.43811L13.5 4.50001L10.5 1.93811", ...props }), Checkmark = (props) => /* @__PURE__ */ jsx(motion.path, { d: "M9.5 12.1316L11.7414 14.5L16 10", ...props }), rotateAnimation = keyframes`
  0% {
    transform: rotate(0);
  }
  100% {
    transform: rotate(360deg);
  }
`, RotateGroup = styled.g`
  transform-origin: center;

  &[data-rotate] {
    animation: ${rotateAnimation} 1s ease-in-out infinite;
  }
`, root = {
  syncing: {
    scale: 1,
    transition: {
      duration: 0
    }
  },
  saved: {
    scale: [1, 0.8, 1.2, 0.9, 1.1, 0.95, 1.05, 0.99, 1],
    transition: {
      duration: 0.5,
      delay: 0.2
    }
  },
  changes: {
    transition: {
      duration: 0
    }
  }
}, circle = {
  syncing: {
    strokeDasharray: "0, 0, 23, 3, 23, 3",
    strokeDashoffset: 10,
    opacity: 1,
    transition: {
      duration: 0
    }
  },
  saved: {
    strokeDasharray: "0, 0, 23, 0, 23, 0",
    strokeDashoffset: 10,
    opacity: 1,
    transition: {
      duration: 0.2
    }
  },
  changes: {
    strokeDasharray: "0, 60, 23, 0, 23, 0",
    strokeDashoffset: 0,
    opacity: 0,
    transition: {
      duration: 0.5
    }
  }
}, arrows = {
  syncing: {
    opacity: 1,
    transition: {
      duration: 0
    }
  },
  saved: {
    opacity: 0,
    transition: {
      duration: 0.2
    }
  },
  changes: {
    opacity: 0
  }
}, checkmark = {
  syncing: {
    pathLength: 0,
    transition: {
      duration: 0
    }
  },
  saved: {
    pathLength: 1,
    transition: {
      delay: 0.4,
      duration: 0.3
    }
  },
  changes: {
    pathLength: 0,
    transition: {
      duration: 0.2
    }
  }
};
function AnimatedStatusIcon(props) {
  const $ = c(13), {
    status
  } = props;
  if (!status)
    return null;
  const t0 = status === "changes" ? void 0 : "";
  let t1, t2;
  $[0] !== status ? (t1 = /* @__PURE__ */ jsx(Arrows, { variants: arrows, initial: status, animate: status }), t2 = /* @__PURE__ */ jsx(Circle, { variants: circle, initial: status, animate: status }), $[0] = status, $[1] = t1, $[2] = t2) : (t1 = $[1], t2 = $[2]);
  let t3;
  $[3] !== t0 || $[4] !== t1 || $[5] !== t2 ? (t3 = /* @__PURE__ */ jsxs(RotateGroup, { "data-rotate": t0, children: [
    t1,
    t2
  ] }), $[3] = t0, $[4] = t1, $[5] = t2, $[6] = t3) : t3 = $[6];
  let t4;
  $[7] !== status ? (t4 = /* @__PURE__ */ jsx(Checkmark, { variants: checkmark, initial: status, animate: status }), $[7] = status, $[8] = t4) : t4 = $[8];
  let t5;
  return $[9] !== status || $[10] !== t3 || $[11] !== t4 ? (t5 = /* @__PURE__ */ jsx("svg", { width: "1em", height: "1em", viewBox: "0 0 25 25", fill: "none", stroke: "currentColor", strokeWidth: "1.2", "data-sanity-icon": "animated-status-icon", children: /* @__PURE__ */ jsxs(motion.g, { variants: root, initial: status, animate: status, children: [
    t3,
    t4
  ] }) }), $[9] = status, $[10] = t3, $[11] = t4, $[12] = t5) : t5 = $[12], t5;
}
const STATUS_DICTIONARY = {
  saved: {
    i18nKey: "status-bar.document-status-pulse.status.saved.text",
    tone: "positive"
  },
  syncing: {
    i18nKey: "status-bar.document-status-pulse.status.syncing.text",
    tone: "default"
  }
}, DocumentStatusPulse = (props) => {
  const $ = c(13), {
    status
  } = props, {
    t
  } = useTranslation(structureLocaleNamespace);
  if (status !== "saved" && status !== "syncing")
    return null;
  const currentStatus = STATUS_DICTIONARY[status];
  let t0;
  $[0] !== status ? (t0 = /* @__PURE__ */ jsx(AnimatedStatusIcon, { status }), $[0] = status, $[1] = t0) : t0 = $[1];
  let t1;
  $[2] !== currentStatus.tone || $[3] !== t0 ? (t1 = /* @__PURE__ */ jsx(TextWithTone, { size: 1, tone: currentStatus.tone, children: t0 }), $[2] = currentStatus.tone, $[3] = t0, $[4] = t1) : t1 = $[4];
  let t2;
  $[5] !== currentStatus.i18nKey || $[6] !== t ? (t2 = t(currentStatus.i18nKey), $[5] = currentStatus.i18nKey, $[6] = t, $[7] = t2) : t2 = $[7];
  let t3;
  $[8] !== t2 ? (t3 = /* @__PURE__ */ jsx(Text, { muted: !0, size: 1, children: t2 }), $[8] = t2, $[9] = t3) : t3 = $[9];
  let t4;
  return $[10] !== t1 || $[11] !== t3 ? (t4 = /* @__PURE__ */ jsxs(Flex, { align: "center", gap: 2, "data-testid": "pane-footer-document-status-pulse", children: [
    t1,
    t3
  ] }), $[10] = t1, $[11] = t3, $[12] = t4) : t4 = $[12], t4;
}, SYNCING_TIMEOUT = 1e3, SAVED_TIMEOUT = 3e3;
function DocumentStatusLine(t0) {
  const $ = c(33), {
    singleLine
  } = t0, {
    documentId,
    documentType,
    editState,
    value
  } = useDocumentPane(), [status, setStatus] = useState(null), syncState = useSyncState(documentId, documentType), lastUpdated = value?._updatedAt;
  let t1;
  $[0] !== status || $[1] !== syncState.isSyncing ? (t1 = () => {
    if (status === "syncing" && !syncState.isSyncing) {
      const timerId = setTimeout(() => setStatus("saved"), SYNCING_TIMEOUT);
      return () => clearTimeout(timerId);
    }
    if (status === "saved") {
      const timerId_0 = setTimeout(() => setStatus(null), SAVED_TIMEOUT);
      return () => clearTimeout(timerId_0);
    }
  }, $[0] = status, $[1] = syncState.isSyncing, $[2] = t1) : t1 = $[2];
  let t2;
  $[3] !== lastUpdated || $[4] !== status || $[5] !== syncState.isSyncing ? (t2 = [status, lastUpdated, syncState.isSyncing], $[3] = lastUpdated, $[4] = status, $[5] = syncState.isSyncing, $[6] = t2) : t2 = $[6], useEffect(t1, t2);
  let t3;
  $[7] === Symbol.for("react.memo_cache_sentinel") ? (t3 = () => {
    setStatus(null);
  }, $[7] = t3) : t3 = $[7];
  let t4;
  $[8] !== documentId ? (t4 = [documentId], $[8] = documentId, $[9] = t4) : t4 = $[9], useLayoutEffect(t3, t4);
  let t5;
  $[10] !== syncState.isSyncing ? (t5 = () => {
    syncState.isSyncing && setStatus("syncing");
  }, $[10] = syncState.isSyncing, $[11] = t5) : t5 = $[11];
  let t6;
  if ($[12] !== lastUpdated || $[13] !== syncState.isSyncing ? (t6 = [syncState.isSyncing, lastUpdated], $[12] = lastUpdated, $[13] = syncState.isSyncing, $[14] = t6) : t6 = $[14], useLayoutEffect(t5, t6), status) {
    const t72 = status || void 0;
    let t82;
    return $[15] !== t72 ? (t82 = /* @__PURE__ */ jsx(DocumentStatusPulse, { status: t72 }), $[15] = t72, $[16] = t82) : t82 = $[16], t82;
  }
  const t7 = editState?.draft, t8 = editState?.published;
  let t9;
  $[17] !== t7 || $[18] !== t8 ? (t9 = /* @__PURE__ */ jsx(DocumentStatus, { absoluteDate: !0, draft: t7, published: t8 }), $[17] = t7, $[18] = t8, $[19] = t9) : t9 = $[19];
  const t10 = editState?.draft, t11 = editState?.published;
  let t12;
  $[20] !== t10 || $[21] !== t11 ? (t12 = /* @__PURE__ */ jsx(DocumentStatusIndicator, { draft: t10, published: t11 }), $[20] = t10, $[21] = t11, $[22] = t12) : t12 = $[22];
  const t13 = editState?.draft, t14 = editState?.published;
  let t15;
  $[23] !== singleLine || $[24] !== t13 || $[25] !== t14 ? (t15 = /* @__PURE__ */ jsx(DocumentStatus, { draft: t13, published: t14, singleLine }), $[23] = singleLine, $[24] = t13, $[25] = t14, $[26] = t15) : t15 = $[26];
  let t16;
  $[27] !== t12 || $[28] !== t15 ? (t16 = /* @__PURE__ */ jsxs(Flex, { align: "center", gap: 3, children: [
    t12,
    t15
  ] }), $[27] = t12, $[28] = t15, $[29] = t16) : t16 = $[29];
  let t17;
  return $[30] !== t16 || $[31] !== t9 ? (t17 = /* @__PURE__ */ jsx(Tooltip, { content: t9, placement: "top", children: t16 }), $[30] = t16, $[31] = t9, $[32] = t17) : t17 = $[32], t17;
}
const StatusText = styled(Text)`
  color: var(--card-muted-fg-color);

  em {
    color: var(--card-fg-color);
    font-weight: 500;
    font-style: normal;
  }
`;
function RevisionStatusLine() {
  const $ = c(31), {
    displayed
  } = useDocumentPane(), {
    t
  } = useTranslation(), date = displayed?._updatedAt || displayed?._createdAt;
  let t0;
  $[0] !== date || $[1] !== t ? (t0 = date ? /* @__PURE__ */ jsx(Translate, { t, i18nKey: "document-status.revision-from", values: {
    date: format(new Date(date), "MMM d, yyyy '@' pp")
  } }) : null, $[0] = date, $[1] = t, $[2] = t0) : t0 = $[2];
  let T0, T1, T2, message, t1, t2, t3, t4, t5, t6;
  $[3] !== t0 ? (message = {
    name: "revision",
    icon: RestoreIcon,
    text: t0,
    tone: "caution"
  }, T2 = Flex, t4 = 1, t5 = 3, t6 = 2, T1 = Box, t3 = "none", T0 = Text, t1 = 1, t2 = createElement(message.icon), $[3] = t0, $[4] = T0, $[5] = T1, $[6] = T2, $[7] = message, $[8] = t1, $[9] = t2, $[10] = t3, $[11] = t4, $[12] = t5, $[13] = t6) : (T0 = $[4], T1 = $[5], T2 = $[6], message = $[7], t1 = $[8], t2 = $[9], t3 = $[10], t4 = $[11], t5 = $[12], t6 = $[13]);
  let t7;
  $[14] !== T0 || $[15] !== t1 || $[16] !== t2 ? (t7 = /* @__PURE__ */ jsx(T0, { size: t1, children: t2 }), $[14] = T0, $[15] = t1, $[16] = t2, $[17] = t7) : t7 = $[17];
  let t8;
  $[18] !== T1 || $[19] !== t3 || $[20] !== t7 ? (t8 = /* @__PURE__ */ jsx(T1, { flex: t3, children: t7 }), $[18] = T1, $[19] = t3, $[20] = t7, $[21] = t8) : t8 = $[21];
  let t9;
  $[22] !== message.text ? (t9 = /* @__PURE__ */ jsx(Box, { flex: 1, children: /* @__PURE__ */ jsx(StatusText, { size: 1, textOverflow: "ellipsis", children: message.text }) }), $[22] = message.text, $[23] = t9) : t9 = $[23];
  let t10;
  return $[24] !== T2 || $[25] !== t4 || $[26] !== t5 || $[27] !== t6 || $[28] !== t8 || $[29] !== t9 ? (t10 = /* @__PURE__ */ jsx(Fragment, { children: /* @__PURE__ */ jsxs(T2, { flex: t4, gap: t5, padding: t6, children: [
    t8,
    t9
  ] }) }), $[24] = T2, $[25] = t4, $[26] = t5, $[27] = t6, $[28] = t8, $[29] = t9, $[30] = t10) : t10 = $[30], t10;
}
function useResizeObserver(t0) {
  const $ = c(4), {
    element,
    onResize
  } = t0;
  let t1, t2;
  $[0] !== element || $[1] !== onResize ? (t1 = () => (element && resizeObserver.observe(element, onResize), () => {
    element && resizeObserver.unobserve(element);
  }), t2 = [element, onResize], $[0] = element, $[1] = onResize, $[2] = t1, $[3] = t2) : (t1 = $[2], t2 = $[3]), useLayoutEffect(t1, t2);
}
const CONTAINER_BREAKPOINT = 480;
function DocumentStatusBar(props) {
  const $ = c(21), {
    actionsBoxRef,
    createLinkMetadata
  } = props, {
    editState,
    timelineStore,
    onChange: onDocumentChange
  } = useDocumentPane(), {
    title
  } = useDocumentTitle(), CreateLinkedActions = useSanityCreateConfig().components?.documentLinkedActions, showingRevision = useTimelineSelector(timelineStore, _temp$7), [collapsed, setCollapsed] = useState(null), [rootElement, setRootElement] = useState(null);
  let t0;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = (event) => {
    setCollapsed(event.contentRect.width < CONTAINER_BREAKPOINT);
  }, $[0] = t0) : t0 = $[0];
  const handleResize = t0;
  let t1;
  $[1] !== rootElement ? (t1 = {
    element: rootElement,
    onResize: handleResize
  }, $[1] = rootElement, $[2] = t1) : t1 = $[2], useResizeObserver(t1);
  const shouldRender = editState?.ready && typeof collapsed == "boolean";
  let actions;
  if (createLinkMetadata && isSanityCreateLinked(createLinkMetadata) && CreateLinkedActions) {
    let t22;
    $[3] !== CreateLinkedActions || $[4] !== createLinkMetadata || $[5] !== onDocumentChange || $[6] !== title ? (t22 = /* @__PURE__ */ jsx(CreateLinkedActions, { metadata: createLinkMetadata, panelPortalElementId: DOCUMENT_PANEL_PORTAL_ELEMENT, onDocumentChange, documentTitle: title }), $[3] = CreateLinkedActions, $[4] = createLinkMetadata, $[5] = onDocumentChange, $[6] = title, $[7] = t22) : t22 = $[7], actions = t22;
  } else if (showingRevision) {
    let t22;
    $[8] === Symbol.for("react.memo_cache_sentinel") ? (t22 = /* @__PURE__ */ jsx(HistoryStatusBarActions, {}), $[8] = t22) : t22 = $[8], actions = t22;
  } else {
    let t22;
    $[9] === Symbol.for("react.memo_cache_sentinel") ? (t22 = /* @__PURE__ */ jsx(DocumentStatusBarActions, {}), $[9] = t22) : t22 = $[9], actions = t22;
  }
  const t2 = showingRevision ? "caution" : void 0;
  let t3;
  $[10] !== actions || $[11] !== actionsBoxRef || $[12] !== collapsed || $[13] !== shouldRender || $[14] !== showingRevision ? (t3 = shouldRender && /* @__PURE__ */ jsxs(Flex, { align: "stretch", gap: 1, justify: "space-between", paddingY: 2, paddingLeft: showingRevision ? 3 : 4, paddingRight: showingRevision ? 2 : 3, children: [
    /* @__PURE__ */ jsxs(Flex, { align: "center", flex: 1, gap: collapsed ? 2 : 3, wrap: "wrap", paddingRight: 3, children: [
      /* @__PURE__ */ jsxs(Flex, { align: "center", children: [
        showingRevision ? /* @__PURE__ */ jsx(RevisionStatusLine, {}) : /* @__PURE__ */ jsx(DocumentStatusLine, { singleLine: !collapsed }),
        /* @__PURE__ */ jsx(SpacerButton, { size: "large" })
      ] }),
      /* @__PURE__ */ jsx(DocumentBadges, {})
    ] }),
    /* @__PURE__ */ jsxs(Flex, { align: "flex-start", justify: "flex-end", ref: actionsBoxRef, style: {
      flexShrink: 0,
      marginLeft: "auto"
    }, children: [
      /* @__PURE__ */ jsx(SpacerButton, { size: "large" }),
      actions
    ] })
  ] }), $[10] = actions, $[11] = actionsBoxRef, $[12] = collapsed, $[13] = shouldRender, $[14] = showingRevision, $[15] = t3) : t3 = $[15];
  let t4;
  $[16] !== t3 ? (t4 = /* @__PURE__ */ jsx(Flex, { direction: "column", ref: setRootElement, sizing: "border", children: t3 }), $[16] = t3, $[17] = t4) : t4 = $[17];
  let t5;
  return $[18] !== t2 || $[19] !== t4 ? (t5 = /* @__PURE__ */ jsx(Card, { tone: t2, children: t4 }), $[18] = t2, $[19] = t4, $[20] = t5) : t5 = $[20], t5;
}
function _temp$7(state2) {
  return state2.onOlderRevision;
}
const KeyboardShortcutResponder = memo(function(props) {
  const $ = c(27);
  let actionsBoxElement, activeIndex, children, id, onActionStart, onKeyDown, rest, rootRef, states, t0;
  $[0] !== props ? ({
    actionsBoxElement,
    activeIndex,
    as: t0,
    children,
    id,
    onActionStart,
    onKeyDown,
    rootRef,
    states,
    ...rest
  } = props, $[0] = props, $[1] = actionsBoxElement, $[2] = activeIndex, $[3] = children, $[4] = id, $[5] = onActionStart, $[6] = onKeyDown, $[7] = rest, $[8] = rootRef, $[9] = states, $[10] = t0) : (actionsBoxElement = $[1], activeIndex = $[2], children = $[3], id = $[4], onActionStart = $[5], onKeyDown = $[6], rest = $[7], rootRef = $[8], states = $[9], t0 = $[10]);
  const as = t0 === void 0 ? "div" : t0, activeAction = states[activeIndex];
  let t1;
  $[11] !== onActionStart || $[12] !== onKeyDown || $[13] !== states ? (t1 = (event) => {
    const matchingStates = states.filter((state2) => state2.shortcut && isHotkey(state2.shortcut, event)), matchingState = matchingStates[0];
    if (matchingStates.length > 1 && console.warn(`Keyboard shortcut conflict: More than one document action matches the shortcut "${matchingState.shortcut}"`), matchingState && !matchingState.disabled && matchingState.onHandle) {
      event.preventDefault(), matchingState.onHandle(), onActionStart(states.indexOf(matchingState));
      return;
    }
    onKeyDown && onKeyDown(event);
  }, $[11] = onActionStart, $[12] = onKeyDown, $[13] = states, $[14] = t1) : t1 = $[14];
  const handleKeyDown = t1;
  let t2;
  if ($[15] !== actionsBoxElement || $[16] !== activeAction || $[17] !== as || $[18] !== children || $[19] !== handleKeyDown || $[20] !== id || $[21] !== rest || $[22] !== rootRef) {
    let t3;
    $[24] !== actionsBoxElement || $[25] !== activeAction ? (t3 = activeAction && activeAction.dialog && /* @__PURE__ */ jsx(LegacyLayerProvider, { zOffset: "paneFooter", children: /* @__PURE__ */ jsx(ActionStateDialog, { dialog: activeAction.dialog, referenceElement: actionsBoxElement }) }), $[24] = actionsBoxElement, $[25] = activeAction, $[26] = t3) : t3 = $[26], t2 = createElement(as, {
      id,
      onKeyDown: handleKeyDown,
      tabIndex: -1,
      ...rest,
      ref: rootRef
    }, [children, t3]), $[15] = actionsBoxElement, $[16] = activeAction, $[17] = as, $[18] = children, $[19] = handleKeyDown, $[20] = id, $[21] = rest, $[22] = rootRef, $[23] = t2;
  } else
    t2 = $[23];
  return t2;
}), DocumentActionShortcuts = memo((props) => {
  const $ = c(18);
  let actionsBoxElement, children, rest, t0;
  $[0] !== props ? ({
    actionsBoxElement,
    as: t0,
    children,
    ...rest
  } = props, $[0] = props, $[1] = actionsBoxElement, $[2] = children, $[3] = rest, $[4] = t0) : (actionsBoxElement = $[1], children = $[2], rest = $[3], t0 = $[4]);
  const as = t0 === void 0 ? "div" : t0, {
    actions,
    editState
  } = useDocumentPane(), [activeIndex, setActiveIndex] = useState(-1);
  let t1;
  $[5] === Symbol.for("react.memo_cache_sentinel") ? (t1 = (idx) => {
    setActiveIndex(idx);
  }, $[5] = t1) : t1 = $[5];
  const onActionStart = t1;
  let t2, t3;
  $[6] !== editState ? (t3 = editState && {
    ...editState,
    onComplete: _temp$6,
    revision: void 0
  }, $[6] = editState, $[7] = t3) : t3 = $[7], t2 = t3;
  const actionProps = t2;
  let t4;
  $[8] !== actionsBoxElement || $[9] !== activeIndex || $[10] !== as || $[11] !== children || $[12] !== rest ? (t4 = (t52) => {
    const {
      states
    } = t52;
    return /* @__PURE__ */ jsx(KeyboardShortcutResponder, { ...rest, activeIndex, actionsBoxElement, as, onActionStart, states, children });
  }, $[8] = actionsBoxElement, $[9] = activeIndex, $[10] = as, $[11] = children, $[12] = rest, $[13] = t4) : t4 = $[13];
  const renderDocumentActionShortcuts = t4;
  if (!actionProps || !actions)
    return null;
  let t5;
  return $[14] !== actionProps || $[15] !== actions || $[16] !== renderDocumentActionShortcuts ? (t5 = /* @__PURE__ */ jsx(RenderActionCollectionState, { actionProps, actions, children: renderDocumentActionShortcuts }), $[14] = actionProps, $[15] = actions, $[16] = renderDocumentActionShortcuts, $[17] = t5) : t5 = $[17], t5;
});
DocumentActionShortcuts.displayName = "Memo(DocumentActionShortcuts)";
function _temp$6() {
}
function getInspectorItems({
  currentInspector,
  hasValue,
  inspectors: inspectors2,
  inspectorMenuItems
}) {
  return inspectors2.map((inspector, index) => {
    const menuItem = inspectorMenuItems[index];
    return !menuItem || menuItem.hidden ? null : {
      action: `${INSPECT_ACTION_PREFIX}${inspector.name}`,
      group: menuItem.showAsAction ? void 0 : "inspectors",
      icon: menuItem.icon,
      isDisabled: !hasValue,
      selected: currentInspector?.name === inspector.name,
      shortcut: menuItem.hotkeys?.join("+"),
      showAsAction: menuItem.showAsAction,
      title: menuItem.title,
      tone: menuItem.tone
    };
  }).filter(Boolean);
}
function getInspectItem({
  hasValue,
  t
}) {
  return {
    action: "inspect",
    group: "inspectors",
    title: t("document-inspector.menu-item.title"),
    icon: JsonIcon,
    isDisabled: !hasValue,
    shortcut: "Ctrl+Alt+I"
  };
}
function getProductionPreviewItem({
  previewUrl,
  t
}) {
  return previewUrl ? {
    action: "production-preview",
    group: "links",
    title: t("production-preview.menu-item.title"),
    icon: EarthAmericasIcon,
    shortcut: "Ctrl+Alt+O"
  } : null;
}
function getMenuItems(params) {
  const inspectorItems = getInspectorItems(params), items = [
    // Get production preview item
    getProductionPreviewItem(params)
  ].filter(Boolean);
  return [
    // Always present document menu item to copy current url to clipboard
    {
      action: "copy-document-url",
      showAsAction: !0,
      title: params.t("action.copy-document-url.label"),
      icon: LinkIcon
    },
    ...inspectorItems,
    // TODO: convert to inspector or document view?
    getInspectItem(params),
    ...items
  ];
}
const isSanityDocument = (value) => isRecord(value) && typeof value._id == "string" && typeof value._type == "string";
function usePreviewUrl(value) {
  const $ = c(6), {
    resolveProductionUrl
  } = useSource().document;
  let t0, t1;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t1 = new BehaviorSubject(void 0), $[0] = t1) : t1 = $[0], t0 = t1;
  const subject = t0;
  let t2, t3;
  $[1] !== value ? (t2 = () => {
    subject.next(value);
  }, t3 = [subject, value], $[1] = value, $[2] = t2, $[3] = t3) : (t2 = $[2], t3 = $[3]), useEffect(t2, t3);
  let t4, t5;
  return $[4] !== resolveProductionUrl ? (t5 = subject.asObservable().pipe(distinctUntilChanged(), debounceTime(500), switchMap((document2) => isSanityDocument(document2) ? from(resolveProductionUrl({
    document: document2
  })) : of(void 0)), distinctUntilChanged(), catchError(_temp$5)), $[4] = resolveProductionUrl, $[5] = t5) : t5 = $[5], t4 = t5, useObservable(t4);
}
function _temp$5(err) {
  const message = isRecord(err) && typeof err.message == "string" ? err.message : "Unknown error";
  throw new Error(`An error was thrown while trying to get your preview url: ${message}`);
}
function DocumentLayoutError(props) {
  const $ = c(23), {
    documentType,
    value,
    currentMinWidth,
    paneKey,
    minWidth
  } = props, {
    t
  } = useTranslation();
  let t0;
  $[0] !== documentType ? (t0 = {
    documentType
  }, $[0] = documentType, $[1] = t0) : t0 = $[1];
  let t1;
  $[2] !== t || $[3] !== t0 ? (t1 = /* @__PURE__ */ jsx(Translate, { t, i18nKey: "panes.document-pane.document-unknown-type.title", values: t0 }), $[2] = t, $[3] = t0, $[4] = t1) : t1 = $[4];
  let t2;
  $[5] !== documentType || $[6] !== t ? (t2 = documentType && /* @__PURE__ */ jsx(Text, { as: "p", children: /* @__PURE__ */ jsx(Translate, { t, i18nKey: "panes.document-pane.document-unknown-type.text", values: {
    documentType
  } }) }), $[5] = documentType, $[6] = t, $[7] = t2) : t2 = $[7];
  let t3;
  $[8] !== documentType || $[9] !== t ? (t3 = !documentType && /* @__PURE__ */ jsx(Text, { as: "p", children: t("panes.document-pane.document-unknown-type.without-schema.text") }), $[8] = documentType, $[9] = t, $[10] = t3) : t3 = $[10];
  let t4;
  $[11] !== value ? (t4 = isDev && value && /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(Text, { as: "p", children: "Here is the JSON representation of the document:" }),
    /* @__PURE__ */ jsx(Card, { padding: 3, overflow: "auto", radius: 2, shadow: 1, tone: "inherit", children: /* @__PURE__ */ jsx(Code, { language: "json", size: [1, 1, 2], children: JSON.stringify(value, null, 2) }) })
  ] }), $[11] = value, $[12] = t4) : t4 = $[12];
  let t5;
  $[13] !== t2 || $[14] !== t3 || $[15] !== t4 ? (t5 = /* @__PURE__ */ jsxs(Stack, { space: 4, children: [
    t2,
    t3,
    t4
  ] }), $[13] = t2, $[14] = t3, $[15] = t4, $[16] = t5) : t5 = $[16];
  let t6;
  return $[17] !== currentMinWidth || $[18] !== minWidth || $[19] !== paneKey || $[20] !== t1 || $[21] !== t5 ? (t6 = /* @__PURE__ */ jsx(ErrorPane, { currentMinWidth, flex: 2.5, minWidth, paneKey, title: t1, tone: "caution", children: t5 }), $[17] = currentMinWidth, $[18] = minWidth, $[19] = paneKey, $[20] = t1, $[21] = t5, $[22] = t6) : t6 = $[22], t6;
}
const EMPTY_ARRAY = [], DIALOG_PROVIDER_POSITION = [
  // We use the `position: fixed` for dialogs on narrower screens (first two media breakpoints).
  "fixed",
  "fixed",
  // And we use the `position: absolute` strategy (within panes) on wide screens.
  "absolute"
], StyledChangeConnectorRoot = styled(ChangeConnectorRoot)`
  flex: 1;
  display: flex;
  flex-direction: column;
  min-height: 0;
  min-width: 0;
`;
function DocumentLayout() {
  const {
    changesOpen,
    documentId,
    documentType,
    fieldActions,
    focusPath,
    inspectOpen,
    inspector,
    inspectors: inspectors2,
    onFocus,
    onHistoryOpen,
    onMenuAction,
    onPathOpen,
    paneKey,
    schemaType,
    value
  } = useDocumentPane(), {
    params: paneParams
  } = usePaneRouter(), {
    features
  } = useStructureTool(), {
    t
  } = useTranslation$1(structureLocaleNamespace), {
    collapsed: layoutCollapsed
  } = usePaneLayout(), zOffsets = useZIndex(), previewUrl = usePreviewUrl(value), createLinkMetadata = getSanityCreateLinkMetadata(value), CreateLinkedBannerContent = useSanityCreateConfig().components?.documentLinkedBannerContent, [rootElement, setRootElement] = useState(null), [footerElement, setFooterElement] = useState(null), [headerElement, setHeaderElement] = useState(null), [actionsBoxElement, setActionsBoxElement] = useState(null), [documentPanelPortalElement, setDocumentPanelPortalElement] = useState(null);
  useGlobalCopyPasteElementHandler({
    element: rootElement,
    focusPath,
    value
  });
  const [inspectorMenuItems, setInspectorMenuItems] = useState([]), [rootFieldActionNodes, setRootFieldActionNodes] = useState([]), footerRect = useElementRect(footerElement), headerRect = useElementRect(headerElement), footerHeight = footerRect?.height, headerHeight = headerRect?.height, currentMinWidth = DOCUMENT_PANEL_INITIAL_MIN_WIDTH + (inspector ? DOCUMENT_INSPECTOR_MIN_WIDTH : 0), minWidth = DOCUMENT_PANEL_MIN_WIDTH + (inspector ? DOCUMENT_INSPECTOR_MIN_WIDTH : 0), currentInspector = useMemo(() => inspectors2?.find((i) => i.name === inspector?.name), [inspectors2, inspector?.name]), hasValue = !!value, menuItems = useMemo(() => getMenuItems({
    currentInspector,
    features,
    hasValue,
    inspectorMenuItems,
    inspectors: inspectors2,
    previewUrl,
    t
  }), [currentInspector, features, hasValue, inspectorMenuItems, inspectors2, previewUrl, t]), handleKeyUp = useCallback((event) => {
    for (const item of menuItems)
      if (item.shortcut && isHotkey(item.shortcut, event)) {
        event.preventDefault(), event.stopPropagation(), onMenuAction(item);
        return;
      }
  }, [onMenuAction, menuItems]), onConnectorSetFocus = useCallback((path) => {
    onPathOpen(path), onFocus(path);
  }, [onPathOpen, onFocus]);
  return schemaType ? /* @__PURE__ */ jsxs(GetFormValueProvider, { value, children: [
    inspectors2.length > 0 && /* @__PURE__ */ jsx(DocumentInspectorMenuItemsResolver, { documentId, documentType, inspectors: inspectors2, onMenuItems: setInspectorMenuItems }),
    fieldActions.length > 0 && schemaType && /* @__PURE__ */ jsx(FieldActionsResolver, { actions: fieldActions, documentId, documentType, onActions: setRootFieldActionNodes, path: EMPTY_ARRAY, schemaType }),
    /* @__PURE__ */ jsx(FieldActionsProvider, { actions: rootFieldActionNodes, path: EMPTY_ARRAY, children: /* @__PURE__ */ jsxs(DocumentActionShortcuts, { actionsBoxElement, as: Pane, currentMinWidth, "data-testid": "document-pane", flex: 2.5, id: paneKey, minWidth, onKeyUp: handleKeyUp, rootRef: setRootElement, children: [
      /* @__PURE__ */ jsx(DocumentPanelHeader, { ref: setHeaderElement, menuItems }),
      createLinkMetadata && isSanityCreateLinked(createLinkMetadata) && CreateLinkedBannerContent && /* @__PURE__ */ jsx(ShowWhenPaneOpen, { children: /* @__PURE__ */ jsx(Banner, { tone: "transparent", "data-test-id": "sanity-create-read-only-banner", content: /* @__PURE__ */ jsx(CreateLinkedBannerContent, { metadata: createLinkMetadata }) }) }),
      /* @__PURE__ */ jsx(DialogProvider, { position: DIALOG_PROVIDER_POSITION, zOffset: zOffsets.paneDialog, children: /* @__PURE__ */ jsx(Flex, { direction: "column", flex: 1, height: layoutCollapsed ? void 0 : "fill", children: /* @__PURE__ */ jsx(StyledChangeConnectorRoot, { "data-testid": "change-connector-root", isReviewChangesOpen: changesOpen && paneParams?.changesInspectorTab === "review", onOpenReviewChanges: onHistoryOpen, onSetFocus: onConnectorSetFocus, children: /* @__PURE__ */ jsx(DocumentPanel, { footerHeight: footerHeight || null, headerHeight: headerHeight || null, isInspectOpen: inspectOpen, rootElement, setDocumentPanelPortalElement }) }) }) }),
      /* @__PURE__ */ jsx(PortalProvider, { __unstable_elements: {
        [DOCUMENT_PANEL_PORTAL_ELEMENT]: documentPanelPortalElement
      }, children: /* @__PURE__ */ jsx(DialogProvider, { position: DIALOG_PROVIDER_POSITION, zOffset: zOffsets.portal, children: /* @__PURE__ */ jsx(PaneFooter, { ref: setFooterElement, children: /* @__PURE__ */ jsx(TooltipDelayGroupProvider, { children: /* @__PURE__ */ jsx(DocumentStatusBar, { actionsBoxRef: setActionsBoxElement, createLinkMetadata }) }) }) }) }),
      /* @__PURE__ */ jsx(DocumentOperationResults, {})
    ] }) })
  ] }) : /* @__PURE__ */ jsx(DocumentLayoutError, { currentMinWidth, documentType, minWidth, paneKey, value });
}
function ShowWhenPaneOpen(props) {
  const {
    collapsed
  } = usePane();
  return collapsed ? null : props.children;
}
function pick(plugin) {
  return plugin.document?.components?.unstable_layout;
}
function useDocumentLayoutComponent() {
  const $ = c(1);
  let t0;
  return $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = {
    pick,
    defaultComponent: DocumentLayout
  }, $[0] = t0) : t0 = $[0], useMiddlewareComponents(t0);
}
const DocumentURLCopied = defineEvent({
  name: "DocumentURLCopied",
  version: 1,
  description: "User copied document URL to clipboard"
}), CreatedDraft = defineEvent({
  name: "New Draft Created",
  version: 1,
  description: "User created a new draft"
});
function getInitialValueTemplateOpts(templates, opts) {
  const payload = opts.panePayload || {}, structureNodeTemplate = opts.templateName;
  opts.urlTemplate && structureNodeTemplate && structureNodeTemplate !== opts.urlTemplate && console.warn(`Conflicting templates: URL says "${opts.urlTemplate}", structure node says "${structureNodeTemplate}". Using "${structureNodeTemplate}".`);
  const template = structureNodeTemplate || opts.urlTemplate, typeTemplates = templates.filter((t) => t.schemaType === opts.documentType), templateParams = {
    ...opts.templateParams,
    ...typeof payload == "object" ? payload || {} : {}
  };
  let templateName = template;
  return !template && typeTemplates.length === 1 && (templateName = typeTemplates[0].id), {
    templateName,
    templateParams
  };
}
const DocumentPaneProvider = memo((props) => {
  const {
    children,
    index,
    pane: pane2,
    paneKey,
    onFocusPath
  } = props, schema = useSchema(), templates = useTemplates(), {
    setDocumentMeta
  } = useCopyPaste(), {
    __internal_tasks,
    document: {
      actions: documentActions2,
      badges: documentBadges2,
      unstable_fieldActions: fieldActionsResolver,
      unstable_languageFilter: languageFilterResolver,
      inspectors: inspectorsResolver
    }
  } = useSource(), presenceStore = usePresenceStore(), paneRouter = usePaneRouter(), setPaneParams = paneRouter.setParams, {
    features
  } = useStructureTool(), {
    push: pushToast
  } = useToast(), {
    options,
    menuItemGroups = DEFAULT_MENU_ITEM_GROUPS,
    title = null,
    views: viewsProp = []
  } = pane2, paneOptions = useUnique(options), documentIdRaw = paneOptions.id, documentId = getPublishedId(documentIdRaw), documentType = options.type, params = useUnique(paneRouter.params) || EMPTY_PARAMS$1, panePayload = useUnique(paneRouter.payload), {
    templateName,
    templateParams
  } = useMemo(() => getInitialValueTemplateOpts(templates, {
    documentType,
    templateName: paneOptions.template,
    templateParams: paneOptions.templateParameters,
    panePayload,
    urlTemplate: params.template
  }), [documentType, paneOptions, params, panePayload, templates]), initialValueRaw = useInitialValue({
    documentId,
    documentType,
    templateName,
    templateParams
  }), initialValue = useUnique(initialValueRaw), {
    patch
  } = useDocumentOperation(documentId, documentType), editState = useEditState(documentId, documentType), {
    validation: validationRaw
  } = useValidationStatus(documentId, documentType), connectionState = useConnectionState(documentId, documentType), schemaType = schema.get(documentType), value = editState?.draft || editState?.published || initialValue.value, [isDeleting, setIsDeleting] = useState(!1), actions = useMemo(() => documentActions2({
    schemaType: documentType,
    documentId
  }), [documentActions2, documentId, documentType]), badges = useMemo(() => documentBadges2({
    schemaType: documentType,
    documentId
  }), [documentBadges2, documentId, documentType]), languageFilter = useMemo(() => languageFilterResolver({
    schemaType: documentType,
    documentId
  }), [documentId, documentType, languageFilterResolver]), validation = useUnique(validationRaw), views2 = useUnique(viewsProp), [focusPath, setFocusPath] = useState(() => params.path ? fromString(params.path) : EMPTY_ARRAY$2), focusPathRef = useRef([]), activeViewId = params.view || views2[0] && views2[0].id || null, [timelineMode, setTimelineMode] = useState("closed"), [timelineError, setTimelineError] = useState(null), timelineStore = useTimelineStore({
    documentId,
    documentType,
    onError: setTimelineError,
    rev: params.rev,
    since: params.since
  }), onOlderRevision = useTimelineSelector(timelineStore, (state2) => state2.onOlderRevision), revTime = useTimelineSelector(timelineStore, (state_0) => state_0.revTime), sinceAttributes = useTimelineSelector(timelineStore, (state_1) => state_1.sinceAttributes), timelineDisplayed = useTimelineSelector(timelineStore, (state_2) => state_2.timelineDisplayed), timelineReady = useTimelineSelector(timelineStore, (state_3) => state_3.timelineReady), isPristine = useTimelineSelector(timelineStore, (state_4) => state_4.isPristine), isDeleted = useMemo(() => timelineReady ? !editState?.draft && !editState?.published && !isPristine : !1, [editState?.draft, editState?.published, isPristine, timelineReady]), previewUrl = usePreviewUrl(value), [presence, setPresence] = useState([]);
  useEffect(() => {
    const subscription = presenceStore.documentPresence(documentId).subscribe((nextPresence) => {
      setPresence(nextPresence);
    });
    return () => {
      subscription.unsubscribe();
    };
  }, [documentId, presenceStore]);
  const inspectors2 = useMemo(() => inspectorsResolver({
    documentId,
    documentType
  }), [documentId, documentType, inspectorsResolver]), [inspectorName, setInspectorName] = useState(() => params.inspect || null), inspectParamRef = useRef(params.inspect);
  useEffect(() => {
    inspectParamRef.current !== params.inspect && (inspectParamRef.current = params.inspect, setInspectorName(params.inspect || null));
  }, [params.inspect]);
  const currentInspector = inspectors2?.find((i) => i.name === inspectorName), resolvedChangesInspector = inspectors2.find((i_0) => i_0.name === HISTORY_INSPECTOR_NAME), changesOpen = currentInspector?.name === HISTORY_INSPECTOR_NAME, {
    t
  } = useTranslation(structureLocaleNamespace), inspectOpen = params.inspect === "on", compareValue = changesOpen ? sinceAttributes : editState?.published || null, fieldActions = useMemo(() => schemaType ? fieldActionsResolver({
    documentId,
    documentType,
    schemaType
  }) : [], [documentId, documentType, fieldActionsResolver, schemaType]), ready = connectionState === "connected" && editState.ready && (!params.rev || timelineReady || !!timelineError), displayed = useMemo(() => onOlderRevision ? timelineDisplayed || {
    _id: value._id,
    _type: value._type
  } : value, [onOlderRevision, timelineDisplayed, value]), setTimelineRange = useCallback((newSince, newRev) => {
    setPaneParams({
      ...params,
      since: newSince,
      rev: newRev || void 0
    });
  }, [params, setPaneParams]), handleBlur = useCallback((blurredPath) => {
    disableBlurRef.current || (setFocusPath(EMPTY_ARRAY$2), focusPathRef.current !== EMPTY_ARRAY$2 && (focusPathRef.current = EMPTY_ARRAY$2, onFocusPath?.(EMPTY_ARRAY$2)));
  }, [onFocusPath, setFocusPath]), patchRef = useRef(() => {
    throw new Error("Nope");
  });
  patchRef.current = (event) => {
    !editState.draft && !editState.published && telemetry.log(CreatedDraft), patch.execute(toMutationPatches(event.patches), initialValue.value);
  };
  const handleChange = useCallback((event_0) => patchRef.current(event_0), []), closeInspector = useCallback((closeInspectorName) => {
    const inspector = closeInspectorName && inspectors2.find((i_1) => i_1.name === closeInspectorName);
    if (closeInspectorName && !inspector) {
      console.warn(`No inspector named "${closeInspectorName}"`);
      return;
    }
    if (currentInspector) {
      if (inspector) {
        const result = inspector.onClose?.({
          params
        }) ?? {
          params
        };
        setInspectorName(null), inspectParamRef.current = void 0, setPaneParams({
          ...result.params,
          inspect: void 0
        });
        return;
      }
      if (currentInspector) {
        const result_0 = currentInspector.onClose?.({
          params
        }) ?? {
          params
        };
        setInspectorName(null), inspectParamRef.current = void 0, setPaneParams({
          ...result_0.params,
          inspect: void 0
        });
      }
    }
  }, [currentInspector, inspectors2, params, setPaneParams]), openInspector = useCallback((nextInspectorName, paneParams) => {
    const nextInspector = inspectors2.find((i_2) => i_2.name === nextInspectorName);
    if (!nextInspector) {
      console.warn(`No inspector named "${nextInspectorName}"`);
      return;
    }
    if (currentInspector?.name === nextInspector.name) {
      setPaneParams({
        ...params,
        ...paneParams,
        inspect: nextInspector.name
      });
      return;
    }
    let currentParams = params;
    currentInspector && (currentParams = (nextInspector.onClose?.({
      params: currentParams
    }) ?? {
      params: currentParams
    }).params);
    const result_1 = nextInspector.onOpen?.({
      params: currentParams
    }) ?? {
      params: currentParams
    };
    setInspectorName(nextInspector.name), inspectParamRef.current = nextInspector.name, setPaneParams({
      ...result_1.params,
      ...paneParams,
      inspect: nextInspector.name
    });
  }, [currentInspector, inspectors2, params, setPaneParams]), handleHistoryClose = useCallback(() => {
    resolvedChangesInspector && closeInspector(resolvedChangesInspector.name);
  }, [closeInspector, resolvedChangesInspector]), handleHistoryOpen = useCallback(() => {
    features.reviewChanges && resolvedChangesInspector && openInspector(resolvedChangesInspector.name, {
      changesInspectorTab: "review"
    });
  }, [features.reviewChanges, openInspector, resolvedChangesInspector]), handlePaneClose = useCallback(() => paneRouter.closeCurrent(), [paneRouter]), handlePaneSplit = useCallback(() => paneRouter.duplicateCurrent(), [paneRouter]), toggleLegacyInspect = useCallback((toggle = !inspectOpen) => {
    setPaneParams(toggle ? {
      ...params,
      inspect: "on"
    } : omit(params, "inspect"));
  }, [inspectOpen, params, setPaneParams]), telemetry = useTelemetry(), handleMenuAction = useCallback((item) => {
    if (item.action === "production-preview" && previewUrl)
      return window.open(previewUrl), !0;
    if (item.action === "copy-document-url" && navigator)
      return telemetry.log(DocumentURLCopied), navigator.clipboard.writeText(window.location.toString()), pushToast({
        id: "copy-document-url",
        status: "info",
        title: t("panes.document-operation-results.operation-success_copy-url")
      }), !0;
    if (item.action === "inspect")
      return toggleLegacyInspect(!0), !0;
    if (item.action === "reviewChanges")
      return handleHistoryOpen(), !0;
    if (typeof item.action == "string" && item.action.startsWith(INSPECT_ACTION_PREFIX)) {
      const nextInspectorName_0 = item.action.slice(INSPECT_ACTION_PREFIX.length), nextInspector_0 = inspectors2.find((i_3) => i_3.name === nextInspectorName_0);
      if (nextInspector_0)
        return nextInspector_0.name === inspectorName ? closeInspector(nextInspector_0.name) : openInspector(nextInspector_0.name), !0;
    }
    return !1;
  }, [t, closeInspector, handleHistoryOpen, inspectorName, inspectors2, openInspector, previewUrl, toggleLegacyInspect, pushToast, telemetry]), handleLegacyInspectClose = useCallback(() => toggleLegacyInspect(!1), [toggleLegacyInspect]), [openPath, onSetOpenPath] = useState([]), [fieldGroupState, onSetFieldGroupState] = useState(), [collapsedPaths, onSetCollapsedPath] = useState(), [collapsedFieldSets, onSetCollapsedFieldSets] = useState(), handleOnSetCollapsedPath = useCallback((path, collapsed) => {
    onSetCollapsedPath((prevState) => setAtPath(prevState, path, collapsed));
  }, []), handleOnSetCollapsedFieldSet = useCallback((path_0, collapsed_0) => {
    onSetCollapsedFieldSets((prevState_0) => setAtPath(prevState_0, path_0, collapsed_0));
  }, []), handleSetActiveFieldGroup = useCallback((path_1, groupName) => onSetFieldGroupState((prevState_1) => setAtPath(prevState_1, path_1, groupName)), []), requiredPermission = value._createdAt ? "update" : "create", liveEdit = !!schemaType?.liveEdit, docId = value._id ? value._id : "dummy-id", docPermissionsInput = useMemo(() => ({
    ...value,
    _id: liveEdit ? getPublishedId(docId) : getDraftId(docId)
  }), [liveEdit, value, docId]), [permissions, isPermissionsLoading] = useDocumentValuePermissions({
    document: docPermissionsInput,
    permission: requiredPermission
  }), isCreateLinked = isSanityCreateLinkedDocument(value), isNonExistent = !value?._id, readOnly = useMemo(() => {
    const hasNoPermission = !isPermissionsLoading && !permissions?.granted, updateActionDisabled = !isActionEnabled(schemaType, "update"), createActionDisabled = isNonExistent && !isActionEnabled(schemaType, "create"), reconnecting = connectionState === "reconnecting", isLocked = editState.transactionSyncLock?.enabled, isLiveEditAndDraft = !!(liveEdit && editState.draft);
    return !ready || revTime !== null || hasNoPermission || updateActionDisabled || createActionDisabled || reconnecting || isLocked || isDeleting || isDeleted || isLiveEditAndDraft || isCreateLinked;
  }, [isPermissionsLoading, permissions?.granted, schemaType, isNonExistent, connectionState, editState.transactionSyncLock?.enabled, editState.draft, liveEdit, ready, revTime, isDeleting, isDeleted, isCreateLinked]), formState = useFormState({
    schemaType,
    documentValue: displayed,
    readOnly,
    comparisonValue: compareValue,
    focusPath,
    openPath,
    collapsedPaths,
    presence,
    validation,
    collapsedFieldSets,
    fieldGroupState,
    changesOpen
  });
  useEffect(() => {
    setDocumentMeta({
      documentId,
      documentType,
      schemaType,
      onChange: handleChange
    });
  }, [documentId, documentType, schemaType, handleChange, setDocumentMeta]);
  const formStateRef = useRef(formState);
  formStateRef.current = formState;
  const setOpenPath = useCallback((path_2) => {
    getExpandOperations(formStateRef.current, path_2).forEach((op) => {
      op.type === "expandPath" && onSetCollapsedPath((prevState_2) => setAtPath(prevState_2, op.path, !1)), op.type === "expandFieldSet" && onSetCollapsedFieldSets((prevState_3) => setAtPath(prevState_3, op.path, !1)), op.type === "setSelectedGroup" && onSetFieldGroupState((prevState_4) => setAtPath(prevState_4, op.path, op.groupName));
    }), onSetOpenPath(path_2);
  }, [formStateRef]), updatePresence = useCallback((nextFocusPath, payload) => {
    presenceStore.setLocation([{
      type: "document",
      documentId,
      path: nextFocusPath,
      lastActiveAt: (/* @__PURE__ */ new Date()).toISOString(),
      selection: payload?.selection
    }]);
  }, [documentId, presenceStore]), updatePresenceThrottled = useMemo(() => throttle(updatePresence, 1e3, {
    leading: !0,
    trailing: !0
  }), [updatePresence]), handleFocus = useCallback((_nextFocusPath, payload_0) => {
    const nextFocusPath_0 = pathFor(_nextFocusPath);
    nextFocusPath_0 !== focusPathRef.current && (setFocusPath(pathFor(nextFocusPath_0)), setOpenPath(pathFor(nextFocusPath_0.slice(0, -1))), focusPathRef.current = nextFocusPath_0, onFocusPath?.(nextFocusPath_0)), updatePresenceThrottled(nextFocusPath_0, payload_0);
  }, [onFocusPath, setOpenPath, updatePresenceThrottled]), documentPane = useMemo(() => ({
    actions,
    activeViewId,
    badges,
    changesOpen,
    closeInspector,
    collapsedFieldSets,
    collapsedPaths,
    compareValue,
    connectionState,
    displayed,
    documentId,
    documentIdRaw,
    documentType,
    editState,
    fieldActions,
    focusPath,
    inspector: currentInspector || null,
    inspectors: inspectors2,
    __internal_tasks,
    onBlur: handleBlur,
    onChange: handleChange,
    onFocus: handleFocus,
    onPathOpen: setOpenPath,
    onHistoryClose: handleHistoryClose,
    onHistoryOpen: handleHistoryOpen,
    onInspectClose: handleLegacyInspectClose,
    onMenuAction: handleMenuAction,
    onPaneClose: handlePaneClose,
    onPaneSplit: handlePaneSplit,
    onSetActiveFieldGroup: handleSetActiveFieldGroup,
    onSetCollapsedPath: handleOnSetCollapsedPath,
    onSetCollapsedFieldSet: handleOnSetCollapsedFieldSet,
    openInspector,
    openPath,
    index,
    inspectOpen,
    validation,
    menuItemGroups: menuItemGroups || [],
    paneKey,
    previewUrl,
    ready,
    schemaType,
    isPermissionsLoading,
    permissions,
    setTimelineMode,
    setTimelineRange,
    setIsDeleting,
    isDeleting,
    isDeleted,
    timelineError,
    timelineMode,
    timelineStore,
    title,
    value,
    views: views2,
    formState,
    unstable_languageFilter: languageFilter
  }), [__internal_tasks, actions, activeViewId, badges, changesOpen, closeInspector, collapsedFieldSets, collapsedPaths, compareValue, connectionState, currentInspector, displayed, documentId, documentIdRaw, documentType, editState, fieldActions, focusPath, formState, handleBlur, handleChange, handleFocus, handleHistoryClose, handleHistoryOpen, handleLegacyInspectClose, handleMenuAction, handleOnSetCollapsedFieldSet, handleOnSetCollapsedPath, handlePaneClose, handlePaneSplit, handleSetActiveFieldGroup, index, inspectOpen, inspectors2, isDeleted, isDeleting, isPermissionsLoading, languageFilter, menuItemGroups, openInspector, openPath, paneKey, permissions, previewUrl, ready, schemaType, setOpenPath, setTimelineRange, timelineError, timelineMode, timelineStore, title, validation, value, views2]);
  useEffect(() => {
    let timeout;
    return connectionState === "reconnecting" && (timeout = setTimeout(() => {
      pushToast({
        id: "sanity/structure/reconnecting",
        status: "warning",
        title: t("panes.document-pane-provider.reconnecting.title")
      });
    }, 2e3)), () => {
      timeout && clearTimeout(timeout);
    };
  }, [connectionState, pushToast, t]);
  const disableBlurRef = useRef(!1);
  return useEffect(() => {
    if (ready && params.path) {
      const {
        path: path_3,
        ...restParams
      } = params, pathFromUrl = resolveKeyedPath(formStateRef.current?.value, fromString(path_3));
      disableBlurRef.current = !0, deepCompare(focusPathRef.current, pathFromUrl) || (setFocusPath(pathFromUrl), setOpenPath(pathFromUrl), focusPathRef.current = pathFromUrl, onFocusPath?.(pathFromUrl));
      const timeout_0 = setTimeout(() => {
        disableBlurRef.current = !1;
      }, 0);
      return paneRouter.setParams(restParams), () => clearTimeout(timeout_0);
    }
  }, [params, documentId, onFocusPath, setOpenPath, ready, paneRouter]), /* @__PURE__ */ jsx(DocumentPaneContext.Provider, { value: documentPane, children });
});
DocumentPaneProvider.displayName = "Memo(DocumentPaneProvider)";
const DocumentPane = memo(function(props) {
  const $ = c(5), {
    name: parentSourceName
  } = useSource(), t0 = props.pane.source || parentSourceName;
  let t1;
  $[0] !== props ? (t1 = /* @__PURE__ */ jsx(CopyPasteProvider, { children: /* @__PURE__ */ jsx(DocumentPaneInner, { ...props }) }), $[0] = props, $[1] = t1) : t1 = $[1];
  let t2;
  return $[2] !== t0 || $[3] !== t1 ? (t2 = /* @__PURE__ */ jsx(SourceProvider, { name: t0, children: t1 }), $[2] = t0, $[3] = t1, $[4] = t2) : t2 = $[4], t2;
});
function DocumentPaneInner(props) {
  const $ = c(53), {
    pane: pane2,
    paneKey
  } = props, {
    resolveNewDocumentOptions
  } = useSource().document, paneRouter = usePaneRouter(), options = usePaneOptions(pane2.options, paneRouter.params), {
    documentType,
    isLoaded: isDocumentLoaded
  } = useDocumentType(options.id, options.type), DocumentLayout2 = useDocumentLayoutComponent();
  let t0, t1;
  $[0] !== options.id || $[1] !== options.type || $[2] !== resolveNewDocumentOptions ? (t1 = resolveNewDocumentOptions({
    type: "document",
    documentId: options.id,
    schemaType: options.type
  }), $[0] = options.id, $[1] = options.type, $[2] = resolveNewDocumentOptions, $[3] = t1) : t1 = $[3], t0 = t1;
  const templateItems = t0;
  let t2;
  $[4] !== templateItems ? (t2 = {
    templateItems
  }, $[4] = templateItems, $[5] = t2) : t2 = $[5];
  const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions(t2), isLoaded = isDocumentLoaded && !isTemplatePermissionsLoading;
  let t3, t4;
  $[6] !== documentType || $[7] !== isLoaded || $[8] !== options || $[9] !== props ? (t4 = isLoaded && documentType && options.type !== documentType ? mergeDocumentType(props, options, documentType) : props, $[6] = documentType, $[7] = isLoaded, $[8] = options, $[9] = props, $[10] = t4) : t4 = $[10], t3 = t4;
  const providerProps = t3, {
    ReferenceChildLink: ReferenceChildLink2,
    handleEditReference,
    groupIndex,
    routerPanesState
  } = paneRouter;
  let t5;
  $[11] !== groupIndex || $[12] !== routerPanesState ? (t5 = routerPanesState[groupIndex + 1]?.[0].params || {}, $[11] = groupIndex, $[12] = routerPanesState, $[13] = t5) : t5 = $[13];
  const childParams = t5, routerPanesStateLength = routerPanesState.length, {
    parentRefPath
  } = childParams;
  let t6, t7;
  $[14] !== groupIndex || $[15] !== parentRefPath || $[16] !== routerPanesStateLength ? (t7 = parentRefPath ? {
    path: fromString(parentRefPath),
    state: groupIndex >= routerPanesStateLength - 1 ? "none" : groupIndex >= routerPanesStateLength - 2 ? "selected" : "pressed"
  } : {
    path: [],
    state: "none"
  }, $[14] = groupIndex, $[15] = parentRefPath, $[16] = routerPanesStateLength, $[17] = t7) : t7 = $[17], t6 = t7;
  const activePath = t6, {
    t
  } = useTranslation(structureLocaleNamespace);
  if (options.type === "*" && !isLoaded) {
    let t82;
    $[18] !== t ? (t82 = t("panes.document-pane.document-not-found.loading"), $[18] = t, $[19] = t82) : t82 = $[19];
    let t92;
    return $[20] !== paneKey || $[21] !== t82 ? (t92 = /* @__PURE__ */ jsx(LoadingPane, { flex: 2.5, minWidth: 320, paneKey, title: t82 }), $[20] = paneKey, $[21] = t82, $[22] = t92) : t92 = $[22], t92;
  }
  if (!documentType) {
    let t82;
    $[23] !== t ? (t82 = t("panes.document-pane.document-not-found.title"), $[23] = t, $[24] = t82) : t82 = $[24];
    let t92;
    $[25] !== options.id ? (t92 = {
      id: options.id
    }, $[25] = options.id, $[26] = t92) : t92 = $[26];
    let t102;
    $[27] === Symbol.for("react.memo_cache_sentinel") ? (t102 = {
      Code: _temp$4
    }, $[27] = t102) : t102 = $[27];
    let t112;
    $[28] !== t || $[29] !== t92 ? (t112 = /* @__PURE__ */ jsx(Stack, { space: 4, children: /* @__PURE__ */ jsx(Text, { as: "p", children: /* @__PURE__ */ jsx(Translate, { t, i18nKey: "panes.document-pane.document-not-found.text", values: t92, components: t102 }) }) }), $[28] = t, $[29] = t92, $[30] = t112) : t112 = $[30];
    let t122;
    return $[31] !== paneKey || $[32] !== t112 || $[33] !== t82 ? (t122 = /* @__PURE__ */ jsx(ErrorPane, { flex: 2.5, minWidth: 320, paneKey, title: t82, children: t112 }), $[31] = paneKey, $[32] = t112, $[33] = t82, $[34] = t122) : t122 = $[34], t122;
  }
  const t8 = `${documentType}-${options.id}`;
  let t9;
  $[35] !== DocumentLayout2 || $[36] !== options.id || $[37] !== options.type ? (t9 = /* @__PURE__ */ jsx(DocumentLayout2, { documentId: options.id, documentType: options.type }), $[35] = DocumentLayout2, $[36] = options.id, $[37] = options.type, $[38] = t9) : t9 = $[38];
  let t10;
  $[39] !== options.id || $[40] !== options.type || $[41] !== t9 ? (t10 = /* @__PURE__ */ jsx(CommentsWrapper, { documentId: options.id, documentType: options.type, children: t9 }), $[39] = options.id, $[40] = options.type, $[41] = t9, $[42] = t10) : t10 = $[42];
  let t11;
  $[43] !== ReferenceChildLink2 || $[44] !== activePath || $[45] !== handleEditReference || $[46] !== t10 || $[47] !== templatePermissions ? (t11 = /* @__PURE__ */ jsx(ReferenceInputOptionsProvider, { EditReferenceLinkComponent: ReferenceChildLink2, onEditReference: handleEditReference, initialValueTemplateItems: templatePermissions, activePath, children: t10 }), $[43] = ReferenceChildLink2, $[44] = activePath, $[45] = handleEditReference, $[46] = t10, $[47] = templatePermissions, $[48] = t11) : t11 = $[48];
  let t12;
  return $[49] !== providerProps || $[50] !== t11 || $[51] !== t8 ? (t12 = /* @__PURE__ */ jsx(DocumentPaneProvider, { ...providerProps, children: t11 }, t8), $[49] = providerProps, $[50] = t11, $[51] = t8, $[52] = t12) : t12 = $[52], t12;
}
function _temp$4(t0) {
  const {
    children
  } = t0;
  return /* @__PURE__ */ jsx("code", { children });
}
function usePaneOptions(options, t0) {
  const $ = c(8);
  let t1;
  $[0] !== t0 ? (t1 = t0 === void 0 ? {} : t0, $[0] = t0, $[1] = t1) : t1 = $[1];
  const params = t1, templates = useTemplates();
  let t2;
  bb0: {
    if (options.type && options.type !== "*") {
      t2 = options;
      break bb0;
    }
    const templateName = options.template || params.template;
    let t3;
    $[2] !== templateName || $[3] !== templates ? (t3 = templateName ? templates.find((t) => t.id === templateName) : void 0, $[2] = templateName, $[3] = templates, $[4] = t3) : t3 = $[4];
    const documentType = t3?.schemaType;
    if (!documentType) {
      t2 = options;
      break bb0;
    }
    let t4;
    $[5] !== documentType || $[6] !== options ? (t4 = {
      ...options,
      type: documentType
    }, $[5] = documentType, $[6] = options, $[7] = t4) : t4 = $[7], t2 = t4;
  }
  return t2;
}
function mergeDocumentType(props, options, documentType) {
  return {
    ...props,
    pane: {
      ...props.pane,
      options: {
        ...options,
        type: documentType
      }
    }
  };
}
const PARTIAL_PAGE_LIMIT = 100, FULL_LIST_LIMIT = 2e3, DEFAULT_ORDERING = {
  by: [{
    field: "_updatedAt",
    direction: "desc"
  }]
}, EMPTY_RECORD = {}, RootBox = styled(Box)`
  position: relative;
  opacity: ${(props) => props.$opacity || 1};
  transition: opacity 0.4s;
`, CommandListBox = styled(Box)`
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
`, SKELETON_ITEMS = [...Array(30).keys()];
function LoadingView(props) {
  const $ = c(4), {
    layout
  } = props;
  let t0;
  $[0] !== layout ? (t0 = SKELETON_ITEMS.map((num) => /* @__PURE__ */ jsx(SanityDefaultPreview, { isPlaceholder: !0, layout }, num)), $[0] = layout, $[1] = t0) : t0 = $[1];
  let t1;
  return $[2] !== t0 ? (t1 = /* @__PURE__ */ jsx(Stack, { paddingX: 3, paddingY: 2, paddingTop: 0, space: 1, children: t0 }), $[2] = t0, $[3] = t1) : t1 = $[3], t1;
}
function DocumentListPaneContent(props) {
  const {
    childItemId,
    error,
    filterIsSimpleTypeConstraint,
    hasMaxItems,
    hasSearchQuery,
    isActive,
    isLazyLoading,
    isLoading,
    items,
    layout,
    loadingVariant,
    onEndReached,
    onRetry,
    paneTitle,
    searchInputElement,
    showIcons
  } = props, schema = useSchema(), {
    collapsed: layoutCollapsed
  } = usePaneLayout(), {
    collapsed,
    index
  } = usePane(), [shouldRender, setShouldRender] = useState(!collapsed), {
    t
  } = useTranslation(structureLocaleNamespace), handleEndReached = useCallback(() => {
    shouldRender && onEndReached();
  }, [onEndReached, shouldRender]);
  useEffect(() => {
    if (collapsed) return;
    const timer2 = setTimeout(() => {
      setShouldRender(!0);
    }, 0);
    return () => {
      clearTimeout(timer2);
    };
  }, [collapsed, items]);
  const renderItem = useCallback((item, {
    activeIndex
  }) => {
    const publishedId = getPublishedId(item._id), isSelected = childItemId === publishedId, pressed = !isActive && isSelected, selected = isActive && isSelected, isLastItem = activeIndex === items.length - 1, showSpinner = isLastItem && isLazyLoading, showMaxItemsMessage = isLastItem && hasMaxItems;
    return /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx(PaneItem, { icon: showIcons === !1 ? !1 : void 0, id: publishedId, layout, marginBottom: 1, pressed, schemaType: schema.get(item._type), selected, value: item }),
      showSpinner && /* @__PURE__ */ jsx(LoadingBlock, {}),
      showMaxItemsMessage && /* @__PURE__ */ jsx(Box, { marginY: 1, paddingX: 3, paddingY: 4, children: /* @__PURE__ */ jsx(Text, { align: "center", muted: !0, size: 1, children: t("panes.document-list-pane.max-items.text", {
        limit: FULL_LIST_LIMIT
      }) }) })
    ] });
  }, [childItemId, isActive, items.length, layout, schema, showIcons, hasMaxItems, isLazyLoading, t]), noDocumentsContent = useMemo(() => hasSearchQuery ? /* @__PURE__ */ jsx(Flex, { align: "center", direction: "column", height: "fill", justify: "center", children: /* @__PURE__ */ jsx(Container, { width: 1, children: /* @__PURE__ */ jsx(Box, { paddingX: 4, paddingY: 5, children: /* @__PURE__ */ jsx(Text, { align: "center", muted: !0, children: t("panes.document-list-pane.no-documents.text") }) }) }) }) : /* @__PURE__ */ jsx(Flex, { align: "center", direction: "column", height: "fill", justify: "center", children: /* @__PURE__ */ jsx(Container, { width: 1, children: /* @__PURE__ */ jsx(Box, { paddingX: 4, paddingY: 5, children: /* @__PURE__ */ jsx(Text, { align: "center", muted: !0, children: t(filterIsSimpleTypeConstraint ? "panes.document-list-pane.no-documents-of-type.text" : "panes.document-list-pane.no-matching-documents.text") }) }) }) }), [filterIsSimpleTypeConstraint, hasSearchQuery, t]), mainContent = useMemo(() => {
    if (!shouldRender)
      return null;
    if (error)
      return /* @__PURE__ */ jsx(Flex, { align: "center", direction: "column", height: "fill", justify: "center", children: /* @__PURE__ */ jsx(Container, { width: 1, children: /* @__PURE__ */ jsxs(Stack, { paddingX: 4, paddingY: 5, space: 4, children: [
        /* @__PURE__ */ jsx(Heading, { as: "h3", children: t("panes.document-list-pane.error.title") }),
        /* @__PURE__ */ jsx(Text, { as: "p", children: /* @__PURE__ */ jsx(Translate, { t, i18nKey: "panes.document-list-pane.error.text", values: {
          error: error.message
        }, components: {
          Code: ({
            children
          }) => /* @__PURE__ */ jsx("code", { children })
        } }) }),
        /* @__PURE__ */ jsx(ErrorActions, { error, eventId: null, onRetry })
      ] }) }) });
    if (!isLoading && items.length === 0)
      return noDocumentsContent;
    if (loadingVariant === "initial" && isLoading)
      return /* @__PURE__ */ jsx(Delay, { ms: 300, children: /* @__PURE__ */ jsx(LoadingView, { layout }) });
    if (loadingVariant === "spinner" && isLoading)
      return null;
    const key = `${index}-${collapsed}`;
    return /* @__PURE__ */ jsx(RootBox, { overflow: "hidden", height: "fill", $opacity: loadingVariant === "subtle" ? 0.8 : 1, children: /* @__PURE__ */ jsx(CommandListBox, { children: /* @__PURE__ */ jsx(CommandList, { activeItemDataAttr: "data-hovered", ariaLabel: paneTitle, canReceiveFocus: !0, inputElement: searchInputElement, itemHeight: 51, items, onEndReached: handleEndReached, onlyShowSelectionWhenActive: !0, overscan: 10, paddingBottom: 1, paddingX: 3, renderItem, wrapAround: !1 }, key) }) });
  }, [
    collapsed,
    error,
    handleEndReached,
    index,
    isLoading,
    items,
    layout,
    loadingVariant,
    // noDocumentsContent,
    onRetry,
    renderItem,
    searchInputElement,
    shouldRender
  ]);
  return /* @__PURE__ */ jsx(PaneContent, { "data-testid": "document-list-pane", overflow: layoutCollapsed || loadingVariant === "initial" ? "hidden" : "auto", children: mainContent });
}
function removePublishedWithDrafts(documents) {
  return collate(documents).map((entry) => ({
    ...entry.draft || entry.published,
    hasPublished: !!entry.published,
    hasDraft: !!entry.draft
  }));
}
function applyOrderingFunctions(order, schemaType) {
  const orderBy = order.by.map((by) => {
    if (by.mapWith)
      return by;
    const fieldType = tryResolveSchemaTypeForPath(schemaType, by.field);
    return fieldType ? fieldExtendsType(fieldType, "datetime") ? {
      ...by,
      mapWith: "dateTime"
    } : fieldType.jsonType === "string" ? {
      ...by,
      mapWith: "lower"
    } : by : by;
  });
  return orderBy.every((item, index) => item === order.by[index]) ? order : {
    ...order,
    by: orderBy
  };
}
function tryResolveSchemaTypeForPath(baseType, path) {
  const pathSegments = PathUtils.fromString(path);
  let current = baseType;
  for (const segment of pathSegments) {
    if (!current)
      return;
    if (typeof segment == "string") {
      current = getFieldTypeByName(current, segment);
      continue;
    }
    if (!(isKeySegment(segment) || isIndexSegment(segment)) || current.jsonType !== "array")
      return;
    const [memberType, otherType] = current.of || [];
    if (otherType || !memberType)
      return;
    if (!isReferenceSchemaType(memberType)) {
      current = memberType;
      continue;
    }
    const [refType, otherRefType] = memberType.to || [];
    if (otherRefType || !refType)
      return;
    current = refType;
  }
  return current;
}
function getFieldTypeByName(type, fieldName) {
  if (!("fields" in type))
    return;
  const fieldType = type.fields.find((field) => field.name === fieldName);
  return fieldType ? fieldType.type : void 0;
}
function fieldExtendsType(field, ofType) {
  let current = field.type;
  for (; current; ) {
    if (current.name === ofType || !current.type && current.jsonType === ofType)
      return !0;
    current = current.type;
  }
  return !1;
}
function findTypes(node) {
  switch (node.type) {
    case "OpCall": {
      const {
        left,
        right
      } = node;
      switch (node.op) {
        // e.g. `a == b`
        case "==":
          return left.type === "AccessAttribute" && left.name === "_type" && !left.base ? right.type !== "Value" || typeof right.value != "string" ? null : /* @__PURE__ */ new Set([right.value]) : right.type === "AccessAttribute" && right.name === "_type" && !right.base ? left.type !== "Value" || typeof left.value != "string" ? null : /* @__PURE__ */ new Set([left.value]) : null;
        // e.g. `a in b`
        case "in": {
          if (left.type !== "AccessAttribute" || left.name !== "_type" || left.base || right.type !== "Array") return null;
          const types = /* @__PURE__ */ new Set();
          for (const element of right.elements) {
            if (element.isSplat || element.value.type !== "Value" || typeof element.value.value != "string") return null;
            types.add(element.value.value);
          }
          return types.size ? types : null;
        }
        default:
          return null;
      }
    }
    // groups can just be unwrapped, the AST preserves the order
    case "Group":
      return findTypes(node.base);
    // e.g. `_type == 'a' || _type == 'b'`
    // with Or nodes, if we can't determine the types for either the left or
    // right hand side then we can't determine the types for any
    // e.g. `_type == 'a' || isActive`
    // — can't determine types because `isActive` could be true on another types
    case "Or": {
      const left = findTypes(node.left);
      if (!left) return null;
      const right = findTypes(node.right);
      return right ? /* @__PURE__ */ new Set([...left, ...right]) : null;
    }
    // e.g. `_type == 'a' && isActive`
    // with And nodes, we can determine the types as long as we can determine
    // the types for one side. We can't determine the types if both are `null`.
    case "And": {
      const left = findTypes(node.left), right = findTypes(node.right);
      return !left && !right ? null : /* @__PURE__ */ new Set([...left || [], ...right || []]);
    }
    default:
      return null;
  }
}
function findStaticTypesInFilter(filter2, params = {}) {
  try {
    const types = findTypes(parse(filter2, {
      params
    }));
    return types ? Array.from(types).sort() : null;
  } catch {
    return null;
  }
}
const IMPLICIT_SCHEMA_TYPE_FIELDS = ["_id", "_type", "_createdAt", "_updatedAt", "_rev"];
function joinReferences(schemaType, path, strict = !1) {
  const [head, ...tail] = path;
  if (!("fields" in schemaType))
    return "";
  const schemaField = schemaType.fields.find((field) => field.name === head);
  if (!schemaField) {
    if (!IMPLICIT_SCHEMA_TYPE_FIELDS.includes(head)) {
      const errorMessage = `The current ordering config targeted the nonexistent field "${head}" on schema type "${schemaType.name}". It should be one of ${schemaType.fields.map((field) => field.name).join(", ")}`;
      if (strict)
        throw new Error(errorMessage);
      console.warn(errorMessage);
    }
    return "";
  }
  if ("to" in schemaField.type && schemaField.type.name === "reference") {
    const refTypes = schemaField.type.to;
    return `${head}->{${refTypes.map((refType) => joinReferences(refType, tail)).join(",")}}`;
  }
  const tailFields = tail.length > 0 && joinReferences(schemaField.type, tail), tailWrapper = tailFields ? `{${tailFields}}` : "";
  return tail.length > 0 ? `${head}${tailWrapper}` : head;
}
function getExtendedProjection(schemaType, orderBy, strict = !1) {
  return orderBy.map((ordering) => joinReferences(schemaType, ordering.field.split("."), strict)).join(", ");
}
const swr = createSWR({
  maxSize: 100
});
function listenSearchQuery(options) {
  const {
    client,
    schema,
    sort,
    limit,
    params,
    filter: filter2,
    searchQuery,
    staticTypeNames,
    maxFieldDepth,
    searchStrategy
  } = options, sortBy = sort.by, extendedProjection = sort?.extendedProjection, events$ = defer(() => client.listen(`*[${filter2}]`, params, {
    events: ["welcome", "mutation", "reconnect"],
    includeResult: !1,
    visibility: "query"
  })).pipe(mergeMap((ev, i) => i === 0 && ev.type !== "welcome" ? throwError(() => new Error(ev.type === "reconnect" ? "Could not establish EventSource connection" : `Received unexpected type of first event "${ev.type}"`)) : of(ev)), share()), [welcome$, mutationAndReconnect$] = partition(events$, (ev) => ev.type === "welcome"), swrKey = JSON.stringify({
    filter: filter2,
    limit,
    params,
    searchQuery,
    sort,
    staticTypeNames
  });
  return merge(welcome$.pipe(take(1)), mutationAndReconnect$.pipe(throttleTime(1e3, asyncScheduler, {
    leading: !0,
    trailing: !0
  }))).pipe(exhaustMapWithTrailing((event) => (staticTypeNames ? of(staticTypeNames) : client.observable.fetch(`array::unique(*[${filter2}][]._type)`, params)).pipe(mergeMap((typeNames) => {
    const types = getSearchableTypes(schema, staticTypeNames || []).filter((type) => typeNames.includes(type.name) ? (getExtendedProjection(type, sort.by, !0), !0) : !1), search = createSearch(types, client, {
      filter: filter2,
      params,
      strategy: searchStrategy,
      maxDepth: maxFieldDepth
    }), doFetch = () => search({
      query: searchQuery || "",
      types
    }, {
      __unstable_extendedProjection: extendedProjection,
      comments: [`findability-source: ${searchQuery ? "list-query" : "list"}`],
      limit,
      skipSortByScore: !0,
      sort: sortBy
    }).pipe(map$1((result) => (
      // eslint-disable-next-line max-nested-callbacks
      result.hits.map(({
        hit
      }) => hit)
    )));
    return event.type === "mutation" && event.visibility !== "query" ? timer(1200).pipe(mergeMap(doFetch)) : doFetch();
  }))), swr(swrKey), map$1(({
    fromCache,
    value
  }) => ({
    fromCache,
    documents: value
  })));
}
const INITIAL_QUERY_STATE = {
  error: null,
  isLoading: !0,
  isLoadingFullList: !1,
  fromCache: !1,
  items: []
};
function useDocumentList(opts) {
  const {
    filter: searchFilter,
    params: paramsProp,
    sortOrder,
    searchQuery,
    apiVersion
  } = opts, client = useClient({
    ...DEFAULT_STUDIO_CLIENT_OPTIONS,
    apiVersion: apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion
  }), {
    strategy: searchStrategy
  } = useWorkspace().search, schema = useSchema(), maxFieldDepth = useSearchMaxFieldDepth(), typeNameFromFilter = useMemo(() => findStaticTypesInFilter(searchFilter, paramsProp), [searchFilter, paramsProp]), [onRetry$, onRetry] = useMemo(() => observableCallback(), []), [onFetchFullList$, onLoadFullList] = useMemo(() => observableCallback(), []), queryResults$ = useMemo(() => {
    const listenSearchQueryArgs = {
      client,
      filter: searchFilter,
      limit: PARTIAL_PAGE_LIMIT,
      params: paramsProp,
      schema,
      searchQuery: searchQuery || "",
      sort: sortOrder || DEFAULT_ORDERING,
      staticTypeNames: typeNameFromFilter,
      maxFieldDepth,
      searchStrategy
    }, partialList$ = listenSearchQuery(listenSearchQueryArgs).pipe(shareReplay({
      refCount: !0,
      bufferSize: 1
    })), fullList$ = onFetchFullList$.pipe(
      withLatestFrom(partialList$),
      filter$1(([, result]) => result?.documents.length === PARTIAL_PAGE_LIMIT),
      // we want to set up the full list listener only once
      take$1(1),
      mergeMap$1(() => concat(of({
        type: "loadFullList"
      }), listenSearchQuery({
        ...listenSearchQueryArgs,
        limit: FULL_LIST_LIMIT
      }).pipe(map((result_0) => ({
        type: "result",
        result: result_0
      }))))),
      share$1()
    );
    return merge(partialList$.pipe(
      map((result_1) => ({
        type: "result",
        result: result_1
      })),
      // when the full list listener kicks off, we want to stop the partial list listener
      takeUntil(fullList$)
    ), fullList$).pipe(catchError((err, caught$) => concat(of({
      type: "error",
      error: safeError(err)
    }), merge(fromEvent(window, "online"), onRetry$).pipe(take$1(1), mergeMap$1(() => caught$)))), scan((prev, event) => {
      if (event.type === "error")
        return {
          ...prev,
          error: event.error
        };
      if (event.type === "result")
        return {
          ...prev,
          error: null,
          fromCache: event.result.fromCache,
          isLoading: !1,
          items: removePublishedWithDrafts(event.result.documents),
          isLoadingFullList: !1
        };
      if (event.type === "loadFullList")
        return {
          ...prev,
          error: null,
          isLoadingFullList: !0
        };
      throw new Error("Unexpected");
    }, INITIAL_QUERY_STATE));
  }, [client, searchFilter, paramsProp, schema, searchQuery, sortOrder, typeNameFromFilter, maxFieldDepth, searchStrategy, onFetchFullList$, onRetry$]), {
    error,
    items,
    isLoading,
    fromCache,
    isLoadingFullList
  } = useObservable(queryResults$, INITIAL_QUERY_STATE);
  return {
    error,
    onRetry,
    isLoading,
    items,
    fromCache,
    onLoadFullList,
    isLoadingFullList
  };
}
const nonErrorThrownWarning = "[WARNING: This was thrown as a non-error. Only Error instances should be thrown]";
function safeError(thrown) {
  return thrown instanceof Error ? thrown : typeof thrown == "object" && thrown !== null ? "message" in thrown && typeof thrown.message == "string" ? new Error(`${thrown.message} ${nonErrorThrownWarning}`) : new Error(`${String(thrown)} ${nonErrorThrownWarning}`) : new Error(`${String(thrown)} ${nonErrorThrownWarning}`);
}
const rotate = keyframes`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
`, fadeIn = keyframes`
  0% {
    opacity: 0;
  }
  50% {
    opacity: 0.1;
  }
  100% {
    opacity: 0.4;
  }
`, AnimatedSpinnerIcon = styled(SpinnerIcon)`
  animation: ${rotate} 500ms linear infinite;
`, SubtleSpinnerIcon = styled(SpinnerIcon)`
  animation: ${rotate} 1500ms linear infinite;
  opacity: 0.4;
`, DelayedSubtleSpinnerIcon = styled(SpinnerIcon)`
  animation:
    ${rotate} 1500ms linear infinite,
    ${fadeIn} 1000ms linear;
  opacity: 0.4;
`, DocumentListPane = memo(function(props) {
  const {
    childItemId,
    isActive,
    pane: pane2,
    paneKey,
    sortOrder: sortOrderRaw,
    layout
  } = props, schema = useSchema(), {
    displayOptions,
    options
  } = pane2, {
    apiVersion,
    filter: filter2
  } = options, params = useShallowUnique(options.params || EMPTY_RECORD), typeName = useMemo(() => {
    const staticTypes = findStaticTypesInFilter(filter2, params);
    return staticTypes?.length === 1 ? staticTypes[0] : null;
  }, [filter2, params]), showIcons = displayOptions?.showIcons !== !1, {
    t
  } = useTranslation(structureLocaleNamespace), {
    title
  } = useI18nText(pane2), [searchQuery, setSearchQuery] = useState(""), [searchInputValue, setSearchInputValue] = useState(""), [searchInputElement, setSearchInputElement] = useState(null), sortWithOrderingFn = typeName && sortOrderRaw ? applyOrderingFunctions(sortOrderRaw, schema.get(typeName)) : sortOrderRaw, sortOrder = useUnique(sortWithOrderingFn), {
    error,
    isLoadingFullList,
    isLoading,
    items,
    fromCache,
    onLoadFullList,
    onRetry
  } = useDocumentList({
    apiVersion,
    filter: filter2,
    params,
    searchQuery: searchQuery?.trim(),
    sortOrder
  }), handleQueryChange = useObservableEvent((event$) => event$.pipe(map$1((event) => event.target.value), tap$1(setSearchInputValue), debounce((value) => value === "" ? of("") : timer(300)), tap$1(setSearchQuery))), handleClearSearch = useCallback(() => {
    setSearchQuery(""), setSearchInputValue("");
  }, []), handleSearchKeyDown = useCallback((event_0) => {
    event_0.key === "Escape" && handleClearSearch();
  }, [handleClearSearch]), [enableSearchSpinner, setEnableSearchSpinner] = useState();
  useEffect(() => {
    !enableSearchSpinner && !isLoading && setEnableSearchSpinner(paneKey);
  }, [enableSearchSpinner, isLoading, paneKey]), useEffect(() => {
    handleClearSearch(), setEnableSearchSpinner();
  }, [paneKey, handleClearSearch]);
  const loadingVariant = useMemo(() => isLoading && enableSearchSpinner === paneKey ? "spinner" : fromCache ? "subtle" : "initial", [enableSearchSpinner, fromCache, isLoading, paneKey]), textInputIcon = useMemo(() => loadingVariant === "spinner" ? AnimatedSpinnerIcon : searchInputValue && loadingVariant === "subtle" ? SubtleSpinnerIcon : SearchIcon, [loadingVariant, searchInputValue]);
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(Box, { paddingX: 3, paddingBottom: 3, children: /* @__PURE__ */ jsx(TextInput, { "aria-label": t("panes.document-list-pane.search-input.aria-label"), autoComplete: "off", border: !1, clearButton: !!searchQuery, disabled: !!error, fontSize: [2, 2, 1], icon: textInputIcon, iconRight: loadingVariant === "subtle" && !searchInputValue ? DelayedSubtleSpinnerIcon : null, onChange: handleQueryChange, onClear: handleClearSearch, onKeyDown: handleSearchKeyDown, padding: 2, placeholder: t("panes.document-list-pane.search-input.placeholder"), radius: 2, ref: setSearchInputElement, spellCheck: !1, value: searchInputValue }) }),
    /* @__PURE__ */ jsx(DocumentListPaneContent, { childItemId, error, filterIsSimpleTypeConstraint: !!typeName, hasMaxItems: items.length === FULL_LIST_LIMIT, hasSearchQuery: !!searchQuery, isActive, isLazyLoading: isLoadingFullList, isLoading, items, layout, loadingVariant, onEndReached: onLoadFullList, onRetry, paneTitle: title, searchInputElement, showIcons }, paneKey)
  ] });
}), PaneHeader = memo((t0) => {
  const $ = c(27), {
    contentAfter,
    index,
    initialValueTemplates: t1,
    menuItemGroups: t2,
    menuItems: t3,
    setLayout,
    setSortOrder,
    title
  } = t0;
  let t4;
  $[0] !== t1 ? (t4 = t1 === void 0 ? [] : t1, $[0] = t1, $[1] = t4) : t4 = $[1];
  const initialValueTemplates = t4;
  let t5;
  $[2] !== t2 ? (t5 = t2 === void 0 ? [] : t2, $[2] = t2, $[3] = t5) : t5 = $[3];
  const menuItemGroups = t5;
  let t6;
  $[4] !== t3 ? (t6 = t3 === void 0 ? [] : t3, $[4] = t3, $[5] = t6) : t6 = $[5];
  const menuItems = t6, {
    features
  } = useStructureTool(), {
    collapsed,
    isLast
  } = usePane(), tabIndex = isLast && !collapsed ? -1 : 0;
  let t7, t8;
  $[6] !== setLayout ? (t8 = (t92) => {
    const {
      layout: value
    } = t92;
    setLayout(value);
  }, $[6] = setLayout, $[7] = t8) : t8 = $[7];
  let t9;
  $[8] !== setSortOrder ? (t9 = (sort) => {
    setSortOrder(sort);
  }, $[8] = setSortOrder, $[9] = t9) : t9 = $[9];
  let t10;
  $[10] !== t8 || $[11] !== t9 ? (t10 = {
    setLayout: t8,
    setSortOrder: t9
  }, $[10] = t8, $[11] = t9, $[12] = t10) : t10 = $[12], t7 = t10;
  const actionHandlers = t7;
  let t11;
  $[13] !== actionHandlers || $[14] !== initialValueTemplates || $[15] !== menuItemGroups || $[16] !== menuItems ? (t11 = /* @__PURE__ */ jsx(PaneHeaderActions, { initialValueTemplateItems: initialValueTemplates, actionHandlers, menuItemGroups, menuItems }), $[13] = actionHandlers, $[14] = initialValueTemplates, $[15] = menuItemGroups, $[16] = menuItems, $[17] = t11) : t11 = $[17];
  let t12;
  $[18] !== features.backButton || $[19] !== index ? (t12 = features.backButton && index > 0 && /* @__PURE__ */ jsx(Button, { as: BackLink, "data-as": "a", icon: ArrowLeftIcon, mode: "bleed", tooltipProps: {
    content: "Back"
  } }), $[18] = features.backButton, $[19] = index, $[20] = t12) : t12 = $[20];
  let t13;
  return $[21] !== contentAfter || $[22] !== t11 || $[23] !== t12 || $[24] !== tabIndex || $[25] !== title ? (t13 = /* @__PURE__ */ jsx(TooltipDelayGroupProvider, { children: /* @__PURE__ */ jsx(PaneHeader$1, { actions: t11, backButton: t12, contentAfter, tabIndex, title }) }), $[21] = contentAfter, $[22] = t11, $[23] = t12, $[24] = tabIndex, $[25] = title, $[26] = t13) : t13 = $[26], t13;
});
PaneHeader.displayName = "Memo(PaneHeader)";
function DocumentSheetListSelect(props) {
  const {
    row,
    table
  } = props, {
    selectedAnchor,
    setSelectedAnchor
  } = table.options.meta || {}, handleOnClick = useCallback((e) => {
    if (e.shiftKey && selectedAnchor !== null && selectedAnchor !== void 0) {
      const shiftClickIndex = row.index, lowerIndex = shiftClickIndex < selectedAnchor ? shiftClickIndex : selectedAnchor, upperIndex = shiftClickIndex < selectedAnchor ? selectedAnchor : shiftClickIndex, additionalSelectedRows = table.getRowModel().flatRows.slice(lowerIndex, upperIndex + 1).map(({
        id
      }) => id), currentSelectedRows = table.getSelectedRowModel().rows.map(({
        id: id_0
      }) => id_0);
      table.setRowSelection(() => [...additionalSelectedRows, ...currentSelectedRows].reduce((nextSelectedRows, rowId) => ({
        ...nextSelectedRows,
        [rowId]: !0
      }), {}));
    } else if (setSelectedAnchor) {
      const isRowCurrentlySelected = row.getIsSelected();
      setSelectedAnchor(isRowCurrentlySelected ? null : row.index), row.toggleSelected();
    }
  }, [selectedAnchor, row, setSelectedAnchor, table]);
  return /* @__PURE__ */ jsx(
    Checkbox,
    {
      style: {
        paddingLeft: 4
      },
      checked: props.row.getIsSelected(),
      disabled: !props.row.getCanSelect(),
      onChange: () => null,
      onClick: handleOnClick
    }
  );
}
const useDocumentSheetListContext = () => {
  const context = useContext(DocumentSheetListContext);
  if (context === void 0)
    throw new Error("useDocumentSheetListContext must be used within an DocumentSheetListProvider");
  return context;
};
function DocumentSheetListProvider({
  children,
  table
}) {
  const [selectedAnchorCellDetails, setSelectedAnchorCellDetails] = useState(null), [selectedRangeCellIndexes, setSelectedRangeCellIndexes] = useState([]), clearAndSetFocusSelection = useCallback((nextAnchorDetails = null) => {
    selectedAnchorCellDetails?.state === "focused" && document.activeElement instanceof HTMLElement && document.activeElement.blur(), setSelectedAnchorCellDetails(nextAnchorDetails), setSelectedRangeCellIndexes([]);
  }, [selectedAnchorCellDetails]), resetFocusSelection = useCallback(() => clearAndSetFocusSelection(), [clearAndSetFocusSelection]), changeSelectionColumn = useCallback((direction) => {
    if (!selectedAnchorCellDetails) return;
    const visibleColumns = table.getVisibleLeafColumns(), columnIndexAfterMove = visibleColumns.findIndex((col) => col.id === selectedAnchorCellDetails.colId) + (direction === "left" ? -1 : 1);
    columnIndexAfterMove < 0 || columnIndexAfterMove >= visibleColumns.length || clearAndSetFocusSelection({
      colId: visibleColumns[columnIndexAfterMove].id,
      rowIndex: selectedAnchorCellDetails.rowIndex,
      state: "selected"
    });
  }, [clearAndSetFocusSelection, selectedAnchorCellDetails, table]), changeSelectionRange = useCallback((direction_0) => {
    selectedAnchorCellDetails && setSelectedRangeCellIndexes((previousSelection) => {
      const {
        rowIndex: anchorIndex
      } = selectedAnchorCellDetails, getNextIndex = (startingIndex) => startingIndex + (direction_0 === "down" ? 1 : -1);
      if (!previousSelection.length) {
        const firstSelectedIndex = getNextIndex(anchorIndex);
        return firstSelectedIndex < 0 ? [] : [firstSelectedIndex];
      }
      const lastIndexSelected = previousSelection[previousSelection.length - 1], nextIndex = getNextIndex(lastIndexSelected);
      return nextIndex < 0 ? previousSelection : nextIndex === anchorIndex ? [] : previousSelection.includes(nextIndex) ? previousSelection.slice(0, -1) : [...previousSelection, nextIndex];
    });
  }, [selectedAnchorCellDetails]), setSelectedAnchorCell = useCallback((colId, rowIndex) => {
    clearAndSetFocusSelection({
      colId,
      rowIndex,
      state: "selected"
    });
  }, [clearAndSetFocusSelection]), handleEscapePress = useCallback(() => {
    if (selectedAnchorCellDetails)
      if (selectedRangeCellIndexes.length)
        setSelectedRangeCellIndexes([]);
      else {
        const nextAnchorCellDetails = selectedAnchorCellDetails.state === "selected" ? null : {
          ...selectedAnchorCellDetails,
          state: "selected"
        };
        clearAndSetFocusSelection(nextAnchorCellDetails);
      }
  }, [clearAndSetFocusSelection, selectedAnchorCellDetails, selectedRangeCellIndexes.length]), handleUpDownKey = useCallback((isShiftKey, key) => {
    if (!selectedAnchorCellDetails) return;
    const direction_1 = key === "ArrowDown" ? "down" : "up", offset = direction_1 === "down" ? 1 : -1;
    if (isShiftKey)
      changeSelectionRange(direction_1);
    else {
      const newSelectedCellRowIndex = selectedAnchorCellDetails.rowIndex + offset;
      if (newSelectedCellRowIndex < 0) return;
      setSelectedAnchorCell(selectedAnchorCellDetails.colId, newSelectedCellRowIndex);
    }
  }, [changeSelectionRange, selectedAnchorCellDetails, setSelectedAnchorCell]), handleAnchorKeydown = useCallback((event) => {
    if (!selectedAnchorCellDetails) return;
    const {
      key: key_0,
      shiftKey
    } = event;
    switch (key_0) {
      case "Shift":
        break;
      // shift allow should do nothing
      case "Escape":
        handleEscapePress();
        break;
      case "ArrowDown":
      case "ArrowUp":
        event.preventDefault(), handleUpDownKey(shiftKey, key_0);
        break;
      case "ArrowLeft":
      case "ArrowRight":
        selectedAnchorCellDetails.state === "selected" && (event.preventDefault(), changeSelectionColumn(key_0 === "ArrowLeft" ? "left" : "right"));
        break;
    }
  }, [selectedAnchorCellDetails, handleEscapePress, handleUpDownKey, changeSelectionColumn]), handleAnchorClick = useCallback((event_0) => {
    selectedAnchorCellDetails && (document.getElementById(`cell-${selectedAnchorCellDetails.colId}-${selectedAnchorCellDetails.rowIndex}`)?.contains(event_0.target) || resetFocusSelection());
  }, [resetFocusSelection, selectedAnchorCellDetails]);
  useEffect(() => (selectedAnchorCellDetails && (document.addEventListener("keydown", handleAnchorKeydown), document.addEventListener("click", handleAnchorClick)), () => {
    selectedAnchorCellDetails && (document.removeEventListener("keydown", handleAnchorKeydown), document.removeEventListener("click", handleAnchorClick));
  }), [handleAnchorClick, handleAnchorKeydown, selectedAnchorCellDetails]);
  const focusAnchorCell = useCallback(() => setSelectedAnchorCellDetails((anchorCellDetails) => anchorCellDetails ? {
    ...anchorCellDetails,
    state: "focused"
  } : null), []), getStateByCellId = useCallback((colId_0, rowIndex_0) => selectedAnchorCellDetails?.colId !== colId_0 ? null : selectedAnchorCellDetails.rowIndex === rowIndex_0 ? selectedAnchorCellDetails.state === "focused" ? "focused" : "selectedAnchor" : selectedRangeCellIndexes.includes(rowIndex_0) ? "selectedRange" : null, [selectedAnchorCellDetails, selectedRangeCellIndexes]), submitFocusedCell = useCallback(() => {
    selectedAnchorCellDetails && clearAndSetFocusSelection({
      colId: selectedAnchorCellDetails.colId,
      rowIndex: selectedAnchorCellDetails.rowIndex + 1,
      state: "selected"
    });
  }, [clearAndSetFocusSelection, selectedAnchorCellDetails]), value = useMemo(() => ({
    focusAnchorCell,
    resetFocusSelection,
    setSelectedAnchorCell,
    getStateByCellId,
    submitFocusedCell
  }), [focusAnchorCell, resetFocusSelection, setSelectedAnchorCell, getStateByCellId, submitFocusedCell]);
  return /* @__PURE__ */ jsx(DocumentSheetListContext.Provider, { value, children });
}
const DataCell = styled.td`
  display: flex;
  overflow: hidden;
  box-sizing: border-box;
  width: ${({
  width
}) => width}px;
  border-top: 1px solid var(--card-border-color);
  background-color: var(--card-bg-color);
`, PinnedDataCell = styled(DataCell)`
  position: sticky;
  z-index: 2;
`;
function SheetListCellInner(props) {
  const {
    getValue,
    column,
    row,
    fieldType
  } = props, cellId = `cell-${column.id}-${row.index}`, [renderValue, setRenderValue] = useState(getValue()), [isDirty, setIsDirty] = useState(!1), inputRef = useRef(null), {
    focusAnchorCell,
    resetFocusSelection,
    setSelectedAnchorCell,
    getStateByCellId,
    submitFocusedCell
  } = useDocumentSheetListContext(), cellState = getStateByCellId(column.id, row.index), handleOnFocus = useCallback(() => {
    setSelectedAnchorCell(column.id, row.index), focusAnchorCell();
  }, [column.id, focusAnchorCell, row.index, setSelectedAnchorCell]), {
    patchDocument
  } = props.table.options.meta || {}, handleProgrammaticFocus = () => {
    inputRef.current?.focus(), inputRef.current instanceof HTMLInputElement && inputRef.current.select();
  }, handleOnMouseDown = (event) => {
    event.detail === 2 ? handleProgrammaticFocus() : (event.preventDefault(), setSelectedAnchorCell(column.id, row.index));
  }, handleOnEnterDown = useCallback((event_0) => {
    const {
      key
    } = event_0;
    key === "Enter" && (cellState === "selectedAnchor" && handleProgrammaticFocus(), cellState === "focused" && submitFocusedCell());
  }, [cellState, submitFocusedCell]), handleOnChange = (event_1) => {
    setIsDirty(!0), setRenderValue(event_1.target.value);
  }, handleOnBlur = () => {
    isDirty && (patchDocument?.(row.id, column.id, renderValue), setIsDirty(!1)), resetFocusSelection();
  }, handlePaste = useCallback((event_2) => {
    const clipboardData = event_2.clipboardData?.getData("Text");
    (typeof clipboardData == "string" || typeof clipboardData == "number") && (setRenderValue(clipboardData), patchDocument?.(row.id, column.id, clipboardData));
  }, [column.id, patchDocument, row.id]), handleCopy = useCallback(() => {
    navigator.clipboard.writeText(renderValue.toString());
  }, [renderValue]);
  useEffect(() => ((cellState === "selectedAnchor" || cellState === "focused") && document.addEventListener("keydown", handleOnEnterDown), (cellState === "selectedAnchor" || cellState === "selectedRange") && document.addEventListener("paste", handlePaste), cellState === "selectedAnchor" && document.addEventListener("copy", handleCopy), () => {
    (cellState === "selectedAnchor" || cellState === "focused") && document.removeEventListener("keydown", handleOnEnterDown), (cellState === "selectedAnchor" || cellState === "selectedRange") && document.removeEventListener("paste", handlePaste), cellState === "selectedAnchor" && document.removeEventListener("copy", handleCopy);
  }), [cellId, cellState, column.id, getStateByCellId, handleCopy, handleOnEnterDown, handlePaste, row.index]);
  const getBorderStyle = () => cellState === "focused" ? "2px solid blue" : cellState === "selectedRange" ? "1px solid green" : cellState === "selectedAnchor" ? "1px solid blue" : "1px solid transparent", inputProps = {
    onFocus: handleOnFocus,
    onBlur: handleOnBlur,
    onMouseDown: handleOnMouseDown,
    "aria-selected": !!cellState,
    "data-testid": cellId,
    id: cellId,
    ref: (ref) => inputRef.current = ref
  };
  return fieldType.name === "boolean" ? /* @__PURE__ */ jsxs(Select, { ...inputProps, onChange: () => null, radius: 0, style: {
    boxShadow: "none",
    border: getBorderStyle(),
    padding: 0
  }, value: JSON.stringify(renderValue), children: [
    /* @__PURE__ */ jsx("option", { value: "True", children: "True" }),
    /* @__PURE__ */ jsx("option", { value: "False", children: "False" })
  ] }) : /* @__PURE__ */ jsx(TextInput, { ...inputProps, size: 0, radius: 0, border: !1, style: {
    border: getBorderStyle(),
    padding: "22px 16px"
  }, value: typeof renderValue == "string" || typeof renderValue == "number" ? renderValue : JSON.stringify(renderValue), onChange: handleOnChange });
}
function SheetListCell(cell) {
  const isPinned = cell.column.getIsPinned(), Cell = isPinned ? PinnedDataCell : DataCell, borderWidth = isPinned && cell.column.getIsLastColumn("left") ? 2 : 1;
  return /* @__PURE__ */ jsx(Cell, { style: {
    left: cell.column.getStart("left") ?? void 0,
    borderRight: `${borderWidth}px solid var(--card-border-color)`
  }, width: cell.column.getSize(), children: flexRender(cell.column.columnDef.cell, cell.getContext?.()) }, cell.row.original._id + cell.id);
}
const VISIBLE_COLUMN_LIMIT = 5, PreviewCell = (props) => {
  const {
    documentPreviewStore,
    row,
    schemaType
  } = props, title = "Document title", previewStateObservable = useMemo(() => getPreviewStateObservable(documentPreviewStore, schemaType, row.original._id, title), [documentPreviewStore, row.original._id, schemaType]), {
    draft,
    published,
    isLoading
  } = useObservable(previewStateObservable, {
    draft: null,
    isLoading: !0,
    published: null
  });
  if (isLoading)
    return /* @__PURE__ */ jsx(Text, { size: 1, muted: !0, children: "Loading..." });
  const displayValue = draft?.title ?? published?.title ?? "Untitled";
  return /* @__PURE__ */ jsxs(Flex, { align: "center", gap: 3, children: [
    /* @__PURE__ */ jsx(DocumentStatusIndicator, { draft, published }),
    /* @__PURE__ */ jsx(Text, { size: 1, children: displayValue })
  ] });
}, columnHelper = createColumnHelper(), SUPPORTED_FIELDS = ["string", "number", "boolean"], getColsFromSchemaType = (schemaType, parentalField) => schemaType.fields.reduce((tableColumns, field) => {
  const {
    type,
    name
  } = field;
  if (SUPPORTED_FIELDS.includes(type.name)) {
    const nextCol = columnHelper.accessor(
      // accessor must use dot notation for internal tanstack method of reading cell data
      parentalField ? `${parentalField}.${field.name}` : field.name,
      {
        id: parentalField ? `${parentalField}_${field.name}` : field.name,
        header: field.type.title,
        enableHiding: !0,
        cell: (info) => /* @__PURE__ */ jsx(SheetListCellInner, { ...info, fieldType: type })
      }
    );
    return [...tableColumns, nextCol];
  }
  return type.name === "object" && isObjectSchemaType(type) && !parentalField ? [...tableColumns, columnHelper.group({
    header: name,
    columns: getColsFromSchemaType(type, field.name)
  })] : tableColumns;
}, []);
function isAccessorKeyColumnDef(column) {
  return "accessorKey" in column;
}
function isGroupColumnDef(column) {
  return "columns" in column;
}
const flatColumns = (cols) => cols.flatMap((col) => isAccessorKeyColumnDef(col) ? col : isGroupColumnDef(col) ? col.columns ? flatColumns(col.columns) : [] : []);
function useDocumentSheetColumns(documentSchemaType) {
  const documentPreviewStore = useDocumentPreviewStore(), columns = useMemo(() => documentSchemaType ? [columnHelper.display({
    id: "selected",
    enableHiding: !1,
    header: (info) => /* @__PURE__ */ jsxs(Box, { children: [
      /* @__PURE__ */ jsx(Checkbox, { style: {
        paddingLeft: 4
      }, indeterminate: info.table.getIsSomeRowsSelected(), onChange: info.table.getToggleAllPageRowsSelectedHandler() }),
      info.table.getSelectedRowModel().rows.length,
      " selected"
    ] }),
    cell: DocumentSheetListSelect
  }), columnHelper.accessor("Preview", {
    enableHiding: !1,
    id: "Preview",
    cell: (info_0) => /* @__PURE__ */ jsx(PreviewCell, { ...info_0, documentPreviewStore, schemaType: documentSchemaType })
  }), ...getColsFromSchemaType(documentSchemaType)] : [], [documentPreviewStore, documentSchemaType]), [initialColumnsVisibility] = useMemo(() => flatColumns(columns).reduce(([accCols, countAllowedVisible], column) => {
    if (!column.id) throw new Error("Column must have an id");
    const visibilityKey = column.id;
    return column.enableHiding ? countAllowedVisible === VISIBLE_COLUMN_LIMIT ? [{
      ...accCols,
      [visibilityKey]: !1
    }, countAllowedVisible] : [{
      ...accCols,
      [visibilityKey]: !0
    }, countAllowedVisible + 1] : [{
      ...accCols,
      [visibilityKey]: !0
    }, countAllowedVisible];
  }, [{}, 0]), [columns]);
  return {
    columns,
    initialColumnsVisibility
  };
}
function ColumnsControl({
  table
}) {
  const {
    t
  } = useTranslation(), isVisibleLimitReached = table.getVisibleLeafColumns().filter((col) => col.getCanHide()).length >= VISIBLE_COLUMN_LIMIT, setInitialColumns = useCallback(() => {
    table.resetColumnVisibility();
  }, [table]), handleColumnOnChange = (column) => () => {
    column.toggleVisibility();
  }, getColumnVisibilityDisabled = (column_0) => {
    const isColumnVisible = column_0.getIsVisible(), isSingleColumnVisible = table.getVisibleLeafColumns().filter((col_0) => col_0.getCanHide()).length === 1;
    return isVisibleLimitReached && !isColumnVisible || isSingleColumnVisible && isColumnVisible;
  };
  return /* @__PURE__ */ jsx(MenuButton, { button: /* @__PURE__ */ jsx(Button, { mode: "bleed", text: t("sheet-list.edit-columns") }), id: "columns-control", menu: /* @__PURE__ */ jsx(Menu, { padding: 3, paddingTop: 4, style: {
    width: 240
  }, children: /* @__PURE__ */ jsxs(Flex, { direction: "column", height: "fill", gap: 3, children: [
    /* @__PURE__ */ jsx(Text, { weight: "semibold", size: 1, children: t("sheet-list.select-fields") }),
    /* @__PURE__ */ jsx(Flex, { style: {
      flex: "1 1 auto",
      maxHeight: 320,
      overflowY: "scroll"
    }, children: /* @__PURE__ */ jsx(Stack, { children: table.getAllLeafColumns().filter((column_1) => column_1.getCanHide()).map((column_2) => /* @__PURE__ */ jsxs(Flex, { marginY: 2, align: "center", children: [
      /* @__PURE__ */ jsx(Checkbox, { readOnly: getColumnVisibilityDisabled(column_2), checked: column_2.getIsVisible(), onChange: handleColumnOnChange(column_2), id: `col-visibility-${column_2.id}`, style: {
        display: "block"
      } }),
      /* @__PURE__ */ jsx(Box, { flex: 1, paddingLeft: 3, children: /* @__PURE__ */ jsx(Text, { size: 1, children: /* @__PURE__ */ jsx("label", { htmlFor: `col-visibility-${column_2.id}`, children: column_2.columnDef.header?.toString() }) }) })
    ] }, column_2.id)) }) }),
    /* @__PURE__ */ jsx(Button, { width: "fill", mode: "ghost", text: t("sheet-list.reset-columns"), onClick: setInitialColumns })
  ] }) }), placement: "bottom", popover: {
    portal: !0
  } });
}
const SearchContainer = styled(Flex)`
  flex-shrink: 0;
`;
function DocumentSheetListFilter() {
  const $ = c(5), {
    state: t0
  } = useSearchState(), {
    filtersVisible
  } = t0;
  let t1;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t1 = /* @__PURE__ */ jsx(SearchHeader, {}), $[0] = t1) : t1 = $[0];
  let t2;
  $[1] !== filtersVisible ? (t2 = filtersVisible && /* @__PURE__ */ jsx(Filters, { showTypeFilter: !1 }), $[1] = filtersVisible, $[2] = t2) : t2 = $[2];
  let t3;
  return $[3] !== t2 ? (t3 = /* @__PURE__ */ jsxs(SearchContainer, { children: [
    t1,
    t2
  ] }), $[3] = t2, $[4] = t3) : t3 = $[4], t3;
}
const Header = styled.th`
  margin: 16px;
  z-index: 1;
  padding: 22px 0px;
  border-top: 1px solid var(--card-border-color);
  background-color: var(--card-badge-default-bg-color);
  box-sizing: border-box;
  text-align: left;
  width: ${({
  width
}) => width}px;
  max-width: ${({
  width
}) => width}px;
`, PinnedHeader = styled(Header)`
  position: sticky;
  z-index: 2;
`, HoverMenu = styled.div`
  visibility: hidden;

  ${Header}:hover & {
    visibility: visible;
  }
`;
function DocumentSheetListHeader(props) {
  const {
    header,
    headerGroup
  } = props, {
    t
  } = useTranslation(), isPinned = header.column.getIsPinned(), headerTitle = headerGroup.depth > 0 && !header.column.parent ? null : /* @__PURE__ */ jsx(Text, { size: 1, weight: "semibold", textOverflow: "ellipsis", children: flexRender(header.column.columnDef.header, header.getContext()) }), HeaderTag = isPinned ? PinnedHeader : Header, canShowHeaderMenu = header.column.getCanHide() && (headerGroup.depth === 0 ? !header.column.columns.length : header.column.parent), borderWidth = isPinned && header.column.getIsLastColumn("left") ? 2 : 1;
  return /* @__PURE__ */ jsx(HeaderTag, { style: {
    left: header.column.getStart("left") ?? void 0,
    borderRight: `${borderWidth}px solid var(--card-border-color)`
  }, "data-testid": `header-${header.id}`, width: header.getSize(), children: /* @__PURE__ */ jsxs(Flex, { justify: "space-between", marginX: 2, align: "baseline", children: [
    /* @__PURE__ */ jsx(Tooltip, { delay: 500, content: headerTitle, children: /* @__PURE__ */ jsx(Box, { style: {
      boxSizing: "border-box"
    }, marginLeft: 3, marginRight: 3, children: headerTitle }) }),
    canShowHeaderMenu && /* @__PURE__ */ jsx(HoverMenu, { children: /* @__PURE__ */ jsx(MenuButton, { button: /* @__PURE__ */ jsx(Button, { tooltipProps: {
      content: "Open field menu"
    }, mode: "bleed", icon: EllipsisHorizontalIcon, "data-testid": "field-menu-button" }), id: "field menu", popover: {
      placement: "bottom-end"
    }, menu: /* @__PURE__ */ jsx(Menu, { children: /* @__PURE__ */ jsx(MenuItem, { text: t("sheet-list.hide-field"), icon: CloseIcon, onClick: () => header.column.toggleVisibility() }) }) }) })
  ] }) }, header.id);
}
function DocumentSheetListPaginator({
  table
}) {
  return /* @__PURE__ */ jsx(TooltipDelayGroupProvider, { children: /* @__PURE__ */ jsxs(Flex, { gap: 3, align: "center", children: [
    /* @__PURE__ */ jsx(Button, { onClick: () => table.setPageIndex(0), disabled: !table.getCanPreviousPage(), icon: DoubleChevronLeftIcon, tooltipProps: {
      content: "Go to first page"
    } }),
    /* @__PURE__ */ jsx(Button, { onClick: () => table.previousPage(), disabled: !table.getCanPreviousPage(), icon: ChevronLeftIcon, tooltipProps: {
      content: "Go to previous page"
    } }),
    /* @__PURE__ */ jsxs(Text, { style: {
      whiteSpace: "nowrap"
    }, children: [
      table.getState().pagination.pageIndex + 1,
      " of ",
      table.getPageCount()
    ] }),
    /* @__PURE__ */ jsx(Button, { onClick: () => table.nextPage(), disabled: !table.getCanNextPage(), icon: ChevronRightIcon, tooltipProps: {
      content: "Go to next page"
    } }),
    /* @__PURE__ */ jsx(Button, { onClick: () => table.setPageIndex(table.getPageCount() - 1), disabled: !table.getCanNextPage(), icon: DoubleChevronRightIcon, tooltipProps: {
      content: "Go to last page"
    } }),
    /* @__PURE__ */ jsx("select", { value: table.getState().pagination.pageSize, onChange: (e) => {
      table.setPageSize(Number(e.target.value));
    }, children: [25, 50, 100].map((pageSize) => /* @__PURE__ */ jsx("option", { value: pageSize, children: pageSize }, pageSize)) })
  ] }) });
}
function createDocumentsSet(documents) {
  return documents.reduce((acc, doc) => ({
    ...acc,
    [doc._id]: doc
  }), {});
}
function documentsReducer(state2, action) {
  switch (action.type) {
    case "DOCUMENTS_SET": {
      const documents = createDocumentsSet(action.documents);
      return {
        ...state2,
        documents
      };
    }
    case "DOCUMENT_RECEIVED": {
      const nextDocumentResult = action.payload;
      return {
        ...state2,
        documents: {
          ...state2.documents,
          [nextDocumentResult._id]: nextDocumentResult
        }
      };
    }
    case "DOCUMENT_DELETED": {
      const {
        [action.id]: _,
        ...restDocuments
      } = state2.documents;
      return {
        ...state2,
        documents: restDocuments
      };
    }
    case "DOCUMENT_UPDATED": {
      const updatedDocument = action.payload, id = updatedDocument._id, nextDocument = {
        // Add existing document data
        ...state2.documents[id],
        // Add incoming document data
        ...updatedDocument
      };
      return {
        ...state2,
        documents: {
          ...state2.documents,
          [id]: nextDocument
        }
      };
    }
    default:
      return state2;
  }
}
const LISTEN_OPTIONS = {
  events: ["welcome", "mutation", "reconnect"],
  includeResult: !0,
  visibility: "query"
};
function useDocumentSheetListStore(t0) {
  const $ = c(25), {
    filter: filter2,
    params,
    apiVersion
  } = t0, QUERY = `*[${filter2}][0...2000]`, t1 = apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion;
  let t2;
  $[0] !== t1 ? (t2 = {
    ...DEFAULT_STUDIO_CLIENT_OPTIONS,
    apiVersion: t1
  }, $[0] = t1, $[1] = t2) : t2 = $[1];
  const client = useClient(t2);
  let t3;
  $[2] === Symbol.for("react.memo_cache_sentinel") ? (t3 = {
    documents: {}
  }, $[2] = t3) : t3 = $[2];
  const [state2, dispatch] = useReducer(documentsReducer, t3), [isLoading, setIsLoading] = useState(client !== null), [error, setError] = useState(null);
  let t4;
  $[3] !== QUERY || $[4] !== client || $[5] !== params ? (t4 = async () => {
    if (!client) {
      setIsLoading(!1);
      return;
    }
    try {
      const res = await client.fetch(QUERY, params);
      dispatch({
        type: "DOCUMENTS_SET",
        documents: res
      }), setIsLoading(!1);
    } catch (t52) {
      setError(t52);
    }
  }, $[3] = QUERY, $[4] = client, $[5] = params, $[6] = t4) : t4 = $[6];
  const initialFetch = t4;
  let t5;
  $[7] !== initialFetch ? (t5 = async (event) => {
    if (event.type === "welcome" && (setIsLoading(!0), await initialFetch(), setIsLoading(!1)), event.type === "reconnect" && setIsLoading(!0), event.type === "mutation") {
      if (event.transition === "appear") {
        const nextDocument = event.result;
        nextDocument && dispatch({
          type: "DOCUMENT_RECEIVED",
          payload: nextDocument
        });
      }
      if (event.transition === "disappear" && dispatch({
        type: "DOCUMENT_DELETED",
        id: event.documentId
      }), event.transition === "update") {
        const updatedDocument = event.result;
        updatedDocument && dispatch({
          type: "DOCUMENT_UPDATED",
          payload: updatedDocument
        });
      }
    }
  }, $[7] = initialFetch, $[8] = t5) : t5 = $[8];
  const handleListenerEvent = t5;
  let t6;
  bb0: {
    if (!client) {
      let t73;
      $[9] === Symbol.for("react.memo_cache_sentinel") ? (t73 = of(), $[9] = t73) : t73 = $[9], t6 = t73;
      break bb0;
    }
    let t72;
    if ($[10] !== QUERY || $[11] !== client.observable || $[12] !== params) {
      let t82;
      $[14] === Symbol.for("react.memo_cache_sentinel") ? (t82 = (err_0) => (setError(err_0), of(err_0)), $[14] = t82) : t82 = $[14], t72 = client.observable.listen(QUERY, params, LISTEN_OPTIONS).pipe(catchError$1(t82)), $[10] = QUERY, $[11] = client.observable, $[12] = params, $[13] = t72;
    } else
      t72 = $[13];
    t6 = t72;
  }
  const listener$ = t6;
  let t7, t8;
  $[15] !== handleListenerEvent || $[16] !== listener$ ? (t7 = () => {
    const sub = listener$.subscribe(handleListenerEvent);
    return () => {
      sub?.unsubscribe();
    };
  }, t8 = [handleListenerEvent, listener$], $[15] = handleListenerEvent, $[16] = listener$, $[17] = t7, $[18] = t8) : (t7 = $[17], t8 = $[18]), useEffect(t7, t8);
  let t9, t10;
  if ($[19] !== state2.documents) {
    const uniques = Object.keys(state2.documents).reduce((acc, key) => {
      const document2 = state2.documents[key], isDraft = document2._id === getDraftId(document2._id), id = isDraft ? document2._id : getDraftId(document2._id);
      return acc[id] && !isDraft || (acc[id] = document2), acc;
    }, {});
    t10 = Object.values(uniques), $[19] = state2.documents, $[20] = t10;
  } else
    t10 = $[20];
  t9 = t10;
  const dataAsArray = t9;
  let t11;
  return $[21] !== dataAsArray || $[22] !== error || $[23] !== isLoading ? (t11 = {
    data: dataAsArray,
    isLoading,
    error
  }, $[21] = dataAsArray, $[22] = error, $[23] = isLoading, $[24] = t11) : t11 = $[24], t11;
}
function useDocumentSheetList({
  typeName
}) {
  const {
    state: state2
  } = useSearchState(), items = useMemo(() => {
    const map2 = /* @__PURE__ */ new Map();
    return state2.result.hits.forEach((h) => map2.set(getPublishedId(h.hit._id), h.hit)), map2;
  }, [state2.result.hits]), {
    data,
    isLoading
  } = useDocumentSheetListStore({
    filter: `_type == "${typeName}"`
  });
  return {
    data: useMemo(() => data.filter((doc) => items.has(getPublishedId(doc._id))), [data, items]),
    isLoading
  };
}
const PaneContainer$1 = styled(Flex)`
  height: 100%;
`, TableContainer = styled.div`
  overflow: auto; //our scrollable table container
  position: relative; //needed for sticky header
`, Table = styled.table`
  border-collapse: separate;
  border-spacing: 0;
  font-family: arial, sans-serif;
  white-space: nowrap;
  width: 100%;
  border: 1px solid lightgray;

  thead {
    display: grid;
    position: sticky;
    top: 0;
    z-index: 10;
  }
  tr {
    padding: 0;
  }
  tr:last-child {
    border-bottom: none;
  }
`;
function DocumentSheetListPaneInner({
  documentSchemaType
}) {
  const {
    dispatch,
    state: state2
  } = useSearchState(), {
    columns,
    initialColumnsVisibility
  } = useDocumentSheetColumns(documentSchemaType), {
    data
  } = useDocumentSheetList({
    typeName: documentSchemaType.name
  }), [selectedAnchor, setSelectedAnchor] = useState(null), totalRows = state2.result.hits.length, table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    // Avoids resetting the page index when the data changes, e.g. a mutation is received
    autoResetPageIndex: !1,
    initialState: {
      columnPinning: {
        left: ["selected", "Preview"]
      },
      pagination: {
        pageSize: 25
      },
      columnVisibility: initialColumnsVisibility
    },
    getRowId: (row) => row._id,
    meta: {
      selectedAnchor,
      setSelectedAnchor,
      patchDocument: (documentId, fieldId, value) => null
    }
  }), {
    rows
  } = table.getRowModel();
  useEffect(() => (dispatch({
    type: "TERMS_TYPE_ADD",
    schemaType: documentSchemaType
  }), () => {
    dispatch({
      type: "TERMS_TYPE_REMOVE",
      schemaType: documentSchemaType
    });
  }), [documentSchemaType, dispatch]);
  const renderRow = useCallback((row_0) => /* @__PURE__ */ jsx(Box, { as: "tr", paddingY: 2, style: {
    display: "flex",
    width: "100%"
  }, children: row_0.getVisibleCells().map((cell) => /* @__PURE__ */ createElement(SheetListCell, { ...cell, key: row_0.original._id + cell.id })) }, row_0.original._id + row_0.id), []), rowsCount = `Total: ${totalRows} rows, showing ${rows.length} rows`;
  return /* @__PURE__ */ jsxs(PaneContainer$1, { direction: "column", paddingX: 3, "data-testid": "document-sheet-list-pane", children: [
    /* @__PURE__ */ jsxs(Flex, { direction: "row", align: "center", paddingY: 3, paddingX: 1, justify: "space-between", children: [
      /* @__PURE__ */ jsxs(Flex, { direction: "row", align: "center", children: [
        /* @__PURE__ */ jsx(DocumentSheetListFilter, {}),
        /* @__PURE__ */ jsx(Text, { size: 0, muted: !0, children: rowsCount })
      ] }),
      /* @__PURE__ */ jsx(ColumnsControl, { table })
    ] }),
    /* @__PURE__ */ jsx(TableContainer, { children: /* @__PURE__ */ jsx(DocumentSheetListProvider, { table, children: /* @__PURE__ */ jsxs(Table, { children: [
      /* @__PURE__ */ jsx("thead", { children: table.getHeaderGroups().map((headerGroup) => /* @__PURE__ */ jsx(Box, { as: "tr", children: headerGroup.headers.map((header) => /* @__PURE__ */ jsx(DocumentSheetListHeader, { header, headerGroup }, header.id)) }, headerGroup.id)) }),
      /* @__PURE__ */ jsx("tbody", { children: table.getRowModel().rows.map(renderRow) })
    ] }) }) }),
    /* @__PURE__ */ jsx(Flex, { justify: "flex-end", padding: 3, gap: 4, paddingY: 5, children: /* @__PURE__ */ jsx(DocumentSheetListPaginator, { table }) })
  ] });
}
function DocumentSheetListPane(props) {
  const schema = useSchema(), typeName = props.pane.schemaTypeName, schemaType = schema.get(typeName);
  if (!schemaType || !isDocumentSchemaType(schemaType))
    throw new Error(`Schema type "${typeName}" not found or not a document schema`);
  return /* @__PURE__ */ jsx(SearchProvider, { children: /* @__PURE__ */ jsx(DocumentSheetListPaneInner, { ...props, documentSchemaType: schemaType }) });
}
const addSelectedStateToMenuItems = (options) => {
  const {
    menuItems,
    sortOrderRaw,
    layout
  } = options;
  return menuItems?.map((item) => item.params?.layout ? {
    ...item,
    selected: layout === item.params?.layout
  } : item?.params?.by ? {
    ...item,
    selected: isEqual(sortOrderRaw?.by, item?.params?.by || EMPTY_ARRAY$2)
  } : {
    ...item,
    selected: !1
  });
};
function useShallowUnique(value) {
  const valueRef = useRef(value);
  return shallowEquals(valueRef.current, value) || (valueRef.current = value), valueRef.current;
}
const PaneContainer = memo(function(props) {
  const $ = c(36), {
    index,
    isSelected,
    pane: pane2,
    paneKey
  } = props, {
    name: parentSourceName
  } = useSource(), {
    defaultLayout: t0,
    initialValueTemplates: t1,
    menuItemGroups,
    menuItems,
    options
  } = pane2, defaultLayout = t0 === void 0 ? "default" : t0, initialValueTemplates = t1 === void 0 ? EMPTY_ARRAY$2 : t1, {
    defaultOrdering: t2,
    filter: filter2
  } = options, defaultOrdering = t2 === void 0 ? EMPTY_ARRAY$2 : t2, params = useShallowUnique(options.params || EMPTY_RECORD), sourceName = pane2.source;
  let t3;
  bb0: {
    let t42;
    $[0] !== filter2 || $[1] !== params ? (t42 = findStaticTypesInFilter(filter2, params), $[0] = filter2, $[1] = params, $[2] = t42) : t42 = $[2];
    const staticTypes = t42;
    if (staticTypes?.length === 1) {
      t3 = staticTypes[0];
      break bb0;
    }
    t3 = null;
  }
  const typeName = t3, [layout, setLayout] = useStructureToolSetting("layout", typeName ?? pane2.id, defaultLayout), {
    title
  } = useI18nText(pane2);
  let t4, t5;
  $[3] !== defaultOrdering ? (t5 = defaultOrdering?.length > 0 ? {
    by: defaultOrdering
  } : DEFAULT_ORDERING, $[3] = defaultOrdering, $[4] = t5) : t5 = $[4], t4 = t5;
  const defaultSortOrder = t4, [sortOrderRaw, setSortOrder] = useStructureToolSetting("sort-order", typeName ?? pane2.id, defaultSortOrder);
  let t6, t7;
  $[5] !== layout || $[6] !== menuItems || $[7] !== sortOrderRaw ? (t7 = addSelectedStateToMenuItems({
    menuItems,
    sortOrderRaw,
    layout
  }), $[5] = layout, $[6] = menuItems, $[7] = sortOrderRaw, $[8] = t7) : t7 = $[8], t6 = t7;
  const menuItemsWithSelectedState = t6, isSheetListLayout = layout === "sheetList";
  let t8;
  $[9] !== isSheetListLayout || $[10] !== layout || $[11] !== props || $[12] !== sortOrderRaw ? (t8 = isSheetListLayout ? /* @__PURE__ */ createElement(DocumentSheetListPane, { ...props, key: props.pane.id }) : /* @__PURE__ */ jsx(DocumentListPane, { ...props, sortOrder: sortOrderRaw, layout }), $[9] = isSheetListLayout, $[10] = layout, $[11] = props, $[12] = sortOrderRaw, $[13] = t8) : t8 = $[13];
  const paneLayout = t8, t9 = sourceName || parentSourceName;
  let t10;
  $[14] !== isSheetListLayout ? (t10 = isSheetListLayout ? {} : {
    currentMaxWidth: 350,
    maxWidth: 640
  }, $[14] = isSheetListLayout, $[15] = t10) : t10 = $[15];
  let t11;
  $[16] !== pane2.source ? (t11 = _DEBUG, $[16] = pane2.source, $[17] = t11) : t11 = $[17];
  let t12;
  $[18] !== index || $[19] !== initialValueTemplates || $[20] !== menuItemGroups || $[21] !== menuItemsWithSelectedState || $[22] !== setLayout || $[23] !== setSortOrder || $[24] !== title ? (t12 = /* @__PURE__ */ jsx(PaneHeader, { index, initialValueTemplates, menuItemGroups, menuItems: menuItemsWithSelectedState, setLayout, setSortOrder, title }), $[18] = index, $[19] = initialValueTemplates, $[20] = menuItemGroups, $[21] = menuItemsWithSelectedState, $[22] = setLayout, $[23] = setSortOrder, $[24] = title, $[25] = t12) : t12 = $[25];
  let t13;
  $[26] !== isSelected || $[27] !== paneKey || $[28] !== paneLayout || $[29] !== t10 || $[30] !== t11 || $[31] !== t12 ? (t13 = /* @__PURE__ */ jsxs(Pane, { "data-ui": "DocumentListPane", id: paneKey, minWidth: 320, ...t10, selected: isSelected, children: [
    t11,
    t12,
    paneLayout
  ] }), $[26] = isSelected, $[27] = paneKey, $[28] = paneLayout, $[29] = t10, $[30] = t11, $[31] = t12, $[32] = t13) : t13 = $[32];
  let t14;
  return $[33] !== t13 || $[34] !== t9 ? (t14 = /* @__PURE__ */ jsx(SourceProvider, { name: t9, children: t13 }), $[33] = t13, $[34] = t9, $[35] = t14) : t14 = $[35], t14;
});
class SerializeError extends Error {
  constructor(message, parentPath, pathSegment, hint) {
    super(message), this.name = "SerializeError";
    const segment = typeof pathSegment > "u" ? "<unknown>" : `${pathSegment}`;
    this.path = (parentPath || []).concat(hint ? `${segment} (${hint})` : segment);
  }
  withHelpUrl(id) {
    return this.helpId = id, this;
  }
}
let HELP_URL = /* @__PURE__ */ function(HELP_URL2) {
  return HELP_URL2.ID_REQUIRED = "structure-node-id-required", HELP_URL2.TITLE_REQUIRED = "structure-title-required", HELP_URL2.FILTER_REQUIRED = "structure-filter-required", HELP_URL2.INVALID_LIST_ITEM = "structure-invalid-list-item", HELP_URL2.COMPONENT_REQUIRED = "structure-view-component-required", HELP_URL2.DOCUMENT_ID_REQUIRED = "structure-document-id-required", HELP_URL2.DOCUMENT_TYPE_REQUIRED = "structure-document-type-required", HELP_URL2.SCHEMA_TYPE_REQUIRED = "structure-schema-type-required", HELP_URL2.SCHEMA_TYPE_NOT_FOUND = "structure-schema-type-not-found", HELP_URL2.LIST_ITEMS_MUST_BE_ARRAY = "structure-list-items-must-be-array", HELP_URL2.QUERY_PROVIDED_FOR_FILTER = "structure-query-provided-for-filter", HELP_URL2.ACTION_OR_INTENT_REQUIRED = "structure-action-or-intent-required", HELP_URL2.LIST_ITEM_IDS_MUST_BE_UNIQUE = "structure-list-item-ids-must-be-unique", HELP_URL2.ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE = "structure-action-and-intent-mutually-exclusive", HELP_URL2.API_VERSION_REQUIRED_FOR_CUSTOM_FILTER = "structure-api-version-required-for-custom-filter", HELP_URL2;
}({});
const ORDER_BY_UPDATED_AT = {
  title: "Last edited",
  i18n: {
    title: {
      key: "menu-items.sort-by.last-edited",
      ns: structureLocaleNamespace
    }
  },
  name: "lastEditedDesc",
  by: [{
    field: "_updatedAt",
    direction: "desc"
  }]
}, ORDER_BY_CREATED_AT = {
  title: "Created",
  i18n: {
    title: {
      key: "menu-items.sort-by.created",
      ns: structureLocaleNamespace
    }
  },
  name: "lastCreatedDesc",
  by: [{
    field: "_createdAt",
    direction: "desc"
  }]
}, DEFAULT_SELECTED_ORDERING_OPTION = ORDER_BY_UPDATED_AT, DEFAULT_ORDERING_OPTIONS = [
  ORDER_BY_UPDATED_AT,
  // _updatedAt
  ORDER_BY_CREATED_AT
  // _createdAt
];
function maybeSerializeMenuItem(item, index, path) {
  return item instanceof MenuItemBuilder ? item.serialize({
    path,
    index
  }) : item;
}
class MenuItemBuilder {
  /** menu item option object. See {@link PartialMenuItem} */
  constructor(_context, spec) {
    this._context = _context, this.spec = spec || {};
  }
  /**
   * Set menu item action
   * @param action - menu item action. See {@link MenuItemActionType}
   * @returns menu item builder based on action provided. See {@link MenuItemBuilder}
   */
  action(action) {
    return this.clone({
      action
    });
  }
  /**
   * Get menu item action
   * @returns menu item builder action. See {@link PartialMenuItem}
   */
  getAction() {
    return this.spec.action;
  }
  /**
   * Set menu item intent
   * @param intent - menu item intent. See {@link Intent}
   * @returns menu item builder based on intent provided. See {@link MenuItemBuilder}
   */
  intent(intent) {
    return this.clone({
      intent
    });
  }
  /**
   * Get menu item intent
   * @returns menu item intent. See {@link PartialMenuItem}
   */
  getIntent() {
    return this.spec.intent;
  }
  /**
   * Set menu item title
   * @param title - menu item title
   * @returns menu item builder based on title provided. See {@link MenuItemBuilder}
   */
  title(title) {
    return this.clone({
      title
    });
  }
  /**
   * Get menu item title. Note that the `i18n` configuration will take
   * precedence and this title is left here for compatibility.
   * @returns menu item title
   */
  getTitle() {
    return this.spec.title;
  }
  /**
   * Set the i18n key and namespace used to populate the localized title.
   * @param i18n - object with i18n key and related namespace
   * @returns menu item builder based on i18n config provided. See {@link MenuItemBuilder}
   */
  i18n(i18n) {
    return this.clone({
      i18n
    });
  }
  /**
   * Get the i18n key and namespace used to populate the localized title.
   * @returns the i18n key and namespace used to populate the localized title.
   */
  getI18n() {
    return this.spec.i18n;
  }
  /**
   * Set menu item group
   * @param group - menu item group
   * @returns menu item builder based on group provided. See {@link MenuItemBuilder}
   */
  group(group) {
    return this.clone({
      group
    });
  }
  /**
   * Get menu item group
   * @returns menu item group. See {@link PartialMenuItem}
   */
  getGroup() {
    return this.spec.group;
  }
  /**
   * Set menu item icon
   * @param icon - menu item icon
   * @returns menu item builder based on icon provided. See {@link MenuItemBuilder}
   */
  icon(icon) {
    return this.clone({
      icon
    });
  }
  /**
   * Get menu item icon
   * @returns menu item icon. See {@link PartialMenuItem}
   */
  getIcon() {
    return this.spec.icon;
  }
  /**
   * Set menu item parameters
   * @param params - menu item parameters. See {@link MenuItemParamsType}
   * @returns menu item builder based on parameters provided. See {@link MenuItemBuilder}
   */
  params(params) {
    return this.clone({
      params
    });
  }
  /**
   * Get meny item parameters
   * @returns menu item parameters. See {@link PartialMenuItem}
   */
  getParams() {
    return this.spec.params;
  }
  /**
   * Set menu item to show as action
   * @param showAsAction - determine if menu item should show as action
   * @returns menu item builder based on if it should show as action. See {@link MenuItemBuilder}
   */
  showAsAction(showAsAction = !0) {
    return this.clone({
      showAsAction: !!showAsAction
    });
  }
  /**
   * Check if menu item should show as action
   * @returns true if menu item should show as action, false if not. See {@link PartialMenuItem}
   */
  getShowAsAction() {
    return this.spec.showAsAction;
  }
  /** Serialize menu item builder
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns menu item node based on path provided in options. See {@link MenuItem}
   */
  serialize(options = {
    path: []
  }) {
    const {
      title,
      action,
      intent
    } = this.spec;
    if (!title) {
      const hint = typeof action == "string" ? `action: "${action}"` : void 0;
      throw new SerializeError("`title` is required for menu item", options.path, options.index, hint).withHelpUrl(HELP_URL.TITLE_REQUIRED);
    }
    if (!action && !intent)
      throw new SerializeError(`\`action\` or \`intent\` required for menu item with title ${this.spec.title}`, options.path, options.index, `"${title}"`).withHelpUrl(HELP_URL.ACTION_OR_INTENT_REQUIRED);
    if (intent && action)
      throw new SerializeError("cannot set both `action` AND `intent`", options.path, options.index, `"${title}"`).withHelpUrl(HELP_URL.ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE);
    return {
      ...this.spec,
      title
    };
  }
  /** Clone menu item builder
   * @param withSpec - menu item options. See {@link PartialMenuItem}
   * @returns menu item builder based on context and spec provided. See {@link MenuItemBuilder}
   */
  clone(withSpec) {
    const builder = new MenuItemBuilder(this._context);
    return builder.spec = {
      ...this.spec,
      ...withSpec || {}
    }, builder;
  }
}
function getOrderingMenuItem(context, {
  by,
  title,
  i18n
}, extendedProjection) {
  let builder = new MenuItemBuilder(context).group("sorting").title(context.i18n.t("default-menu-item.fallback-title", {
    // note this lives in the `studio` bundle because that one is loaded by default
    ns: "studio",
    replace: {
      title
    }
    // replaces the `{{title}}` option
  })).icon(SortIcon).action("setSortOrder").params({
    by,
    extendedProjection
  });
  return i18n && (builder = builder.i18n(i18n)), builder;
}
function getOrderingMenuItemsForSchemaType(context, typeName) {
  const {
    schema
  } = context, type = typeof typeName == "string" ? schema.get(typeName) : typeName;
  return !type || !("orderings" in type) ? [] : (type.orderings ? type.orderings.concat(DEFAULT_ORDERING_OPTIONS) : DEFAULT_ORDERING_OPTIONS).map((ordering) => getOrderingMenuItem(context, ordering, getExtendedProjection(type, ordering.by)));
}
function maybeSerializeMenuItemGroup(item, index, path) {
  return item instanceof MenuItemGroupBuilder ? item.serialize({
    path,
    index
  }) : item;
}
class MenuItemGroupBuilder {
  /** Menu item group ID */
  /** Menu item group title */
  constructor(_context, spec) {
    this._context = _context, this._id = spec ? spec.id : "", this._title = spec ? spec.title : "", this._i18n = spec ? spec.i18n : void 0;
  }
  /**
   * Set menu item group ID
   * @param id - menu item group ID
   * @returns menu item group builder based on ID provided. See {@link MenuItemGroupBuilder}
   */
  id(id) {
    return new MenuItemGroupBuilder(this._context, {
      id,
      title: this._title,
      i18n: this._i18n
    });
  }
  /**
   * Get menu item group ID
   * @returns menu item group ID
   */
  getId() {
    return this._id;
  }
  /**
   * Set menu item group title
   * @param title - menu item group title
   * @returns menu item group builder based on title provided. See {@link MenuItemGroupBuilder}
   */
  title(title) {
    return new MenuItemGroupBuilder(this._context, {
      title,
      id: this._id,
      i18n: this._i18n
    });
  }
  /**
   * Get menu item group title
   * @returns menu item group title
   */
  getTitle() {
    return this._title;
  }
  /**
   * Set the i18n key and namespace used to populate the localized title.
   * @param i18n - object with i18n key and related namespace
   * @returns menu item group builder based on i18n info provided. See {@link MenuItemGroupBuilder}
   */
  i18n(i18n) {
    return new MenuItemGroupBuilder(this._context, {
      i18n,
      id: this._id,
      title: this._title
    });
  }
  /**
   * Get the i18n key and namespace used to populate the localized title.
   * @returns the i18n key and namespace used to populate the localized title.
   */
  getI18n() {
    return this._i18n;
  }
  /**
   * Serialize menu item group builder
   * @param options - serialization options (path). See {@link SerializeOptions}
   * @returns menu item group based on path provided in options. See {@link MenuItemGroup}
   */
  serialize(options = {
    path: []
  }) {
    const {
      _id,
      _title,
      _i18n
    } = this;
    if (!_id)
      throw new SerializeError("`id` is required for a menu item group", options.path, options.index, _title).withHelpUrl(HELP_URL.ID_REQUIRED);
    if (!_title)
      throw new SerializeError("`title` is required for a menu item group", options.path, _id).withHelpUrl(HELP_URL.TITLE_REQUIRED);
    return {
      id: _id,
      title: _title,
      i18n: _i18n
    };
  }
}
const disallowedPattern = /([^A-Za-z0-9-_.])/;
function validateId(id, parentPath, pathSegment) {
  if (typeof id != "string")
    throw new SerializeError(`Structure node id must be of type string, got ${typeof id}`, parentPath, pathSegment);
  const [disallowedChar] = id.match(disallowedPattern) || [];
  if (disallowedChar)
    throw new SerializeError(`Structure node id cannot contain character "${disallowedChar}"`, parentPath, pathSegment);
  if (id.startsWith("__edit__"))
    throw new SerializeError("Structure node id cannot start with __edit__", parentPath, pathSegment);
  return id;
}
function getStructureNodeId(title, id) {
  if (id)
    return id;
  const camelCased = camelCase(title);
  return disallowedPattern.test(camelCased) ? camelCase(speakingurl(title)) : camelCased;
}
class ComponentBuilder {
  /** component builder option object */
  constructor(spec) {
    this.spec = {
      options: {},
      ...spec || {}
    };
  }
  /** Set Component ID
   * @param id - component ID
   * @returns component builder based on ID provided
   */
  id(id) {
    return this.clone({
      id
    });
  }
  /** Get ID
   * @returns ID
   */
  getId() {
    return this.spec.id;
  }
  /** Set Component title
   * @param title - component title
   * @returns component builder based on title provided (and ID)
   */
  title(title) {
    return this.clone({
      title,
      id: getStructureNodeId(title, this.spec.id)
    });
  }
  /** Get Component title
   * @returns title
   */
  getTitle() {
    return this.spec.title;
  }
  /** Set the i18n key and namespace used to populate the localized title.
   * @param i18n - the key and namespaced used to populate the localized title.
   * @returns component builder based on i18n key and ns provided
   */
  i18n(i18n) {
    return this.clone({
      i18n
    });
  }
  /** Get i18n key and namespace used to populate the localized title
   * @returns the i18n key and namespace used to populate the localized title
   */
  getI18n() {
    return this.spec.i18n;
  }
  /** Set Component child
   * @param child - child component
   * @returns component builder based on child component provided
   */
  child(child) {
    return this.clone({
      child
    });
  }
  /** Get Component child
   * @returns child component
   */
  getChild() {
    return this.spec.child;
  }
  /** Set component
   * @param component - user built component
   * @returns component builder based on component provided
   */
  component(component2) {
    return this.clone({
      component: component2
    });
  }
  /** Get Component
   * @returns component
   */
  getComponent() {
    return this.spec.component;
  }
  /** Set Component options
   * @param options - component options
   * @returns component builder based on options provided
   */
  options(options) {
    return this.clone({
      options
    });
  }
  /** Get Component options
   * @returns component options
   */
  getOptions() {
    return this.spec.options || {};
  }
  /** Set Component menu items
   * @param menuItems - component menu items
   * @returns component builder based on menuItems provided
   */
  menuItems(menuItems) {
    return this.clone({
      menuItems
    });
  }
  /** Get Component menu items
   * @returns menu items
   */
  getMenuItems() {
    return this.spec.menuItems;
  }
  /** Set Component menu item groups
   * @param menuItemGroups - component menu item groups
   * @returns component builder based on menuItemGroups provided
   */
  menuItemGroups(menuItemGroups) {
    return this.clone({
      menuItemGroups
    });
  }
  /** Get Component menu item groups
   * @returns menu item groups
   */
  getMenuItemGroups() {
    return this.spec.menuItemGroups;
  }
  canHandleIntent(canHandleIntent) {
    return this.clone({
      canHandleIntent
    });
  }
  /** Serialize component
   * @param options - serialization options
   * @returns component object based on path provided in options
   *
   */
  serialize(options = {
    path: []
  }) {
    const {
      id,
      title,
      child,
      options: componentOptions,
      component: component2
    } = this.spec;
    if (!id)
      throw new SerializeError("`id` is required for `component` structure item", options.path, options.index).withHelpUrl(HELP_URL.ID_REQUIRED);
    if (!component2)
      throw new SerializeError("`component` is required for `component` structure item", options.path, options.index).withHelpUrl(HELP_URL.ID_REQUIRED);
    return {
      id: validateId(id, options.path, options.index),
      title,
      type: "component",
      child,
      component: component2,
      canHandleIntent: this.spec.canHandleIntent,
      options: componentOptions || {},
      menuItems: (this.spec.menuItems || []).map((item, i) => maybeSerializeMenuItem(item, i, options.path)),
      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) => maybeSerializeMenuItemGroup(item, i, options.path))
    };
  }
  /** Clone component builder (allows for options overriding)
   * @param withSpec - component builder options
   * @returns cloned builder
   */
  clone(withSpec) {
    const builder = new ComponentBuilder();
    return builder.spec = {
      ...this.spec,
      ...withSpec || {}
    }, builder;
  }
}
async function resolveTypeForDocument(getClient, id) {
  const query = "*[_id in [$documentId, $draftId]]._type", documentId = getPublishedId(id), draftId = getDraftId(id);
  return (await getClient(DEFAULT_STUDIO_CLIENT_OPTIONS).fetch(query, {
    documentId,
    draftId
  }, {
    tag: "structure.resolve-type"
  }))[0];
}
class GenericViewBuilder {
  /** Generic view option object */
  spec = {};
  /** Set generic view ID
   * @param id - generic view ID
   * @returns generic view builder based on ID provided.
   */
  id(id) {
    return this.clone({
      id
    });
  }
  /** Get generic view ID
   * @returns generic view ID
   */
  getId() {
    return this.spec.id;
  }
  /** Set generic view title
   * @param title - generic view title
   * @returns generic view builder based on title provided and (if provided) its ID.
   */
  title(title) {
    return this.clone({
      title,
      id: this.spec.id || kebabCase(title)
    });
  }
  /** Get generic view title
   * @returns generic view title
   */
  getTitle() {
    return this.spec.title;
  }
  /** Set generic view icon
   * @param icon - generic view icon
   * @returns generic view builder based on icon provided.
   */
  icon(icon) {
    return this.clone({
      icon
    });
  }
  /** Get generic view icon
   * @returns generic view icon
   */
  getIcon() {
    return this.spec.icon;
  }
  /** Serialize generic view
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns generic view object based on path provided in options. See {@link BaseView}
   */
  serialize(options = {
    path: []
  }) {
    const {
      id,
      title,
      icon
    } = this.spec;
    if (!id)
      throw new SerializeError("`id` is required for view item", options.path, options.index).withHelpUrl(HELP_URL.ID_REQUIRED);
    if (!title)
      throw new SerializeError("`title` is required for view item", options.path, options.index).withHelpUrl(HELP_URL.TITLE_REQUIRED);
    return {
      id: validateId(id, options.path, options.index),
      title,
      icon
    };
  }
  /** Clone generic view builder (allows for options overriding)
   * @param withSpec - Partial generic view builder options. See {@link BaseView}
   * @returns Generic view builder.
   */
}
function isSerializable(view) {
  return typeof view.serialize == "function";
}
function maybeSerializeView(item, index, path) {
  return isSerializable(item) ? item.serialize({
    path,
    index
  }) : item;
}
const isComponentSpec = (spec) => isRecord(spec) && spec.type === "component";
class ComponentViewBuilder extends GenericViewBuilder {
  /** Partial Component view option object. See {@link ComponentView} */
  constructor(componentOrSpec) {
    const spec = isComponentSpec(componentOrSpec) ? {
      ...componentOrSpec
    } : {
      options: {}
    };
    super(), this.spec = spec;
    const userComponent = typeof componentOrSpec == "function" ? componentOrSpec : this.spec.component;
    userComponent && (this.spec = this.component(userComponent).spec);
  }
  /** Set view Component
   * @param component - component view component. See {@link UserViewComponent}
   * @returns component view builder based on component view provided. See {@link ComponentViewBuilder}
   */
  component(component2) {
    return this.clone({
      component: component2
    });
  }
  /** Get view Component
   * @returns Partial component view. See {@link ComponentView}
   */
  getComponent() {
    return this.spec.component;
  }
  /** Set view Component options
   * @param options - component view options
   * @returns component view builder based on options provided. See {@link ComponentViewBuilder}
   */
  options(options) {
    return this.clone({
      options
    });
  }
  /** Get view Component options
   * @returns component view options. See {@link ComponentView}
   */
  getOptions() {
    return this.spec.options || {};
  }
  /** Serialize view Component
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns component view based on path provided in options. See {@link ComponentView}
   *
   */
  serialize(options = {
    path: []
  }) {
    const base = super.serialize(options), component2 = this.spec.component;
    if (typeof component2 != "function")
      throw new SerializeError("`component` is required and must be a function for `component()` view item", options.path, options.index).withHelpUrl(HELP_URL.COMPONENT_REQUIRED);
    return {
      ...base,
      component: component2,
      options: this.spec.options || {},
      type: "component"
    };
  }
  /** Clone Component view builder (allows for options overriding)
   * @param withSpec - partial for component view option. See {@link ComponentView}
   * @returns component view builder. See {@link ComponentViewBuilder}
   */
  clone(withSpec) {
    const builder = new ComponentViewBuilder();
    return builder.spec = {
      ...this.spec,
      ...withSpec || {}
    }, builder;
  }
}
class FormViewBuilder extends GenericViewBuilder {
  /** Document list options. See {@link FormView} */
  constructor(spec) {
    super(), this.spec = {
      id: "editor",
      title: "Editor",
      ...spec || {}
    };
  }
  /**
   * Serialize Form view builder
   * @param options - Serialize options. See {@link SerializeOptions}
   * @returns form view builder based on path provided in options. See {@link FormView}
   */
  serialize(options = {
    path: []
  }) {
    return {
      ...super.serialize(options),
      type: "form"
    };
  }
  /**
   * Clone Form view builder (allows for options overriding)
   * @param withSpec - Partial form view builder options. See {@link FormView}
   * @returns form view builder. See {@link FormViewBuilder}
   */
  clone(withSpec) {
    const builder = new FormViewBuilder();
    return builder.spec = {
      ...this.spec,
      ...withSpec || {}
    }, builder;
  }
}
const form = (spec) => new FormViewBuilder(spec), component = (componentOrSpec) => new ComponentViewBuilder(componentOrSpec);
var views = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ComponentViewBuilder,
  FormViewBuilder,
  GenericViewBuilder,
  component,
  form,
  maybeSerializeView
});
const createDocumentChildResolver = ({
  resolveDocumentNode,
  getClient
}) => async (itemId, {
  params,
  path
}) => {
  let type = params.type;
  const parentPath = path.slice(0, path.length - 1), currentSegment = path[path.length - 1];
  if (type || (type = await resolveTypeForDocument(getClient, itemId)), !type)
    throw new SerializeError("Failed to resolve document, and no type provided in parameters.", parentPath, currentSegment);
  return resolveDocumentNode({
    documentId: itemId,
    schemaType: type
  });
};
class DocumentBuilder {
  /** Component builder option object See {@link PartialDocumentNode} */
  constructor(_context, spec) {
    this._context = _context, this.spec = spec || {};
  }
  /** Set Document Builder ID
   * @param id - document builder ID
   * @returns document builder based on ID provided. See {@link DocumentBuilder}
   */
  id(id) {
    return this.clone({
      id
    });
  }
  /** Get Document Builder ID
   * @returns document ID. See {@link PartialDocumentNode}
   */
  getId() {
    return this.spec.id;
  }
  /** Set Document title
   * @param title - document title
   * @returns document builder based on title provided (and ID). See {@link DocumentBuilder}
   */
  title(title) {
    return this.clone({
      title,
      id: getStructureNodeId(title, this.spec.id)
    });
  }
  /** Get Document title
   * @returns document title. See {@link PartialDocumentNode}
   */
  getTitle() {
    return this.spec.title;
  }
  /** Set the i18n key and namespace used to populate the localized title.
   * @param i18n - the key and namespaced used to populate the localized title.
   * @returns component builder based on i18n key and ns provided
   */
  i18n(i18n) {
    return this.clone({
      i18n
    });
  }
  /** Get i18n key and namespace used to populate the localized title
   * @returns the i18n key and namespace used to populate the localized title
   */
  getI18n() {
    return this.spec.i18n;
  }
  /** Set Document child
   * @param child - document child
   * @returns document builder based on child provided. See {@link DocumentBuilder}
   */
  child(child) {
    return this.clone({
      child
    });
  }
  /** Get Document child
   * @returns document child. See {@link PartialDocumentNode}
   */
  getChild() {
    return this.spec.child;
  }
  /** Set Document ID
   * @param documentId - document ID
   * @returns document builder with document based on ID provided. See {@link DocumentBuilder}
   */
  documentId(documentId) {
    const paneId = this.spec.id || documentId;
    return this.clone({
      id: paneId,
      options: {
        ...this.spec.options || {},
        id: documentId
      }
    });
  }
  /** Get Document ID
   * @returns document ID. See {@link DocumentOptions}
   */
  getDocumentId() {
    return this.spec.options?.id;
  }
  /** Set Document Type
   * @param documentType - document type
   * @returns document builder with document based on type provided. See {@link DocumentBuilder}
   */
  schemaType(documentType) {
    return this.clone({
      options: {
        ...this.spec.options || {},
        type: typeof documentType == "string" ? documentType : documentType.name
      }
    });
  }
  /** Get Document Type
   * @returns document type. See {@link DocumentOptions}
   */
  getSchemaType() {
    return this.spec.options?.type;
  }
  /** Set Document Template
   * @param templateId - document template ID
   * @param parameters - document template parameters
   * @returns document builder with document based on template provided. See {@link DocumentBuilder}
   */
  initialValueTemplate(templateId, parameters) {
    return this.clone({
      options: {
        ...this.spec.options || {},
        template: templateId,
        templateParameters: parameters
      }
    });
  }
  /** Get Document Template
   * @returns document template. See {@link DocumentOptions}
   */
  getInitialValueTemplate() {
    return this.spec.options?.template;
  }
  /** Get Document's initial value Template parameters
   * @returns document template parameters. See {@link DocumentOptions}
   */
  getInitialValueTemplateParameters() {
    return this.spec.options?.templateParameters;
  }
  /** Set Document views
   * @param views - document views. See {@link ViewBuilder} and {@link View}
   * @returns document builder with document based on views provided. See {@link DocumentBuilder}
   */
  views(views2) {
    return this.clone({
      views: views2
    });
  }
  /** Get Document views
   * @returns document views. See {@link ViewBuilder} and {@link View}
   */
  getViews() {
    return this.spec.views || [];
  }
  /** Serialize Document builder
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns document node based on path, index and hint provided in options. See {@link DocumentNode}
   */
  serialize({
    path = [],
    index,
    hint
  } = {
    path: []
  }) {
    const urlId = path[index || path.length - 1], id = this.spec.id || urlId && `${urlId}` || "", options = {
      id,
      type: void 0,
      template: void 0,
      templateParameters: void 0,
      ...this.spec.options
    };
    if (typeof id != "string" || !id)
      throw new SerializeError("`id` is required for document nodes", path, index, hint).withHelpUrl(HELP_URL.ID_REQUIRED);
    if (!options || !options.id)
      throw new SerializeError("document id (`id`) is required for document nodes", path, id, hint).withHelpUrl(HELP_URL.DOCUMENT_ID_REQUIRED);
    if (!options || !options.type)
      throw new SerializeError("document type (`schemaType`) is required for document nodes", path, id, hint);
    const views2 = (this.spec.views && this.spec.views.length > 0 ? this.spec.views : [form()]).map((item, i) => maybeSerializeView(item, i, path)), viewIds = views2.map((view) => view.id), dupes = uniq(viewIds.filter((viewId, i) => viewIds.includes(viewId, i + 1)));
    if (dupes.length > 0)
      throw new SerializeError(`document node has views with duplicate IDs: ${dupes.join(",  ")}`, path, id, hint);
    return {
      ...this.spec,
      child: this.spec.child || createDocumentChildResolver(this._context),
      id: validateId(id, path, index),
      type: "document",
      options: getDocumentOptions(options),
      views: views2
    };
  }
  /** Clone Document builder
   * @param withSpec - partial document node specification used to extend the cloned builder. See {@link PartialDocumentNode}
   * @returns document builder based on context and spec provided. See {@link DocumentBuilder}
   */
  clone(withSpec = {}) {
    const builder = new DocumentBuilder(this._context), options = {
      ...this.spec.options || {},
      ...withSpec.options || {}
    };
    return builder.spec = {
      ...this.spec,
      ...withSpec,
      options
    }, builder;
  }
}
function getDocumentOptions(spec) {
  const opts = {
    id: spec.id || "",
    type: spec.type || "*"
  };
  return spec.template && (opts.template = spec.template), spec.templateParameters && (opts.templateParameters = spec.templateParameters), opts;
}
function documentFromEditor(context, spec) {
  let doc = spec?.type ? (
    // Use user-defined document fragment as base if possible
    context.resolveDocumentNode({
      schemaType: spec.type
    })
  ) : (
    // Fall back to plain old document builder
    new DocumentBuilder(context)
  );
  if (!spec) return doc;
  const {
    id,
    type,
    template,
    templateParameters
  } = spec.options;
  return doc = doc.id(spec.id).documentId(id), type && (doc = doc.schemaType(type)), template && (doc = doc.initialValueTemplate(template, templateParameters)), spec.child && (doc = doc.child(spec.child)), doc;
}
function documentFromEditorWithInitialValue({
  resolveDocumentNode,
  templates
}, templateId, parameters) {
  const template = templates.find((t) => t.id === templateId);
  if (!template)
    throw new Error(`Template with ID "${templateId}" not defined`);
  return resolveDocumentNode({
    schemaType: template.schemaType
  }).initialValueTemplate(templateId, parameters);
}
class InitialValueTemplateItemBuilder {
  /** Initial Value template item option object. See {@link InitialValueTemplateItem} */
  constructor(_context, spec) {
    this._context = _context, this.spec = spec || {};
  }
  /** Set initial value template item builder ID
   * @param id - initial value template item ID
   * @returns initial value template item based on ID provided. See {@link InitialValueTemplateItemBuilder}
   */
  id(id) {
    return this.clone({
      id
    });
  }
  /** Get initial value template item builder ID
   * @returns initial value template item ID. See {@link InitialValueTemplateItem}
   */
  getId() {
    return this.spec.id;
  }
  /** Set initial value template item title
   * @param title - initial value template item title
   * @returns initial value template item based on title provided. See {@link InitialValueTemplateItemBuilder}
   */
  title(title) {
    return this.clone({
      title
    });
  }
  /** Get initial value template item title
   * @returns initial value template item title. See {@link InitialValueTemplateItem}
   */
  getTitle() {
    return this.spec.title;
  }
  /** Set initial value template item description
   * @param description - initial value template item description
   * @returns initial value template item builder based on description provided. See {@link InitialValueTemplateItemBuilder}
   */
  description(description) {
    return this.clone({
      description
    });
  }
  /** Get initial value template item description
   * @returns initial value template item description. See {@link InitialValueTemplateItem}
   */
  getDescription() {
    return this.spec.description;
  }
  /** Set initial value template ID
   * @param templateId - initial value template item template ID
   * @returns initial value template item based builder on template ID provided. See {@link InitialValueTemplateItemBuilder}
   */
  templateId(templateId) {
    const paneId = this.spec.id || templateId;
    return this.clone({
      id: paneId,
      templateId
    });
  }
  /** Get initial value template item template ID
   * @returns initial value template item ID. See {@link InitialValueTemplateItem}
   */
  getTemplateId() {
    return this.spec.templateId;
  }
  /** Get initial value template item template parameters
   * @param parameters - initial value template item parameters
   * @returns initial value template item builder based on parameters provided. See {@link InitialValueTemplateItemBuilder}
   */
  parameters(parameters) {
    return this.clone({
      parameters
    });
  }
  /** Get initial value template item template parameters
   * @returns initial value template item parameters. See {@link InitialValueTemplateItem}
   */
  getParameters() {
    return this.spec.parameters;
  }
  /** Serialize initial value template item
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns initial value template item object based on the path, index and hint provided in options. See {@link InitialValueTemplateItem}
   */
  serialize({
    path = [],
    index,
    hint
  } = {
    path: []
  }) {
    const {
      spec,
      _context
    } = this, {
      templates
    } = _context;
    if (typeof spec.id != "string" || !spec.id)
      throw new SerializeError("`id` is required for initial value template item nodes", path, index, hint).withHelpUrl(HELP_URL.ID_REQUIRED);
    if (!spec.templateId)
      throw new SerializeError("template id (`templateId`) is required for initial value template item nodes", path, spec.id, hint).withHelpUrl(HELP_URL.ID_REQUIRED);
    const template = templates.find((t) => t.id === spec.templateId);
    if (!template)
      throw new SerializeError("template id (`templateId`) is required for initial value template item nodes", path, spec.id, hint).withHelpUrl(HELP_URL.ID_REQUIRED);
    return {
      id: spec.id,
      templateId: spec.id,
      schemaType: template.schemaType,
      type: "initialValueTemplateItem",
      description: spec.description || template.description,
      title: spec.title || template.title,
      subtitle: spec.subtitle,
      icon: spec.icon || template.icon,
      initialDocumentId: spec.initialDocumentId,
      parameters: spec.parameters
    };
  }
  /** Clone generic view builder (allows for options overriding)
   * @param withSpec - initial value template item builder options. See {@link InitialValueTemplateItemBuilder}
   * @returns initial value template item builder based on the context and options provided. See {@link InitialValueTemplateItemBuilder}
   */
  clone(withSpec = {}) {
    const builder = new InitialValueTemplateItemBuilder(this._context);
    return builder.spec = {
      ...this.spec,
      ...withSpec
    }, builder;
  }
}
function defaultInitialValueTemplateItems(context) {
  const {
    schema,
    getStructureBuilder,
    templates
  } = context, typeNames = schema.getTypeNames();
  return templates.filter((tpl) => !tpl.parameters?.length).sort((a, b) => typeNames.indexOf(a.schemaType) - typeNames.indexOf(b.schemaType)).map((tpl) => getStructureBuilder().initialValueTemplateItem(tpl.id));
}
function maybeSerializeInitialValueTemplateItem(item, index, path) {
  return item instanceof InitialValueTemplateItemBuilder ? item.serialize({
    path,
    index
  }) : item;
}
function menuItemsFromInitialValueTemplateItems(context, templateItems) {
  const {
    schema,
    templates
  } = context;
  return templateItems.map((item) => {
    const template = templates.find((t) => t.id === item.templateId), title = item.title || template?.title || "Create", params = {};
    template && template.schemaType && (params.type = template.schemaType), item.templateId && (params.template = item.templateId);
    const intentParams = item.parameters ? [params, item.parameters] : params, schemaType = template && schema.get(template.schemaType), i18n = item.i18n || template?.i18n;
    let builder = new MenuItemBuilder(context).title(title).icon(template && template.icon || schemaType?.icon || AddIcon).intent({
      type: "create",
      params: intentParams
    });
    return i18n && (builder = builder.i18n(i18n)), builder.serialize();
  });
}
const DEFAULT_INTENT_HANDLER = Symbol("Document type list canHandleIntent"), defaultIntentChecker = (intentName, params, {
  pane: pane2
}) => {
  const isEdit = intentName === "edit", isCreate = intentName === "create", typedSpec = pane2, paneFilter = typedSpec.options?.filter || "", paneParams = typedSpec.options?.params || {}, typeNames = typedSpec.schemaTypeName ? [typedSpec.schemaTypeName] : getTypeNamesFromFilter(paneFilter, paneParams), initialValueTemplates = typedSpec.initialValueTemplates || [];
  return isCreate && params.template ? initialValueTemplates.some((tpl) => tpl.templateId === params.template) : isEdit && params.id && typeNames.includes(params.type) || isCreate && typeNames.includes(params.type);
};
defaultIntentChecker.identity = DEFAULT_INTENT_HANDLER;
const layoutOptions = ["default", "card", "media", "detail", "block"];
function noChildResolver() {
}
const shallowIntentChecker = (intentName, params, {
  pane: pane2,
  index
}) => index <= 1 && defaultIntentChecker(intentName, params, {
  pane: pane2,
  index
});
class GenericListBuilder {
  /** Check if initial value templates are set */
  initialValueTemplatesSpecified = !1;
  /** Generic list option object */
  spec = {};
  /** Set generic list ID
   * @param id - generic list ID
   * @returns generic list builder based on ID provided.
   */
  id(id) {
    return this.clone({
      id
    });
  }
  /** Get generic list ID
   * @returns generic list ID
   */
  getId() {
    return this.spec.id;
  }
  /** Set generic list title
   * @param title - generic list title
   * @returns generic list builder based on title and ID provided.
   */
  title(title) {
    return this.clone({
      title,
      id: getStructureNodeId(title, this.spec.id)
    });
  }
  /** Get generic list title
   * @returns generic list title
   */
  getTitle() {
    return this.spec.title;
  }
  /** Set the i18n key and namespace used to populate the localized title.
   * @param i18n - the key and namespaced used to populate the localized title.
   * @returns component builder based on i18n key and ns provided
   */
  i18n(i18n) {
    return this.clone({
      i18n
    });
  }
  /** Get i18n key and namespace used to populate the localized title
   * @returns the i18n key and namespace used to populate the localized title
   */
  getI18n() {
    return this.spec.i18n;
  }
  /** Set generic list layout
   * @param defaultLayout - generic list layout key.
   * @returns generic list builder based on layout provided.
   */
  defaultLayout(defaultLayout) {
    return this.clone({
      defaultLayout
    });
  }
  /** Get generic list layout
   * @returns generic list layout
   */
  getDefaultLayout() {
    return this.spec.defaultLayout;
  }
  /** Set generic list menu items
   * @param menuItems - generic list menu items. See {@link MenuItem} and {@link MenuItemBuilder}
   * @returns generic list builder based on menu items provided.
   */
  menuItems(menuItems) {
    return this.clone({
      menuItems
    });
  }
  /** Get generic list menu items
   * @returns generic list menu items
   */
  getMenuItems() {
    return this.spec.menuItems;
  }
  /** Set generic list menu item groups
   * @param menuItemGroups - generic list menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder}
   * @returns generic list builder based on menu item groups provided.
   */
  menuItemGroups(menuItemGroups) {
    return this.clone({
      menuItemGroups
    });
  }
  /** Get generic list menu item groups
   * @returns generic list menu item groups
   */
  getMenuItemGroups() {
    return this.spec.menuItemGroups;
  }
  /** Set generic list child
   * @param child - generic list child. See {@link Child}
   * @returns generic list builder based on child provided (clone).
   */
  child(child) {
    return this.clone({
      child
    });
  }
  /** Get generic list child
   * @returns generic list child
   */
  getChild() {
    return this.spec.child;
  }
  /** Set generic list can handle intent
   * @param canHandleIntent - generic list intent checker. See {@link IntentChecker}
   * @returns generic list builder based on can handle intent provided.
   */
  canHandleIntent(canHandleIntent) {
    return this.clone({
      canHandleIntent
    });
  }
  /** Get generic list can handle intent
   * @returns generic list can handle intent
   */
  getCanHandleIntent() {
    return this.spec.canHandleIntent;
  }
  /** Set generic list display options
   * @param enabled - allow / disallow for showing icons
   * @returns generic list builder based on display options (showIcons) provided.
   */
  showIcons(enabled = !0) {
    return this.clone({
      displayOptions: {
        ...this.spec.displayOptions || {},
        showIcons: enabled
      }
    });
  }
  /** Get generic list display options
   * @returns generic list display options (specifically showIcons)
   */
  getShowIcons() {
    return this.spec.displayOptions ? this.spec.displayOptions.showIcons : void 0;
  }
  /** Set generic list initial value templates
   * @param templates - generic list initial value templates. See {@link InitialValueTemplateItemBuilder}
   * @returns generic list builder based on templates provided.
   */
  initialValueTemplates(templates) {
    return this.initialValueTemplatesSpecified = !0, this.clone({
      initialValueTemplates: Array.isArray(templates) ? templates : [templates]
    });
  }
  /** Get generic list initial value templates
   * @returns generic list initial value templates
   */
  getInitialValueTemplates() {
    return this.spec.initialValueTemplates;
  }
  /** Serialize generic list
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns generic list object based on path provided in options. See {@link GenericList}
   */
  serialize(options = {
    path: []
  }) {
    const id = this.spec.id || "", path = options.path, defaultLayout = this.spec.defaultLayout;
    if (defaultLayout && !layoutOptions.includes(defaultLayout))
      throw new SerializeError(`\`layout\` must be one of ${layoutOptions.map((item) => `"${item}"`).join(", ")}`, path, id || options.index, this.spec.title);
    const initialValueTemplates = (this.spec.initialValueTemplates || []).map((item, i) => maybeSerializeInitialValueTemplateItem(item, i, path));
    return {
      id: validateId(id, options.path, id || options.index),
      title: this.spec.title,
      i18n: this.spec.i18n,
      type: "genericList",
      defaultLayout,
      child: this.spec.child || noChildResolver,
      canHandleIntent: this.spec.canHandleIntent || shallowIntentChecker,
      displayOptions: this.spec.displayOptions,
      initialValueTemplates,
      menuItems: (this.spec.menuItems || []).map((item, i) => maybeSerializeMenuItem(item, i, path)),
      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) => maybeSerializeMenuItemGroup(item, i, path))
    };
  }
  /** Clone generic list builder (allows for options overriding)
   * @param _withSpec - generic list options.
   * @returns generic list builder.
   */
}
const validateFilter = (spec, options) => {
  const filter2 = spec.options?.filter.trim() || "";
  if (["*", "{"].includes(filter2[0]))
    throw new SerializeError(`\`filter\` cannot start with \`${filter2[0]}\` - looks like you are providing a query, not a filter`, options.path, spec.id, spec.title).withHelpUrl(HELP_URL.QUERY_PROVIDED_FOR_FILTER);
  return filter2;
}, createDocumentChildResolverForItem = (context) => (itemId, options) => {
  const parentItem = options.parent, template = options.params?.template ? context.templates.find((tpl) => tpl.id === options.params.template) : void 0, type = template ? template.schemaType : parentItem.schemaTypeName || resolveTypeForDocument(context.getClient, itemId);
  return Promise.resolve(type).then((schemaType) => schemaType ? context.resolveDocumentNode({
    schemaType,
    documentId: itemId
  }) : new DocumentBuilder(context).id("editor").documentId(itemId).schemaType(""));
};
class DocumentListBuilder extends GenericListBuilder {
  /** Document list options. See {@link PartialDocumentList} */
  constructor(_context, spec) {
    super(), this._context = _context, this.spec = spec || {}, this.initialValueTemplatesSpecified = !!spec?.initialValueTemplates;
  }
  /** Set API version
   * @param apiVersion - API version
   * @returns document list builder based on the options and API version provided. See {@link DocumentListBuilder}
   */
  apiVersion(apiVersion) {
    return this.clone({
      options: {
        ...this.spec.options || {
          filter: ""
        },
        apiVersion
      }
    });
  }
  /** Get API version
   * @returns API version
   */
  getApiVersion() {
    return this.spec.options?.apiVersion;
  }
  /** Set Document list filter
   * @param filter - GROQ-filter used to determine which documents to display. Do not support joins, since they operate on individual documents, and will ignore order-clauses and projections. See {@link https://www.sanity.io/docs/realtime-updates}
   * @returns document list builder based on the options and filter provided. See {@link DocumentListBuilder}
   */
  filter(filter2) {
    return this.clone({
      options: {
        ...this.spec.options || {},
        filter: filter2
      }
    });
  }
  /** Get Document list filter
   * @returns filter
   */
  getFilter() {
    return this.spec.options?.filter;
  }
  /** Set Document list schema type name
   * @param type - schema type name.
   * @returns document list builder based on the schema type name provided. See {@link DocumentListBuilder}
   */
  schemaType(type) {
    const schemaTypeName = typeof type == "string" ? type : type.name;
    return this.clone({
      schemaTypeName
    });
  }
  /** Get Document list schema type name
   * @returns schema type name
   */
  getSchemaType() {
    return this.spec.schemaTypeName;
  }
  /** Set Document list options' parameters
   * @param params - parameters
   * @returns document list builder based on the options provided. See {@link DocumentListBuilder}
   */
  params(params) {
    return this.clone({
      options: {
        ...this.spec.options || {
          filter: ""
        },
        params
      }
    });
  }
  /** Get Document list options' parameters
   * @returns options
   */
  getParams() {
    return this.spec.options?.params;
  }
  /** Set Document list default ordering
   * @param ordering - default sort ordering array. See {@link SortOrderingItem}
   * @returns document list builder based on ordering provided. See {@link DocumentListBuilder}
   */
  defaultOrdering(ordering) {
    if (!Array.isArray(ordering))
      throw new Error("`defaultOrdering` must be an array of order clauses");
    return this.clone({
      options: {
        ...this.spec.options || {
          filter: ""
        },
        defaultOrdering: ordering
      }
    });
  }
  /** Get Document list default ordering
   * @returns default ordering. See {@link SortOrderingItem}
   */
  getDefaultOrdering() {
    return this.spec.options?.defaultOrdering;
  }
  /** Serialize Document list
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns document list object based on path provided in options. See {@link DocumentList}
   */
  serialize(options = {
    path: []
  }) {
    if (typeof this.spec.id != "string" || !this.spec.id)
      throw new SerializeError("`id` is required for document lists", options.path, options.index, this.spec.title).withHelpUrl(HELP_URL.ID_REQUIRED);
    if (!this.spec.options || !this.spec.options.filter)
      throw new SerializeError("`filter` is required for document lists", options.path, this.spec.id, this.spec.title).withHelpUrl(HELP_URL.FILTER_REQUIRED);
    return this.spec.options?.filter !== "_type == $type" && this.spec.options.filter && !this.spec.options.apiVersion && console.warn(`No apiVersion specified for document type list with custom filter: \`${this.spec.options.filter}\`. This will be required in the future. See %s for more info.`, generateHelpUrl(HELP_URL.API_VERSION_REQUIRED_FOR_CUSTOM_FILTER)), {
      ...super.serialize(options),
      type: "documentList",
      schemaTypeName: this.spec.schemaTypeName,
      child: this.spec.child || createDocumentChildResolverForItem(this._context),
      options: {
        ...this.spec.options,
        // @todo: make specifying .apiVersion required when using custom (non-simple) filters in v4
        apiVersion: this.spec.options.apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,
        filter: validateFilter(this.spec, options)
      }
    };
  }
  /** Clone Document list builder (allows for options overriding)
   * @param withSpec - override document list spec. See {@link PartialDocumentList}
   * @returns document list builder. See {@link DocumentListBuilder}
   */
  clone(withSpec) {
    const builder = new DocumentListBuilder(this._context);
    return builder.spec = {
      ...this.spec,
      ...withSpec || {}
    }, this.initialValueTemplatesSpecified || (builder.spec.initialValueTemplates = inferInitialValueTemplates(this._context, builder.spec)), builder.spec.schemaTypeName || (builder.spec.schemaTypeName = inferTypeName(builder.spec)), builder;
  }
  /** Get Document list spec
   * @returns document list spec. See {@link PartialDocumentList}
   */
  getSpec() {
    return this.spec;
  }
}
function inferInitialValueTemplates(context, spec) {
  const {
    document: document2
  } = context, {
    schemaTypeName,
    options
  } = spec, {
    filter: filter2,
    params
  } = options || {
    filter: "",
    params: {}
  }, typeNames = schemaTypeName ? [schemaTypeName] : Array.from(new Set(getTypeNamesFromFilter(filter2, params)));
  if (typeNames.length !== 0)
    return typeNames.flatMap((schemaType) => document2.resolveNewDocumentOptions({
      type: "structure",
      schemaType
    })).map((option) => ({
      ...option,
      icon: AddIcon
    }));
}
function inferTypeName(spec) {
  const {
    options
  } = spec, {
    filter: filter2,
    params
  } = options || {
    filter: "",
    params: {}
  }, typeNames = getTypeNamesFromFilter(filter2, params);
  return typeNames.length === 1 ? typeNames[0] : void 0;
}
function getTypeNamesFromFilter(filter2, params = {}) {
  let typeNames = getTypeNamesFromEqualityFilter(filter2, params);
  return typeNames.length === 0 && (typeNames = getTypeNamesFromInTypesFilter(filter2, params)), typeNames;
}
function getTypeNamesFromEqualityFilter(filter2, params = {}) {
  const pattern = /\b_type\s*==\s*(['"].*?['"]|\$.*?(?:\s|$))|\B(['"].*?['"]|\$.*?(?:\s|$))\s*==\s*_type/g, matches = [];
  let match;
  for (; (match = pattern.exec(filter2)) !== null; )
    matches.push(match[1] || match[2]);
  return matches.map((candidate) => ((candidate[0] === "$" ? params[candidate.slice(1)] : candidate) || "").trim().replace(/^["']|["']$/g, "")).filter(Boolean);
}
function getTypeNamesFromInTypesFilter(filter2, params = {}) {
  const pattern = /\b_type\s+in\s+\[(.*?)\]/, matches = filter2.match(pattern);
  return matches ? matches[1].split(/,\s*/).map((match) => match.trim().replace(/^["']+|["']+$/g, "")).map((item) => item[0] === "$" ? params[item.slice(1)] : item).filter(Boolean) : [];
}
const getArgType = (thing) => thing instanceof ListBuilder ? "ListBuilder" : isPromise(thing) ? "Promise" : Array.isArray(thing) ? "array" : typeof thing, isListItem = (item) => item.type === "listItem", defaultCanHandleIntent = (intentName, params, context) => (context.pane.items || []).filter(isDocumentListItem).some((item) => item.schemaType.name === params.type && item._id === params.id) || shallowIntentChecker(intentName, params, context), resolveChildForItem = (itemId, options) => {
  const target = (options.parent.items.filter(isListItem).find((item) => item.id === itemId) || {
    child: void 0
  }).child;
  return !target || typeof target != "function" ? target : typeof target == "function" ? target(itemId, options) : target;
};
function maybeSerializeListItem(item, index, path) {
  if (item instanceof ListItemBuilder)
    return item.serialize({
      path,
      index
    });
  const listItem = item;
  if (listItem && listItem.type === "divider")
    return item;
  if (!listItem || listItem.type !== "listItem") {
    const gotWhat = listItem && listItem.type || getArgType(listItem), helpText = gotWhat === "array" ? " - did you forget to spread (...moreItems)?" : "";
    throw new SerializeError(`List items must be of type "listItem", got "${gotWhat}"${helpText}`, path, index).withHelpUrl(HELP_URL.INVALID_LIST_ITEM);
  }
  return item;
}
function isPromise(thing) {
  return isRecord(thing) && typeof thing.then == "function";
}
class ListBuilder extends GenericListBuilder {
  /** buildable list option object. See {@link BuildableList} */
  constructor(_context, spec) {
    super(), this._context = _context, this.spec = spec || {}, this.initialValueTemplatesSpecified = !!(spec && spec.initialValueTemplates);
  }
  /**
   * Set list builder based on items provided
   * @param items - list items. See {@link ListItemBuilder}, {@link ListItem} and {@link Divider}
   * @returns list builder based on items provided. See {@link ListBuilder}
   */
  items(items) {
    return this.clone({
      items
    });
  }
  /** Get list builder items
   * @returns list items. See {@link BuildableList}
   */
  getItems() {
    return this.spec.items;
  }
  /** Serialize list builder
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns list based on path in options. See {@link List}
   */
  serialize(options = {
    path: []
  }) {
    const id = this.spec.id;
    if (typeof id != "string" || !id)
      throw new SerializeError("`id` is required for lists", options.path, options.index).withHelpUrl(HELP_URL.ID_REQUIRED);
    const items = typeof this.spec.items > "u" ? [] : this.spec.items;
    if (!Array.isArray(items))
      throw new SerializeError("`items` must be an array of items", options.path, options.index).withHelpUrl(HELP_URL.LIST_ITEMS_MUST_BE_ARRAY);
    const path = (options.path || []).concat(id), serializedItems = items.map((item, index) => maybeSerializeListItem(item, index, path)), dupes = serializedItems.filter((val, i) => find(serializedItems, {
      id: val.id
    }, i + 1));
    if (dupes.length > 0) {
      const dupeIds = dupes.map((item) => item.id).slice(0, 5), dupeDesc = dupes.length > 5 ? `${dupeIds.join(", ")}...` : dupeIds.join(", ");
      throw new SerializeError(`List items with same ID found (${dupeDesc})`, options.path, options.index).withHelpUrl(HELP_URL.LIST_ITEM_IDS_MUST_BE_UNIQUE);
    }
    return {
      ...super.serialize(options),
      type: "list",
      canHandleIntent: this.spec.canHandleIntent || defaultCanHandleIntent,
      child: this.spec.child || resolveChildForItem,
      items: serializedItems
    };
  }
  /**
   * Clone list builder and return new list builder based on context and spec provided
   * @param withSpec - list options. See {@link BuildableList}
   * @returns new list builder based on context and spec provided. See {@link ListBuilder}
   */
  clone(withSpec) {
    const builder = new ListBuilder(this._context);
    return builder.spec = {
      ...this.spec,
      ...withSpec || {}
    }, builder;
  }
}
class ListItemBuilder {
  /** List item option object. See {@link PartialListItem} */
  constructor(_context, spec) {
    this._context = _context, this.spec = spec || {};
  }
  /**
   * Set list item ID
   * @returns list item builder based on ID provided. See {@link ListItemBuilder}
   */
  id(id) {
    return this.clone({
      id
    });
  }
  /**
   * Get list item ID
   * @returns list item ID. See {@link PartialListItem}
   */
  getId() {
    return this.spec.id;
  }
  /**
   * Set list item title
   * @returns list item builder based on title provided. See {@link ListItemBuilder}
   */
  title(title) {
    return this.clone({
      title,
      id: getStructureNodeId(title, this.spec.id)
    });
  }
  /**
   * Get list item title
   * @returns list item title. See {@link PartialListItem}
   */
  getTitle() {
    return this.spec.title;
  }
  /** Set the i18n key and namespace used to populate the localized title.
   * @param i18n - the key and namespaced used to populate the localized title.
   * @returns component builder based on i18n key and ns provided
   */
  i18n(i18n) {
    return this.clone({
      i18n
    });
  }
  /** Get i18n key and namespace used to populate the localized title
   * @returns the i18n key and namespace used to populate the localized title
   */
  getI18n() {
    return this.spec.i18n;
  }
  /**
   * Set list item icon
   * @returns list item builder based on icon provided. See {@link ListItemBuilder}
   */
  icon(icon) {
    return this.clone({
      icon
    });
  }
  /**
   * Set if list item should show icon
   * @returns list item builder based on showIcon provided. See {@link ListItemBuilder}
   */
  showIcon(enabled = !0) {
    return this.clone({
      displayOptions: {
        ...this.spec.displayOptions || {},
        showIcon: enabled
      }
    });
  }
  /**
   * Check if list item should show icon
   * @returns true if it should show the icon, false if not, undefined if not set
   */
  getShowIcon() {
    return this.spec.displayOptions ? this.spec.displayOptions.showIcon : void 0;
  }
  /**
   *Get list item icon
   * @returns list item icon. See {@link PartialListItem}
   */
  getIcon() {
    return this.spec.icon;
  }
  /**
   * Set list item child
   * @param child - list item child. See {@link UnserializedListItemChild}
   * @returns list item builder based on child provided. See {@link ListItemBuilder}
   */
  child(child) {
    return this.clone({
      child
    });
  }
  /**
   * Get list item child
   * @returns list item child. See {@link PartialListItem}
   */
  getChild() {
    return this.spec.child;
  }
  /**
   * Set list item schema type
   * @param schemaType - list item schema type. See {@link SchemaType}
   * @returns list item builder based on schema type provided. See {@link ListItemBuilder}
   */
  schemaType(schemaType) {
    return this.clone({
      schemaType
    });
  }
  /**
   * Get list item schema type
   * @returns list item schema type. See {@link PartialListItem}
   */
  getSchemaType() {
    const schemaType = this.spec.schemaType;
    return typeof schemaType == "string" ? this._context.schema.get(schemaType) : this.spec.schemaType;
  }
  /** Serialize list item builder
   * @param options - serialization options. See {@link ListItemSerializeOptions}
   * @returns list item node based on path provided in options. See {@link ListItem}
   */
  serialize(options = {
    path: []
  }) {
    const {
      id,
      title,
      child
    } = this.spec;
    if (typeof id != "string" || !id)
      throw new SerializeError("`id` is required for list items", options.path, options.index).withHelpUrl(HELP_URL.ID_REQUIRED);
    if (!options.titleIsOptional && (typeof title != "string" || !title))
      throw new SerializeError("`title` is required for list items", options.path, id).withHelpUrl(HELP_URL.TITLE_REQUIRED);
    let schemaType = this.spec.schemaType;
    if (typeof schemaType == "string") {
      const type = this._context.schema.get(schemaType);
      if (!type)
        throw new SerializeError(`Could not find type "${schemaType}" in schema`, options.path, id).withHelpUrl(HELP_URL.SCHEMA_TYPE_NOT_FOUND);
      schemaType = type;
    }
    const serializeOptions = {
      path: options.path.concat(id),
      hint: "child"
    };
    let listChild = child instanceof ComponentBuilder || child instanceof DocumentListBuilder || child instanceof DocumentBuilder || child instanceof ListBuilder ? child.serialize(serializeOptions) : child;
    if (typeof listChild == "function") {
      const originalChild = listChild;
      listChild = (itemId, childOptions) => originalChild(itemId, {
        ...childOptions,
        serializeOptions
      });
    }
    return {
      ...this.spec,
      id: validateId(id, options.path, options.index),
      schemaType,
      child: listChild,
      title,
      type: "listItem"
    };
  }
  /** Clone list item builder
   * @param withSpec - partial list item options. See {@link PartialListItem}
   * @returns list item builder based on context and spec provided. See {@link ListItemBuilder}
   */
  clone(withSpec) {
    const builder = new ListItemBuilder(this._context);
    return builder.spec = {
      ...this.spec,
      ...withSpec || {}
    }, builder;
  }
}
const createDefaultChildResolver = (context, spec) => (documentId) => {
  const schemaType = spec.schemaType && (typeof spec.schemaType == "string" ? spec.schemaType : spec.schemaType.name);
  return schemaType ? context.resolveDocumentNode({
    schemaType,
    documentId
  }) : new DocumentBuilder(context).id("documentEditor").documentId(documentId);
};
class DocumentListItemBuilder extends ListItemBuilder {
  /** Document list options. See {@link PartialDocumentListItem} */
  constructor(_context, spec) {
    super(_context, spec), this._context = _context, this.spec = spec || {};
  }
  /**
   * Serialize document list item
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns document list item object based on path provided in options. See {@link DocumentListItem}
   */
  serialize(options = {
    path: []
  }) {
    const spec = super.serialize({
      ...options,
      titleIsOptional: !0
    });
    if (!spec.schemaType)
      throw new SerializeError("`schemaType` is required for document list items", options.path, options.index).withHelpUrl(HELP_URL.SCHEMA_TYPE_REQUIRED);
    const child = spec.child || createDefaultChildResolver(this._context, spec);
    return {
      ...spec,
      child,
      schemaType: spec.schemaType,
      _id: spec.id
    };
  }
  /** Clone Document list item builder (allows for options overriding)
   * @param withSpec - Document list item builder options. See {@link PartialDocumentListItem}
   * @returns document list item builder. See {@link DocumentListItemBuilder}
   */
  clone(withSpec) {
    const builder = new DocumentListItemBuilder(this._context);
    return builder.spec = {
      ...this.spec,
      ...withSpec || {}
    }, builder;
  }
}
function isDocumentListItem(item) {
  return isRecord(item) && typeof item.schemaType < "u" && typeof item._id == "string";
}
class DocumentTypeListBuilder extends DocumentListBuilder {
  /** Document list options. See {@link PartialDocumentList} */
  constructor(_context, spec) {
    super(_context), this._context = _context, this.spec = spec || {};
  }
  /**
   * Set Document type list child
   * @param child - Child component. See {@link Child}
   * @returns document type list builder based on child component provided without default intent handler. See {@link DocumentTypeListBuilder}
   */
  child(child) {
    return this.cloneWithoutDefaultIntentHandler({
      child
    });
  }
  /** Clone Document type list builder (allows for options overriding)
   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}
   * @returns document type list builder. See {@link DocumentTypeListBuilder}
   */
  clone(withSpec) {
    const parent = super.clone(withSpec), builder = new DocumentTypeListBuilder(this._context);
    return builder.spec = {
      ...this.spec,
      ...parent.getSpec(),
      ...withSpec || {}
    }, builder;
  }
  /** Clone Document type list builder (allows for options overriding) and remove default intent handler
   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}
   * @returns document type list builder without default intent handler. See {@link DocumentTypeListBuilder}
   */
  cloneWithoutDefaultIntentHandler(withSpec) {
    const parent = super.clone(withSpec), builder = new DocumentTypeListBuilder(this._context), canHandleIntent = this.spec.canHandleIntent, override = canHandleIntent && canHandleIntent.identity === DEFAULT_INTENT_HANDLER ? {
      canHandleIntent: void 0
    } : {};
    return builder.spec = {
      ...parent.getSpec(),
      ...this.spec,
      ...withSpec || {},
      ...override
    }, builder;
  }
}
const BUNDLED_DOC_TYPES = ["sanity.imageAsset", "sanity.fileAsset"];
function isBundledDocType(typeName) {
  return BUNDLED_DOC_TYPES.includes(typeName);
}
function isDocumentType(schemaType) {
  return schemaType.type?.name === "document";
}
function isList(collection) {
  return collection.type === "list";
}
function getDocumentTypes({
  schema
}) {
  return schema.getTypeNames().filter((n) => {
    const schemaType = schema.get(n);
    return schemaType && isDocumentType(schemaType);
  }).filter((n) => !isBundledDocType(n));
}
function getDocumentTypeListItems(context) {
  return getDocumentTypes(context).map((typeName) => getDocumentTypeListItem(context, typeName));
}
function getDocumentTypeListItem(context, typeName) {
  const {
    schema
  } = context, type = schema.get(typeName);
  if (!type)
    throw new Error(`Schema type with name "${typeName}" not found`);
  const title = type.title || startCase(typeName);
  return new ListItemBuilder(context).id(typeName).title(title).schemaType(type).child((id, childContext) => {
    const parent = childContext.parent, parentItem = isList(parent) ? parent.items.find((item) => item.id === id) : null;
    let list = getDocumentTypeList(context, typeName);
    return parentItem && parentItem.title && (list = list.title(parentItem.title)), list;
  });
}
function getDocumentTypeList(context, typeNameOrSpec) {
  const {
    schema,
    resolveDocumentNode
  } = context, schemaType = typeof typeNameOrSpec == "string" ? typeNameOrSpec : typeNameOrSpec.schemaType, typeName = typeof schemaType == "string" ? schemaType : schemaType.name, spec = typeof typeNameOrSpec == "string" ? {
    schemaType
  } : typeNameOrSpec, type = schema.get(typeName);
  if (!type)
    throw new Error(`Schema type with name "${typeName}" not found`);
  const title = type.title || startCase(typeName);
  return new DocumentTypeListBuilder(context).id(spec.id || typeName).title(spec.title || title).filter("_type == $type").params({
    type: typeName
  }).schemaType(type).defaultOrdering(DEFAULT_SELECTED_ORDERING_OPTION.by).menuItemGroups(spec.menuItemGroups || [{
    id: "sorting",
    title: "Sort",
    i18n: {
      title: {
        key: "menu-item-groups.actions-group",
        ns: structureLocaleNamespace
      }
    }
  }, {
    id: "layout",
    title: "Layout",
    i18n: {
      title: {
        key: "menu-item-groups.layout-group",
        ns: structureLocaleNamespace
      }
    }
  }, {
    id: "actions",
    title: "Actions",
    i18n: {
      title: {
        key: "menu-item-groups.sorting-group",
        ns: structureLocaleNamespace
      }
    }
  }]).child(spec.child || ((documentId) => resolveDocumentNode({
    schemaType: typeName,
    documentId
  }))).canHandleIntent(spec.canHandleIntent || defaultIntentChecker).menuItems(spec.menuItems || [
    // Create new (from action button) will be added in serialization step of GenericList
    // Sort by <Y>
    ...getOrderingMenuItemsForSchemaType(context, type),
    // Display as <Z>
    new MenuItemBuilder(context).group("layout").i18n({
      title: {
        key: "menu-items.layout.compact-view",
        ns: structureLocaleNamespace
      }
    }).title("Compact view").icon(StackCompactIcon).action("setLayout").params({
      layout: "default"
    }),
    new MenuItemBuilder(context).group("layout").i18n({
      title: {
        key: "menu-items.layout.detailed-view",
        ns: structureLocaleNamespace
      }
    }).title("Detailed view").icon(StackIcon).action("setLayout").params({
      layout: "detail"
    })
    // Create new (from menu) will be added in serialization step of GenericList
  ]);
}
function hasIcon(schemaType) {
  return !schemaType || typeof schemaType == "string" ? !1 : !!schemaType.icon;
}
function getDefaultStructure(context) {
  const items = getDocumentTypeListItems(context);
  return new ListBuilder(context).id("__root__").title("Content").i18n({
    title: {
      key: "default-definition.content-title",
      ns: structureLocaleNamespace
    }
  }).items(items).showIcons(items.some((item) => hasIcon(item.getSchemaType())));
}
function createStructureBuilder({
  defaultDocumentNode,
  source
}) {
  const configContext = getConfigContextFromSource(source), context = {
    ...source,
    getStructureBuilder: () => structureBuilder,
    resolveDocumentNode: (options) => {
      let builder = defaultDocumentNode?.(structureBuilder, {
        ...options,
        ...configContext
      }) || new DocumentBuilder(context);
      return builder.getId() || (builder = builder.id("documentEditor")), options.documentId && (builder = builder.documentId(getPublishedId(options.documentId))), builder.schemaType(options.schemaType);
    }
  }, structureBuilder = {
    defaults: () => getDefaultStructure(context),
    documentTypeList: (...args) => getDocumentTypeList(context, ...args),
    documentTypeListItem: (...args) => getDocumentTypeListItem(context, ...args),
    documentTypeListItems: (...args) => getDocumentTypeListItems(context, ...args),
    document: (...args) => new DocumentBuilder(context, ...args),
    documentWithInitialValueTemplate: (...args) => documentFromEditorWithInitialValue(context, ...args),
    defaultDocument: context.resolveDocumentNode,
    list: (...args) => new ListBuilder(context, ...args),
    listItem: (...args) => new ListItemBuilder(context, ...args),
    menuItem: (...args) => new MenuItemBuilder(context, ...args),
    menuItemGroup: (...args) => new MenuItemGroupBuilder(context, ...args),
    menuItemsFromInitialValueTemplateItems: (...args) => menuItemsFromInitialValueTemplateItems(context, ...args),
    documentList: (...args) => new DocumentListBuilder(context, ...args),
    documentListItem: (...args) => new DocumentListItemBuilder(context, ...args),
    orderingMenuItem: (...args) => getOrderingMenuItem(context, ...args),
    orderingMenuItemsForType: (...args) => getOrderingMenuItemsForSchemaType(context, ...args),
    editor: (...args) => documentFromEditor(context, ...args),
    defaultInitialValueTemplateItems: (...args) => defaultInitialValueTemplateItems(context, ...args),
    initialValueTemplateItem: (templateId, parameters) => new InitialValueTemplateItemBuilder(context, {
      id: templateId,
      parameters,
      templateId
    }),
    component: (spec) => isValidElementType(spec) ? new ComponentBuilder().component(spec) : new ComponentBuilder(spec),
    divider: () => ({
      id: uniqueId("__divider__"),
      type: "divider"
    }),
    view: views,
    context
  };
  return structureBuilder;
}
const LiveEditBadge = (props) => {
  const {
    liveEdit
  } = props;
  return liveEdit ? {
    label: "Live",
    color: "danger"
  } : null;
};
LiveEditBadge.displayName = "LiveEditBadge";
const state = {
  activePanes: []
};
function setActivePanes(panes) {
  state.activePanes = panes;
}
function getIntentState(intent, params, routerState, payload) {
  const panes = routerState?.panes || [], activePanes = state.activePanes || [], editDocumentId = params.id || uuid(), isTemplate = intent === "create" && params.template;
  for (let i = activePanes.length - 1; i >= 0; i--) {
    const pane2 = activePanes[i];
    if (typeof pane2 == "object" && (pane2.canHandleIntent?.(intent, params, {
      pane: pane2,
      index: i
    }) || // see `resolveIntent.ts` for more info
    pane2.type === "documentList" && pane2.schemaTypeName === params.type && pane2.options.filter === "_type == $type")) {
      const paneParams = isTemplate ? {
        template: params.template
      } : EMPTY_PARAMS$2;
      return {
        panes: panes.slice(0, i).concat([[{
          id: editDocumentId,
          params: paneParams,
          payload
        }]])
      };
    }
  }
  return {
    intent,
    params,
    payload
  };
}
const TIMELINE_ICON_COMPONENTS = {
  create: AddIcon,
  delete: TrashIcon,
  discardDraft: CloseIcon,
  initial: AddIcon,
  editDraft: EditIcon,
  editLive: EditIcon,
  publish: PublishIcon,
  unpublish: UnpublishIcon
};
function getTimelineEventIconComponent(type) {
  return TIMELINE_ICON_COMPONENTS[type];
}
function hideScrollbarOnExpand(isExpanded2) {
  if (isExpanded2) return;
  const listWrapper = document.getElementById(TIMELINE_LIST_WRAPPER_ID);
  if (listWrapper) {
    const firstChildren = listWrapper.children[0];
    if (!(firstChildren.scrollHeight > firstChildren.clientHeight)) {
      const currentStyle = getComputedStyle(firstChildren).overflowY;
      firstChildren.style.overflowY = "hidden", setTimeout(() => {
        firstChildren.style.overflowY = currentStyle;
      }, 0);
    }
  }
}
const FlipIcon = styled(ChevronLeftIcon)`
  transition: transform 200ms;
  &[data-expanded='true'] {
    transform: rotate(-90deg);
  }
`;
function ExpandableTimelineItemButton(t0) {
  const $ = c(14), {
    isExpanded: isExpanded2,
    onExpand
  } = t0, {
    t
  } = useTranslation(structureLocaleNamespace);
  let t1;
  $[0] !== isExpanded2 || $[1] !== onExpand ? (t1 = (e) => {
    e.stopPropagation(), hideScrollbarOnExpand(isExpanded2), onExpand();
  }, $[0] = isExpanded2, $[1] = onExpand, $[2] = t1) : t1 = $[2];
  const handleExpandClick = t1;
  let t2;
  $[3] !== isExpanded2 ? (t2 = /* @__PURE__ */ jsx(FlipIcon, { "data-expanded": isExpanded2 }), $[3] = isExpanded2, $[4] = t2) : t2 = $[4];
  let t3;
  $[5] !== isExpanded2 || $[6] !== t ? (t3 = t(isExpanded2 ? "timeline-item.menu.action-collapse" : "timeline-item.menu.action-expand"), $[5] = isExpanded2, $[6] = t, $[7] = t3) : t3 = $[7];
  let t4;
  $[8] !== t3 ? (t4 = {
    content: t3
  }, $[8] = t3, $[9] = t4) : t4 = $[9];
  let t5;
  return $[10] !== handleExpandClick || $[11] !== t2 || $[12] !== t4 ? (t5 = /* @__PURE__ */ jsx(Button, { mode: "bleed", icon: t2, tooltipProps: t4, onClick: handleExpandClick }), $[10] = handleExpandClick, $[11] = t2, $[12] = t4, $[13] = t5) : t5 = $[13], t5;
}
const StackWrapper = styled(Stack)`
  max-width: 200px;
`, ListWrapper = styled(Flex)`
  max-height: ${(props) => props.$maxHeight};
  min-width: 244px;
`, Root$1 = styled(Box)(({
  $visible
}) => css`
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.2s;

    ${$visible && css`
      opacity: 1;
      pointer-events: auto;
    `}
  `), TIMELINE_ITEM_I18N_KEY_MAPPING = {
  initial: "timeline.operation.created-initial",
  create: "timeline.operation.created",
  publish: "timeline.operation.published",
  editLive: "timeline.operation.edited-live",
  editDraft: "timeline.operation.edited-draft",
  unpublish: "timeline.operation.unpublished",
  discardDraft: "timeline.operation.draft-discarded",
  delete: "timeline.operation.deleted"
};
function UserAvatarStack(t0) {
  const $ = c(9), {
    maxLength,
    userIds,
    size,
    withTooltip: t1
  } = t0, withTooltip = t1 === void 0 ? !0 : t1;
  let t2;
  if ($[0] !== userIds || $[1] !== withTooltip) {
    let t32;
    $[3] !== withTooltip ? (t32 = (userId) => /* @__PURE__ */ jsx(UserAvatar, { user: userId, withTooltip }, userId), $[3] = withTooltip, $[4] = t32) : t32 = $[4], t2 = userIds.map(t32), $[0] = userIds, $[1] = withTooltip, $[2] = t2;
  } else
    t2 = $[2];
  let t3;
  return $[5] !== maxLength || $[6] !== size || $[7] !== t2 ? (t3 = /* @__PURE__ */ jsx(AvatarStack, { maxLength, size, children: t2 }), $[5] = maxLength, $[6] = size, $[7] = t2, $[8] = t3) : t3 = $[8], t3;
}
const IconBox = styled(Flex)((props) => {
  const theme = getTheme_v2(props.theme), color = props.$color;
  return css`
    --card-icon-color: ${theme.color.avatar[color].fg};
    background-color: ${theme.color.avatar[color].bg};
    box-shadow: 0 0 0 1px var(--card-bg-color);

    position: absolute;
    width: ${theme.avatar.sizes[0].size}px;
    height: ${theme.avatar.sizes[0].size}px;
    right: -3px;
    bottom: -3px;
    border-radius: 50%;
  `;
}), TIMELINE_ITEM_EVENT_TONE = {
  initial: "blue",
  create: "blue",
  publish: "green",
  editLive: "green",
  editDraft: "yellow",
  unpublish: "orange",
  discardDraft: "orange",
  delete: "red",
  withinSelection: "magenta"
}, RELATIVE_TIME_OPTIONS = {
  minimal: !0,
  useTemporalPhrase: !0
}, AvatarSkeleton = styled(Skeleton)((props) => {
  const theme = getTheme_v2(props.theme);
  return css`
    border-radius: 50%;
    width: ${theme.avatar.sizes[1].size}px;
    height: ${theme.avatar.sizes[1].size}px;
  `;
}), NameSkeleton = styled(Skeleton)((props) => {
  const theme = getTheme_v2(props.theme);
  return css`
    width: 6ch;
    height: ${theme.font.text.sizes[0].lineHeight}px;
  `;
}), UserLine = (t0) => {
  const $ = c(10), {
    userId
  } = t0, [user, loading] = useUser(userId);
  let t1;
  $[0] !== loading || $[1] !== user ? (t1 = /* @__PURE__ */ jsx(Box, { children: loading || !user ? /* @__PURE__ */ jsx(AvatarSkeleton, { animated: !0 }) : /* @__PURE__ */ jsx(UserAvatar, { user }) }), $[0] = loading, $[1] = user, $[2] = t1) : t1 = $[2];
  let t2;
  $[3] !== loading || $[4] !== user ? (t2 = /* @__PURE__ */ jsx(Box, { children: loading || !user?.displayName ? /* @__PURE__ */ jsx(Text, { size: 1, children: /* @__PURE__ */ jsx(NameSkeleton, { animated: !0 }) }) : /* @__PURE__ */ jsx(Text, { muted: !0, size: 1, children: user.displayName }) }), $[3] = loading, $[4] = user, $[5] = t2) : t2 = $[5];
  let t3;
  return $[6] !== t1 || $[7] !== t2 || $[8] !== userId ? (t3 = /* @__PURE__ */ jsxs(Flex, { align: "center", gap: 2, padding: 1, children: [
    t1,
    t2
  ] }, userId), $[6] = t1, $[7] = t2, $[8] = userId, $[9] = t3) : t3 = $[9], t3;
}, TooltipContent = (t0) => {
  const $ = c(9), {
    collaborators
  } = t0, {
    t
  } = useTranslation("studio");
  let t1;
  $[0] !== t ? (t1 = t("timeline.changes.title"), $[0] = t, $[1] = t1) : t1 = $[1];
  let t2;
  $[2] !== t1 ? (t2 = /* @__PURE__ */ jsx(Box, { padding: 1, paddingBottom: 2, children: /* @__PURE__ */ jsx(Text, { size: 1, weight: "medium", children: t1 }) }), $[2] = t1, $[3] = t2) : t2 = $[3];
  let t3;
  $[4] !== collaborators ? (t3 = collaborators.map(_temp$3), $[4] = collaborators, $[5] = t3) : t3 = $[5];
  let t4;
  return $[6] !== t2 || $[7] !== t3 ? (t4 = /* @__PURE__ */ jsxs(Stack, { paddingBottom: 1, children: [
    t2,
    t3
  ] }), $[6] = t2, $[7] = t3, $[8] = t4) : t4 = $[8], t4;
};
function TimelineItem(t0) {
  const $ = c(57), {
    chunk,
    isSelected,
    onSelect,
    collaborators,
    optionsMenu
  } = t0, {
    t
  } = useTranslation("studio"), {
    type,
    endTimestamp: timestamp
  } = chunk, iconComponent = getTimelineEventIconComponent(type);
  let t1;
  $[0] !== chunk.authors ? (t1 = Array.from(chunk.authors), $[0] = chunk.authors, $[1] = t1) : t1 = $[1];
  const authorUserIds = t1;
  let t2;
  $[2] !== collaborators ? (t2 = collaborators ? Array.from(collaborators) : [], $[2] = collaborators, $[3] = t2) : t2 = $[3];
  const collaboratorsUsersIds = t2, isSelectable = type !== "delete";
  let t3;
  $[4] === Symbol.for("react.memo_cache_sentinel") ? (t3 = {
    dateStyle: "medium",
    timeStyle: "short"
  }, $[4] = t3) : t3 = $[4];
  const dateFormat = useDateTimeFormat(t3);
  let t4;
  $[5] !== timestamp ? (t4 = new Date(timestamp), $[5] = timestamp, $[6] = t4) : t4 = $[6];
  const updatedTimeAgo = useRelativeTime(t4 || "", RELATIVE_TIME_OPTIONS);
  let t5, t6;
  if ($[7] !== dateFormat || $[8] !== timestamp) {
    const parsedDate = new Date(timestamp);
    t6 = dateFormat.format(parsedDate), $[7] = dateFormat, $[8] = timestamp, $[9] = t6;
  } else
    t6 = $[9];
  t5 = t6;
  const formattedTimestamp = t5;
  let t7;
  $[10] !== chunk || $[11] !== isSelectable || $[12] !== onSelect ? (t7 = (evt) => {
    evt.preventDefault(), evt.stopPropagation(), isSelectable && onSelect(chunk);
  }, $[10] = chunk, $[11] = isSelectable, $[12] = onSelect, $[13] = t7) : t7 = $[13];
  const handleClick = t7, T0 = Flex, t8 = "center", t9 = 1, T1 = Card, t10 = "button", t11 = 2, t12 = 2, t13 = "timelineItem", t14 = "timeline-item-button", T2 = Flex, t15 = "center", t16 = 3;
  let t17;
  $[14] === Symbol.for("react.memo_cache_sentinel") ? (t17 = {
    position: "relative"
  }, $[14] = t17) : t17 = $[14];
  let t18;
  $[15] !== authorUserIds ? (t18 = /* @__PURE__ */ jsx(UserAvatarStack, { maxLength: 3, userIds: authorUserIds, size: 2 }), $[15] = authorUserIds, $[16] = t18) : t18 = $[16];
  const T3 = IconBox, t19 = "center", t20 = "center", t21 = TIMELINE_ITEM_EVENT_TONE[type], T4 = Text, t22 = 0, t23 = iconComponent && createElement(iconComponent);
  let t24;
  $[17] !== T4 || $[18] !== t23 ? (t24 = /* @__PURE__ */ jsx(T4, { size: t22, children: t23 }), $[17] = T4, $[18] = t23, $[19] = t24) : t24 = $[19];
  let t25;
  $[20] !== T3 || $[21] !== t21 || $[22] !== t24 ? (t25 = /* @__PURE__ */ jsx(T3, { align: t19, justify: t20, $color: t21, children: t24 }), $[20] = T3, $[21] = t21, $[22] = t24, $[23] = t25) : t25 = $[23];
  let t26;
  $[24] !== t17 || $[25] !== t18 || $[26] !== t25 ? (t26 = /* @__PURE__ */ jsxs("div", { style: t17, children: [
    t18,
    t25
  ] }), $[24] = t17, $[25] = t18, $[26] = t25, $[27] = t26) : t26 = $[27];
  let t27;
  $[28] !== t || $[29] !== type ? (t27 = t(TIMELINE_ITEM_I18N_KEY_MAPPING[type]) || /* @__PURE__ */ jsx("code", { children: type }), $[28] = t, $[29] = type, $[30] = t27) : t27 = $[30];
  let t28;
  $[31] !== t27 ? (t28 = /* @__PURE__ */ jsx(Text, { size: 1, weight: "medium", children: t27 }), $[31] = t27, $[32] = t28) : t28 = $[32];
  let t29;
  $[33] !== formattedTimestamp || $[34] !== timestamp || $[35] !== updatedTimeAgo ? (t29 = /* @__PURE__ */ jsx(Text, { as: "time", size: 1, muted: !0, dateTime: timestamp, title: formattedTimestamp, children: updatedTimeAgo }), $[33] = formattedTimestamp, $[34] = timestamp, $[35] = updatedTimeAgo, $[36] = t29) : t29 = $[36];
  let t30;
  $[37] !== t28 || $[38] !== t29 ? (t30 = /* @__PURE__ */ jsxs(Stack, { space: 2, children: [
    t28,
    t29
  ] }), $[37] = t28, $[38] = t29, $[39] = t30) : t30 = $[39];
  let t31;
  $[40] !== collaboratorsUsersIds ? (t31 = collaboratorsUsersIds.length > 0 && /* @__PURE__ */ jsx(Flex, { flex: 1, justify: "flex-end", align: "center", children: /* @__PURE__ */ jsx(Tooltip, { placement: "top", content: /* @__PURE__ */ jsx(TooltipContent, { collaborators: collaboratorsUsersIds }), portal: !0, children: /* @__PURE__ */ jsx(Box, { paddingLeft: 2, paddingY: 2, children: /* @__PURE__ */ jsx(UserAvatarStack, { maxLength: 3, userIds: collaboratorsUsersIds, size: 0, withTooltip: !1 }) }) }) }), $[40] = collaboratorsUsersIds, $[41] = t31) : t31 = $[41];
  let t32;
  $[42] !== T2 || $[43] !== t26 || $[44] !== t30 || $[45] !== t31 ? (t32 = /* @__PURE__ */ jsxs(T2, { align: t15, gap: t16, children: [
    t26,
    t30,
    t31
  ] }), $[42] = T2, $[43] = t26, $[44] = t30, $[45] = t31, $[46] = t32) : t32 = $[46];
  let t33;
  $[47] !== T1 || $[48] !== chunk.id || $[49] !== handleClick || $[50] !== isSelected || $[51] !== t32 ? (t33 = /* @__PURE__ */ jsx(T1, { as: t10, onClick: handleClick, padding: t11, pressed: isSelected, radius: t12, "data-ui": t13, "data-testid": t14, "data-chunk-id": chunk.id, children: t32 }), $[47] = T1, $[48] = chunk.id, $[49] = handleClick, $[50] = isSelected, $[51] = t32, $[52] = t33) : t33 = $[52];
  let t34;
  return $[53] !== T0 || $[54] !== optionsMenu || $[55] !== t33 ? (t34 = /* @__PURE__ */ jsxs(T0, { align: t8, gap: t9, children: [
    t33,
    optionsMenu
  ] }), $[53] = T0, $[54] = optionsMenu, $[55] = t33, $[56] = t34) : t34 = $[56], t34;
}
function _temp$3(userId) {
  return /* @__PURE__ */ jsx(UserLine, { userId }, userId);
}
const isNonPublishChunk = (chunk) => chunk.type !== "publish", isPublishChunk = (chunk) => chunk.type === "publish";
function getPreviousPublishAction(chunks) {
  let previousPublish = null;
  for (let index = chunks.length - 1; index >= 0; index--) {
    const chunk = chunks[index];
    if (isPublishChunk(chunk)) {
      previousPublish = chunk;
      break;
    }
    if (chunk.type !== "editDraft")
      break;
  }
  return previousPublish;
}
function addChunksMetadata(chunks) {
  const result = [];
  for (const chunk of chunks) {
    if (isPublishChunk(chunk)) {
      result.push({
        ...chunk,
        type: "publish",
        children: [],
        collaborators: /* @__PURE__ */ new Set()
        // Initialize the collaborators array
      });
      continue;
    }
    if (isNonPublishChunk(chunk)) {
      const previousPublish = getPreviousPublishAction(result);
      if (chunk.type === "editDraft" && previousPublish?.type === "publish") {
        Array.from(chunk.authors).forEach((id) => {
          previousPublish.collaborators.add(id);
        }), previousPublish.children.push(chunk.id), result.push({
          ...chunk,
          parentId: previousPublish.id
        });
        continue;
      }
    }
    isNonPublishChunk(chunk) && result.push(chunk);
  }
  return result;
}
const TIMELINE_LIST_WRAPPER_ID = "timeline-list-wrapper", Timeline = ({
  chunks,
  hasMoreChunks,
  lastChunk: selectedChunk,
  onLoadMore,
  onSelect,
  listMaxHeight = "calc(100vh - 280px)"
}) => {
  const [mounted, setMounted] = useState(!1), {
    t
  } = useTranslation("studio"), selectedChunkId = selectedChunk?.id, chunksWithMetadata = useMemo(() => addChunksMetadata(chunks), [chunks]), [expandedParents, setExpandedParents] = useState(() => {
    if (selectedChunkId) {
      const selected = chunksWithMetadata.find((chunk) => chunk.id === selectedChunkId);
      if (selected && isNonPublishChunk(selected) && selected.parentId)
        return /* @__PURE__ */ new Set([selected.parentId]);
    }
    return /* @__PURE__ */ new Set();
  });
  useEffect(() => {
    if (selectedChunkId) {
      const selected_0 = chunksWithMetadata.find((chunk_0) => chunk_0.id === selectedChunkId);
      if (selected_0 && isNonPublishChunk(selected_0) && selected_0.parentId) {
        const parentId = selected_0.parentId;
        setExpandedParents((prev) => {
          if (prev.has(parentId)) return prev;
          const next = new Set(prev);
          return next.add(parentId), next;
        });
      }
    }
  }, [chunksWithMetadata, selectedChunkId]);
  const filteredChunks = useMemo(() => chunksWithMetadata.filter((chunk_1) => isPublishChunk(chunk_1) || !chunk_1.parentId ? !0 : expandedParents.has(chunk_1.parentId)), [chunksWithMetadata, expandedParents]);
  useEffect(() => {
    filteredChunks.length < 16 && hasMoreChunks && onLoadMore();
  }, [filteredChunks, hasMoreChunks, onLoadMore]);
  const handleExpandParent = useCallback((parentId_0) => () => setExpandedParents((prev_0) => {
    const next_0 = new Set(prev_0);
    return prev_0.has(parentId_0) ? next_0.delete(parentId_0) : next_0.add(parentId_0), next_0;
  }), []), selectedIndex = useMemo(() => selectedChunkId ? filteredChunks.findIndex((chunk_2) => chunk_2.id === selectedChunkId) : -1, [selectedChunkId, filteredChunks]), handleSelectChunk = useCallback((chunk_3) => {
    const timelineChunk = chunks.find((c2) => c2.id === chunk_3.id);
    timelineChunk ? onSelect(timelineChunk) : (console.error("TimelineItem: chunk not found"), onSelect(chunk_3));
  }, [chunks, onSelect]), renderItem = useCallback((chunk_4, {
    activeIndex
  }) => /* @__PURE__ */ jsxs(Box, { paddingBottom: 1, paddingTop: activeIndex === 0 ? 1 : 0, paddingRight: 1, paddingLeft: isNonPublishChunk(chunk_4) && chunk_4.parentId ? 4 : 1, children: [
    /* @__PURE__ */ jsx(TimelineItem, { chunk: chunk_4, isSelected: selectedChunkId === chunk_4.id, onSelect: handleSelectChunk, collaborators: isPublishChunk(chunk_4) ? chunk_4.collaborators : void 0, optionsMenu: isPublishChunk(chunk_4) && chunk_4.children.length > 0 ? /* @__PURE__ */ jsx(ExpandableTimelineItemButton, { isExpanded: expandedParents.has(chunk_4.id), onExpand: handleExpandParent(chunk_4.id) }) : null }),
    activeIndex === filteredChunks.length - 1 && hasMoreChunks && /* @__PURE__ */ jsx(LoadingBlock, {})
  ] }), [expandedParents, filteredChunks.length, handleExpandParent, handleSelectChunk, hasMoreChunks, selectedChunkId]);
  return useEffect(() => setMounted(!0), []), /* @__PURE__ */ jsxs(
    Root$1,
    {
      $visible: !selectedIndex || mounted,
      "data-ui": "timeline",
      children: [
        filteredChunks.length === 0 && /* @__PURE__ */ jsxs(StackWrapper, { padding: 3, space: 3, children: [
          /* @__PURE__ */ jsx(Text, { size: 1, weight: "medium", children: t("timeline.error.no-document-history-title") }),
          /* @__PURE__ */ jsx(Text, { muted: !0, size: 1, children: t("timeline.error.no-document-history-description") })
        ] }),
        filteredChunks.length > 0 && /* @__PURE__ */ jsx(ListWrapper, { direction: "column", $maxHeight: listMaxHeight, id: TIMELINE_LIST_WRAPPER_ID, children: /* @__PURE__ */ jsx(CommandList, { activeItemDataAttr: "data-hovered", ariaLabel: t("timeline.list.aria-label"), autoFocus: "list", initialIndex: selectedIndex, initialScrollAlign: "center", itemHeight: 57, items: filteredChunks, onEndReached: onLoadMore, onEndReachedIndexOffset: 20, overscan: 5, renderItem, wrapAround: !1 }) })
      ]
    }
  );
};
Timeline.displayName = "Timeline";
function TimelineError() {
  const $ = c(12), {
    t
  } = useTranslation("studio");
  let t0;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = /* @__PURE__ */ jsx(TextWithTone, { tone: "critical", children: /* @__PURE__ */ jsx(ErrorOutlineIcon, {}) }), $[0] = t0) : t0 = $[0];
  let t1;
  $[1] !== t ? (t1 = t("timeline.error.load-document-changes-title"), $[1] = t, $[2] = t1) : t1 = $[2];
  let t2;
  $[3] !== t1 ? (t2 = /* @__PURE__ */ jsx(TextWithTone, { size: 1, tone: "critical", weight: "medium", children: t1 }), $[3] = t1, $[4] = t2) : t2 = $[4];
  let t3;
  $[5] !== t ? (t3 = t("timeline.error.load-document-changes-description"), $[5] = t, $[6] = t3) : t3 = $[6];
  let t4;
  $[7] !== t3 ? (t4 = /* @__PURE__ */ jsx(TextWithTone, { size: 1, tone: "critical", children: t3 }), $[7] = t3, $[8] = t4) : t4 = $[8];
  let t5;
  return $[9] !== t2 || $[10] !== t4 ? (t5 = /* @__PURE__ */ jsxs(Flex, { align: "flex-start", gap: 3, padding: 4, children: [
    t0,
    /* @__PURE__ */ jsxs(Stack, { space: 4, children: [
      t2,
      t4
    ] })
  ] }), $[9] = t2, $[10] = t4, $[11] = t5) : t5 = $[11], t5;
}
const Root = styled(Popover$1)`
  overflow: hidden;
  overflow: clip;
`, TIMELINE_MENU_PORTAL = "timeline-menu";
function TimelineMenu(t0) {
  const $ = c(68), {
    chunk,
    mode,
    placement
  } = t0, {
    setTimelineRange,
    setTimelineMode,
    timelineError,
    ready,
    timelineStore
  } = useDocumentPane(), [open, setOpen] = useState(!1), [button, setButton] = useState(null), [popoverRef, setPopoverRef] = useState(null), toast = useToast(), chunks = useTimelineSelector(timelineStore, _temp$2), loading = useTimelineSelector(timelineStore, _temp2$2), hasMoreChunks = useTimelineSelector(timelineStore, _temp3$2), realRevChunk = useTimelineSelector(timelineStore, _temp4$2), sinceTime = useTimelineSelector(timelineStore, _temp5$1), {
    t
  } = useTranslation("studio");
  let t1;
  $[0] !== mode || $[1] !== setTimelineMode ? (t1 = () => {
    setTimelineMode(mode), setOpen(!0);
  }, $[0] = mode, $[1] = setTimelineMode, $[2] = t1) : t1 = $[2];
  const handleOpen = t1;
  let t2;
  $[3] !== setTimelineMode ? (t2 = () => {
    setTimelineMode("closed"), setOpen(!1);
  }, $[3] = setTimelineMode, $[4] = t2) : t2 = $[4];
  const handleClose = t2;
  let t3;
  $[5] !== button || $[6] !== handleClose || $[7] !== open ? (t3 = (event) => {
    open && (event.key === "Escape" || event.key === "Tab") && (handleClose(), button?.focus());
  }, $[5] = button, $[6] = handleClose, $[7] = open, $[8] = t3) : t3 = $[8], useGlobalKeyDown(t3);
  let t4;
  $[9] !== button || $[10] !== popoverRef ? (t4 = () => [button, popoverRef], $[9] = button, $[10] = popoverRef, $[11] = t4) : t4 = $[11], useClickOutsideEvent(open && handleClose, t4);
  let t5;
  $[12] !== setTimelineMode || $[13] !== setTimelineRange || $[14] !== t || $[15] !== timelineStore || $[16] !== toast ? (t5 = (revChunk) => {
    try {
      const [sinceId, revId] = timelineStore.findRangeForRev(revChunk);
      setTimelineMode("closed"), setTimelineRange(sinceId, revId);
    } catch (t62) {
      const err = t62;
      toast.push({
        closable: !0,
        description: err.message,
        status: "error",
        title: t("timeline.error.unable-to-load-revision")
      });
    }
  }, $[12] = setTimelineMode, $[13] = setTimelineRange, $[14] = t, $[15] = timelineStore, $[16] = toast, $[17] = t5) : t5 = $[17];
  const selectRev = t5;
  let t6;
  $[18] !== setTimelineMode || $[19] !== setTimelineRange || $[20] !== t || $[21] !== timelineStore || $[22] !== toast ? (t6 = (sinceChunk) => {
    try {
      const [sinceId_0, revId_0] = timelineStore.findRangeForSince(sinceChunk);
      setTimelineMode("closed"), setTimelineRange(sinceId_0, revId_0);
    } catch (t72) {
      const err_0 = t72;
      toast.push({
        closable: !0,
        description: err_0.message,
        status: "error",
        title: t("timeline.error.unable-to-load-revision")
      });
    }
  }, $[18] = setTimelineMode, $[19] = setTimelineRange, $[20] = t, $[21] = timelineStore, $[22] = toast, $[23] = t6) : t6 = $[23];
  const selectSince = t6;
  let t7;
  $[24] !== loading || $[25] !== timelineStore ? (t7 = () => {
    loading || timelineStore.loadMore();
  }, $[24] = loading, $[25] = timelineStore, $[26] = t7) : t7 = $[26];
  const handleLoadMore = t7;
  let t8;
  bb0: {
    if (timelineError) {
      let t93;
      $[27] === Symbol.for("react.memo_cache_sentinel") ? (t93 = /* @__PURE__ */ jsx(TimelineError, {}), $[27] = t93) : t93 = $[27], t8 = t93;
      break bb0;
    }
    if (mode === "rev") {
      let t93;
      $[28] !== chunks || $[29] !== handleLoadMore || $[30] !== hasMoreChunks || $[31] !== realRevChunk || $[32] !== selectRev ? (t93 = /* @__PURE__ */ jsx(Timeline, { chunks, hasMoreChunks, lastChunk: realRevChunk, onLoadMore: handleLoadMore, onSelect: selectRev }), $[28] = chunks, $[29] = handleLoadMore, $[30] = hasMoreChunks, $[31] = realRevChunk, $[32] = selectRev, $[33] = t93) : t93 = $[33], t8 = t93;
      break bb0;
    }
    let t92;
    $[34] !== chunks || $[35] !== realRevChunk ? (t92 = realRevChunk ? chunks.filter((c2) => c2.index < realRevChunk.index) : chunks, $[34] = chunks, $[35] = realRevChunk, $[36] = t92) : t92 = $[36];
    const filteredChunks = t92;
    let t102;
    $[37] !== filteredChunks || $[38] !== handleLoadMore || $[39] !== hasMoreChunks || $[40] !== selectSince || $[41] !== sinceTime ? (t102 = /* @__PURE__ */ jsx(Timeline, { chunks: filteredChunks, hasMoreChunks, lastChunk: sinceTime, onLoadMore: handleLoadMore, onSelect: selectSince }), $[37] = filteredChunks, $[38] = handleLoadMore, $[39] = hasMoreChunks, $[40] = selectSince, $[41] = sinceTime, $[42] = t102) : t102 = $[42], t8 = t102;
  }
  const content = t8;
  let revLabel, t9;
  if ($[43] !== chunk || $[44] !== t) {
    const formatParams = {
      timestamp: {
        dateStyle: "medium",
        timeStyle: "short"
      }
    };
    revLabel = chunk ? t(TIMELINE_ITEM_I18N_KEY_MAPPING[chunk.type], {
      context: "timestamp",
      timestamp: new Date(chunk?.endTimestamp),
      formatParams
    }) : t("timeline.latest-revision"), t9 = chunk ? t("timeline.since", {
      timestamp: new Date(chunk?.endTimestamp),
      formatParams
    }) : t("timeline.since-version-missing"), $[43] = chunk, $[44] = t, $[45] = revLabel, $[46] = t9;
  } else
    revLabel = $[45], t9 = $[46];
  const buttonLabel = mode === "rev" ? revLabel : t9;
  let t10;
  $[47] !== popoverRef ? (t10 = {
    [TIMELINE_MENU_PORTAL]: popoverRef
  }, $[47] = popoverRef, $[48] = t10) : t10 = $[48];
  const t11 = open && content, t12 = open ? "timeline-menu-close-button" : "timeline-menu-open-button", t13 = !ready, t14 = open ? handleClose : handleOpen;
  let t15;
  $[49] === Symbol.for("react.memo_cache_sentinel") ? (t15 = {
    maxWidth: "100%"
  }, $[49] = t15) : t15 = $[49];
  let t16;
  $[50] !== buttonLabel || $[51] !== ready || $[52] !== t ? (t16 = ready ? buttonLabel : t("timeline.loading-history"), $[50] = buttonLabel, $[51] = ready, $[52] = t, $[53] = t16) : t16 = $[53];
  let t17;
  $[54] !== open || $[55] !== t12 || $[56] !== t13 || $[57] !== t14 || $[58] !== t16 ? (t17 = /* @__PURE__ */ jsx(Flex, { width: "fill", children: /* @__PURE__ */ jsx(Button, { "data-testid": t12, disabled: t13, mode: "ghost", onClick: t14, ref: setButton, selected: open, width: "fill", tooltipProps: null, justify: "space-between", style: t15, iconRight: ChevronDownIcon, text: t16 }) }), $[54] = open, $[55] = t12, $[56] = t13, $[57] = t14, $[58] = t16, $[59] = t17) : t17 = $[59];
  let t18;
  $[60] !== open || $[61] !== placement || $[62] !== t11 || $[63] !== t17 ? (t18 = /* @__PURE__ */ jsx(Root, { "data-testid": "timeline-menu", constrainSize: !0, content: t11, "data-ui": "versionMenu", open, placement, matchReferenceWidth: !0, portal: !0, ref: setPopoverRef, children: t17 }), $[60] = open, $[61] = placement, $[62] = t11, $[63] = t17, $[64] = t18) : t18 = $[64];
  let t19;
  return $[65] !== t10 || $[66] !== t18 ? (t19 = /* @__PURE__ */ jsx(PortalProvider, { __unstable_elements: t10, children: t18 }), $[65] = t10, $[66] = t18, $[67] = t19) : t19 = $[67], t19;
}
function _temp5$1(state_3) {
  return state_3.sinceTime;
}
function _temp4$2(state_2) {
  return state_2.realRevChunk;
}
function _temp3$2(state_1) {
  return state_1.hasMoreChunks;
}
function _temp2$2(state_0) {
  return state_0.isLoading;
}
function _temp$2(state2) {
  return state2.chunks;
}
const Scroller$1 = styled(ScrollContainer)`
  height: 100%;
  overflow: auto;
  position: relative;
  scroll-behavior: smooth;
`, Grid = styled(Box)`
  &:not([hidden]) {
    display: grid;
  }
  grid-template-columns: 48px 1fr;
  align-items: center;
  gap: 0.25em;
`;
function ChangesInspector(t0) {
  const $ = c(38), {
    showChanges
  } = t0, {
    documentId,
    schemaType,
    timelineError,
    timelineStore,
    value
  } = useDocumentPane(), [scrollRef, setScrollRef] = useState(null), rev = useTimelineSelector(timelineStore, _temp$1), diff = useTimelineSelector(timelineStore, _temp2$1), onOlderRevision = useTimelineSelector(timelineStore, _temp3$1), selectionState = useTimelineSelector(timelineStore, _temp4$1), sinceTime = useTimelineSelector(timelineStore, _temp5), loading = selectionState === "loading", isComparingCurrent = !onOlderRevision, {
    t: structureT
  } = useTranslation(structureLocaleNamespace);
  let t1, t2;
  $[0] !== diff || $[1] !== documentId || $[2] !== isComparingCurrent || $[3] !== schemaType || $[4] !== value ? (t2 = {
    documentId,
    schemaType,
    FieldWrapper: ChangeFieldWrapper,
    rootDiff: diff,
    isComparingCurrent,
    value,
    showFromValue: !0
  }, $[0] = diff, $[1] = documentId, $[2] = isComparingCurrent, $[3] = schemaType, $[4] = value, $[5] = t2) : t2 = $[5], t1 = t2;
  const documentContext = t1;
  let t3;
  $[6] !== structureT ? (t3 = structureT("changes.from.label"), $[6] = structureT, $[7] = t3) : t3 = $[7];
  let t4;
  $[8] !== t3 ? (t4 = /* @__PURE__ */ jsx(Text, { size: 1, muted: !0, children: t3 }), $[8] = t3, $[9] = t4) : t4 = $[9];
  let t5;
  $[10] !== sinceTime ? (t5 = /* @__PURE__ */ jsx(TimelineMenu, { mode: "since", chunk: sinceTime, placement: "bottom-start" }), $[10] = sinceTime, $[11] = t5) : t5 = $[11];
  let t6;
  $[12] !== structureT ? (t6 = structureT("changes.to.label"), $[12] = structureT, $[13] = t6) : t6 = $[13];
  let t7;
  $[14] !== t6 ? (t7 = /* @__PURE__ */ jsx(Text, { size: 1, muted: !0, children: t6 }), $[14] = t6, $[15] = t7) : t7 = $[15];
  let t8;
  $[16] !== rev ? (t8 = /* @__PURE__ */ jsx(TimelineMenu, { chunk: rev, mode: "rev", placement: "bottom-end" }), $[16] = rev, $[17] = t8) : t8 = $[17];
  let t9;
  $[18] !== t4 || $[19] !== t5 || $[20] !== t7 || $[21] !== t8 ? (t9 = /* @__PURE__ */ jsx(Box, { padding: 3, children: /* @__PURE__ */ jsxs(Grid, { paddingX: 2, paddingBottom: 2, children: [
    t4,
    t5,
    t7,
    t8
  ] }) }), $[18] = t4, $[19] = t5, $[20] = t7, $[21] = t8, $[22] = t9) : t9 = $[22];
  let t10;
  $[23] !== diff || $[24] !== documentContext || $[25] !== loading || $[26] !== schemaType || $[27] !== showChanges || $[28] !== timelineError ? (t10 = showChanges && /* @__PURE__ */ jsx(Content, { diff, documentContext, error: timelineError, loading, schemaType }), $[23] = diff, $[24] = documentContext, $[25] = loading, $[26] = schemaType, $[27] = showChanges, $[28] = timelineError, $[29] = t10) : t10 = $[29];
  let t11;
  $[30] !== t10 ? (t11 = /* @__PURE__ */ jsx(Scroller$1, { "data-ui": "Scroller", ref: setScrollRef, children: /* @__PURE__ */ jsx(Box, { flex: 1, paddingX: 3, height: "fill", children: t10 }) }), $[30] = t10, $[31] = t11) : t11 = $[31];
  let t12;
  $[32] !== scrollRef || $[33] !== t11 ? (t12 = /* @__PURE__ */ jsx(Card, { flex: 1, paddingX: 2, paddingY: 2, children: /* @__PURE__ */ jsx(BoundaryElementProvider, { element: scrollRef, children: t11 }) }), $[32] = scrollRef, $[33] = t11, $[34] = t12) : t12 = $[34];
  let t13;
  return $[35] !== t12 || $[36] !== t9 ? (t13 = /* @__PURE__ */ jsxs(Flex, { "data-testid": "review-changes-pane", direction: "column", height: "fill", overflow: "hidden", children: [
    t9,
    t12
  ] }), $[35] = t12, $[36] = t9, $[37] = t13) : t13 = $[37], t13;
}
function _temp5(state_3) {
  return state_3.sinceTime;
}
function _temp4$1(state_2) {
  return state_2.selectionState;
}
function _temp3$1(state_1) {
  return state_1.onOlderRevision;
}
function _temp2$1(state_0) {
  return state_0.diff;
}
function _temp$1(state2) {
  return state2.revTime;
}
function Content(t0) {
  const $ = c(9), {
    error,
    diff,
    documentContext,
    loading,
    schemaType
  } = t0;
  if (error) {
    let t12;
    return $[0] === Symbol.for("react.memo_cache_sentinel") ? (t12 = /* @__PURE__ */ jsx(NoChanges, {}), $[0] = t12) : t12 = $[0], t12;
  }
  if (loading) {
    let t12;
    return $[1] === Symbol.for("react.memo_cache_sentinel") ? (t12 = /* @__PURE__ */ jsx(LoadingBlock, { showText: !0 }), $[1] = t12) : t12 = $[1], t12;
  }
  if (!diff) {
    let t12;
    return $[2] === Symbol.for("react.memo_cache_sentinel") ? (t12 = /* @__PURE__ */ jsx(NoChanges, {}), $[2] = t12) : t12 = $[2], t12;
  }
  let t1;
  $[3] !== diff || $[4] !== schemaType ? (t1 = /* @__PURE__ */ jsx(ChangeList, { diff, schemaType }), $[3] = diff, $[4] = schemaType, $[5] = t1) : t1 = $[5];
  let t2;
  return $[6] !== documentContext || $[7] !== t1 ? (t2 = /* @__PURE__ */ jsx(DocumentChangeContext.Provider, { value: documentContext, children: t1 }), $[6] = documentContext, $[7] = t1, $[8] = t2) : t2 = $[8], t2;
}
const Scroller = styled(ScrollContainer)`
  height: 100%;
  overflow: auto;
  position: relative;
  scroll-behavior: smooth;
`;
function HistorySelector(t0) {
  const $ = c(20), {
    showList
  } = t0, {
    timelineError,
    setTimelineMode,
    setTimelineRange,
    timelineStore
  } = useDocumentPane(), [scrollRef, setScrollRef] = useState(null), [listHeight, setListHeight] = useState(0);
  let t1;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t1 = (el) => {
    setListHeight(el?.clientHeight ? el.clientHeight - 1 : 0), setScrollRef(el);
  }, $[0] = t1) : t1 = $[0];
  const getScrollerRef = t1, chunks = useTimelineSelector(timelineStore, _temp), realRevChunk = useTimelineSelector(timelineStore, _temp2), hasMoreChunks = useTimelineSelector(timelineStore, _temp3), loading = useTimelineSelector(timelineStore, _temp4), {
    t
  } = useTranslation("studio"), toast = useToast();
  let t2;
  $[1] !== setTimelineMode || $[2] !== setTimelineRange || $[3] !== t || $[4] !== timelineStore || $[5] !== toast ? (t2 = (revChunk) => {
    try {
      const [sinceId, revId] = timelineStore.findRangeForRev(revChunk);
      setTimelineMode("closed"), setTimelineRange(sinceId, revId);
    } catch (t32) {
      const err = t32;
      toast.push({
        closable: !0,
        description: err.message,
        status: "error",
        title: t("timeline.error.unable-to-load-revision")
      });
    }
  }, $[1] = setTimelineMode, $[2] = setTimelineRange, $[3] = t, $[4] = timelineStore, $[5] = toast, $[6] = t2) : t2 = $[6];
  const selectRev = t2;
  let t3;
  $[7] !== loading || $[8] !== timelineStore ? (t3 = () => {
    loading || timelineStore.loadMore();
  }, $[7] = loading, $[8] = timelineStore, $[9] = t3) : t3 = $[9];
  const handleLoadMore = t3;
  let t4;
  return $[10] !== chunks || $[11] !== handleLoadMore || $[12] !== hasMoreChunks || $[13] !== listHeight || $[14] !== realRevChunk || $[15] !== scrollRef || $[16] !== selectRev || $[17] !== showList || $[18] !== timelineError ? (t4 = /* @__PURE__ */ jsx(Flex, { "data-testid": "review-changes-pane", direction: "column", height: "fill", children: /* @__PURE__ */ jsx(Card, { flex: 1, padding: 2, paddingTop: 0, children: timelineError ? /* @__PURE__ */ jsx(TimelineError, {}) : /* @__PURE__ */ jsx(BoundaryElementProvider, { element: scrollRef, children: /* @__PURE__ */ jsx(Scroller, { "data-ui": "Scroller", ref: getScrollerRef, children: listHeight && showList ? /* @__PURE__ */ jsx(Timeline, { chunks, hasMoreChunks, lastChunk: realRevChunk, onLoadMore: handleLoadMore, onSelect: selectRev, listMaxHeight: `${listHeight}px` }) : null }) }) }) }), $[10] = chunks, $[11] = handleLoadMore, $[12] = hasMoreChunks, $[13] = listHeight, $[14] = realRevChunk, $[15] = scrollRef, $[16] = selectRev, $[17] = showList, $[18] = timelineError, $[19] = t4) : t4 = $[19], t4;
}
function _temp4(state_2) {
  return state_2.isLoading;
}
function _temp3(state_1) {
  return state_1.hasMoreChunks;
}
function _temp2(state_0) {
  return state_0.realRevChunk;
}
function _temp(state2) {
  return state2.chunks;
}
const FadeInFlex = styled(Flex)`
  opacity: 0;
  transition: opacity 200ms;
  &[data-ready] {
    opacity: 1;
  }
`, TABS = ["history", "review"], isValidTab = (tab) => (
  // @ts-expect-error TS doesn't understand the type guard
  tab && TABS.includes(tab)
);
function ChangesTabs(props) {
  const $ = c(50), {
    params,
    setParams
  } = usePaneRouter(), {
    t
  } = useTranslation(structureLocaleNamespace), isReady = params?.inspect === HISTORY_INSPECTOR_NAME, paneRouterTab = isValidTab(params?.changesInspectorTab) ? params.changesInspectorTab : TABS[0];
  let t0;
  $[0] !== params || $[1] !== setParams ? (t0 = (tab) => setParams({
    ...params,
    changesInspectorTab: tab
  }), $[0] = params, $[1] = setParams, $[2] = t0) : t0 = $[2];
  const setPaneRouterTab = t0, t1 = isReady ? "" : void 0;
  let t2;
  $[3] !== t ? (t2 = t("changes.tab.history"), $[3] = t, $[4] = t2) : t2 = $[4];
  let t3;
  $[5] !== setPaneRouterTab ? (t3 = () => setPaneRouterTab("history"), $[5] = setPaneRouterTab, $[6] = t3) : t3 = $[6];
  const t4 = paneRouterTab === "history";
  let t5;
  $[7] !== t2 || $[8] !== t3 || $[9] !== t4 ? (t5 = /* @__PURE__ */ jsx(Tab, { "aria-controls": "history-panel", id: "history-tab", label: t2, onClick: t3, selected: t4 }), $[7] = t2, $[8] = t3, $[9] = t4, $[10] = t5) : t5 = $[10];
  let t6;
  $[11] !== t ? (t6 = t("changes.tab.review-changes"), $[11] = t, $[12] = t6) : t6 = $[12];
  let t7;
  $[13] !== setPaneRouterTab ? (t7 = () => setPaneRouterTab("review"), $[13] = setPaneRouterTab, $[14] = t7) : t7 = $[14];
  const t8 = paneRouterTab === "review";
  let t9;
  $[15] !== t6 || $[16] !== t7 || $[17] !== t8 ? (t9 = /* @__PURE__ */ jsx(Tab, { "aria-controls": "review-changes-panel", id: "changes-tab", label: t6, onClick: t7, selected: t8 }), $[15] = t6, $[16] = t7, $[17] = t8, $[18] = t9) : t9 = $[18];
  let t10;
  $[19] !== t5 || $[20] !== t9 ? (t10 = /* @__PURE__ */ jsxs(TabList, { space: 1, flex: 1, children: [
    t5,
    t9
  ] }), $[19] = t5, $[20] = t9, $[21] = t10) : t10 = $[21];
  let t11;
  $[22] !== t ? (t11 = t("changes.action.close-label"), $[22] = t, $[23] = t11) : t11 = $[23];
  const t12 = props.onClose;
  let t13;
  $[24] !== t ? (t13 = t("document-inspector.close-button.tooltip"), $[24] = t, $[25] = t13) : t13 = $[25];
  let t14;
  $[26] !== t13 ? (t14 = {
    content: t13
  }, $[26] = t13, $[27] = t14) : t14 = $[27];
  let t15;
  $[28] !== props.onClose || $[29] !== t11 || $[30] !== t14 ? (t15 = /* @__PURE__ */ jsx(Box, { flex: "none", children: /* @__PURE__ */ jsx(Button, { "aria-label": t11, icon: CloseIcon, mode: "bleed", onClick: t12, tooltipProps: t14 }) }), $[28] = props.onClose, $[29] = t11, $[30] = t14, $[31] = t15) : t15 = $[31];
  let t16;
  $[32] !== t10 || $[33] !== t15 ? (t16 = /* @__PURE__ */ jsxs(Flex, { align: "center", padding: 3, gap: 2, children: [
    t10,
    t15
  ] }), $[32] = t10, $[33] = t15, $[34] = t16) : t16 = $[34];
  const t17 = paneRouterTab !== "history", t18 = paneRouterTab === "history";
  let t19;
  $[35] !== t18 ? (t19 = /* @__PURE__ */ jsx(HistorySelector, { showList: t18 }), $[35] = t18, $[36] = t19) : t19 = $[36];
  let t20;
  $[37] !== t17 || $[38] !== t19 ? (t20 = /* @__PURE__ */ jsx(TabPanel, { "aria-labelledby": "history-tab", height: "fill", hidden: t17, id: "history-panel", children: t19 }), $[37] = t17, $[38] = t19, $[39] = t20) : t20 = $[39];
  const t21 = paneRouterTab !== "review", t22 = paneRouterTab === "review";
  let t23;
  $[40] !== t22 ? (t23 = /* @__PURE__ */ jsx(ChangesInspector, { showChanges: t22 }), $[40] = t22, $[41] = t23) : t23 = $[41];
  let t24;
  $[42] !== t21 || $[43] !== t23 ? (t24 = /* @__PURE__ */ jsx(TabPanel, { "aria-labelledby": "review-tab", hidden: t21, id: "review-panel", height: "fill", children: t23 }), $[42] = t21, $[43] = t23, $[44] = t24) : t24 = $[44];
  let t25;
  return $[45] !== t1 || $[46] !== t16 || $[47] !== t20 || $[48] !== t24 ? (t25 = /* @__PURE__ */ jsxs(FadeInFlex, { direction: "column", padding: 0, height: "fill", "data-ready": t1, children: [
    t16,
    t20,
    t24
  ] }), $[45] = t1, $[46] = t16, $[47] = t20, $[48] = t24, $[49] = t25) : t25 = $[49], t25;
}
const changesInspector = {
  name: HISTORY_INSPECTOR_NAME,
  useMenuItem: () => {
    const {
      features
    } = useStructureTool(), {
      t
    } = useTranslation();
    return {
      hidden: !features.reviewChanges,
      icon: RestoreIcon,
      title: t("changes.title")
    };
  },
  component: ChangesTabs,
  onClose: ({
    params
  }) => ({
    params: {
      ...params,
      since: void 0,
      rev: void 0,
      changesInspectorTab: void 0
    }
  }),
  onOpen: ({
    params
  }) => ({
    params: {
      ...params,
      since: "@lastPublished"
    }
  })
};
function getPathTitles(options) {
  const {
    path,
    schemaType,
    value
  } = options, result = [];
  let s = schemaType, v = value;
  for (const segment of path) {
    if (typeof segment == "string") {
      if (!isRecord(v) && v !== void 0)
        throw new Error(`Parent value is not an object, cannot get path segment: .${segment}`);
      if (s.jsonType !== "object")
        throw new Error(`Parent type is not an object schema type, cannot get path segment: .${segment}`);
      v = v?.[segment];
      const field = s.fields.find((f) => f.name === segment);
      if (!field)
        return result.push({
          name: segment
        }), result;
      s = field.type, result.push(s);
      continue;
    }
    if (typeof segment == "number") {
      if (!isArray(v) && v !== void 0)
        throw new Error(`Parent value is not an array, cannot get path segment: [${segment}]`);
      if (s.jsonType !== "array")
        throw new Error(`Parent type is not an array schema type, cannot get path segment: [${segment}]`);
      v = v?.[segment];
      const itemType = s.of.find((ofType) => typeof v == "string" ? ofType.jsonType === "string" : typeof v == "number" ? ofType.jsonType === "number" : typeof v == "boolean" ? ofType.jsonType === "boolean" : isRecord(v) ? ofType.name === v?._type : !1);
      if (!itemType)
        throw new Error(`Item type not found: [${segment}]`);
      s = itemType, result.push(s);
      continue;
    }
    if (isRecord(segment) && segment._key) {
      if (!isArray(v))
        throw new Error(`Parent value is not an array, cannot get path segment: [_key == ${segment}]`);
      if (s.jsonType !== "array")
        throw new Error(`Parent type is not an array schema type, cannot get path segment: .${segment}`);
      if (v = (v ?? []).find((i) => isRecord(i) && i._key === segment._key), !isRecord(v))
        throw new Error(`Array item not found: [_key == ${segment._key}]`);
      const ofType = s.of.find((i) => isRecord(v) && i.name === v?._type);
      if (!ofType)
        throw new Error(`Array item type not found: .${v?._type}`);
      s = ofType, result.push(s);
      continue;
    }
    throw new Error(`Invalid path segment: ${JSON.stringify(segment)}`);
  }
  return result;
}
const MARKER_ICON = {
  error: ErrorOutlineIcon,
  warning: WarningOutlineIcon,
  info: InfoOutlineIcon
}, MARKER_TONE = {
  error: "critical",
  warning: "caution",
  info: "primary"
};
function ValidationInspector(props) {
  const $ = c(25), {
    onClose
  } = props, {
    onFocus,
    onPathOpen,
    schemaType,
    validation,
    value
  } = useDocumentPane(), {
    t
  } = useTranslation("validation");
  let t0;
  $[0] !== onFocus || $[1] !== onPathOpen ? (t0 = (path) => {
    onPathOpen(path), onFocus(path);
  }, $[0] = onFocus, $[1] = onPathOpen, $[2] = t0) : t0 = $[2];
  const handleOpen = t0;
  let t1;
  $[3] !== t ? (t1 = t("panel.close-button-aria-label"), $[3] = t, $[4] = t1) : t1 = $[4];
  let t2;
  $[5] !== t ? (t2 = t("panel.title"), $[5] = t, $[6] = t2) : t2 = $[6];
  let t3;
  $[7] !== onClose || $[8] !== t1 || $[9] !== t2 ? (t3 = /* @__PURE__ */ jsx(DocumentInspectorHeader, { as: "header", closeButtonLabel: t1, flex: "none", onClose, title: t2 }), $[7] = onClose, $[8] = t1, $[9] = t2, $[10] = t3) : t3 = $[10];
  let t4;
  $[11] !== t || $[12] !== validation.length ? (t4 = validation.length === 0 && /* @__PURE__ */ jsx(Box, { padding: 2, children: /* @__PURE__ */ jsx(Text, { muted: !0, size: 1, children: t("panel.no-errors-message") }) }), $[11] = t, $[12] = validation.length, $[13] = t4) : t4 = $[13];
  let t5;
  $[14] !== handleOpen || $[15] !== schemaType || $[16] !== validation || $[17] !== value ? (t5 = validation.length > 0 && /* @__PURE__ */ jsx(Stack, { space: 2, children: validation.map((marker, i) => /* @__PURE__ */ jsx(ValidationCard, { marker, onOpen: handleOpen, schemaType, value }, i)) }), $[14] = handleOpen, $[15] = schemaType, $[16] = validation, $[17] = value, $[18] = t5) : t5 = $[18];
  let t6;
  $[19] !== t4 || $[20] !== t5 ? (t6 = /* @__PURE__ */ jsxs(Card, { flex: 1, overflow: "auto", padding: 3, children: [
    t4,
    t5
  ] }), $[19] = t4, $[20] = t5, $[21] = t6) : t6 = $[21];
  let t7;
  return $[22] !== t3 || $[23] !== t6 ? (t7 = /* @__PURE__ */ jsxs(Flex, { direction: "column", height: "fill", overflow: "hidden", children: [
    t3,
    t6
  ] }), $[22] = t3, $[23] = t6, $[24] = t7) : t7 = $[24], t7;
}
function ValidationCard(props) {
  const $ = c(16), {
    marker,
    onOpen,
    schemaType,
    value
  } = props;
  let t0;
  $[0] !== marker.path || $[1] !== onOpen ? (t0 = () => onOpen(marker.path), $[0] = marker.path, $[1] = onOpen, $[2] = t0) : t0 = $[2];
  const handleOpen = t0, [errorInfo, setErrorInfo] = useState(null);
  let t1;
  $[3] !== errorInfo ? (t1 = errorInfo && /* @__PURE__ */ jsx(Card, { padding: 3, radius: 2, tone: "critical", children: /* @__PURE__ */ jsx(Text, { size: 1, children: errorInfo.error.message }) }), $[3] = errorInfo, $[4] = t1) : t1 = $[4];
  let t2;
  $[5] !== errorInfo || $[6] !== handleOpen || $[7] !== marker.level || $[8] !== marker.message || $[9] !== marker.path || $[10] !== schemaType || $[11] !== value ? (t2 = !errorInfo && /* @__PURE__ */ jsx(Card, { __unstable_focusRing: !0, as: "button", onClick: handleOpen, padding: 3, radius: 2, tone: MARKER_TONE[marker.level], children: /* @__PURE__ */ jsxs(Flex, { align: "flex-start", gap: 3, children: [
    /* @__PURE__ */ jsx(Box, { flex: "none", children: /* @__PURE__ */ jsx(Text, { size: 1, children: createElement(MARKER_ICON[marker.level]) }) }),
    /* @__PURE__ */ jsxs(Stack, { flex: 1, space: 2, children: [
      /* @__PURE__ */ jsx(DocumentNodePathBreadcrumbs, { path: marker.path, schemaType, value }),
      /* @__PURE__ */ jsx(Text, { muted: !0, size: 1, children: marker.message })
    ] })
  ] }) }), $[5] = errorInfo, $[6] = handleOpen, $[7] = marker.level, $[8] = marker.message, $[9] = marker.path, $[10] = schemaType, $[11] = value, $[12] = t2) : t2 = $[12];
  let t3;
  return $[13] !== t1 || $[14] !== t2 ? (t3 = /* @__PURE__ */ jsxs(ErrorBoundary, { onCatch: setErrorInfo, children: [
    t1,
    t2
  ] }), $[13] = t1, $[14] = t2, $[15] = t3) : t3 = $[15], t3;
}
function DocumentNodePathBreadcrumbs(props) {
  const {
    path,
    schemaType,
    value
  } = props, pathTitles = useMemo(() => {
    try {
      return getPathTitles({
        path,
        schemaType,
        value
      });
    } catch (e) {
      console.error(e);
    }
    return null;
  }, [path, schemaType, value]);
  return pathTitles?.length ? /* @__PURE__ */ jsx(Text, { size: 1, children: pathTitles.map((t, i) => /* @__PURE__ */ jsxs(Fragment$1, { children: [
    i > 0 && /* @__PURE__ */ jsx("span", { style: {
      color: "var(--card-muted-fg-color)",
      opacity: 0.5
    }, children: " / " }),
    /* @__PURE__ */ jsx("span", { style: {
      fontWeight: 500
    }, children: t.title || t.name })
  ] }, i)) }) : null;
}
function useMenuItem(props) {
  const {
    documentId,
    documentType
  } = props, {
    t
  } = useTranslation("validation"), {
    validation: validationMarkers
  } = useValidationStatus(documentId, documentType), validation = useMemo(() => validationMarkers.map((item) => ({
    level: item.level,
    message: item.message,
    path: item.path
  })), [validationMarkers]), hasErrors = validation.some(isValidationError), hasWarnings = validation.some(isValidationWarning), icon = useMemo(() => hasErrors ? ErrorOutlineIcon : hasWarnings ? WarningOutlineIcon : CheckmarkCircleIcon, [hasErrors, hasWarnings]), tone = useMemo(() => hasErrors ? "critical" : hasWarnings ? "caution" : "positive", [hasErrors, hasWarnings]);
  return {
    hidden: validation.length === 0,
    icon,
    title: t("panel.title"),
    tone,
    showAsAction: !0
  };
}
const validationInspector = {
  name: VALIDATION_INSPECTOR_NAME,
  component: ValidationInspector,
  useMenuItem
}, EMPTY_PARAMS = {};
function legacyEditParamsToState(params) {
  try {
    return JSON.parse(decodeURIComponent(params));
  } catch {
    return console.warn("Failed to parse JSON parameters"), {};
  }
}
function encodePanesSegment(panes) {
  return (panes || []).map((group) => group.map(encodeChunks).join("|")).map(encodeURIComponent).join(";");
}
function legacyEditParamsToPath(params) {
  return JSON.stringify(params);
}
function toState(pathSegment) {
  return parsePanesSegment(decodeURIComponent(pathSegment));
}
function toPath(panes) {
  return encodePanesSegment(panes);
}
const router = route.create("/", [
  // "Asynchronous intent resolving" route
  route.intents("/intent"),
  // Legacy fallback route, will be redirected to new format
  route.create("/edit/:type/:editDocumentId", [route.create({
    path: "/:params",
    transform: {
      params: {
        toState: legacyEditParamsToState,
        toPath: legacyEditParamsToPath
      }
    }
  })]),
  // The regular path - when the intent can be resolved to a specific pane
  route.create({
    path: "/:panes",
    // Legacy URLs, used to handle redirects
    children: [route.create("/:action", route.create("/:legacyEditDocumentId"))],
    transform: {
      panes: {
        toState,
        toPath
      }
    }
  })
]), panePattern = /^([.a-z0-9_-]+),?({.*?})?(?:(;|$))/i, isParam = (str) => /^[a-z0-9]+=[^=]+/i.test(str), isPayloadLike = (str) => /^[A-Za-z0-9\-_]+(?:={0,2})$/.test(str), exclusiveParams = ["view", "since", "rev", "inspect", "comment"], isTruthy = Boolean;
function parseChunks(chunks, initial) {
  const sibling = {
    ...initial,
    params: EMPTY_PARAMS,
    payload: void 0
  };
  return chunks.reduce((pane2, chunk) => {
    if (isParam(chunk)) {
      const key = chunk.slice(0, chunk.indexOf("=")), value = chunk.slice(key.length + 1);
      pane2.params = {
        ...pane2.params,
        [decodeURIComponent(key)]: decodeURIComponent(value)
      };
    } else isPayloadLike(chunk) ? pane2.payload = tryParseBase64Payload(chunk) : console.warn("Unknown pane segment: %s - skipping", chunk);
    return pane2;
  }, sibling);
}
function encodeChunks(pane2, index, group) {
  const {
    payload,
    params = {},
    id
  } = pane2, [firstSibling] = group, paneIsFirstSibling = pane2 === firstSibling, sameAsFirst = index !== 0 && id === firstSibling.id, encodedPayload = typeof payload > "u" ? void 0 : encodeJsonParams(payload), encodedParams = Object.entries(params).filter((entry) => {
    const [key, value] = entry;
    if (!value) return !1;
    if (paneIsFirstSibling) return !0;
    const valueFromFirstSibling = firstSibling.params?.[key];
    return !(value === valueFromFirstSibling && !exclusiveParams.includes(key));
  }).map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`);
  return [sameAsFirst ? "" : id].concat([encodedParams.length > 0 && encodedParams, encodedPayload].filter(isTruthy).flat()).join(",") || ",";
}
function parsePanesSegment(str) {
  return str.indexOf(",{") !== -1 ? parseOldPanesSegment(str) : str.split(";").map((group) => {
    const [firstSibling, ...restOfSiblings] = group.split("|").map((segment) => {
      const [id, ...chunks] = segment.split(",");
      return parseChunks(chunks, {
        id
      });
    });
    return [firstSibling, ...restOfSiblings.map((sibling) => ({
      ...firstSibling,
      ...sibling,
      id: sibling.id || firstSibling.id,
      params: {
        ...omit(firstSibling.params, exclusiveParams),
        ...sibling.params
      },
      payload: sibling.payload || firstSibling.payload
    }))];
  }).filter((group) => group.length > 0);
}
function parseOldPanesSegment(str) {
  const chunks = [];
  let buffer = str;
  for (; buffer.length; ) {
    const [match, id, payloadChunk] = buffer.match(panePattern) || [];
    if (!match) {
      buffer = buffer.slice(1);
      continue;
    }
    const payload = payloadChunk && tryParsePayload(payloadChunk);
    chunks.push({
      id,
      payload
    }), buffer = buffer.slice(match.length);
  }
  return [chunks];
}
function tryParsePayload(json) {
  try {
    return JSON.parse(json);
  } catch (err) {
    console.warn(`Failed to parse parameters: ${err.message}`);
    return;
  }
}
function tryParseBase64Payload(data) {
  try {
    return data ? decodeJsonParams(data) : void 0;
  } catch (err) {
    console.warn(`Failed to parse parameters: ${err.message}`);
    return;
  }
}
const documentActions = [PublishAction, UnpublishAction, DiscardChangesAction, DuplicateAction, DeleteAction, HistoryRestoreAction], documentBadges = [LiveEditBadge], inspectors = [validationInspector, changesInspector], structureTool = definePlugin((options) => {
  const icon = options?.icon || MasterDetailIcon;
  return {
    name: "sanity/structure",
    document: {
      actions: (prevActions) => Array.from(/* @__PURE__ */ new Set([...prevActions, ...documentActions])),
      badges: (prevBadges) => Array.from(/* @__PURE__ */ new Set([...prevBadges, ...documentBadges])),
      inspectors: (prevInspectors) => Array.from(/* @__PURE__ */ new Set([...prevInspectors, ...inspectors]))
    },
    tools: [{
      name: options?.name || "structure",
      title: options?.title || "Structure",
      icon,
      component: lazy(() => import("./index3.mjs")),
      canHandleIntent: (intent, params) => intent === "create" ? canHandleCreateIntent(params) : intent === "edit" ? canHandleEditIntent(params) : !1,
      getIntentState,
      // Controlled by sanity/src/structure/components/structureTool/StructureTitle.tsx
      controlsDocumentTitle: !0,
      options,
      router
    }],
    i18n: {
      bundles: [structureUsEnglishLocaleBundle]
    }
  };
});
function canHandleCreateIntent(params) {
  return "type" in params ? "template" in params ? {
    template: !0
  } : !0 : !1;
}
function canHandleEditIntent(params) {
  return "id" in params ? "mode" in params ? {
    mode: params.mode === "structure"
  } : !0 : !1;
}
function StructureToolProvider({
  defaultDocumentNode,
  structure: resolveStructure,
  children
}) {
  const [layoutCollapsed, setLayoutCollapsed] = useState(!1), source = useSource(), configContext = useConfigContextFromSource(source), documentStore = useDocumentStore(), S = useMemo(() => createStructureBuilder({
    defaultDocumentNode,
    source
  }), [defaultDocumentNode, source]), rootPaneNode = useMemo(() => resolveStructure ? resolveStructure(S, {
    ...configContext,
    documentStore
  }) : S.defaults(), [S, resolveStructure, configContext, documentStore]), features = useMemo(() => ({
    backButton: layoutCollapsed,
    resizablePanes: !layoutCollapsed,
    reviewChanges: !layoutCollapsed,
    splitPanes: !layoutCollapsed,
    splitViews: !layoutCollapsed
  }), [layoutCollapsed]), structureTool2 = useMemo(() => ({
    features,
    layoutCollapsed,
    setLayoutCollapsed,
    rootPaneNode,
    structureContext: S.context
  }), [features, layoutCollapsed, rootPaneNode, S.context]);
  return /* @__PURE__ */ jsx(StructureToolContext.Provider, { value: structureTool2, children });
}
var pane$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  default: DocumentPane
}), pane = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  default: PaneContainer
});
export {
  BackLink,
  ChildLink,
  ComponentBuilder,
  ComponentViewBuilder,
  ConfirmDeleteDialogContainer,
  DEFAULT_INTENT_HANDLER,
  DocumentBuilder,
  DocumentInspectorHeader,
  DocumentListBuilder,
  DocumentListItemBuilder,
  DocumentPane,
  DocumentPaneProvider,
  DocumentTypeListBuilder,
  FormViewBuilder,
  GenericListBuilder,
  GenericViewBuilder,
  HELP_URL,
  InitialValueTemplateItemBuilder,
  LOADING_PANE,
  ListBuilder,
  ListItemBuilder,
  LoadingPane,
  MenuItemBuilder,
  MenuItemGroupBuilder,
  Pane,
  PaneContainer,
  PaneContent,
  PaneHeader$1 as PaneHeader,
  PaneHeaderActions,
  PaneItem,
  PaneLayout,
  ParameterizedLink,
  ReferenceChildLink,
  SerializeError,
  StructureToolProvider,
  _DEBUG,
  component,
  createStructureBuilder,
  defaultInitialValueTemplateItems,
  defaultIntentChecker,
  documentFromEditor,
  documentFromEditorWithInitialValue,
  form,
  getOrderingMenuItem,
  getOrderingMenuItemsForSchemaType,
  getTypeNamesFromFilter,
  isDocumentListItem,
  maybeSerializeInitialValueTemplateItem,
  maybeSerializeMenuItem,
  maybeSerializeMenuItemGroup,
  maybeSerializeView,
  menuItemsFromInitialValueTemplateItems,
  pane$1 as pane,
  pane as pane$1,
  setActivePanes,
  shallowIntentChecker,
  structureLocaleNamespace,
  structureTool,
  useDocumentPane,
  useDocumentTitle,
  usePane,
  usePaneLayout,
  usePaneRouter,
  useStructureTool
};
//# sourceMappingURL=pane.mjs.map
