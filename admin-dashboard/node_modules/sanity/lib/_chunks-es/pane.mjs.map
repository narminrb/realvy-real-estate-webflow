{"version":3,"file":"pane.mjs","sources":["../../src/structure/i18n/index.ts","../../src/structure/components/DocTitle.tsx","../../src/structure/components/confirmDeleteDialog/ConfirmDeleteDialogBody.styles.tsx","../../src/structure/components/paneItem/PaneItemPreview.tsx","../../src/structure/components/paneRouter/BackLink.tsx","../../src/structure/components/pane/usePaneLayout.ts","../../src/structure/components/paneRouter/ChildLink.tsx","../../src/structure/components/paneRouter/ParameterizedLink.tsx","../../src/structure/components/paneRouter/ReferenceChildLink.tsx","../../src/structure/components/paneRouter/usePaneRouter.ts","../../src/structure/components/confirmDeleteDialog/ReferencePreviewLink.tsx","../../src/structure/components/confirmDeleteDialog/ConfirmDeleteDialogBody.tsx","../../src/structure/components/confirmDeleteDialog/useReferringDocuments.ts","../../src/structure/components/confirmDeleteDialog/ConfirmDeleteDialog.tsx","../../src/structure/components/confirmDeleteDialog/index.tsx","../../src/structure/components/Delay.tsx","../../src/structure/components/pane/constants.ts","../../src/structure/components/pane/PaneDivider.tsx","../../src/structure/components/pane/Pane.tsx","../../src/structure/components/pane/PaneContent.styles.tsx","../../src/structure/components/pane/usePane.ts","../../src/structure/components/pane/PaneContent.tsx","../../src/structure/components/pane/PaneMenuButtonItem.tsx","../../src/structure/components/pane/PaneContextMenuButton.tsx","../../src/structure/components/pane/PaneFooter.styles.tsx","../../src/structure/components/pane/PaneFooter.tsx","../../src/structure/components/pane/PaneHeader.styles.tsx","../../src/structure/components/pane/PaneHeader.tsx","../../src/structure/components/pane/PaneHeaderActionButton.tsx","../../src/structure/components/pane/PaneLayout.styles.tsx","../../src/structure/components/pane/helpers/_calcPaneResize.ts","../../src/structure/components/pane/helpers/_getDOMPath.ts","../../src/structure/components/pane/helpers/_sortElements.ts","../../src/structure/components/pane/paneLayoutController.ts","../../src/structure/components/pane/PaneLayout.tsx","../../src/structure/menuNodes.ts","../../src/structure/components/IntentButton.tsx","../../src/structure/components/paneHeaderActions/InsufficientPermissionsMessageTooltip.tsx","../../src/structure/components/paneHeaderActions/PaneHeaderCreateButton.tsx","../../src/structure/components/paneHeaderActions/PaneHeaderActions.tsx","../../src/structure/components/MissingSchemaType.tsx","../../src/structure/components/paneItem/PaneItem.tsx","../../src/structure/components/RenderActionCollectionState.tsx","../../src/structure/components/RenderBadgeCollectionState.tsx","../../src/structure/panes/error/ErrorPane.tsx","../../src/structure/panes/loading/getWaitMessages.ts","../../src/structure/panes/loading/LoadingPane.tsx","../../src/structure/panes/document/useDocumentPane.tsx","../../src/structure/panes/document/comments/CommentsWrapper.tsx","../../src/structure/constants.ts","../../src/structure/useStructureTool.ts","../../src/structure/panes/document/constants.ts","../../src/structure/panes/document/DocumentInspectorMenuItemsResolver.tsx","../../src/structure/panes/document/useDocumentTitle.ts","../../src/structure/panes/document/DocumentOperationResults.tsx","../../src/structure/components/paneItem/helpers.tsx","../../src/structure/panes/document/documentInspector/DocumentInspectorHeader.tsx","../../src/structure/panes/document/documentInspector/Resizer.tsx","../../src/structure/panes/document/documentInspector/Resizable.tsx","../../src/structure/panes/document/documentInspector/DocumentInspectorPanel.tsx","../../src/structure/useStructureToolSetting.ts","../../src/structure/panes/document/inspectDialog/constants.ts","../../src/structure/panes/document/inspectDialog/helpers.ts","../../src/structure/panes/document/inspectDialog/InspectDialog.styles.tsx","../../src/structure/panes/document/inspectDialog/Search.tsx","../../src/structure/panes/document/inspectDialog/InspectDialog.tsx","../../src/structure/panes/document/documentPanel/banners/Banner.tsx","../../src/structure/panes/document/documentPanel/banners/DeletedDocumentBanner.tsx","../../src/structure/panes/document/documentPanel/banners/DeprecatedDocumentTypeBanner.tsx","../../src/structure/components/requestPermissionDialog/__telemetry__/RequestPermissionDialog.telemetry.ts","../../src/structure/components/requestPermissionDialog/RequestPermissionDialog.tsx","../../src/structure/components/requestPermissionDialog/useRoleRequestsStatus.tsx","../../src/structure/panes/document/documentPanel/banners/InsufficientPermissionBanner.tsx","../../src/structure/panes/document/documentPanel/banners/ReferenceChangedBanner.tsx","../../src/structure/panes/document/documentPanel/banners/__telemetry__/DraftLiveEditBanner.telemetry.ts","../../src/structure/panes/document/documentPanel/banners/DraftLiveEditBanner.tsx","../../src/structure/panes/document/documentPanel/documentViews/FormHeader.tsx","../../src/structure/panes/document/documentPanel/documentViews/useConditionalToast.ts","../../src/structure/panes/document/documentPanel/documentViews/FormView.tsx","../../src/structure/panes/document/documentPanel/DocumentPanel.tsx","../../src/structure/panes/document/statusBar/dialogs/constants.ts","../../src/structure/panes/document/statusBar/dialogs/ConfirmDialog.tsx","../../src/structure/panes/document/statusBar/dialogs/ModalDialog.tsx","../../src/structure/panes/document/statusBar/dialogs/PopoverDialog.tsx","../../src/structure/panes/document/statusBar/ActionStateDialog.tsx","../../src/structure/panes/document/statusBar/ActionMenuButton.tsx","../../src/structure/documentActions/DeleteAction.tsx","../../src/structure/documentActions/DiscardChangesAction.tsx","../../src/structure/documentActions/DuplicateAction.tsx","../../src/structure/documentActions/HistoryRestoreAction.tsx","../../src/structure/documentActions/__telemetry__/documentActions.telemetry.ts","../../src/structure/documentActions/PublishAction.tsx","../../src/structure/documentActions/UnpublishAction.tsx","../../src/structure/panes/document/statusBar/DocumentStatusBarActions.tsx","../../src/structure/panes/document/documentPanel/header/DocumentHeaderTabs.tsx","../../src/structure/panes/document/documentPanel/header/DocumentHeaderTitle.tsx","../../src/structure/panes/document/documentPanel/header/DocumentPanelHeader.tsx","../../src/structure/components/spacerButton/SpacerButton.tsx","../../src/structure/panes/document/statusBar/DocumentBadges.tsx","../../src/structure/panes/document/statusBar/DocumentStatusPulse/AnimatedStatusIcon.tsx","../../src/structure/panes/document/statusBar/DocumentStatusPulse/DocumentStatusPulse.tsx","../../src/structure/panes/document/statusBar/DocumentStatusLine.tsx","../../src/structure/panes/document/statusBar/RevisionStatusLine.tsx","../../src/structure/panes/document/statusBar/useResizeObserver.ts","../../src/structure/panes/document/statusBar/DocumentStatusBar.tsx","../../src/structure/panes/document/keyboardShortcuts/DocumentActionShortcuts.tsx","../../src/structure/panes/document/menuItems.ts","../../src/structure/panes/document/usePreviewUrl.ts","../../src/structure/panes/document/document-layout/DocumentLayoutError.tsx","../../src/structure/panes/document/document-layout/DocumentLayout.tsx","../../src/structure/panes/document/document-layout/useDocumentLayoutComponent.ts","../../src/structure/panes/document/__telemetry__/documentPanes.telemetry.ts","../../src/structure/panes/document/getInitialValueTemplateOpts.ts","../../src/structure/panes/document/DocumentPaneProvider.tsx","../../src/structure/panes/document/DocumentPane.tsx","../../src/structure/panes/documentList/constants.ts","../../src/structure/panes/documentList/DocumentListPaneContent.tsx","../../src/structure/panes/documentList/helpers.ts","../../src/structure/structureBuilder/util/getExtendedProjection.ts","../../src/structure/panes/documentList/listenSearchQuery.ts","../../src/structure/panes/documentList/useDocumentList.ts","../../src/structure/panes/documentList/DocumentListPane.tsx","../../src/structure/panes/documentList/PaneHeader.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListSelect.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListProvider.tsx","../../src/structure/panes/documentList/sheetList/SheetListCell.tsx","../../src/structure/panes/documentList/sheetList/useDocumentSheetColumns.tsx","../../src/structure/panes/documentList/sheetList/ColumnsControl.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListFilter.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListHeader.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListPaginator.tsx","../../src/structure/panes/documentList/sheetList/useDocumentSheetListStore.ts","../../src/structure/panes/documentList/sheetList/useDocumentSheetList.ts","../../src/structure/panes/documentList/sheetList/DocumentSheetListPane.tsx","../../src/structure/panes/documentList/PaneContainer.tsx","../../src/structure/structureBuilder/SerializeError.ts","../../src/structure/structureBuilder/Sort.ts","../../src/structure/structureBuilder/MenuItem.ts","../../src/structure/structureBuilder/MenuItemGroup.ts","../../src/structure/structureBuilder/util/validateId.ts","../../src/structure/structureBuilder/util/getStructureNodeId.ts","../../src/structure/structureBuilder/Component.ts","../../src/structure/structureBuilder/util/resolveTypeForDocument.ts","../../src/structure/structureBuilder/views/View.ts","../../src/structure/structureBuilder/views/ComponentView.ts","../../src/structure/structureBuilder/views/FormView.ts","../../src/structure/structureBuilder/views/index.ts","../../src/structure/structureBuilder/Document.ts","../../src/structure/structureBuilder/InitialValueTemplateItem.ts","../../src/structure/structureBuilder/Intent.ts","../../src/structure/structureBuilder/Layout.ts","../../src/structure/structureBuilder/GenericList.ts","../../src/structure/structureBuilder/DocumentList.ts","../../src/structure/structureBuilder/List.ts","../../src/structure/structureBuilder/ListItem.ts","../../src/structure/structureBuilder/DocumentListItem.ts","../../src/structure/structureBuilder/DocumentTypeList.ts","../../src/structure/structureBuilder/documentTypeListItems.ts","../../src/structure/structureBuilder/createStructureBuilder.ts","../../src/structure/documentBadges/LiveEditBadge.ts","../../src/structure/getIntentState.ts","../../src/structure/panes/document/timeline/constants.ts","../../src/structure/panes/document/timeline/helpers.ts","../../src/structure/panes/document/timeline/expandableTimelineItemButton.tsx","../../src/structure/panes/document/timeline/timeline.styled.tsx","../../src/structure/panes/document/timeline/timelineI18n.ts","../../src/structure/panes/document/timeline/userAvatarStack.tsx","../../src/structure/panes/document/timeline/timelineItem.tsx","../../src/structure/panes/document/timeline/utils.ts","../../src/structure/panes/document/timeline/timeline.tsx","../../src/structure/panes/document/timeline/TimelineError.tsx","../../src/structure/panes/document/timeline/timelineMenu.tsx","../../src/structure/panes/document/inspectors/changes/ChangesInspector.tsx","../../src/structure/panes/document/inspectors/changes/HistorySelector.tsx","../../src/structure/panes/document/inspectors/changes/ChangesTabs.tsx","../../src/structure/panes/document/inspectors/changes/index.ts","../../src/structure/panes/document/inspectors/validation/getPathTitles.ts","../../src/structure/panes/document/inspectors/validation/ValidationInspector.tsx","../../src/structure/panes/document/inspectors/validation/index.ts","../../src/structure/router.ts","../../src/structure/structureTool.ts","../../src/structure/StructureToolProvider.tsx"],"sourcesContent":["import {defineLocaleResourceBundle} from 'sanity'\n\n/**\n * The locale namespace for the structure tool\n *\n * @public\n */\nexport const structureLocaleNamespace = 'structure' as const\n\n/**\n * The default locale bundle for the structure tool, which is US English.\n *\n * @internal\n */\nexport const structureUsEnglishLocaleBundle = defineLocaleResourceBundle({\n  locale: 'en-US',\n  namespace: structureLocaleNamespace,\n  resources: () => import('./resources'),\n})\n\n/**\n * The locale resource keys for the structure tool.\n *\n * @alpha\n * @hidden\n */\nexport type {StructureLocaleResourceKeys} from './resources'\n","import {type SanityDocumentLike} from '@sanity/types'\nimport {unstable_useValuePreview as useValuePreview, useSchema, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport interface DocTitleProps {\n  document: SanityDocumentLike\n}\n\nexport function DocTitle(props: DocTitleProps) {\n  const {document: documentValue} = props\n  const schema = useSchema()\n  const schemaType = schema.get(documentValue._type)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const {error, value} = useValuePreview({\n    schemaType: schemaType!,\n    value: documentValue,\n  })\n\n  if (!schemaType) {\n    return <code>{t('doc-title.unknown-schema-type.text', {schemaType: documentValue._type})}</code>\n  }\n\n  if (error) {\n    return <>{t('doc-title.error.text', {errorMessage: error.message})}</>\n  }\n\n  return (\n    <>\n      {value?.title || (\n        <span style={{color: 'var(--card-muted-fg-color)'}}>{t('doc-title.fallback.text')}</span>\n      )}\n    </>\n  )\n}\n","import {InfoOutlineIcon} from '@sanity/icons'\nimport {Box, Flex, Inline, rem, Text} from '@sanity/ui'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Tooltip} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\n\nexport const ChevronWrapper = styled(Box)`\n  margin-left: auto;\n`\n\nexport const CrossDatasetReferencesDetails = styled.details`\n  flex: none;\n\n  &[open] ${ChevronWrapper} {\n    transform: rotate(180deg);\n  }\n`\n\nexport const CrossDatasetReferencesSummary = styled.summary`\n  list-style: none;\n\n  &::-webkit-details-marker {\n    display: none;\n  }\n`\n\nexport const Table = styled.table`\n  width: 100%;\n  text-align: left;\n  padding: 0 ${({theme}) => rem(theme.sanity.space[2])};\n  border-collapse: collapse;\n\n  th {\n    padding: ${({theme}) => rem(theme.sanity.space[1])};\n  }\n\n  td {\n    padding: 0 ${({theme}) => rem(theme.sanity.space[1])};\n  }\n\n  tr > *:last-child {\n    text-align: right;\n  }\n`\n\nexport const DocumentIdFlex = styled(Flex)`\n  min-height: 33px;\n`\n\nexport const OtherReferenceCount = (props: {totalCount: number; references: unknown[]}) => {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const difference = props.totalCount - props.references.length\n\n  if (!difference) return null\n\n  return (\n    <Box padding={2}>\n      <Inline space={2}>\n        <Text size={1} muted>\n          {t('confirm-delete-dialog.other-reference-count.title', {count: difference})}\n        </Text>\n\n        <Tooltip\n          portal\n          placement=\"top\"\n          content={t('confirm-delete-dialog.other-reference-count.tooltip')}\n        >\n          <Text size={1} muted>\n            <InfoOutlineIcon />\n          </Text>\n        </Tooltip>\n      </Inline>\n    </Box>\n  )\n}\n","import {type SanityDocument, type SchemaType} from '@sanity/types'\nimport {Flex} from '@sanity/ui'\nimport {isNumber, isString} from 'lodash'\nimport {type ComponentType, isValidElement, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {\n  type DocumentPresence,\n  DocumentPreviewPresence,\n  type DocumentPreviewStore,\n  DocumentStatus,\n  DocumentStatusIndicator,\n  type GeneralPreviewLayoutKey,\n  getPreviewStateObservable,\n  getPreviewValueWithFallback,\n  isRecord,\n  SanityDefaultPreview,\n} from 'sanity'\n\nimport {TooltipDelayGroupProvider} from '../../../ui-components'\n\nexport interface PaneItemPreviewProps {\n  documentPreviewStore: DocumentPreviewStore\n  icon: ComponentType | false\n  layout: GeneralPreviewLayoutKey\n  presence?: DocumentPresence[]\n  schemaType: SchemaType\n  value: SanityDocument\n}\n\n/**\n * Preview component for _documents_ rendered in structure panes.\n *\n * Note that non-document previews are not handled by this component,\n * despite being pane items! Non-document previews bypass this entirely\n * and are rendered by `<SanityDefaultPreview>`.\n */\nexport function PaneItemPreview(props: PaneItemPreviewProps) {\n  const {icon, layout, presence, schemaType, value} = props\n  const title =\n    (isRecord(value.title) && isValidElement(value.title)) ||\n    isString(value.title) ||\n    isNumber(value.title)\n      ? value.title\n      : null\n\n  const previewStateObservable = useMemo(\n    () => getPreviewStateObservable(props.documentPreviewStore, schemaType, value._id, title),\n    [props.documentPreviewStore, schemaType, title, value._id],\n  )\n  const {draft, published, isLoading} = useObservable(previewStateObservable, {\n    draft: null,\n    isLoading: true,\n    published: null,\n  })\n\n  const status = isLoading ? null : (\n    <TooltipDelayGroupProvider>\n      <Flex align=\"center\" gap={3}>\n        {presence && presence.length > 0 && <DocumentPreviewPresence presence={presence} />}\n        <DocumentStatusIndicator draft={draft} published={published} />\n      </Flex>\n    </TooltipDelayGroupProvider>\n  )\n\n  const tooltip = <DocumentStatus draft={draft} published={published} />\n\n  return (\n    <SanityDefaultPreview\n      {...getPreviewValueWithFallback({value, draft, published})}\n      isPlaceholder={isLoading}\n      icon={icon}\n      layout={layout}\n      status={status}\n      tooltip={tooltip}\n    />\n  )\n}\n","import {type ComponentType, type ForwardedRef, forwardRef, useContext, useMemo} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\nimport {type BackLinkProps} from './types'\n\n/**\n * @internal\n */\nexport const BackLink = forwardRef(function BackLink(\n  props: BackLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {routerPanesState, groupIndex} = useContext(PaneRouterContext)\n  const panes = useMemo(() => routerPanesState.slice(0, groupIndex), [groupIndex, routerPanesState])\n  const state = useMemo(() => ({panes}), [panes])\n\n  return <StateLink {...props} ref={ref} state={state} />\n}) as ComponentType<BackLinkProps>\n","import {useContext} from 'react'\nimport {PaneLayoutContext} from 'sanity/_singletons'\n\nimport {type PaneLayoutContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function usePaneLayout(): PaneLayoutContextValue {\n  const pane = useContext(PaneLayoutContext)\n\n  if (!pane) {\n    throw new Error('PaneLayout: missing context value')\n  }\n\n  return pane\n}\n","import {type ForwardedRef, forwardRef, useContext} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\nimport {type ChildLinkProps} from './types'\n\n/**\n * @internal\n */\nexport const ChildLink = forwardRef(function ChildLink(\n  props: ChildLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {childId, childPayload, childParameters, ...rest} = props\n  const {routerPanesState, groupIndex} = useContext(PaneRouterContext)\n\n  return (\n    <StateLink\n      {...rest}\n      ref={ref}\n      state={{\n        panes: [\n          ...routerPanesState.slice(0, groupIndex + 1),\n          [{id: childId, params: childParameters, payload: childPayload}],\n        ],\n      }}\n    />\n  )\n})\n","import {type ForwardedRef, forwardRef, type ReactNode, useContext, useMemo} from 'react'\nimport {useUnique} from 'sanity'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\ninterface ParameterizedLinkProps {\n  params?: Record<string, string>\n  payload?: unknown\n  children?: ReactNode\n}\n\n/**\n * @internal\n */\nexport const ParameterizedLink = forwardRef(function ParameterizedLink(\n  props: ParameterizedLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {routerPanesState: currentPanes, groupIndex, siblingIndex} = useContext(PaneRouterContext)\n  const {params, payload, ...rest} = props\n  const nextParams = useUnique(params)\n  const nextPayload = useUnique(payload)\n\n  const nextState = useMemo(() => {\n    const currentGroup = currentPanes[groupIndex]\n    const currentSibling = currentGroup[siblingIndex]\n\n    const nextSibling = {\n      ...currentSibling,\n      params: nextParams ?? currentSibling.params,\n      payload: nextPayload ?? currentSibling.payload,\n    }\n\n    const nextGroup = [\n      ...currentGroup.slice(0, siblingIndex),\n      nextSibling,\n      ...currentGroup.slice(siblingIndex + 1),\n    ]\n\n    const nextPanes = [\n      ...currentPanes.slice(0, groupIndex),\n      nextGroup,\n      ...currentPanes.slice(groupIndex + 1),\n    ]\n\n    return {panes: nextPanes}\n  }, [currentPanes, groupIndex, nextParams, nextPayload, siblingIndex])\n\n  return <StateLink ref={ref} {...rest} state={nextState} />\n})\n","import {toString as pathToString} from '@sanity/util/paths'\nimport {type ForwardedRef, forwardRef} from 'react'\n\nimport {ChildLink} from './ChildLink'\nimport {type ReferenceChildLinkProps} from './types'\n\nexport const ReferenceChildLink = forwardRef(function ReferenceChildLink(\n  {documentId, documentType, parentRefPath, children, template, ...rest}: ReferenceChildLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  return (\n    <ChildLink\n      {...rest}\n      ref={ref}\n      childId={documentId}\n      childPayload={template?.params}\n      childParameters={{\n        type: documentType,\n        parentRefPath: pathToString(parentRefPath),\n        ...(template && {template: template?.id}),\n      }}\n    >\n      {children}\n    </ChildLink>\n  )\n})\n","import {useContext} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\n\nimport {type PaneRouterContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta\n */\nexport function usePaneRouter(): PaneRouterContextValue {\n  return useContext(PaneRouterContext)\n}\n","import {type SanityDocument, type SchemaType} from '@sanity/types'\nimport {type ReactNode, useCallback} from 'react'\nimport {\n  type FIXME,\n  getPublishedId,\n  PreviewCard,\n  useDocumentPresence,\n  useDocumentPreviewStore,\n} from 'sanity'\n\nimport {PaneItemPreview} from '../paneItem/PaneItemPreview'\nimport {usePaneRouter} from '../paneRouter'\n\nconst EMPTY_ARRAY: [] = []\n\ninterface ReferencePreviewLinkProps {\n  onClick?: () => void\n  type: SchemaType & {icon?: any}\n  value: SanityDocument\n}\n\nexport function ReferencePreviewLink(props: ReferencePreviewLinkProps) {\n  const {onClick, type, value} = props\n  const publishedId = getPublishedId(value?._id)\n  const documentPresence = useDocumentPresence(publishedId)\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {ReferenceChildLink} = usePaneRouter()\n\n  const Link = useCallback(\n    function LinkComponent(linkProps: {children: ReactNode}) {\n      return (\n        <ReferenceChildLink\n          documentId={value?._id}\n          documentType={type?.name}\n          parentRefPath={EMPTY_ARRAY}\n          {...linkProps}\n        />\n      )\n    },\n    [ReferenceChildLink, type?.name, value?._id],\n  )\n\n  return (\n    <PreviewCard __unstable_focusRing as={Link as FIXME} data-as=\"a\" onClick={onClick} radius={2}>\n      <PaneItemPreview\n        documentPreviewStore={documentPreviewStore}\n        icon={type?.icon}\n        layout=\"compact\"\n        presence={documentPresence?.length > 0 ? documentPresence : EMPTY_ARRAY}\n        schemaType={type}\n        value={value}\n      />\n    </PreviewCard>\n  )\n}\n","import {\n  ChevronDownIcon,\n  CopyIcon,\n  DocumentsIcon,\n  UnknownIcon,\n  WarningOutlineIcon,\n} from '@sanity/icons'\nimport {Box, Card, Flex, Stack, Text, useToast} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport CopyToClipboard from 'react-copy-to-clipboard'\nimport {SanityDefaultPreview, Translate, useSchema, useTranslation} from 'sanity'\n\nimport {Button} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {\n  ChevronWrapper,\n  CrossDatasetReferencesDetails,\n  CrossDatasetReferencesSummary,\n  DocumentIdFlex,\n  OtherReferenceCount,\n  Table,\n} from './ConfirmDeleteDialogBody.styles'\nimport {ReferencePreviewLink} from './ReferencePreviewLink'\nimport {type ReferringDocuments} from './useReferringDocuments'\n\ntype DeletionConfirmationDialogBodyProps = Required<ReferringDocuments> & {\n  documentTitle: React.ReactNode\n  action: 'unpublish' | 'delete'\n  onReferenceLinkClick?: () => void\n}\n\n/**\n * The inner part of the `ConfirmDeleteDialog`. This is ran when both the\n * `crossDatasetReferences` and `internalReferences` are loaded.\n */\nexport function ConfirmDeleteDialogBody({\n  crossDatasetReferences,\n  internalReferences,\n  documentTitle,\n  totalCount,\n  action,\n  datasetNames,\n  hasUnknownDatasetNames,\n  onReferenceLinkClick,\n}: DeletionConfirmationDialogBodyProps) {\n  const schema = useSchema()\n  const toast = useToast()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const renderPreviewItem = useCallback(\n    (item: any) => {\n      const type = schema.get(item._type)\n      if (type) {\n        return <ReferencePreviewLink type={type} value={item} onClick={onReferenceLinkClick} />\n      }\n\n      return (\n        // Padding added to match the ReferencePreviewLink styling\n        <Box padding={2}>\n          <SanityDefaultPreview\n            icon={UnknownIcon}\n            title={t('confirm-delete-dialog.preview-item.preview-unavailable.title')}\n            subtitle={t('confirm-delete-dialog.preview-item.preview-unavailable.subtitle', {\n              documentId: item._id,\n            })}\n            layout=\"default\"\n          />\n        </Box>\n      )\n    },\n    [schema, t, onReferenceLinkClick],\n  )\n\n  if (internalReferences?.totalCount === 0 && crossDatasetReferences?.totalCount === 0) {\n    return (\n      <Text as=\"p\" size={1}>\n        <Translate\n          t={t}\n          i18nKey=\"confirm-delete-dialog.confirmation.text\"\n          context={action}\n          components={{DocumentTitle: () => <strong>{documentTitle}</strong>}}\n        />\n      </Text>\n    )\n  }\n\n  // We do some extra checks to handle cases where you have unavailable dataset\n  // name(s) due to permissions, both alone and in combination with known datasets\n\n  // This normalizes one or more undefined dataset names to the catch-all `unavailable`\n  const normalizedDatasetNames = [\n    ...datasetNames,\n    ...(hasUnknownDatasetNames ? ['unavailable'] : []),\n  ]\n\n  const datasetSubtitle = t('confirm-delete-dialog.cdr-summary.subtitle', {\n    count: normalizedDatasetNames.length,\n    datasets: normalizedDatasetNames.join(', '),\n    context: hasUnknownDatasetNames && normalizedDatasetNames.length ? 'unavailable' : '',\n  })\n\n  return (\n    <Flex direction=\"column\" gap={4}>\n      <Card padding={3} radius={2} tone=\"caution\" flex=\"none\">\n        <Flex>\n          <Text aria-hidden=\"true\" size={1}>\n            <WarningOutlineIcon />\n          </Text>\n          <Box flex={1} marginLeft={3}>\n            <Text size={1}>\n              <Translate\n                i18nKey=\"confirm-delete-dialog.referring-document-count.text\"\n                components={{DocumentTitle: () => documentTitle}}\n                t={t}\n                values={{count: totalCount}}\n              />\n            </Text>\n          </Box>\n        </Flex>\n      </Card>\n      <Box flex=\"none\">\n        <Text size={1}>\n          <Translate\n            i18nKey=\"confirm-delete-dialog.referring-documents-descriptor.text\"\n            t={t}\n            context={action}\n            components={{DocumentTitle: () => documentTitle}}\n          />\n        </Text>\n      </Box>\n      <Card radius={2} shadow={1} flex=\"auto\" padding={2}>\n        <Flex direction=\"column\">\n          {internalReferences.totalCount > 0 && (\n            <Stack as=\"ul\" marginBottom={2} space={2} data-testid=\"internal-references\">\n              {internalReferences?.references.map((item) => (\n                <Box as=\"li\" key={item._id}>\n                  {renderPreviewItem(item)}\n                </Box>\n              ))}\n\n              {internalReferences.totalCount > internalReferences.references.length && (\n                <Box as=\"li\" padding={3}>\n                  <OtherReferenceCount {...internalReferences} />\n                </Box>\n              )}\n            </Stack>\n          )}\n\n          {crossDatasetReferences.totalCount > 0 && (\n            <CrossDatasetReferencesDetails\n              data-testid=\"cross-dataset-references\"\n              style={{\n                // only add the border if needed\n                borderTop:\n                  internalReferences.totalCount > 0\n                    ? '1px solid var(--card-shadow-outline-color)'\n                    : undefined,\n              }}\n            >\n              <CrossDatasetReferencesSummary>\n                <Card\n                  as=\"a\"\n                  marginTop={internalReferences.totalCount > 0 ? 2 : 0}\n                  radius={2}\n                  shadow={1}\n                  paddingY={1}\n                >\n                  <Flex align=\"center\" gap={3} paddingX={3} paddingY={1}>\n                    <Text size={1}>\n                      <DocumentsIcon />\n                    </Text>\n                    <Stack space={2}>\n                      <Text textOverflow=\"ellipsis\" size={1}>\n                        {t('confirm-delete-dialog.cdr-summary.title', {\n                          count: normalizedDatasetNames.length,\n                          documentCount: t('confirm-delete-dialog.cdr-summary.document-count', {\n                            count: crossDatasetReferences.totalCount,\n                          }),\n                        })}\n                      </Text>\n                      <Text title={datasetSubtitle} textOverflow=\"ellipsis\" size={1} muted>\n                        {datasetSubtitle}\n                      </Text>\n                    </Stack>\n                    <ChevronWrapper>\n                      <Text muted size={1}>\n                        <ChevronDownIcon />\n                      </Text>\n                    </ChevronWrapper>\n                  </Flex>\n                </Card>\n              </CrossDatasetReferencesSummary>\n\n              <Box overflow=\"auto\" paddingTop={2}>\n                <Table>\n                  <thead>\n                    <tr>\n                      <th>\n                        <Text muted size={1} style={{minWidth: '5rem'}} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.project-id.label')}\n                        </Text>\n                      </th>\n                      <th>\n                        <Text muted size={1} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.dataset.label')}\n                        </Text>\n                      </th>\n                      <th>\n                        <Text muted size={1} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.document-id.label')}\n                        </Text>\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {crossDatasetReferences.references\n                      .filter((reference): reference is Required<typeof reference> => {\n                        return 'projectId' in reference\n                      })\n                      .map(({projectId, datasetName, documentId}, index) => (\n                        // eslint-disable-next-line react/no-array-index-key\n                        <tr key={`${documentId}-${index}`}>\n                          <td>\n                            <Text size={1}>{projectId}</Text>\n                          </td>\n                          <td>\n                            <Text size={1}>{datasetName || 'unavailable'}</Text>\n                          </td>\n                          <td>\n                            <DocumentIdFlex align=\"center\" gap={2} justify=\"flex-end\">\n                              <Text textOverflow=\"ellipsis\" size={1}>\n                                {documentId || 'unavailable'}\n                              </Text>\n                              {documentId && (\n                                <CopyToClipboard\n                                  text={documentId}\n                                  // eslint-disable-next-line react/jsx-no-bind\n                                  onCopy={() => {\n                                    toast.push({\n                                      title: t(\n                                        'confirm-delete-dialog.cdr-table.id-copied-toast.title',\n                                      ),\n                                      status: 'success',\n                                    })\n                                  }}\n                                >\n                                  <Button\n                                    mode=\"bleed\"\n                                    icon={CopyIcon}\n                                    tooltipProps={{\n                                      content: t(\n                                        'confirm-delete-dialog.cdr-table.copy-id-button.tooltip',\n                                      ),\n                                    }}\n                                  />\n                                </CopyToClipboard>\n                              )}\n                            </DocumentIdFlex>\n                          </td>\n                        </tr>\n                      ))}\n                  </tbody>\n                </Table>\n\n                <OtherReferenceCount {...crossDatasetReferences} />\n              </Box>\n            </CrossDatasetReferencesDetails>\n          )}\n        </Flex>\n      </Card>\n      <Box flex=\"none\">\n        <Text size={1}>\n          <Translate\n            i18nKey=\"confirm-delete-dialog.referential-integrity-disclaimer.text\"\n            t={t}\n            context={action}\n            components={{DocumentTitle: () => documentTitle}}\n          />\n        </Text>\n      </Box>\n    </Flex>\n  )\n}\n","import {type ClientError, type SanityClient} from '@sanity/client'\nimport {useMemo} from 'react'\nimport {EMPTY, fromEvent, type Observable, of, timer} from 'rxjs'\nimport {\n  catchError,\n  distinctUntilChanged,\n  map,\n  shareReplay,\n  startWith,\n  switchMap,\n} from 'rxjs/operators'\nimport {\n  type AvailabilityResponse,\n  createHookFromObservableFactory,\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  type DocumentStore,\n  getDraftId,\n  getPublishedId,\n  useClient,\n  useDocumentStore,\n} from 'sanity'\n\n// this is used in place of `instanceof` so the matching can be more robust and\n// won't have any issues with dual packages etc\n// https://nodejs.org/api/packages.html#dual-package-hazard\nfunction isClientError(e: unknown): e is ClientError {\n  if (typeof e !== 'object') return false\n  if (!e) return false\n  return 'statusCode' in e && 'response' in e\n}\n\nconst POLL_INTERVAL = 5000\n\n// only fetches when the document is visible\nlet visiblePoll$: Observable<number>\nconst getVisiblePoll$ = () => {\n  if (!visiblePoll$) {\n    visiblePoll$ = fromEvent(document, 'visibilitychange').pipe(\n      // add empty emission to have this fire on creation\n      startWith(null),\n      map(() => document.visibilityState === 'visible'),\n      distinctUntilChanged(),\n      switchMap((visible) =>\n        visible\n          ? // using timer instead of interval since timer will emit on creation\n            timer(0, POLL_INTERVAL)\n          : EMPTY,\n      ),\n      shareReplay({refCount: true, bufferSize: 1}),\n    )\n  }\n  return visiblePoll$\n}\n\nexport type ReferringDocuments = {\n  isLoading: boolean\n  totalCount: number\n  projectIds: string[]\n  datasetNames: string[]\n  hasUnknownDatasetNames: boolean\n  internalReferences?: {\n    totalCount: number\n    references: Array<{_id: string; _type: string}>\n  }\n  crossDatasetReferences?: {\n    totalCount: number\n    references: Array<{\n      /**\n       * The project ID of the document that is currently referencing the subject\n       * document. Unlike `documentId` and `datasetName`, this should always be\n       * defined.\n       */\n      projectId: string\n      /**\n       * The ID of the document that is currently referencing the subject\n       * document. This will be omitted if there is no access to the current\n       * project and dataset pair (e.g. if no `sanity-project-token` were\n       * configured)\n       */\n      documentId?: string\n      /**\n       * The dataset name that is currently referencing the subject document.\n       * This will be omitted if there is no access to the current project and\n       * dataset pair (e.g. if no `sanity-project-token` were configured)\n       */\n      datasetName?: string\n    }>\n  }\n}\n\nfunction getDocumentExistence(\n  documentId: string,\n  {versionedClient}: {versionedClient: SanityClient},\n): Observable<string | undefined> {\n  const draftId = getDraftId(documentId)\n  const publishedId = getPublishedId(documentId)\n  const requestOptions = {\n    uri: versionedClient.getDataUrl('doc', `${draftId},${publishedId}`),\n    json: true,\n    query: {excludeContent: 'true'},\n    tag: 'use-referring-documents.document-existence',\n  }\n  return versionedClient.observable.request<AvailabilityResponse>(requestOptions).pipe(\n    map(({omitted}) => {\n      const nonExistant = omitted.filter((doc) => doc.reason === 'existence')\n      if (nonExistant.length === 2) {\n        // None of the documents exist\n        return undefined\n      }\n\n      if (nonExistant.length === 0) {\n        // Both exist, so use the published one\n        return publishedId\n      }\n\n      // If the draft does not exist, use the published ID, and vice versa\n      return nonExistant.some((doc) => doc.id === draftId) ? publishedId : draftId\n    }),\n  )\n}\n\n/**\n * fetches the cross-dataset references using the client observable.request\n * method (for that requests can be automatically cancelled)\n */\nfunction fetchCrossDatasetReferences(\n  documentId: string,\n  context: {versionedClient: SanityClient},\n): Observable<ReferringDocuments['crossDatasetReferences']> {\n  const {versionedClient} = context\n\n  return getVisiblePoll$().pipe(\n    switchMap(() => getDocumentExistence(documentId, context)),\n    switchMap((checkDocumentId) => {\n      if (!checkDocumentId) {\n        return of({totalCount: 0, references: []})\n      }\n\n      const currentDataset = versionedClient.config().dataset\n\n      return versionedClient.observable\n        .request({\n          url: `/data/references/${currentDataset}/documents/${checkDocumentId}/to?excludeInternalReferences=true&excludePaths=true`,\n          tag: 'use-referring-documents.external',\n        })\n        .pipe(\n          catchError((e) => {\n            // it's possible that referencing document doesn't exist yet so the\n            // API will return a 404. In those cases, we want to catch and return\n            // a response with no references\n            if (isClientError(e) && e.statusCode === 404) {\n              return of({totalCount: 0, references: []})\n            }\n\n            throw e\n          }),\n        )\n    }),\n  )\n}\n\nconst useInternalReferences = createHookFromObservableFactory(\n  ([documentId, documentStore]: [string, DocumentStore]) => {\n    const referencesClause = '*[references($documentId)][0...100]{_id,_type}'\n    const totalClause = 'count(*[references($documentId)])'\n    const fetchQuery = `{\"references\":${referencesClause},\"totalCount\":${totalClause}}`\n    const listenQuery = '*[references($documentId)]'\n\n    return documentStore.listenQuery(\n      {fetch: fetchQuery, listen: listenQuery},\n      {documentId},\n      {tag: 'use-referring-documents', transitions: ['appear', 'disappear'], throttleTime: 5000},\n    ) as Observable<ReferringDocuments['internalReferences']>\n  },\n)\n\nconst useCrossDatasetReferences = createHookFromObservableFactory(\n  ([documentId, versionedClient]: [string, SanityClient]) => {\n    // (documentId: string, versionedClient: SanityClient) => {\n    return getVisiblePoll$().pipe(\n      switchMap(() =>\n        fetchCrossDatasetReferences(documentId, {\n          versionedClient,\n        }),\n      ),\n    )\n  },\n)\n\nexport function useReferringDocuments(documentId: string): ReferringDocuments {\n  const versionedClient = useClient(DEFAULT_STUDIO_CLIENT_OPTIONS)\n\n  const documentStore = useDocumentStore()\n  const publishedId = getPublishedId(documentId)\n\n  const [internalReferences, isInternalReferencesLoading] = useInternalReferences(\n    useMemo(() => [publishedId, documentStore], [documentStore, publishedId]),\n  )\n\n  const [crossDatasetReferences, isCrossDatasetReferencesLoading] = useCrossDatasetReferences(\n    useMemo(() => [publishedId, versionedClient], [publishedId, versionedClient]),\n  )\n\n  const projectIds = useMemo(() => {\n    return Array.from(\n      new Set(\n        crossDatasetReferences?.references\n          .map((crossDatasetReference) => crossDatasetReference.projectId)\n          .filter(Boolean),\n      ),\n    ).sort()\n  }, [crossDatasetReferences?.references])\n\n  const datasetNames = useMemo(() => {\n    return Array.from(\n      new Set<string>(\n        crossDatasetReferences?.references\n          // .filter((name) => typeof name === 'string')\n          .map((crossDatasetReference) => crossDatasetReference?.datasetName || '')\n          .filter((datasetName) => Boolean(datasetName) && datasetName !== ''),\n      ),\n    ).sort()\n  }, [crossDatasetReferences?.references])\n\n  const hasUnknownDatasetNames = useMemo(() => {\n    return Boolean(\n      crossDatasetReferences?.references.some(\n        (crossDatasetReference) => typeof crossDatasetReference.datasetName !== 'string',\n      ),\n    )\n  }, [crossDatasetReferences?.references])\n\n  return {\n    totalCount: (internalReferences?.totalCount || 0) + (crossDatasetReferences?.totalCount || 0),\n    projectIds,\n    datasetNames,\n    hasUnknownDatasetNames,\n    internalReferences,\n    crossDatasetReferences,\n    isLoading: isInternalReferencesLoading || isCrossDatasetReferencesLoading,\n  }\n}\n","import {Box, Flex} from '@sanity/ui'\nimport {useId, useMemo} from 'react'\nimport {LoadingBlock, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Dialog} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {DocTitle} from '../DocTitle'\nimport {ConfirmDeleteDialogBody} from './ConfirmDeleteDialogBody'\nimport {useReferringDocuments} from './useReferringDocuments'\n\n/** @internal */\nexport const DialogBody = styled(Box)`\n  box-sizing: border-box;\n`\n\n/** @internal */\nexport const LoadingContainer = styled(Flex).attrs({\n  align: 'center',\n  direction: 'column',\n  justify: 'center',\n})`\n  height: 110px;\n`\n\n/** @internal */\nexport interface ConfirmDeleteDialogProps {\n  /**\n   * Incoming document ID used to find other referencing documents. This\n   * field respects draft IDs (e.g. if you pass in a published ID when one\n   * doesn't exist the document title may not show up).\n   */\n  id: string\n  /**\n   * The schema typename of the incoming document\n   */\n  type: string\n  /**\n   * The name of the action being done. (e.g. the `'unpublish'` action requires\n   * the same document deletion confirmation).\n   */\n  action?: 'delete' | 'unpublish'\n  onCancel: () => void\n  onConfirm: () => void\n}\n\n/**\n * A confirmation dialog used to prevent unwanted document deletes. Loads all\n * the referencing internal and cross-data references prior to showing the\n * delete button.\n *\n * @internal\n */\nexport function ConfirmDeleteDialog({\n  id,\n  type,\n  action = 'delete',\n  onCancel,\n  onConfirm,\n}: ConfirmDeleteDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const dialogId = `deletion-confirmation-${useId()}`\n  const {\n    internalReferences,\n    crossDatasetReferences,\n    isLoading,\n    totalCount,\n    projectIds,\n    datasetNames,\n    hasUnknownDatasetNames,\n  } = useReferringDocuments(id)\n  const documentTitle = <DocTitle document={useMemo(() => ({_id: id, _type: type}), [id, type])} />\n  const showConfirmButton = !isLoading\n\n  return (\n    <Dialog\n      width={1}\n      id={dialogId}\n      header={t('confirm-delete-dialog.header.text', {context: action})}\n      footer={{\n        cancelButton: {\n          onClick: onCancel,\n          text: t('confirm-delete-dialog.cancel-button.text'),\n        },\n        confirmButton: showConfirmButton\n          ? {\n              text:\n                totalCount > 0\n                  ? t('confirm-delete-dialog.confirm-anyway-button.text', {context: action})\n                  : t('confirm-delete-dialog.confirm-button.text', {context: action}),\n              onClick: onConfirm,\n            }\n          : undefined,\n      }}\n      onClose={onCancel}\n      onClickOutside={onCancel}\n    >\n      <DialogBody>\n        {crossDatasetReferences && internalReferences && !isLoading ? (\n          <ConfirmDeleteDialogBody\n            crossDatasetReferences={crossDatasetReferences}\n            internalReferences={internalReferences}\n            documentTitle={documentTitle}\n            isLoading={isLoading}\n            totalCount={totalCount}\n            action={action}\n            projectIds={projectIds}\n            datasetNames={datasetNames}\n            hasUnknownDatasetNames={hasUnknownDatasetNames}\n            onReferenceLinkClick={onCancel}\n          />\n        ) : (\n          <LoadingContainer data-testid=\"loading-container\">\n            <LoadingBlock showText title={t('confirm-delete-dialog.loading.text')} />\n          </LoadingContainer>\n        )}\n      </DialogBody>\n    </Dialog>\n  )\n}\n","import {Box, Text} from '@sanity/ui'\nimport {type ComponentProps, useCallback, useId, useState} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {Dialog, ErrorBoundary} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {ConfirmDeleteDialog, type ConfirmDeleteDialogProps} from './ConfirmDeleteDialog'\n\nexport type {ConfirmDeleteDialogProps}\n\ntype ArgType<T> = T extends (arg: infer U) => unknown ? U : never\ntype ErrorInfo = ArgType<ComponentProps<typeof ErrorBoundary>['onCatch']>\n\n/** @internal */\nfunction ConfirmDeleteDialogContainer(props: ConfirmDeleteDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const id = useId()\n  const [error, setError] = useState<ErrorInfo | null>(null)\n  const handleRetry = useCallback(() => setError(null), [])\n\n  return error ? (\n    <Dialog\n      id={`dialog-error-${id}`}\n      data-testid=\"confirm-delete-error-dialog\"\n      header={t('confirm-delete-dialog.error.title.text')}\n      footer={{\n        confirmButton: {\n          text: t('confirm-delete-dialog.error.retry-button.text'),\n          onClick: handleRetry,\n          tone: 'default',\n        },\n      }}\n      onClose={props.onCancel}\n    >\n      <Box padding={4}>\n        <Text size={1}>{t('confirm-delete-dialog.error.message.text')}</Text>\n      </Box>\n    </Dialog>\n  ) : (\n    <ErrorBoundary onCatch={setError}>\n      <ConfirmDeleteDialog {...props} />\n    </ErrorBoundary>\n  )\n}\n\nexport {ConfirmDeleteDialogContainer as ConfirmDeleteDialog}\n","import {type ReactElement, useEffect, useState} from 'react'\n\nexport function Delay({\n  children,\n  ms = 0,\n}: {\n  children?: ReactElement | (() => ReactElement)\n  ms?: number\n}): ReactElement {\n  const [ready, setReady] = useState(ms <= 0)\n\n  useEffect(() => {\n    if (ms <= 0) {\n      return undefined\n    }\n\n    const timeoutId = setTimeout(() => setReady(true), ms)\n\n    return () => {\n      clearTimeout(timeoutId)\n    }\n  }, [ms])\n\n  if (!ready || !children) {\n    return <></>\n  }\n\n  return typeof children === 'function' ? children() : children\n}\n","/**\n * @internal\n */\nexport const PANE_DEBUG = false\n\n/**\n * @internal\n */\nexport const PANE_COLLAPSED_WIDTH = 51\n\n/**\n * @internal\n */\nexport const PANE_DEFAULT_MIN_WIDTH = PANE_COLLAPSED_WIDTH * 4\n","import {Layer} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {styled} from 'styled-components'\n\nimport {usePaneLayout} from './usePaneLayout'\n\nconst Root = styled(Layer)`\n  position: relative;\n  width: 1px;\n  min-width: 1px;\n\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    width: 1px;\n    background-color: var(--card-border-color);\n  }\n\n  &:not([data-disabled]) {\n    cursor: ew-resize;\n    width: 9px;\n    min-width: 9px;\n    margin: 0 -4px;\n\n    &:before {\n      left: 4px;\n    }\n\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 9px;\n      bottom: 0;\n      background-color: var(--card-border-color);\n      opacity: 0;\n      transition: opacity 150ms;\n    }\n\n    &[data-dragging]:after,\n    &:hover:after {\n      opacity: 0.2;\n    }\n  }\n`\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneDivider({\n  disabled,\n  element,\n}: {\n  disabled?: boolean\n  element: HTMLElement | null\n}) {\n  const {resize} = usePaneLayout()\n  const [dragging, setDragging] = useState(false)\n\n  const handleMouseDown = useCallback(\n    (event: any) => {\n      if (!element) return\n\n      setDragging(true)\n\n      event.preventDefault()\n\n      const startX = event.pageX\n\n      resize('start', element, 0)\n\n      const handleMouseMove = (e: MouseEvent) => {\n        e.preventDefault()\n\n        const deltaX = e.pageX - startX\n\n        resize('move', element, deltaX)\n      }\n\n      const handleMouseUp = (e: MouseEvent) => {\n        e.preventDefault()\n\n        setDragging(false)\n\n        window.removeEventListener('mousemove', handleMouseMove)\n        window.removeEventListener('mouseup', handleMouseUp)\n\n        resize('end', element, 0)\n      }\n\n      window.addEventListener('mousemove', handleMouseMove)\n      window.addEventListener('mouseup', handleMouseUp)\n    },\n    [element, resize],\n  )\n\n  return (\n    <Root\n      data-disabled={disabled ? '' : undefined}\n      data-dragging={dragging ? '' : undefined}\n      onMouseDown={handleMouseDown}\n    />\n  )\n}\n","import {BoundaryElementProvider, Card, type CardProps, Code, Flex} from '@sanity/ui'\nimport {\n  type ForwardedRef,\n  forwardRef,\n  type HTMLProps,\n  type ReactNode,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {IsLastPaneProvider, LegacyLayerProvider} from 'sanity'\nimport {PaneContext} from 'sanity/_singletons'\nimport {styled} from 'styled-components'\n\nimport {PANE_COLLAPSED_WIDTH, PANE_DEBUG, PANE_DEFAULT_MIN_WIDTH} from './constants'\nimport {PaneDivider} from './PaneDivider'\nimport {usePaneLayout} from './usePaneLayout'\n\ninterface PaneProps {\n  children?: ReactNode\n  currentMinWidth?: number\n  currentMaxWidth?: number\n  flex?: number\n  id: string\n  minWidth?: number\n  maxWidth?: number\n  selected?: boolean\n}\n\nconst Root = styled(Card)`\n  outline: none;\n\n  // NOTE: This will render a border to the right side of each pane\n  // without taking up physical space.\n  box-shadow: 1px 0 0 var(--card-border-color);\n`\n\n/**\n * @hidden\n * @internal\n */\n// eslint-disable-next-line complexity\nexport const Pane = forwardRef(function Pane(\n  props: PaneProps &\n    Omit<CardProps, 'as' | 'overflow'> &\n    Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'hidden' | 'id' | 'style'>,\n  forwardedRef: ForwardedRef<HTMLDivElement>,\n) {\n  const {\n    children,\n    currentMinWidth: currentMinWidthProp,\n    currentMaxWidth: currentMaxWidthProp,\n    flex: flexProp = 1,\n    id,\n    minWidth: minWidthProp,\n    maxWidth: maxWidthProp,\n    selected = false,\n    ...restProps\n  } = props\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const {\n    collapse,\n    collapsed: layoutCollapsed,\n    expand,\n    expandedElement,\n    mount,\n    panes,\n  } = usePaneLayout()\n  const pane = panes.find((p) => p.element === rootElement)\n  const paneIndex = pane && panes.indexOf(pane)\n  const nextPane = typeof paneIndex === 'number' ? panes[paneIndex + 1] : undefined\n  const isLast = paneIndex === panes.length - 1\n  const expanded = expandedElement === rootElement\n  const collapsed = layoutCollapsed ? false : pane?.collapsed || false\n  const nextCollapsed = nextPane?.collapsed || false\n  const ref = useRef<HTMLDivElement | null>(null)\n  const flex = pane?.flex ?? flexProp\n  const currentMinWidth = pane?.currentMinWidth ?? currentMinWidthProp\n  const currentMaxWidth = pane?.currentMaxWidth ?? currentMaxWidthProp\n\n  // Forward ref to parent\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(forwardedRef, () => ref.current)\n\n  const setRef = useCallback((refValue: HTMLDivElement | null) => {\n    setRootElement(refValue)\n    ref.current = refValue\n  }, [])\n\n  useEffect(() => {\n    if (!rootElement) return undefined\n    return mount(rootElement, {\n      currentMinWidth: currentMinWidthProp,\n      currentMaxWidth: currentMaxWidthProp,\n      flex: flexProp,\n      id,\n      minWidth: minWidthProp,\n      maxWidth: maxWidthProp,\n    })\n  }, [\n    currentMinWidthProp,\n    currentMaxWidthProp,\n    flexProp,\n    id,\n    minWidthProp,\n    maxWidthProp,\n    mount,\n    rootElement,\n  ])\n\n  const handleCollapse = useCallback(() => {\n    if (!rootElement) return\n    collapse(rootElement)\n  }, [collapse, rootElement])\n\n  const handleExpand = useCallback(() => {\n    if (!rootElement) return\n    expand(rootElement)\n  }, [expand, rootElement])\n\n  const contextValue = useMemo(\n    () => ({\n      collapse: handleCollapse,\n      collapsed: layoutCollapsed ? false : collapsed,\n      expand: handleExpand,\n      index: paneIndex,\n      isLast,\n      rootElement,\n    }),\n    [collapsed, handleCollapse, handleExpand, isLast, layoutCollapsed, paneIndex, rootElement],\n  )\n\n  const minWidth = useMemo(() => {\n    if (layoutCollapsed) {\n      return undefined\n    }\n\n    if (collapsed) return PANE_COLLAPSED_WIDTH\n\n    if (currentMinWidth === 0) {\n      return minWidthProp || PANE_DEFAULT_MIN_WIDTH\n    }\n\n    if (isLast) {\n      return minWidthProp || PANE_DEFAULT_MIN_WIDTH\n    }\n\n    return currentMinWidth || minWidthProp || PANE_DEFAULT_MIN_WIDTH\n  }, [collapsed, currentMinWidth, isLast, layoutCollapsed, minWidthProp])\n\n  const maxWidth = useMemo(() => {\n    if (collapsed) return PANE_COLLAPSED_WIDTH\n\n    if (layoutCollapsed && isLast) {\n      return undefined\n    }\n\n    if (isLast) {\n      if (maxWidthProp) {\n        return currentMaxWidth ?? maxWidthProp\n      }\n\n      return undefined\n    }\n\n    return currentMaxWidth ?? maxWidthProp\n  }, [collapsed, currentMaxWidth, isLast, layoutCollapsed, maxWidthProp])\n\n  const hidden = layoutCollapsed && !isLast\n\n  const divider = useMemo(\n    () =>\n      !isLast &&\n      !layoutCollapsed && (\n        <LegacyLayerProvider zOffset=\"paneResizer\">\n          <PaneDivider disabled={collapsed || nextCollapsed} element={rootElement} />\n        </LegacyLayerProvider>\n      ),\n    [collapsed, isLast, layoutCollapsed, nextCollapsed, rootElement],\n  )\n\n  const style = useMemo(\n    () => ({\n      flex,\n      minWidth,\n      maxWidth: maxWidth === Infinity ? undefined : maxWidth,\n    }),\n    [flex, minWidth, maxWidth],\n  )\n\n  return (\n    <>\n      <LegacyLayerProvider zOffset=\"pane\">\n        <PaneContext.Provider value={contextValue}>\n          <IsLastPaneProvider isLastPane={isLast}>\n            <Root\n              data-testid=\"pane\"\n              data-ui=\"Pane\"\n              tone=\"inherit\"\n              hidden={hidden}\n              id={id}\n              overflow={layoutCollapsed ? undefined : 'hidden'}\n              {...restProps}\n              data-pane-collapsed={collapsed ? '' : undefined}\n              data-pane-index={paneIndex}\n              data-pane-selected={selected ? '' : undefined}\n              ref={setRef}\n              style={style}\n            >\n              {PANE_DEBUG && (\n                <Card padding={4} tone={expanded ? 'primary' : 'caution'}>\n                  <Code size={1}>\n                    {[\n                      `#${paneIndex}`,\n                      `collapsed=${collapsed}`,\n                      `currentMinWidth=${currentMinWidth}`,\n                      `currentMaxWidth=${currentMaxWidth}`,\n                      `flex=${flex}`,\n                      `minWidth=${minWidth}`,\n                      `maxWidth=${maxWidth}`,\n                    ].join('\\n')}\n                  </Code>\n                </Card>\n              )}\n\n              <BoundaryElementProvider element={rootElement}>\n                {!hidden && (\n                  <Flex direction=\"column\" height=\"fill\">\n                    {children}\n                  </Flex>\n                )}\n              </BoundaryElementProvider>\n            </Root>\n          </IsLastPaneProvider>\n        </PaneContext.Provider>\n      </LegacyLayerProvider>\n\n      {divider}\n    </>\n  )\n})\n","import {Card} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Card)`\n  position: relative;\n  outline: none;\n`\n\nRoot.displayName = 'PaneContent__root'\n","import {useContext} from 'react'\nimport {PaneContext} from 'sanity/_singletons'\n\nimport {type PaneContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function usePane(): PaneContextValue {\n  const pane = useContext(PaneContext)\n\n  if (!pane) {\n    throw new Error('Pane: missing context value')\n  }\n\n  return pane\n}\n","import {type BoxOverflow} from '@sanity/ui'\nimport {type ElementType, type ForwardedRef, forwardRef, type HTMLProps} from 'react'\n\nimport {Root} from './PaneContent.styles'\nimport {usePane} from './usePane'\nimport {usePaneLayout} from './usePaneLayout'\n\ninterface PaneContentProps {\n  as?: ElementType | keyof JSX.IntrinsicElements\n  overflow?: BoxOverflow\n  padding?: number | number[]\n}\n\n/**\n * @hidden\n * @internal\n */\nexport const PaneContent = forwardRef(function PaneContent(\n  props: PaneContentProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref'>,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {as, children, overflow, padding, ...restProps} = props\n  const {collapsed} = usePane()\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n\n  return (\n    <Root\n      data-testid=\"pane-content\"\n      forwardedAs={as}\n      {...restProps}\n      flex={1}\n      hidden={collapsed}\n      overflow={layoutCollapsed ? undefined : overflow}\n      padding={padding}\n      ref={ref}\n      tone=\"inherit\"\n    >\n      {children}\n    </Root>\n  )\n})\n","import {CheckmarkIcon} from '@sanity/icons'\nimport {MenuDivider, Text} from '@sanity/ui'\nimport {type MouseEvent, useCallback} from 'react'\nimport {TooltipOfDisabled, useGetI18nText, useI18nText} from 'sanity'\nimport {useIntentLink} from 'sanity/router'\n\nimport {MenuGroup, MenuItem, type PopoverProps} from '../../../ui-components'\nimport {type Intent} from '../../structureBuilder'\nimport {type _PaneMenuItem, type _PaneMenuNode} from './types'\n\nconst MENU_GROUP_POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'left-start',\n  portal: true,\n}\n\nexport function PaneMenuButtonItem(props: {\n  disabled?: boolean\n  isAfterGroup: boolean\n  node: _PaneMenuNode\n}) {\n  const {disabled, isAfterGroup, node} = props\n  const getI18nText = useGetI18nText('i18n' in node ? node : undefined)\n\n  if (node.type === 'divider') {\n    return <MenuDivider />\n  }\n\n  const {title} = getI18nText(node)\n\n  if (node.type === 'group') {\n    if (node.children.length === 0) {\n      return null\n    }\n\n    if (node.expanded) {\n      return (\n        <>\n          {isAfterGroup && <MenuDivider />}\n          {node.children.map((child, childIndex) => (\n            <PaneMenuButtonItem\n              disabled={disabled || Boolean(node.disabled)}\n              isAfterGroup={node.children[childIndex - 1]?.type === 'group'}\n              key={child.key}\n              node={child}\n            />\n          ))}\n        </>\n      )\n    }\n\n    return (\n      <>\n        {isAfterGroup && <MenuDivider />}\n        <MenuGroup\n          disabled={disabled}\n          icon={node.icon}\n          popover={MENU_GROUP_POPOVER_PROPS}\n          text={title}\n        >\n          {node.children.map((child, childIndex) => (\n            <PaneMenuButtonItem\n              disabled={disabled || Boolean(node.disabled)}\n              isAfterGroup={node.children[childIndex - 1]?.type === 'group'}\n              key={child.key}\n              node={child}\n            />\n          ))}\n        </MenuGroup>\n      </>\n    )\n  }\n\n  return (\n    <>\n      {isAfterGroup && <MenuDivider />}\n      <PaneContextMenuItemResolver disabled={disabled} node={node} />\n    </>\n  )\n}\n\nfunction PaneContextMenuItemResolver(props: {disabled?: boolean; node: _PaneMenuItem}) {\n  const {node} = props\n\n  if (node.intent) {\n    return <PaneContextIntentMenuItem {...props} intent={node.intent} />\n  }\n\n  return <PaneContextMenuItem {...props} />\n}\n\nfunction PaneContextMenuItem(props: {disabled?: boolean; node: _PaneMenuItem}) {\n  const {disabled, node} = props\n  const tooltipContent = typeof node.disabled === 'object' && (\n    <Text size={1}>{node.disabled.reason}</Text>\n  )\n  const {title} = useI18nText(node)\n\n  return (\n    <TooltipOfDisabled content={tooltipContent} placement=\"left\">\n      <MenuItem\n        disabled={disabled || Boolean(node.disabled)}\n        hotkeys={node.hotkey?.split('+')}\n        icon={node.icon}\n        iconRight={node.iconRight || (node.selected && CheckmarkIcon)}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClick={node.onAction}\n        pressed={node.selected}\n        text={title}\n        tone={node.tone}\n      />\n    </TooltipOfDisabled>\n  )\n}\n\nfunction PaneContextIntentMenuItem(props: {\n  disabled?: boolean\n  intent: Intent\n  node: _PaneMenuItem\n}) {\n  const {disabled, intent, node} = props\n  const tooltipContent = typeof node.disabled === 'object' && (\n    <Text size={1}>{node.disabled.reason}</Text>\n  )\n  const intentLink = useIntentLink({intent: intent.type, params: intent.params})\n\n  const handleClick = useCallback(\n    (event: MouseEvent<HTMLDivElement>) => {\n      intentLink.onClick(event)\n      node.onAction()\n    },\n    [intentLink, node],\n  )\n\n  const {title} = useI18nText(node)\n\n  return (\n    <TooltipOfDisabled content={tooltipContent} placement=\"left\">\n      <MenuItem\n        as=\"a\"\n        disabled={disabled || Boolean(node.disabled)}\n        hotkeys={node.hotkey?.split('+')}\n        href={intentLink.href}\n        icon={node.icon}\n        iconRight={node.selected ? CheckmarkIcon : undefined}\n        onClick={handleClick}\n        pressed={node.selected}\n        text={title}\n        tone={node.tone}\n      />\n    </TooltipOfDisabled>\n  )\n}\n","import {Menu, MenuDivider} from '@sanity/ui'\nimport {type ReactNode, useId} from 'react'\nimport {ContextMenuButton} from 'sanity'\n\nimport {MenuButton, type PopoverProps} from '../../../ui-components'\nimport {PaneMenuButtonItem} from './PaneMenuButtonItem'\nimport {type _PaneMenuItem, type _PaneMenuNode} from './types'\n\ninterface PaneContextMenuButtonProps {\n  nodes: _PaneMenuNode[]\n  actionsNodes?: ReactNode\n}\n\nconst CONTEXT_MENU_POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'bottom',\n  portal: true,\n}\n\nfunction nodesHasTone(nodes: _PaneMenuNode[], tone: NonNullable<_PaneMenuItem['tone']>): boolean {\n  return nodes.some((node) => {\n    return (\n      (node.type === 'item' && node.tone === tone) ||\n      (node.type === 'group' && nodesHasTone(node.children, tone))\n    )\n  })\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneContextMenuButton(props: PaneContextMenuButtonProps) {\n  const {nodes, actionsNodes} = props\n  const id = useId()\n\n  const hasCritical = nodesHasTone(nodes, 'critical')\n  const hasCaution = nodesHasTone(nodes, 'caution')\n\n  return (\n    <MenuButton\n      button={\n        <ContextMenuButton\n          // eslint-disable-next-line no-nested-ternary\n          tone={hasCritical ? 'critical' : hasCaution ? 'caution' : undefined}\n          data-testid=\"pane-context-menu-button\"\n        />\n      }\n      id={id}\n      menu={\n        <Menu>\n          {actionsNodes && (\n            <>\n              {actionsNodes}\n              <MenuDivider />\n            </>\n          )}\n          {nodes.map((node, nodeIndex) => {\n            const isAfterGroup = nodes[nodeIndex - 1]?.type === 'group'\n            return <PaneMenuButtonItem isAfterGroup={isAfterGroup} key={node.key} node={node} />\n          })}\n        </Menu>\n      }\n      popover={CONTEXT_MENU_POPOVER_PROPS}\n    />\n  )\n}\n","import {Card, Layer} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Layer)`\n  position: sticky;\n  bottom: 0;\n\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: -1px;\n    border-bottom: 1px solid var(--card-border-color);\n  }\n`\n\nexport const RootCard = styled(Card)`\n  padding-bottom: env(safe-area-inset-bottom);\n`\n","import {Box} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type ReactNode} from 'react'\nimport {LegacyLayerProvider} from 'sanity'\n\nimport {Root, RootCard} from './PaneFooter.styles'\nimport {usePane} from './usePane'\n\ninterface PaneFooterProps {\n  children?: ReactNode\n  padding?: number | number[]\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport const PaneFooter = forwardRef(function PaneFooter(\n  props: PaneFooterProps,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {children, padding} = props\n  const {collapsed} = usePane()\n\n  return (\n    <LegacyLayerProvider zOffset=\"paneFooter\">\n      <Root data-testid=\"pane-footer\" hidden={collapsed} ref={ref}>\n        <RootCard tone=\"inherit\">\n          <Box padding={padding}>{children}</Box>\n        </RootCard>\n      </Root>\n    </LegacyLayerProvider>\n  )\n})\n","import {Box, Card, Flex, Layer, rgba, Text, TextSkeleton, type Theme} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\ninterface RootProps {\n  $border?: boolean\n}\n\nexport const Root = styled(Layer)<RootProps>(({$border}) => {\n  return css`\n    line-height: 0;\n    position: sticky;\n    top: 0;\n\n    &:not([data-collapsed]):after {\n      content: '';\n      display: block;\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: -1px;\n      border-bottom: 1px solid ${$border ? 'var(--card-border-color)' : 'transparent'};\n      opacity: 1;\n    }\n  `\n})\n\nexport const Layout = styled(Flex)`\n  transform-origin: calc(51px / 2);\n\n  [data-collapsed] > div > & {\n    transform: rotate(90deg);\n  }\n`\n\nexport const TitleCard = styled(Card)(({theme}: {theme: Theme}) => {\n  const {fg, bg} = theme.sanity.color.card.enabled\n\n  // Disable color updates on hover\n  return css`\n    background-color: ${bg};\n\n    [data-ui='Text'] {\n      color: ${fg};\n    }\n  `\n})\n\nexport const TitleTextSkeleton = styled(TextSkeleton)`\n  width: 66%;\n  max-width: 175px;\n`\n\nexport const TitleText = styled(Text)`\n  cursor: default;\n  outline: none;\n`\n\nexport const TabsBox = styled(Box)(({theme}: {theme: Theme}) => {\n  const {color, space} = theme.sanity\n\n  return css`\n    overflow: hidden;\n    overflow: clip;\n    position: relative;\n\n    & > div {\n      white-space: nowrap;\n      overflow: auto;\n      /* Hide scrollbars */\n      scrollbar-width: none;\n      &::-webkit-scrollbar {\n        width: 0;\n        height: 0;\n      }\n    }\n\n    /* right padding */\n    & > div:after {\n      content: '';\n      display: inline-block;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      width: ${space[3]}px;\n      height: 1px;\n    }\n\n    /* Gradient that makes it look like tabs disappear into nothing (looks nicer) */\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      background: linear-gradient(to right, ${rgba(color.base.bg, 0)}, var(--card-bg-color));\n      width: ${space[3]}px;\n      pointer-events: none;\n    }\n  `\n})\n","import {Box, Card, Flex, LayerProvider, useElementRect} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type ReactNode, useCallback, useMemo} from 'react'\nimport {LegacyLayerProvider} from 'sanity'\n\nimport {Layout, Root, TabsBox, TitleCard, TitleText, TitleTextSkeleton} from './PaneHeader.styles'\nimport {usePane} from './usePane'\n\n/**\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport interface PaneHeaderProps {\n  actions?: ReactNode\n  backButton?: ReactNode\n  border?: boolean\n  contentAfter?: ReactNode\n  loading?: boolean\n  subActions?: ReactNode\n  tabIndex?: number\n  tabs?: ReactNode\n  title: ReactNode\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport const PaneHeader = forwardRef(function PaneHeader(\n  props: PaneHeaderProps,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {actions, backButton, border, contentAfter, loading, subActions, tabs, tabIndex, title} =\n    props\n  const {collapse, collapsed, expand, rootElement: paneElement} = usePane()\n  const paneRect = useElementRect(paneElement || null)\n\n  const layoutStyle = useMemo(\n    () => ({\n      width: collapsed ? paneRect?.height || window.innerHeight : undefined,\n    }),\n    [collapsed, paneRect],\n  )\n\n  const handleTitleClick = useCallback(() => {\n    if (collapsed) return\n    collapse()\n  }, [collapse, collapsed])\n\n  const handleLayoutClick = useCallback(() => {\n    if (!collapsed) return\n    expand()\n  }, [collapsed, expand])\n\n  const showTabsOrSubActions = Boolean(!collapsed && (tabs || subActions))\n\n  return (\n    <LayerProvider zOffset={100}>\n      <Root\n        $border={border}\n        data-collapsed={collapsed ? '' : undefined}\n        data-testid=\"pane-header\"\n        ref={ref}\n      >\n        <LegacyLayerProvider zOffset=\"paneHeader\">\n          <Card data-collapsed={collapsed ? '' : undefined} tone=\"inherit\">\n            <Layout\n              gap={1}\n              onClick={handleLayoutClick}\n              padding={3}\n              paddingBottom={collapsed ? 3 : 2}\n              sizing=\"border\"\n              style={layoutStyle}\n            >\n              {backButton && <Box flex=\"none\">{backButton}</Box>}\n\n              <TitleCard\n                __unstable_focusRing\n                flex={1}\n                forwardedAs=\"button\"\n                onClick={handleTitleClick}\n                paddingLeft={backButton ? 1 : 2}\n                padding={2}\n                tabIndex={tabIndex}\n              >\n                {loading && <TitleTextSkeleton animated radius={1} size={1} />}\n                {!loading && (\n                  <TitleText size={1} textOverflow=\"ellipsis\" weight=\"semibold\">\n                    {title}\n                  </TitleText>\n                )}\n              </TitleCard>\n\n              {actions && (\n                <Flex align=\"center\" hidden={collapsed}>\n                  <LegacyLayerProvider zOffset=\"paneHeader\">{actions}</LegacyLayerProvider>\n                </Flex>\n              )}\n            </Layout>\n\n            {showTabsOrSubActions && (\n              <Flex\n                align=\"center\"\n                hidden={collapsed}\n                overflow=\"auto\"\n                paddingBottom={3}\n                paddingX={3}\n              >\n                <TabsBox flex={1} marginRight={subActions ? 3 : 0}>\n                  {tabs}\n                </TabsBox>\n\n                {subActions && subActions}\n              </Flex>\n            )}\n\n            {!collapsed && contentAfter && contentAfter}\n          </Card>\n        </LegacyLayerProvider>\n      </Root>\n    </LayerProvider>\n  )\n})\n","import {UnknownIcon} from '@sanity/icons'\nimport {Menu} from '@sanity/ui'\nimport {type MouseEvent, useCallback, useId} from 'react'\nimport {StatusButton, useI18nText, useTranslation} from 'sanity'\nimport {useIntentLink} from 'sanity/router'\n\nimport {Button, MenuButton} from '../../../ui-components'\nimport {type Intent} from '../../structureBuilder'\nimport {PaneMenuButtonItem} from './PaneMenuButtonItem'\nimport {type _PaneMenuGroup, type _PaneMenuItem} from './types'\n\nfunction getDisabledReason(node: _PaneMenuItem) {\n  if (!node.disabled) {\n    return {disabledReason: undefined, ariaLabel: undefined, isDisabled: false}\n  }\n\n  /**\n   * This component supports receiving a `reason: string | react.ReactNode`.\n   * We are casting it as string, to avoid the ts error, as content will be rendered into the tooltip which only accepts string, but it won't crash if it's a ReactNode.\n   * For the aria label, we want to check if it's actually a string, to avoid generating an aria-label with the value `[object Object]`.\n   */\n  const disabledReason =\n    typeof node.disabled === 'object' ? (node.disabled.reason as string) : undefined\n  const ariaLabel =\n    typeof node.disabled === 'object' && typeof node.disabled?.reason === 'string'\n      ? node.disabled.reason\n      : 'This is disabled'\n\n  return {disabledReason, ariaLabel, isDisabled: Boolean(node.disabled)}\n}\nexport interface PaneHeaderActionButtonProps {\n  node: _PaneMenuItem | _PaneMenuGroup\n}\n\nexport function PaneHeaderActionButton(props: PaneHeaderActionButtonProps) {\n  const {node} = props\n\n  if (node.type === 'item') {\n    return <PaneHeaderMenuItemActionButton node={node} />\n  }\n\n  if (node.type === 'group') {\n    return <PaneHeaderMenuGroupActionButton node={node} />\n  }\n\n  console.warn('unknown menu node (expected `type: \"item\" | \"group\"`):', node)\n\n  return null\n}\n\nexport interface PaneHeaderMenuItemActionButtonProps {\n  node: _PaneMenuItem\n}\n\nexport function PaneHeaderMenuItemActionButton(props: PaneHeaderMenuItemActionButtonProps) {\n  const {node} = props\n  const {title} = useI18nText(node)\n  const {t} = useTranslation()\n\n  if (node.intent) {\n    return <PaneHeaderActionIntentButton {...props} intent={node.intent} />\n  }\n\n  const {disabledReason, ariaLabel, isDisabled} = getDisabledReason(node)\n\n  return (\n    <StatusButton\n      disabled={isDisabled}\n      icon={node.icon}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClick={node.onAction}\n      selected={node.selected}\n      tone={node.tone}\n      aria-label={ariaLabel || title || t('status-button.aria-label')}\n      tooltipProps={{\n        hotkeys: !isDisabled && node.hotkey ? node.hotkey.split('+') : undefined,\n        content: isDisabled ? disabledReason : title,\n      }}\n    />\n  )\n}\n\nfunction PaneHeaderActionIntentButton(props: {intent: Intent; node: _PaneMenuItem}) {\n  const {intent, node} = props\n  const intentLink = useIntentLink({intent: intent.type, params: intent.params})\n  const {t} = useTranslation()\n\n  const handleClick = useCallback(\n    (event: MouseEvent<HTMLButtonElement>) => {\n      intentLink.onClick(event)\n      node.onAction()\n    },\n    [intentLink, node],\n  )\n\n  const {disabledReason, ariaLabel, isDisabled} = getDisabledReason(node)\n\n  return (\n    <StatusButton\n      forwardedAs=\"a\"\n      disabled={isDisabled}\n      href={intentLink.href}\n      icon={node.icon}\n      onClick={handleClick}\n      selected={node.selected}\n      tone={node.tone}\n      aria-label={ariaLabel || node.title || t('status-button.aria-label')}\n      tooltipProps={{\n        hotkeys: !isDisabled && node.hotkey ? node.hotkey.split('+') : undefined,\n        content: isDisabled ? disabledReason : node.title,\n        placement: 'bottom',\n        portal: true,\n      }}\n    />\n  )\n}\n\nexport interface PaneHeaderMenuGroupActionButtonProps {\n  node: _PaneMenuGroup\n}\n\nfunction PaneHeaderMenuGroupActionButton(props: PaneHeaderMenuGroupActionButtonProps) {\n  const {node} = props\n  const {title} = useI18nText(node)\n\n  return (\n    <MenuButton\n      button={\n        <Button\n          disabled={!!node.disabled}\n          icon={node.icon ?? UnknownIcon}\n          label={title}\n          mode=\"bleed\"\n          tooltipProps={{content: node.title, portal: true}}\n        />\n      }\n      id={useId()}\n      menu={\n        <Menu>\n          {node.children.map((child, idx) => {\n            return (\n              <PaneMenuButtonItem\n                disabled={Boolean(node.disabled)}\n                isAfterGroup={node.children[idx - 1]?.type === 'group'}\n                key={child.key}\n                node={child}\n              />\n            )\n          })}\n        </Menu>\n      }\n    />\n  )\n}\n","import {Card} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Card)`\n  transition: opacity 200ms;\n  position: relative;\n  z-index: 1;\n  padding-left: env(safe-area-inset-left);\n  padding-right: env(safe-area-inset-right);\n  opacity: 0;\n\n  &:not([hidden]) {\n    display: flex;\n  }\n\n  &:not([data-collapsed]) {\n    overflow: auto;\n  }\n\n  &[data-mounted] {\n    opacity: 1;\n  }\n\n  &[data-resizing] {\n    pointer-events: none;\n  }\n`\n","import {PANE_DEFAULT_MIN_WIDTH} from '../constants'\nimport {type PaneConfigOpts, type PaneResizeCache} from '../types'\n\nexport function _calcPaneResize(\n  cache: PaneResizeCache,\n  left: PaneConfigOpts,\n  right: PaneConfigOpts,\n  deltaX: number,\n): {leftFlex: number; leftW: number; rightFlex: number; rightW: number} {\n  const sum = {\n    flex: cache.left.flex + cache.right.flex,\n    width: cache.left.width + cache.right.width,\n  }\n\n  const leftMinWidth = left.minWidth ?? PANE_DEFAULT_MIN_WIDTH\n  const rightMinWidth = right.minWidth ?? PANE_DEFAULT_MIN_WIDTH\n\n  const leftMaxWidth = Math.min(left.maxWidth || Infinity, sum.width - rightMinWidth)\n  const rightMaxWidth = Math.min(right.maxWidth || Infinity, sum.width - leftMinWidth)\n\n  // Get min. delta X\n  let minDeltaX = leftMinWidth - cache.left.width\n  const rightMinDeltaX = cache.right.width - rightMaxWidth\n  if (minDeltaX < rightMinDeltaX) {\n    minDeltaX = rightMinDeltaX\n  }\n\n  // Get max. delta X\n  let maxDeltaX = cache.right.width - rightMinWidth\n  const leftMaxDeltaX = leftMaxWidth - cache.left.width\n  if (maxDeltaX > leftMaxDeltaX) {\n    maxDeltaX = leftMaxDeltaX\n  }\n\n  const _deltaX = Math.min(Math.max(deltaX, minDeltaX), maxDeltaX)\n\n  const leftW = cache.left.width + _deltaX\n  const rightW = cache.right.width - _deltaX\n\n  const leftFlex = (leftW / sum.width) * sum.flex\n  const rightFlex = (rightW / sum.width) * sum.flex\n\n  return {leftFlex, leftW, rightFlex, rightW}\n}\n","/**\n * @internal\n */\nexport function _getDOMPath(rootElement: HTMLElement, el: HTMLElement): number[] {\n  const path: number[] = []\n\n  let e = el\n\n  while (e !== rootElement) {\n    const parentElement = e.parentElement\n\n    if (!parentElement) return path\n\n    const children = Array.from(parentElement.childNodes)\n    const index = children.indexOf(e)\n\n    path.unshift(index)\n\n    if (parentElement === rootElement) {\n      return path\n    }\n\n    e = parentElement\n  }\n\n  return path\n}\n","import {_getDOMPath} from './_getDOMPath'\n\nconst EMPTY_PATH: number[] = []\n\n/**\n * @internal\n */\nexport function _sortElements(rootElement: HTMLElement, elements: HTMLElement[]): void {\n  // Create a map containing the DOM path of each pane element.\n  // The DOM path is relative to the `rootElement`, and is used in the next step for sorting.\n  const map = new WeakMap<HTMLElement, number[]>()\n\n  for (const element of elements) {\n    map.set(element, _getDOMPath(rootElement, element))\n  }\n\n  const _sortByElementPath = (a: HTMLElement, b: HTMLElement) => {\n    const _a = map.get(a) || EMPTY_PATH\n    const _b = map.get(b) || EMPTY_PATH\n\n    const len = Math.max(_a.length, _b.length)\n\n    // Loop until there are different indexes\n    for (let i = 0; i < len; i += 1) {\n      const aIndex = _a[i] || -1\n      const bIndex = _b[i] || -1\n\n      if (aIndex !== bIndex) {\n        return aIndex - bIndex\n      }\n    }\n\n    return 0\n  }\n\n  elements.sort(_sortByElementPath)\n}\n","import {PANE_COLLAPSED_WIDTH, PANE_DEFAULT_MIN_WIDTH} from './constants'\nimport {_calcPaneResize, _sortElements} from './helpers'\nimport {\n  type PaneConfigOpts,\n  type PaneData,\n  type PaneResizeCache,\n  type PaneResizeData,\n} from './types'\n\nexport interface PaneLayoutState {\n  expandedElement: HTMLElement | null\n  panes: PaneData[]\n  resizing: boolean\n}\n\nexport type PaneLayoutStateObserver = (state: PaneLayoutState) => void\n\nexport interface PaneLayoutController {\n  collapse: (element: HTMLElement) => void\n  expand: (element: HTMLElement) => void\n  mount: (element: HTMLElement, options: PaneConfigOpts) => () => void\n  resize: (type: 'start' | 'move' | 'end', leftElement: HTMLElement, deltaX: number) => void\n  setRootElement: (nextRootElement: HTMLElement | null) => void\n  setRootWidth: (nextRootWidth: number) => void\n  subscribe: (observer: PaneLayoutStateObserver) => () => void\n}\n\nexport function createPaneLayoutController(): PaneLayoutController {\n  const observers: PaneLayoutStateObserver[] = []\n  const elements: HTMLElement[] = []\n  const optionsMap = new WeakMap<HTMLElement, PaneConfigOpts & {original: PaneConfigOpts}>()\n  const userCollapsedElementSet = new Set<HTMLElement>()\n  const cache: Partial<PaneResizeCache> = {}\n\n  // Mutable internal state\n  let rootElement: HTMLElement | null = null\n  let rootWidth = 0\n  let expandedElement: HTMLElement | null = null\n  let resizeDataMap = new Map<HTMLElement, PaneResizeData>()\n  let resizing = false\n\n  function collapse(element: HTMLElement) {\n    userCollapsedElementSet.add(element)\n\n    if (expandedElement === element) {\n      expandedElement = null\n    }\n\n    _notifyObservers()\n  }\n\n  function expand(element: HTMLElement) {\n    userCollapsedElementSet.delete(element)\n\n    expandedElement = element\n\n    _notifyObservers()\n  }\n\n  function mount(element: HTMLElement, options: PaneConfigOpts) {\n    optionsMap.set(element, {...options, original: options})\n\n    elements.push(element)\n\n    if (rootElement) {\n      _sortElements(rootElement, elements)\n    }\n\n    expand(element)\n\n    return () => {\n      const idx = elements.indexOf(element)\n\n      if (idx > -1) {\n        elements.splice(idx, 1)\n      }\n\n      optionsMap.delete(element)\n\n      _notifyObservers()\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  function resize(type: 'start' | 'move' | 'end', leftElement: HTMLElement, deltaX: number) {\n    const leftIndex = elements.indexOf(leftElement)\n    const leftOptions = optionsMap.get(leftElement)\n\n    if (!leftOptions) return\n\n    const rightElement = elements[leftIndex + 1]\n    const rightOptions = optionsMap.get(rightElement)\n\n    if (!rightOptions) return\n\n    if (type === 'start') {\n      resizing = true\n\n      cache.left = {\n        element: leftElement,\n        flex: leftOptions.flex || 1,\n        width: leftElement.offsetWidth,\n      }\n\n      cache.right = {\n        element: rightElement,\n        flex: rightOptions.flex || 1,\n        width: rightElement.offsetWidth,\n      }\n\n      _notifyObservers()\n    }\n\n    if (type === 'move' && cache.left && cache.right) {\n      resizeDataMap = new Map<HTMLElement, PaneResizeData>()\n\n      const {leftW, rightW, leftFlex, rightFlex} = _calcPaneResize(\n        cache as PaneResizeCache,\n        leftOptions,\n        rightOptions,\n        deltaX,\n      )\n\n      // update resize cache\n      resizeDataMap.set(leftElement, {flex: leftFlex, width: leftW})\n      resizeDataMap.set(rightElement, {flex: rightFlex, width: rightW})\n\n      _notifyObservers()\n    }\n\n    if (type === 'end') {\n      resizing = false\n\n      const leftResizeData = resizeDataMap.get(leftElement)\n      const rightResizeData = resizeDataMap.get(rightElement)\n\n      // Update left options\n      optionsMap.set(leftElement, {\n        ...leftOptions,\n        currentMinWidth: 0,\n        currentMaxWidth: leftOptions.maxWidth ?? Infinity,\n        flex: leftResizeData?.flex ?? leftOptions.flex,\n      })\n\n      // Update right options\n      optionsMap.set(rightElement, {\n        ...rightOptions,\n        currentMinWidth: 0,\n        currentMaxWidth: leftOptions.maxWidth ?? Infinity,\n        flex: rightResizeData?.flex ?? rightOptions.flex,\n      })\n\n      // Reset resize data map\n      resizeDataMap = new Map()\n\n      // Reset cache\n      delete cache.left\n      delete cache.right\n\n      _notifyObservers()\n    }\n  }\n\n  function setRootElement(nextRootElement: HTMLElement | null) {\n    rootElement = nextRootElement\n  }\n\n  function setRootWidth(nextRootWidth: number) {\n    rootWidth = nextRootWidth\n    _notifyObservers()\n  }\n\n  function subscribe(observer: PaneLayoutStateObserver) {\n    observers.push(observer)\n\n    return () => {\n      const idx = observers.push(observer)\n\n      if (idx > -1) {\n        observers.splice(idx, 1)\n      }\n    }\n  }\n\n  return {collapse, expand, mount, resize, setRootElement, setRootWidth, subscribe}\n\n  // eslint-disable-next-line complexity\n  function _notifyObservers() {\n    if (!rootWidth) return\n\n    // Create a reversed array of pane elements, so we can loop over them backwards.\n    // Place the expanded element first (so it has the least chance of being collapsed).\n    const _elements: HTMLElement[] = []\n    for (const element of elements) {\n      if (element !== expandedElement) {\n        _elements.unshift(element)\n      }\n    }\n    if (expandedElement) {\n      _elements.unshift(expandedElement)\n    }\n\n    const dataMap = new WeakMap<HTMLElement, PaneData>()\n    const len = _elements.length\n    const lastElement = _elements[0]\n    const collapsedWidth = (len - 1) * PANE_COLLAPSED_WIDTH\n\n    let remaingWidth = rootWidth - collapsedWidth\n\n    for (const element of _elements) {\n      const options = optionsMap.get(element)\n\n      if (!options) {\n        continue\n      }\n\n      const minWidth = options.currentMinWidth || options.minWidth || PANE_DEFAULT_MIN_WIDTH\n      const isLast = element === lastElement\n\n      // A pane is collapsed if:\n      // - it’s explictly collapsed by the user\n      const userCollapsed = userCollapsedElementSet.has(element)\n      // - it’s minimum width is larger than the remaining width\n      const sizeCollapsed = minWidth > remaingWidth\n      // - if the element is not the last (expanded pane)\n      const collapsed = isLast ? false : userCollapsed || sizeCollapsed\n\n      const resizeData = resizeDataMap.get(element)\n\n      // Collect pane data\n      dataMap.set(element, {\n        element: element,\n        collapsed: collapsed,\n        currentMinWidth: resizeData?.width ?? options.currentMinWidth,\n        currentMaxWidth: resizeData?.width ?? options.currentMaxWidth,\n        flex: resizeData?.flex ?? options.flex ?? 1,\n      })\n\n      // Update remaining width\n      if (collapsed) {\n        remaingWidth -= PANE_COLLAPSED_WIDTH\n      } else {\n        remaingWidth -= minWidth - PANE_COLLAPSED_WIDTH\n      }\n    }\n\n    const panes: PaneData[] = []\n\n    for (const element of elements) {\n      const data = dataMap.get(element)\n\n      if (data) panes.push(data)\n    }\n\n    for (const observer of observers) {\n      observer({\n        expandedElement: expandedElement || elements[elements.length - 1] || null,\n        panes,\n        resizing,\n      })\n    }\n  }\n}\n","import {type CardProps, useElementRect} from '@sanity/ui'\nimport {type HTMLProps, useEffect, useMemo, useState} from 'react'\nimport {PaneLayoutContext} from 'sanity/_singletons'\n\nimport {Root} from './PaneLayout.styles'\nimport {createPaneLayoutController, type PaneLayoutState} from './paneLayoutController'\nimport {type PaneLayoutContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport interface PaneLayoutProps {\n  minWidth?: number\n  onCollapse?: () => void\n  onExpand?: () => void\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneLayout(\n  props: PaneLayoutProps &\n    CardProps &\n    Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref' | 'wrap'>,\n) {\n  const {children, minWidth, onCollapse, onExpand, ...restProps} = props\n  const controller = useMemo(() => createPaneLayoutController(), [])\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const rootRect = useElementRect(rootElement)\n  const width = rootRect?.width || 0\n  const collapsed = width === undefined || !minWidth ? undefined : width < minWidth\n  const [state, setState] = useState<PaneLayoutState>({\n    expandedElement: null,\n    panes: [],\n    resizing: false,\n  })\n\n  // Set root element\n  useEffect(() => controller.setRootElement(rootElement), [controller, rootElement])\n\n  // Set root size\n  useEffect(() => controller.setRootWidth(width), [controller, width])\n\n  // Subscribe to state changes\n  useEffect(() => controller.subscribe(setState), [controller])\n\n  // Call the `onCollapse` and `onExpand` callbacks as the `collapsed` boolean changes\n  useEffect(() => {\n    if (collapsed === undefined) return\n    if (collapsed && onCollapse) onCollapse()\n    if (!collapsed && onExpand) onExpand()\n  }, [collapsed, onCollapse, onExpand])\n\n  // This is the context value that gives each pane the information they need\n  const paneLayout: PaneLayoutContextValue = useMemo(\n    () => ({\n      collapse: controller.collapse,\n      collapsed,\n      expand: controller.expand,\n      expandedElement: state.expandedElement,\n      mount: controller.mount,\n      panes: state.panes,\n      resize: controller.resize,\n      resizing: state.resizing,\n    }),\n    [collapsed, controller, state.expandedElement, state.panes, state.resizing],\n  )\n\n  return (\n    <PaneLayoutContext.Provider value={paneLayout}>\n      <Root\n        data-ui=\"PaneLayout\"\n        {...restProps}\n        data-collapsed={collapsed ? '' : undefined}\n        // The `data-resizing` attribute is used to improve cursor behavior\n        data-resizing={state.resizing ? '' : undefined}\n        // The `data-mounted` attribute is used to fade in the layout and prevent flash of\n        // non-collapsed panes\n        data-mounted={width ? '' : undefined}\n        ref={setRootElement}\n      >\n        {children}\n      </Root>\n    </PaneLayoutContext.Provider>\n  )\n}\n","/* eslint-disable camelcase */\n\nimport {negate} from 'lodash'\n\nimport {type _PaneMenuGroup, type _PaneMenuItem, type _PaneMenuNode} from './components/pane/types'\nimport {type DocumentFieldMenuActionNode, type PaneMenuItem, type PaneMenuItemGroup} from './types'\n\nexport function isMenuNodeButton(node: _PaneMenuNode): node is _PaneMenuItem | _PaneMenuGroup {\n  return (node.type === 'item' || node.type === 'group') && node.renderAsButton\n}\n\nexport const isNotMenuNodeButton = negate(isMenuNodeButton)\n\nexport function resolveMenuNodes(params: {\n  actionHandler: (item: PaneMenuItem) => void\n  fieldActions?: DocumentFieldMenuActionNode[]\n  menuItems: PaneMenuItem[]\n  menuItemGroups: PaneMenuItemGroup[]\n}): _PaneMenuNode[] {\n  const {fieldActions = [], menuItems, menuItemGroups} = params\n\n  const nodes: _PaneMenuNode[] = []\n\n  let keyOffset = 0\n\n  for (let i = 0; i < fieldActions.length; i += 1) {\n    const a = fieldActions[i]\n\n    nodes.push(mapFieldActionToPaneMenuNode(a, `${i}-${a.type}`))\n  }\n\n  keyOffset += nodes.length\n\n  const groups: _PaneMenuGroup[] = []\n\n  for (const itemGroup of menuItemGroups) {\n    const group = groups.find((g) => g.key === itemGroup.id)\n\n    if (!group) {\n      groups.push({\n        type: 'group',\n        key: itemGroup.id,\n\n        children: [],\n        expanded: true,\n        renderAsButton: false,\n        title: itemGroup.title,\n        i18n: itemGroup.i18n,\n      })\n    }\n  }\n\n  const ungroupedItems: _PaneMenuItem[] = []\n\n  for (let i = 0; i < menuItems.length; i += 1) {\n    const item = menuItems[i]\n\n    let group = item.group && groups.find((g) => g.key === item.group)\n\n    if (item.group && !group) {\n      group = {\n        type: 'group',\n        key: item.group,\n\n        expanded: true,\n        icon: item.icon,\n        title: item.group,\n        children: [],\n        renderAsButton: false,\n      }\n      groups.push(group)\n    }\n\n    if (group) {\n      group.children.push({\n        type: 'item',\n        key: `${keyOffset + i}-item`,\n\n        hotkey: item.shortcut,\n        icon: item.icon,\n        intent: item.intent,\n        onAction: () => params.actionHandler(item),\n        renderAsButton: item.showAsAction ?? false,\n        selected: item.selected,\n        title: item.title,\n        i18n: item.i18n,\n        tone: item.tone,\n      })\n    } else {\n      ungroupedItems.push({\n        type: 'item',\n        key: `${keyOffset + i}-item`,\n\n        hotkey: item.shortcut,\n        icon: item.icon,\n        intent: item.intent,\n        onAction: () => params.actionHandler(item),\n        renderAsButton: item.showAsAction ?? false,\n        selected: item.selected,\n        title: item.title,\n        i18n: item.i18n,\n        tone: item.tone,\n      })\n    }\n  }\n\n  return [...ungroupedItems, ...groups, ...nodes]\n}\n\nfunction mapFieldActionToPaneMenuNode(a: DocumentFieldMenuActionNode, key: string): _PaneMenuNode {\n  if (a.type === 'divider') {\n    return {\n      type: 'divider',\n      key,\n    }\n  }\n\n  if (a.type === 'group') {\n    return {\n      type: 'group',\n      key,\n\n      children: a.children.map((child, childIdx) =>\n        mapFieldActionToPaneMenuNode(child, `${key}-${childIdx}-${child.type}`),\n      ),\n      disabled: a.disabled,\n      expanded: a.expanded ?? true,\n      icon: a.icon,\n      title: a.title,\n      i18n: a.i18n,\n      renderAsButton: a.renderAsButton ?? false,\n    }\n  }\n\n  return {\n    type: 'item',\n    key,\n    intent: a.intent,\n    disabled: a.disabled,\n    icon: a.icon,\n    iconRight: a.iconRight,\n    onAction: a.onAction,\n    renderAsButton: a.renderAsButton ?? false,\n    selected: a.selected,\n    title: a.title,\n    i18n: a.i18n,\n    tone: a.tone,\n  }\n}\n","import {type ComponentProps, type ForwardedRef, forwardRef, type ReactNode, useMemo} from 'react'\nimport {IntentLink} from 'sanity/router'\n\nimport {Button, type ButtonProps} from '../../ui-components'\nimport {type PaneMenuItem} from '../types'\n\ntype RouterIntent = NonNullable<PaneMenuItem['intent']>\n\nexport const IntentButton = forwardRef(function IntentButton(\n  props: {\n    intent: RouterIntent\n  } & ButtonProps &\n    Omit<ComponentProps<typeof Button>, 'as' | 'href' | 'type'>,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {intent, ...restProps} = props\n\n  const Link = useMemo(\n    () =>\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      forwardRef(function Link(\n        linkProps: {children: ReactNode},\n        linkRef: ForwardedRef<HTMLAnchorElement>,\n      ) {\n        return (\n          <IntentLink {...linkProps} intent={intent.type} params={intent.params} ref={linkRef} />\n        )\n      }),\n    [intent],\n  )\n\n  return props.disabled ? (\n    <Button {...restProps} as=\"a\" role=\"link\" aria-disabled=\"true\" />\n  ) : (\n    <Button {...restProps} as={Link} data-as=\"a\" ref={ref as ForwardedRef<HTMLButtonElement>} />\n  )\n})\n","import {type ComponentProps, type ReactNode} from 'react'\nimport {InsufficientPermissionsMessage, useCurrentUser, useTranslation} from 'sanity'\n\nimport {Tooltip} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\n\ninterface InsufficientPermissionsMessageTooltipProps {\n  reveal: boolean\n  /**\n   * delegates to `InsufficientPermissionsMessage`'s `context` prop\n   * @see InsufficientPermissionsMessage\n   */\n  context: ComponentProps<typeof InsufficientPermissionsMessage>['context']\n  loading: boolean\n  children: ReactNode\n}\n\nexport function InsufficientPermissionsMessageTooltip({\n  reveal,\n  context,\n  loading,\n  children,\n}: InsufficientPermissionsMessageTooltipProps) {\n  const currentUser = useCurrentUser()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (!reveal) {\n    return <>{children}</>\n  }\n\n  return (\n    <Tooltip\n      content={\n        loading ? (\n          t('insufficient-permissions-message-tooltip.loading-text')\n        ) : (\n          <InsufficientPermissionsMessage context={context} currentUser={currentUser} />\n        )\n      }\n      portal\n    >\n      {/* this wrapping div is to allow mouse events */}\n      {/* while the child element is disabled */}\n      <div>{children}</div>\n    </Tooltip>\n  )\n}\n","import {AddIcon} from '@sanity/icons'\nimport {type Schema} from '@sanity/types'\nimport {Menu} from '@sanity/ui'\nimport {type ComponentProps, type ForwardedRef, forwardRef, useMemo} from 'react'\nimport {\n  type InitialValueTemplateItem,\n  type Template,\n  type TemplatePermissionsResult,\n  useGetI18nText,\n  useSchema,\n  useTemplatePermissions,\n  useTemplates,\n  useTranslation,\n} from 'sanity'\nimport {IntentLink} from 'sanity/router'\n\nimport {Button, MenuButton, MenuItem, type PopoverProps} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {IntentButton} from '../IntentButton'\nimport {InsufficientPermissionsMessageTooltip} from './InsufficientPermissionsMessageTooltip'\n\nexport type PaneHeaderIntentProps = ComponentProps<typeof IntentButton>['intent']\n\nconst POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'bottom',\n  portal: true,\n}\n\nconst getIntent = (\n  schema: Schema,\n  templates: Template[],\n  item: InitialValueTemplateItem,\n): PaneHeaderIntentProps | null => {\n  const typeName = templates.find((t) => t.id === item.templateId)?.schemaType\n  if (!typeName) return null\n\n  const baseParams = {\n    template: item.templateId,\n    type: typeName,\n    id: item.initialDocumentId,\n  }\n\n  return {\n    type: 'create',\n    params: item.parameters ? [baseParams, item.parameters] : baseParams,\n  }\n}\n\ninterface PaneHeaderCreateButtonProps {\n  templateItems: InitialValueTemplateItem[]\n}\n\nexport function PaneHeaderCreateButton({templateItems}: PaneHeaderCreateButtonProps) {\n  const schema = useSchema()\n  const templates = useTemplates()\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const getI18nText = useGetI18nText([...templateItems, ...templates])\n\n  const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions({\n    templateItems,\n  })\n\n  const nothingGranted = useMemo(() => {\n    return (\n      !isTemplatePermissionsLoading &&\n      templatePermissions?.every((permission) => !permission.granted)\n    )\n  }, [isTemplatePermissionsLoading, templatePermissions])\n\n  const permissionsById = useMemo(() => {\n    if (!templatePermissions) return {}\n    return templatePermissions.reduce<Record<string, TemplatePermissionsResult | undefined>>(\n      (acc, permission) => {\n        acc[permission.id] = permission\n        return acc\n      },\n      {},\n    )\n  }, [templatePermissions])\n\n  if (nothingGranted) {\n    return (\n      <InsufficientPermissionsMessageTooltip\n        context=\"create-document-type\"\n        reveal\n        loading={isTemplatePermissionsLoading}\n      >\n        <Button\n          aria-label={t('pane-header.disabled-created-button.aria-label')}\n          icon={AddIcon}\n          data-testid=\"action-intent-button\"\n          disabled\n          mode=\"bleed\"\n          // This button handles the tooltip in a special way, won't reuse the forced tooltip.\n          tooltipProps={null}\n        />\n      </InsufficientPermissionsMessageTooltip>\n    )\n  }\n\n  if (templateItems.length === 1) {\n    const firstItem = templateItems[0]\n    const permissions = permissionsById[firstItem.id]\n    const disabled = !permissions?.granted\n    const intent = getIntent(schema, templates, firstItem)\n    if (!intent) return null\n\n    return (\n      <InsufficientPermissionsMessageTooltip\n        reveal={disabled}\n        loading={isTemplatePermissionsLoading}\n        context=\"create-document-type\"\n      >\n        <IntentButton\n          aria-label={getI18nText(firstItem).title}\n          icon={firstItem.icon || AddIcon}\n          intent={intent}\n          mode=\"bleed\"\n          disabled={disabled}\n          data-testid=\"action-intent-button\"\n          tooltipProps={disabled ? null : {content: t('pane-header.create-new-button.tooltip')}}\n        />\n      </InsufficientPermissionsMessageTooltip>\n    )\n  }\n\n  return (\n    <MenuButton\n      button={\n        <Button\n          icon={AddIcon}\n          mode=\"bleed\"\n          data-testid=\"multi-action-intent-button\"\n          tooltipProps={{content: t('pane-header.create-new-button.tooltip')}}\n        />\n      }\n      id=\"create-menu\"\n      menu={\n        <Menu>\n          {templateItems.map((item, itemIndex) => {\n            const permissions = permissionsById[item.id]\n            const disabled = !permissions?.granted\n            const intent = getIntent(schema, templates, item)\n            const template = templates.find((i) => i.id === item.templateId)\n            if (!template || !intent) return null\n\n            const Link = forwardRef((linkProps, linkRef: ForwardedRef<never>) =>\n              disabled ? (\n                <button type=\"button\" disabled {...linkProps} ref={linkRef} />\n              ) : (\n                <IntentLink\n                  {...linkProps}\n                  intent={intent.type}\n                  params={intent.params}\n                  ref={linkRef}\n                />\n              ),\n            )\n\n            Link.displayName = 'Link'\n\n            const {title} = getI18nText({\n              ...item,\n              // replace the title with the template title\n              title: item.title || getI18nText(template).title,\n            })\n\n            return (\n              <InsufficientPermissionsMessageTooltip\n                context=\"create-document-type\"\n                key={item.id}\n                reveal={disabled}\n                loading={isTemplatePermissionsLoading}\n              >\n                <MenuItem\n                  as={Link}\n                  data-as={disabled ? 'button' : 'a'}\n                  text={title}\n                  aria-label={\n                    disabled ? t('pane-header.disabled-created-button.aria-label') : title\n                  }\n                  disabled={disabled}\n                  data-testid={`action-intent-button-${itemIndex}`}\n                />\n              </InsufficientPermissionsMessageTooltip>\n            )\n          })}\n        </Menu>\n      }\n      popover={POPOVER_PROPS}\n    />\n  )\n}\n","import {Flex} from '@sanity/ui'\nimport {uniqBy} from 'lodash'\nimport {memo, useCallback, useMemo} from 'react'\nimport {EMPTY_ARRAY, EMPTY_OBJECT, type InitialValueTemplateItem, useTemplates} from 'sanity'\n\nimport {isMenuNodeButton, isNotMenuNodeButton, resolveMenuNodes} from '../../menuNodes'\nimport {\n  type PaneMenuItem,\n  type PaneMenuItemGroup,\n  type StructureToolPaneActionHandler,\n} from '../../types'\nimport {PaneContextMenuButton} from '../pane/PaneContextMenuButton'\nimport {PaneHeaderActionButton} from '../pane/PaneHeaderActionButton'\nimport {PaneHeaderCreateButton} from './PaneHeaderCreateButton'\n\nfunction isNonNullable<T>(value: T): value is NonNullable<T> {\n  return value !== null && value !== undefined\n}\n\n/**\n * hashes an object to a string where the order of the keys don't matter\n */\nconst hashObject = (value: unknown) => {\n  const sortObject = (v: unknown): unknown => {\n    if (typeof v !== 'object' || !v) return v\n    if (Array.isArray(v)) return v.map(sortObject)\n    return Object.entries(v).sort(([keyA], [keyB]) => keyA.localeCompare(keyB, 'en'))\n  }\n\n  const normalize = (v: unknown) => JSON.parse(JSON.stringify(v))\n\n  return JSON.stringify(sortObject(normalize(value)))\n}\n\ninterface PaneHeaderActionsProps {\n  initialValueTemplateItems?: InitialValueTemplateItem[]\n  menuItems?: PaneMenuItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  actionHandlers?: Record<string, StructureToolPaneActionHandler>\n}\n\nexport const PaneHeaderActions = memo(function PaneHeaderActions(props: PaneHeaderActionsProps) {\n  const {\n    initialValueTemplateItems: initialValueTemplateItemsFromStructure = EMPTY_ARRAY,\n    menuItems = EMPTY_ARRAY,\n    menuItemGroups = EMPTY_ARRAY,\n    actionHandlers = EMPTY_OBJECT as Record<string, StructureToolPaneActionHandler>,\n  } = props\n\n  const templates = useTemplates()\n\n  const handleAction = useCallback(\n    (item: PaneMenuItem) => {\n      if (typeof item.action === 'string' && !(item.action in actionHandlers)) {\n        console.warn('No handler for action:', item.action)\n        return false\n      }\n\n      const handler =\n        // eslint-disable-next-line no-nested-ternary\n        typeof item.action === 'function'\n          ? item.action\n          : typeof item.action === 'string'\n            ? actionHandlers[item.action]\n            : null\n\n      if (handler) {\n        handler(item.params as Record<string, string>)\n        return true\n      }\n\n      return false\n    },\n    [actionHandlers],\n  )\n\n  const menuNodes = useMemo(\n    () =>\n      resolveMenuNodes({\n        actionHandler: handleAction,\n        menuItemGroups,\n        menuItems: menuItems\n          // remove items with `create` intents because those will get combined\n          // into one action button (see `initialValueTemplateItemFromMenuItems`)\n          .filter((item) => item.intent?.type !== 'create'),\n      }),\n    [handleAction, menuItemGroups, menuItems],\n  )\n\n  const actionNodes = useMemo(() => menuNodes.filter(isMenuNodeButton), [menuNodes])\n  const contextMenuNodes = useMemo(() => menuNodes.filter(isNotMenuNodeButton), [menuNodes])\n\n  const initialValueTemplateItemFromMenuItems = useMemo(() => {\n    return menuItems\n      .map((item, menuItemIndex) => {\n        if (item.intent?.type !== 'create') return null\n\n        const {params} = item.intent\n        if (!params) return null\n\n        const intentParams = Array.isArray(params) ? params[0] : params\n        const templateParams = Array.isArray(params) ? params[1] : undefined\n\n        // fallback to the schema type name as the template ID.\n        // by default, the initial template values are populated from every\n        // document type in the schema\n        const templateId = intentParams.template || intentParams.type\n        if (!templateId) return null\n\n        // eslint-disable-next-line max-nested-callbacks\n        const template = templates.find((t) => t.id === templateId)\n        // the template doesn't exist then the action might be disabled\n        if (!template) return null\n\n        const initialDocumentId = intentParams.id\n\n        return {\n          item,\n          template,\n          templateParams,\n          menuItemIndex,\n          initialDocumentId,\n        }\n      })\n      .filter(isNonNullable)\n      .map(({initialDocumentId, item, template, menuItemIndex, templateParams}) => {\n        const initialValueTemplateItem: InitialValueTemplateItem = {\n          id: `menuItem${menuItemIndex}`,\n          initialDocumentId,\n          templateId: template.id,\n          type: 'initialValueTemplateItem',\n          title: item.title || template.title,\n          i18n: item.i18n || template.i18n,\n          icon: item.icon as InitialValueTemplateItem['icon'],\n          description: template.description,\n          parameters: templateParams,\n          schemaType: template.schemaType,\n        }\n\n        return initialValueTemplateItem\n      })\n  }, [menuItems, templates])\n\n  const combinedInitialValueTemplates = useMemo(() => {\n    // this de-dupes create actions\n    return uniqBy(\n      [...initialValueTemplateItemFromMenuItems, ...initialValueTemplateItemsFromStructure],\n      (item) => hashObject([item.initialDocumentId, item.templateId, item.parameters]),\n    )\n  }, [initialValueTemplateItemFromMenuItems, initialValueTemplateItemsFromStructure])\n\n  return (\n    <Flex gap={1}>\n      {combinedInitialValueTemplates.length > 0 && (\n        <PaneHeaderCreateButton templateItems={combinedInitialValueTemplates} />\n      )}\n\n      {actionNodes.map((node) => (\n        <PaneHeaderActionButton key={node.key} node={node} />\n      ))}\n\n      {contextMenuNodes.length > 0 && <PaneContextMenuButton nodes={contextMenuNodes} />}\n    </Flex>\n  )\n})\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {type SanityDocument} from '@sanity/types'\nimport {type GeneralPreviewLayoutKey, SanityDefaultPreview, Translate, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport interface MissingSchemaTypeProps {\n  layout?: GeneralPreviewLayoutKey\n  value: SanityDocument\n}\n\nexport function MissingSchemaType(props: MissingSchemaTypeProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {layout, value} = props\n\n  return (\n    <SanityDefaultPreview\n      title={\n        <em>\n          <Translate\n            t={t}\n            i18nKey=\"pane-item.missing-schema-type.title\"\n            components={{Code: 'code'}}\n            values={{documentType: value._type}}\n          />\n        </em>\n      }\n      subtitle={\n        <Translate\n          t={t}\n          i18nKey=\"pane-item.missing-schema-type.subtitle\"\n          components={{Code: 'code'}}\n          values={{documentId: value._id}}\n        />\n      }\n      // eslint-disable-next-line react/jsx-no-bind\n      media={() => <WarningOutlineIcon />}\n      layout={layout}\n    />\n  )\n}\n","import {ChevronRightIcon, DocumentIcon, FolderIcon} from '@sanity/icons'\nimport {\n  isSanityDocument,\n  type PreviewValue,\n  type SanityDocument,\n  type SchemaType,\n} from '@sanity/types'\nimport {Box, type CardProps, Text} from '@sanity/ui'\nimport {\n  type ComponentType,\n  type MouseEvent,\n  type ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport {\n  type FIXME,\n  type GeneralPreviewLayoutKey,\n  PreviewCard,\n  SanityDefaultPreview,\n  useDocumentPresence,\n  useDocumentPreviewStore,\n  useSchema,\n} from 'sanity'\n\nimport {MissingSchemaType} from '../MissingSchemaType'\nimport {usePaneRouter} from '../paneRouter'\nimport {PaneItemPreview} from './PaneItemPreview'\n\ninterface PaneItemProps {\n  id: string\n  layout?: GeneralPreviewLayoutKey\n  icon?: ComponentType<any> | false\n  pressed?: boolean\n  selected?: boolean\n  title?: string\n  value?: PreviewValue | SanityDocument\n  schemaType?: SchemaType\n  margin?: CardProps['margin']\n  marginBottom?: CardProps['marginBottom']\n  marginTop?: CardProps['marginTop']\n}\n\n/**\n * Return `false` if we explicitly disable the icon.\n * Otherwise return the passed icon or the schema type icon as a backup.\n */\nexport function getIconWithFallback(\n  icon: ComponentType<any> | false | undefined,\n  schemaType: SchemaType | undefined,\n  defaultIcon: ComponentType<any>,\n): ComponentType<any> | false {\n  if (icon === false) {\n    return false\n  }\n\n  return icon || (schemaType && schemaType.icon) || defaultIcon || false\n}\n\nexport function PaneItem(props: PaneItemProps) {\n  const {\n    icon,\n    id,\n    layout = 'default',\n    pressed,\n    schemaType,\n    selected,\n    title,\n    value,\n    margin,\n    marginBottom,\n    marginTop,\n  } = props\n  const schema = useSchema()\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {ChildLink} = usePaneRouter()\n  const documentPresence = useDocumentPresence(id)\n  const hasSchemaType = Boolean(schemaType && schemaType.name && schema.get(schemaType.name))\n  const [clicked, setClicked] = useState<boolean>(false)\n\n  const preview = useMemo(() => {\n    if (value && isSanityDocument(value)) {\n      if (!schemaType || !hasSchemaType) {\n        return <MissingSchemaType value={value} />\n      }\n\n      return (\n        <PaneItemPreview\n          documentPreviewStore={documentPreviewStore}\n          icon={getIconWithFallback(icon, schemaType, DocumentIcon)}\n          layout={layout}\n          schemaType={schemaType}\n          value={value}\n          presence={documentPresence}\n        />\n      )\n    }\n\n    // Always render non-document values as compact previews\n    return (\n      <SanityDefaultPreview\n        status={\n          <Box style={{opacity: 0.5}}>\n            <Text muted size={1}>\n              <ChevronRightIcon />\n            </Text>\n          </Box>\n        }\n        icon={getIconWithFallback(icon, schemaType, FolderIcon)}\n        layout=\"compact\"\n        title={title}\n      />\n    )\n  }, [\n    documentPreviewStore,\n    hasSchemaType,\n    icon,\n    layout,\n    schemaType,\n    title,\n    value,\n    documentPresence,\n  ])\n\n  const Link = useMemo(\n    () =>\n      function LinkComponent(linkProps: {children: ReactNode}) {\n        return <ChildLink {...linkProps} childId={id} />\n      },\n    [ChildLink, id],\n  )\n\n  const handleClick = useCallback((e: MouseEvent<HTMLElement>) => {\n    if (e.metaKey) {\n      setClicked(false)\n      return\n    }\n\n    setClicked(true)\n  }, [])\n\n  // Reset `clicked` state when `selected` prop changes\n  useEffect(() => setClicked(false), [selected])\n\n  return (\n    <PreviewCard\n      data-testid={`pane-item-${title}`}\n      __unstable_focusRing\n      as={Link as FIXME}\n      data-as=\"a\"\n      margin={margin}\n      marginBottom={marginBottom}\n      marginTop={marginTop}\n      onClick={handleClick}\n      pressed={pressed}\n      radius={2}\n      selected={selected || clicked}\n      sizing=\"border\"\n      tabIndex={-1}\n      tone=\"inherit\"\n    >\n      {preview}\n    </PreviewCard>\n  )\n}\n","import {memo, type ReactNode} from 'react'\nimport {\n  type DocumentActionDescription,\n  type DocumentActionGroup,\n  type DocumentActionProps,\n  GetHookCollectionState,\n} from 'sanity'\n\n/** @internal */\nexport interface Action<Args, Description> {\n  (args: Args): Description | null\n}\n\n/** @internal */\nexport interface RenderActionCollectionProps {\n  actions: Action<DocumentActionProps, DocumentActionDescription>[]\n  actionProps: Omit<DocumentActionProps, 'onComplete'>\n  children: (props: {states: DocumentActionDescription[]}) => ReactNode\n  onActionComplete?: () => void\n  group?: DocumentActionGroup\n}\n\n/** @internal */\nexport const RenderActionCollectionState = memo((props: RenderActionCollectionProps) => {\n  const {actions, children, actionProps, onActionComplete, group} = props\n\n  return (\n    <GetHookCollectionState<Omit<DocumentActionProps, 'onComplete'>, DocumentActionDescription>\n      onReset={onActionComplete}\n      hooks={actions}\n      args={actionProps}\n      group={group}\n    >\n      {children}\n    </GetHookCollectionState>\n  )\n})\nRenderActionCollectionState.displayName = 'Memo(RenderActionCollectionState)'\n","import {memo, type ReactNode} from 'react'\nimport {\n  type DocumentBadgeDescription,\n  type DocumentBadgeProps,\n  type EditStateFor,\n  GetHookCollectionState,\n} from 'sanity'\n\n/** @internal */\nexport interface Badge<Args, Description> {\n  (args: Args): Description | null\n}\n\n/** @internal */\nexport interface RenderBadgeCollectionProps {\n  badges: Badge<DocumentBadgeProps, DocumentBadgeDescription>[]\n  badgeProps: EditStateFor\n  children: (props: {states: DocumentBadgeDescription[]}) => ReactNode\n}\n\n/** @internal */\nexport const RenderBadgeCollectionState = memo((props: RenderBadgeCollectionProps) => {\n  const {badges, children, badgeProps} = props\n\n  return (\n    <GetHookCollectionState<EditStateFor, DocumentBadgeDescription>\n      hooks={badges}\n      args={badgeProps}\n    >\n      {children}\n    </GetHookCollectionState>\n  )\n})\nRenderBadgeCollectionState.displayName = 'Memo(RenderBadgeCollectionState)'\n","import {Box, type CardTone} from '@sanity/ui'\n\nimport {Pane, PaneContent, PaneHeader} from '../../components/pane'\n\n/**\n * @internal\n */\nexport function ErrorPane(props: {\n  children?: React.ReactNode\n  currentMinWidth?: number\n  flex?: number\n  minWidth?: number\n  paneKey: string\n  title?: React.ReactNode\n  tone?: CardTone\n}) {\n  const {\n    children,\n    currentMinWidth,\n    flex,\n    minWidth,\n    paneKey,\n    title = 'Error',\n    tone = 'critical',\n  } = props\n\n  return (\n    <Pane\n      currentMinWidth={currentMinWidth}\n      flex={flex}\n      id={paneKey}\n      minWidth={minWidth}\n      tone={tone}\n    >\n      <PaneHeader title={title} />\n      <PaneContent overflow=\"auto\">\n        <Box paddingX={4} paddingY={5}>\n          {children}\n        </Box>\n      </PaneContent>\n    </Pane>\n  )\n}\n","import {merge, type Observable, of} from 'rxjs'\nimport {delay, mapTo} from 'rxjs/operators'\nimport {isDev} from 'sanity'\n\n/**\n * @internal\n */\nexport type WaitMessage = {messageKey: string} | {message: string}\n\n/**\n * @internal\n */\nexport function getWaitMessages(path: string[]): Observable<WaitMessage> {\n  const thresholds: (WaitMessage & {ms: number})[] = [\n    {ms: 300, messageKey: 'panes.resolving.default-message'},\n    {ms: 5000, messageKey: 'panes.resolving.slow-resolve-message'},\n  ]\n\n  if (isDev) {\n    const message = [\n      'Check console for errors?',\n      'Is your observable/promise resolving?',\n      path.length > 0 ? `Structure path: ${path.join(' ➝ ')}` : '',\n    ]\n\n    thresholds.push({\n      ms: 10000,\n      message: message.join('\\n'),\n    })\n  }\n\n  const src = of(null)\n\n  return merge(\n    ...thresholds.map((threshold) =>\n      src.pipe(\n        mapTo(\n          'messageKey' in threshold\n            ? {messageKey: threshold.messageKey}\n            : {message: threshold.message},\n        ),\n        delay(threshold.ms),\n      ),\n    ),\n  )\n}\n","import {_raf2, type CardTone, Flex} from '@sanity/ui'\nimport {memo, useEffect, useMemo, useState} from 'react'\nimport {type Observable} from 'rxjs'\nimport {LoadingBlock, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Delay} from '../../components/Delay'\nimport {Pane, PaneContent} from '../../components/pane'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {getWaitMessages, type WaitMessage} from './getWaitMessages'\n\ninterface LoadingPaneProps {\n  delay?: number\n  flex?: number\n  message?: string | ((p: string[]) => string | Observable<WaitMessage>)\n  minWidth?: number\n  paneKey: string\n  path?: string\n  selected?: boolean\n  title?: string\n  tone?: CardTone\n}\n\nconst DELAY = false\nconst DEFAULT_MESSAGE_KEY = 'panes.resolving.default-message'\n\nconst Content = styled(Flex)`\n  opacity: 0;\n  transition: opacity 200ms;\n\n  &[data-mounted] {\n    opacity: 1;\n  }\n`\n\n/**\n * @internal\n */\nexport const LoadingPane = memo((props: LoadingPaneProps) => {\n  const {\n    delay = 300,\n    flex,\n    message: messageProp = getWaitMessages,\n    minWidth,\n    paneKey,\n    path,\n    selected,\n    title,\n    tone,\n  } = props\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const resolvedMessage = useMemo(() => {\n    if (typeof messageProp === 'function') {\n      return messageProp(path ? path.split(';') : [])\n    }\n\n    return messageProp\n  }, [messageProp, path])\n\n  const [currentMessage, setCurrentMessage] = useState<string | null>(() => {\n    if (typeof resolvedMessage === 'string') return resolvedMessage\n    return t(DEFAULT_MESSAGE_KEY)\n  })\n\n  useEffect(() => {\n    if (typeof resolvedMessage !== 'object') return undefined\n    if (typeof resolvedMessage.subscribe !== 'function') return undefined\n\n    const sub = resolvedMessage.subscribe((message) => {\n      setCurrentMessage('messageKey' in message ? t(message.messageKey) : message.message)\n    })\n\n    return () => sub.unsubscribe()\n  }, [resolvedMessage, t])\n\n  const [contentElement, setContentElement] = useState<HTMLDivElement | null>(null)\n  const [mounted, setMounted] = useState(false)\n\n  useEffect(() => {\n    if (!contentElement) return undefined\n    return _raf2(() => setMounted(true))\n  }, [contentElement])\n\n  const content = (\n    <Content\n      align=\"center\"\n      data-mounted={mounted ? '' : undefined}\n      direction=\"column\"\n      height=\"fill\"\n      justify=\"center\"\n      ref={setContentElement}\n    >\n      <LoadingBlock showText title={title || currentMessage} />\n    </Content>\n  )\n\n  return (\n    <Pane flex={flex} id={paneKey} minWidth={minWidth} selected={selected} tone={tone}>\n      <PaneContent>{DELAY ? <Delay ms={delay}>{content}</Delay> : content}</PaneContent>\n    </Pane>\n  )\n})\n\nLoadingPane.displayName = 'Memo(LoadingPane)'\n","import {useContext} from 'react'\nimport {DocumentPaneContext} from 'sanity/_singletons'\n\nimport {type DocumentPaneContextValue} from './DocumentPaneContext'\n\n/** @internal */\nexport function useDocumentPane(): DocumentPaneContextValue {\n  const documentPane = useContext(DocumentPaneContext)\n\n  if (!documentPane) {\n    throw new Error('DocumentPane: missing context value')\n  }\n\n  return documentPane\n}\n","import {useCallback, useLayoutEffect, useRef} from 'react'\nimport {\n  COMMENTS_INSPECTOR_NAME,\n  CommentsEnabledProvider,\n  CommentsProvider,\n  useCommentsEnabled,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../../components'\nimport {useDocumentPane} from '../useDocumentPane'\n\ninterface CommentsWrapperProps {\n  children: React.ReactNode\n  documentId: string\n  documentType: string\n}\n\n/**\n * @internal\n * A wrapper that conditionally wraps the document layout in a comments provider\n * if the feature is enabled for the project and the current document.\n */\nexport function CommentsWrapper(props: CommentsWrapperProps) {\n  const {children, documentId, documentType} = props\n\n  return (\n    <CommentsEnabledProvider documentId={documentId} documentType={documentType}>\n      <CommentsProviderWrapper documentId={documentId} documentType={documentType}>\n        {children}\n      </CommentsProviderWrapper>\n    </CommentsEnabledProvider>\n  )\n}\n\nfunction CommentsProviderWrapper(props: CommentsWrapperProps) {\n  const {children, documentId, documentType} = props\n\n  const {enabled} = useCommentsEnabled()\n  const {connectionState, onPathOpen, inspector, openInspector} = useDocumentPane()\n  const {params, setParams, createPathWithParams} = usePaneRouter()\n\n  const selectedCommentId = params?.comment\n  const paramsRef = useRef(params)\n\n  useLayoutEffect(() => {\n    paramsRef.current = params\n  }, [params])\n\n  const getCommentLink = useCallback(\n    (commentId: string) => {\n      // Generate a path based on the current pane params.\n      // We force a value for `inspect` to ensure that this is included in URLs when comments\n      // are created outside of the inspector context (i.e. directly on the field)\n      // @todo: consider filtering pane router params and culling all non-active RHS panes prior to generating this link\n      const path = createPathWithParams({\n        ...paramsRef.current,\n        comment: commentId,\n        inspect: COMMENTS_INSPECTOR_NAME,\n      })\n      return `${window.location.origin}${path}`\n    },\n    [createPathWithParams],\n  )\n\n  const handleClearSelectedComment = useCallback(() => {\n    setParams({...paramsRef.current, comment: undefined})\n  }, [setParams])\n\n  const handleOpenCommentsInspector = useCallback(() => {\n    if (inspector?.name === COMMENTS_INSPECTOR_NAME) return\n\n    openInspector(COMMENTS_INSPECTOR_NAME)\n  }, [inspector?.name, openInspector])\n\n  // If comments are not enabled, render the default document layout\n  if (!enabled) {\n    return <>{children}</>\n  }\n\n  return (\n    <CommentsProvider\n      documentId={documentId}\n      documentType={documentType}\n      getCommentLink={getCommentLink}\n      isCommentsOpen={inspector?.name === COMMENTS_INSPECTOR_NAME}\n      isConnecting={connectionState === 'connecting'}\n      onClearSelectedComment={handleClearSelectedComment}\n      onCommentsOpen={handleOpenCommentsInspector}\n      onPathOpen={onPathOpen}\n      selectedCommentId={selectedCommentId}\n      sortOrder=\"desc\"\n      type=\"field\"\n    >\n      {children}\n    </CommentsProvider>\n  )\n}\n","/**\n * @internal\n */\nexport const _DEBUG = false\n\nexport const EMPTY_PARAMS = {}\nexport const LOADING_PANE = Symbol('LOADING_PANE')\n\nexport const DOCUMENT_PANEL_PORTAL_ELEMENT = 'documentPanelPortalElement'\n","import {useContext} from 'react'\nimport {StructureToolContext} from 'sanity/_singletons'\n\nimport {type StructureToolContextValue} from './types'\n\n/** @internal */\nexport function useStructureTool(): StructureToolContextValue {\n  const structureTool = useContext(StructureToolContext)\n\n  if (!structureTool) throw new Error(`StructureTool: missing context value`)\n\n  return structureTool\n}\n","import {type PaneRouterContextValue} from '../../components'\nimport {type PaneMenuItemGroup} from '../../types'\n\nexport const DOCUMENT_PANEL_MIN_WIDTH = 320\nexport const DOCUMENT_PANEL_INITIAL_MIN_WIDTH = 600\n\nexport const DOCUMENT_INSPECTOR_MIN_WIDTH = 320\nexport const DOCUMENT_INSPECTOR_MAX_WIDTH = 540\n\nexport const EMPTY_PARAMS: NonNullable<PaneRouterContextValue['params']> = {}\n\nexport const INSPECT_ACTION_PREFIX = 'inspect:'\n\nexport const DEFAULT_MENU_ITEM_GROUPS: PaneMenuItemGroup[] = [{id: 'inspectors'}, {id: 'links'}]\n\n// inspectors\nexport const HISTORY_INSPECTOR_NAME = 'sanity/structure/history'\nexport const VALIDATION_INSPECTOR_NAME = 'sanity/structure/validation'\n","import {memo, useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport {type DocumentInspector, type DocumentInspectorMenuItem, useUnique} from 'sanity'\n\ninterface DocumentInspectorMenuItemsResolverProps {\n  documentId: string\n  documentType: string\n  inspectors: DocumentInspector[]\n  onMenuItems: (items: DocumentInspectorMenuItem[]) => void\n}\n\n// The menu item in a document inspector are resolved in a React hook (`useMenuItem`).\n// This means that the menu item needs to be resolved in a React component (in accordance with the rules of hooks).\n// In this component, we map over the configured inspectors and render a `InspectorMenuItem` for each.\n// The `InspectorMenuItem` will resolve the menu item in a React hook and call the `setMenuItem` callback\n// with the resolved menu item and the index of the inspector.\n// Finally, we call the `onMenuItems` callback with the resolved menu items.\nexport function DocumentInspectorMenuItemsResolver(props: DocumentInspectorMenuItemsResolverProps) {\n  const {documentId, documentType, inspectors, onMenuItems} = props\n\n  const len = inspectors.length\n  const lenRef = useRef(len)\n\n  const [menuItems, setMenuItems] = useState<DocumentInspectorMenuItem[]>(() =>\n    Array.from(new Array(len)),\n  )\n\n  const menuItemsRef = useRef(menuItems)\n\n  useEffect(() => {\n    if (lenRef.current !== len) {\n      const newFieldActions = Array.from(new Array(len))\n\n      for (let i = 0; i < len; i++) {\n        newFieldActions[i] = menuItemsRef.current[i]\n      }\n\n      lenRef.current = len\n\n      setMenuItems(() => {\n        menuItemsRef.current = newFieldActions\n        return newFieldActions\n      })\n    }\n  }, [len])\n\n  const setMenuItem = useCallback((index: number, node: DocumentInspectorMenuItem) => {\n    setMenuItems((prev) => {\n      const next = [...prev]\n      next[index] = node\n      menuItemsRef.current = next\n      return next\n    })\n  }, [])\n\n  useEffect(() => {\n    onMenuItems(menuItems.filter(Boolean))\n  }, [menuItems, onMenuItems])\n\n  const InspectorMenuItems = useMemo(() => {\n    return inspectors.map((inspector, index) => {\n      return inspector.useMenuItem\n        ? ([\n            defineInspectorMenuItemComponent({\n              documentId,\n              documentType,\n              index,\n              setMenuItem,\n              useMenuItem: inspector.useMenuItem,\n            }),\n            inspector.name,\n          ] as const)\n        : ([() => null, ''] as const)\n    })\n  }, [documentId, documentType, inspectors, setMenuItem])\n\n  return (\n    <>\n      {InspectorMenuItems.map(([InspectorMenuItem, key]) => key && <InspectorMenuItem key={key} />)}\n    </>\n  )\n}\n\nfunction defineInspectorMenuItemComponent({\n  documentId,\n  documentType,\n  index,\n  setMenuItem,\n  useMenuItem,\n}: {\n  documentId: string\n  documentType: string\n  index: number\n  setMenuItem: (index: number, node: DocumentInspectorMenuItem) => void\n  useMenuItem: NonNullable<DocumentInspector['useMenuItem']>\n}) {\n  return memo(function InspectorMenuItem() {\n    const menuItem = useMenuItem({\n      documentId,\n      documentType,\n    })\n    const node = useUnique(menuItem)\n\n    useEffect(() => {\n      setMenuItem(index, node)\n    }, [node])\n\n    return null\n  })\n}\n","import {unstable_useValuePreview as useValuePreview} from 'sanity'\n\nimport {useDocumentPane} from './useDocumentPane'\n\n/**\n * useDocumentTitle hook return type.\n *\n * @beta\n * @hidden\n */\ninterface UseDocumentTitle {\n  error?: string\n  title?: string\n}\n\n/**\n * React hook that returns the document title for the current document in the document pane.\n *\n * @beta\n * @hidden\n *\n * @returns The document title or error. See {@link UseDocumentTitle}\n */\nexport function useDocumentTitle(): UseDocumentTitle {\n  const {connectionState, schemaType, title, editState} = useDocumentPane()\n  const documentValue = editState?.draft || editState?.published\n  const subscribed = Boolean(documentValue)\n\n  const {error, value} = useValuePreview({\n    enabled: subscribed,\n    schemaType,\n    value: documentValue,\n  })\n\n  if (connectionState === 'connecting' && !subscribed) {\n    return {error: undefined, title: undefined}\n  }\n\n  if (title) {\n    return {error: undefined, title}\n  }\n\n  if (!documentValue) {\n    return {error: undefined, title: `New ${schemaType?.title || schemaType?.name}`}\n  }\n\n  if (error) {\n    return {error: `Error: ${error.message}`, title: undefined}\n  }\n\n  return {error: undefined, title: value?.title}\n}\n","import {useToast} from '@sanity/ui'\nimport {memo, useEffect, useMemo, useRef} from 'react'\nimport {Translate, useDocumentOperationEvent, useTranslation} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {useDocumentPane} from './useDocumentPane'\nimport {useDocumentTitle} from './useDocumentTitle'\n\nconst IGNORE_OPS = ['patch', 'commit']\n\nexport const DocumentOperationResults = memo(function DocumentOperationResults() {\n  const {push: pushToast} = useToast()\n  const {documentId, documentType, value: documentPaneValue} = useDocumentPane()\n  const documentTitleInfo = useDocumentTitle()\n  const titleError = documentTitleInfo.error\n  const event: any = useDocumentOperationEvent(documentId, documentType)\n  const prevEvent = useRef(event)\n  const paneRouter = usePaneRouter()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const title = useMemo(() => {\n    // If title isn't set from document preview, use the title from the document pane value\n    if (\n      !documentTitleInfo.title &&\n      !titleError &&\n      !IGNORE_OPS.includes(event?.op) &&\n      typeof documentPaneValue.title === 'string' &&\n      event?.type === 'success'\n    ) {\n      return documentPaneValue.title\n    }\n    return documentTitleInfo.title\n  }, [documentTitleInfo.title, titleError, event, documentPaneValue.title])\n  //Truncate the document title and add \"...\" if it is over 25 characters\n  const documentTitleBase = title || t('panes.document-operation-results.operation-undefined-title')\n  const documentTitle =\n    documentTitleBase.length > 25 ? `${documentTitleBase.slice(0, 25)}...` : documentTitleBase\n\n  useEffect(() => {\n    if (!event || event === prevEvent.current) return\n\n    let cleanupId: number | undefined\n\n    if (event.type === 'error') {\n      pushToast({\n        closable: true,\n        duration: 30000, // 30s\n        status: 'error',\n        title: t('panes.document-operation-results.operation-error', {context: event.op}),\n        description: (\n          <details>\n            <summary>{t('panes.document-operation-results.error.summary.title')}</summary>\n            {event.error.message}\n          </details>\n        ),\n      })\n    }\n\n    if (event.type === 'success' && !IGNORE_OPS.includes(event.op)) {\n      pushToast({\n        closable: true,\n        status: 'success',\n        title: (\n          <Translate\n            context={event.op}\n            i18nKey=\"panes.document-operation-results.operation-success\"\n            t={t}\n            values={{\n              op: event.op,\n              title: documentTitle,\n            }}\n            components={{\n              Strong: 'strong',\n            }}\n          />\n        ),\n      })\n    }\n\n    /**\n     * If the document was deleted successfully, close the pane.\n     */\n    if (event.type === 'success' && event.op === 'delete') {\n      // Wait until next tick to allow deletion toasts to appear first\n      cleanupId = setTimeout(() => paneRouter.closeCurrentAndAfter(), 0) as any as number\n    }\n\n    prevEvent.current = event\n\n    // eslint-disable-next-line consistent-return\n    return () => clearTimeout(cleanupId)\n  }, [event, paneRouter, pushToast, t, documentTitle])\n\n  return null\n})\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {type PreviewValue, type SanityDocument, type SchemaType} from '@sanity/types'\nimport {assignWith} from 'lodash'\nimport {type ReactNode} from 'react'\nimport {combineLatest, type Observable, of} from 'rxjs'\nimport {map, startWith} from 'rxjs/operators'\nimport {type DocumentPreviewStore, getDraftId, getPublishedId} from 'sanity'\n\nimport {type PaneItemPreviewState} from './types'\n\nexport const isLiveEditEnabled = (schemaType: SchemaType) => schemaType.liveEdit === true\n\nexport const getMissingDocumentFallback = (item: SanityDocument) => ({\n  title: <em>{item.title ? String(item.title) : 'Missing document'}</em>,\n  subtitle: <em>{item.title ? `Missing document ID: ${item._id}` : `Document ID: ${item._id}`}</em>,\n  media: () => <WarningOutlineIcon />,\n})\n\nexport const getValueWithFallback = ({\n  value,\n  draft,\n  published,\n}: {\n  value: SanityDocument\n  draft?: Partial<SanityDocument> | PreviewValue | null\n  published?: Partial<SanityDocument> | PreviewValue | null\n}) => {\n  const snapshot = draft || published\n\n  if (!snapshot) {\n    return getMissingDocumentFallback(value)\n  }\n\n  return assignWith({}, snapshot, value, (objValue, srcValue) => {\n    return typeof srcValue === 'undefined' ? objValue : srcValue\n  })\n}\n\nexport function getPreviewStateObservable(\n  documentPreviewStore: DocumentPreviewStore,\n  schemaType: SchemaType,\n  documentId: string,\n  title: ReactNode,\n): Observable<PaneItemPreviewState> {\n  const draft$ = isLiveEditEnabled(schemaType)\n    ? of({snapshot: null})\n    : documentPreviewStore.observeForPreview(\n        {_type: 'reference', _ref: getDraftId(documentId)},\n        schemaType,\n      )\n\n  const published$ = documentPreviewStore.observeForPreview(\n    {_type: 'reference', _ref: getPublishedId(documentId)},\n    schemaType,\n  )\n\n  return combineLatest([draft$, published$]).pipe(\n    map(([draft, published]) => ({\n      draft: draft.snapshot ? {title, ...(draft.snapshot || {})} : null,\n      isLoading: false,\n      published: published.snapshot ? {title, ...(published.snapshot || {})} : null,\n    })),\n    startWith({draft: null, isLoading: true, published: null}),\n  )\n}\n","import {CloseIcon} from '@sanity/icons'\nimport {Box, Card, type CardProps, Flex, Text} from '@sanity/ui'\nimport {type HTMLProps, type ReactNode} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\n\nexport interface DocumentInspectorHeaderProps {\n  as?: CardProps['as']\n  closeButtonLabel: string\n  flex?: CardProps['flex']\n  onClose: () => void\n  title: ReactNode\n}\n\nconst Root = styled(Card)({\n  position: 'relative',\n  zIndex: 1,\n  lineHeight: 0,\n})\n\n/** @internal */\nexport function DocumentInspectorHeader(\n  props: DocumentInspectorHeaderProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref'>,\n) {\n  const {as: forwardedAs, children, closeButtonLabel, onClose, title, ...restProps} = props\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Root {...restProps} as={forwardedAs}>\n      <Flex padding={2}>\n        <Box flex={1} padding={3}>\n          <Text as=\"h1\" size={1} weight=\"medium\">\n            {title}\n          </Text>\n        </Box>\n        <Box flex=\"none\" padding={1}>\n          <Button\n            aria-label={closeButtonLabel}\n            icon={CloseIcon}\n            mode=\"bleed\"\n            onClick={onClose}\n            tooltipProps={{content: t('document-inspector.close-button.tooltip')}}\n          />\n        </Box>\n      </Flex>\n      {children}\n    </Root>\n  )\n}\n","import {type MouseEvent, useCallback, useRef} from 'react'\nimport {styled} from 'styled-components'\n\nconst Root = styled.div`\n  position: absolute;\n  top: 0;\n  left: -4px;\n  bottom: 0;\n  width: 9px;\n  z-index: 201;\n  cursor: ew-resize;\n\n  /* Border */\n  & > span:nth-child(1) {\n    display: block;\n    border-left: 1px solid var(--card-border-color);\n    position: absolute;\n    top: 0;\n    left: 4px;\n    bottom: 0;\n    transition: opacity 200ms;\n  }\n\n  /* Hover effect */\n  & > span:nth-child(2) {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 9px;\n    bottom: 0;\n    background-color: var(--card-border-color);\n    opacity: 0;\n    transition: opacity 150ms;\n  }\n\n  @media (hover: hover) {\n    &:hover > span:nth-child(2) {\n      opacity: 0.2;\n    }\n  }\n`\n\nexport function Resizer(props: {onResize: (delta: number) => void; onResizeStart: () => void}) {\n  const {onResize, onResizeStart} = props\n\n  const mouseXRef = useRef(0)\n\n  const handleMouseDown = useCallback(\n    (event: MouseEvent) => {\n      event.preventDefault()\n\n      mouseXRef.current = event.pageX\n\n      onResizeStart()\n\n      const handleMouseMove = (e: globalThis.MouseEvent) => {\n        e.preventDefault()\n        onResize(e.pageX - mouseXRef.current)\n      }\n\n      const handleMouseUp = () => {\n        window.removeEventListener('mousemove', handleMouseMove)\n        window.removeEventListener('mouseup', handleMouseUp)\n      }\n\n      window.addEventListener('mousemove', handleMouseMove)\n      window.addEventListener('mouseup', handleMouseUp)\n    },\n    [onResize, onResizeStart],\n  )\n\n  return (\n    <Root onMouseDown={handleMouseDown}>\n      {/* Hover effect */}\n      <span />\n\n      {/* Border */}\n      <span />\n    </Root>\n  )\n}\n","import {Box, type BoxProps} from '@sanity/ui'\nimport {type HTMLProps, useCallback, useMemo, useRef, useState} from 'react'\nimport {styled} from 'styled-components'\n\nimport {Resizer} from './Resizer'\n\nexport interface ResizableProps {\n  minWidth: number\n  maxWidth: number\n}\n\nconst Root = styled(Box)`\n  position: relative;\n  flex: 1;\n  padding-left: 1px;\n`\n\nexport function Resizable(\n  props: ResizableProps & BoxProps & Omit<HTMLProps<HTMLDivElement>, 'as'>,\n) {\n  const {as: forwardedAs, children, minWidth, maxWidth, ...restProps} = props\n  const [element, setElement] = useState<HTMLDivElement | null>(null)\n  const elementWidthRef = useRef<number>()\n  const [targetWidth, setTargetWidth] = useState<number>()\n\n  const handleResizeStart = useCallback(() => {\n    elementWidthRef.current = element?.offsetWidth\n  }, [element])\n\n  const handleResize = useCallback(\n    (deltaX: number) => {\n      const w = elementWidthRef.current\n\n      if (!w) return\n\n      setTargetWidth(Math.min(Math.max(w - deltaX, minWidth), maxWidth))\n    },\n    [minWidth, maxWidth],\n  )\n\n  const style = useMemo(\n    () => (targetWidth ? {flex: 'none', width: targetWidth} : {minWidth, maxWidth}),\n    [minWidth, maxWidth, targetWidth],\n  )\n\n  return (\n    <Root as={forwardedAs} {...restProps} ref={setElement} style={style}>\n      {children}\n      <Resizer onResize={handleResize} onResizeStart={handleResizeStart} />\n    </Root>\n  )\n}\n","import {Box} from '@sanity/ui'\nimport {createElement, type ReactElement, useCallback} from 'react'\n\nimport {usePane} from '../../../components'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {DOCUMENT_INSPECTOR_MAX_WIDTH, DOCUMENT_INSPECTOR_MIN_WIDTH} from '../constants'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {Resizable} from './Resizable'\n\ninterface DocumentInspectorPanelProps {\n  documentId: string\n  documentType: string\n  flex?: number | number[]\n}\n\nexport function DocumentInspectorPanel(props: DocumentInspectorPanelProps): ReactElement | null {\n  const {documentId, documentType, flex} = props\n  const {collapsed} = usePane()\n  const {closeInspector, inspector} = useDocumentPane()\n  const {features} = useStructureTool()\n\n  const handleClose = useCallback(() => {\n    if (inspector) closeInspector(inspector.name)\n  }, [closeInspector, inspector])\n\n  if (collapsed || !inspector) return null\n\n  const element = createElement(inspector.component, {\n    onClose: handleClose,\n    documentId,\n    documentType,\n  })\n\n  if (features.resizablePanes) {\n    return (\n      <Resizable\n        as=\"aside\"\n        data-ui=\"DocumentInspectorPanel\"\n        flex={flex}\n        maxWidth={DOCUMENT_INSPECTOR_MAX_WIDTH}\n        minWidth={DOCUMENT_INSPECTOR_MIN_WIDTH}\n      >\n        {element}\n      </Resizable>\n    )\n  }\n\n  return (\n    <Box as=\"aside\" data-ui=\"DocumentInspectorPanel\" flex={flex}>\n      {element}\n    </Box>\n  )\n}\n","import {useCallback, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {map} from 'rxjs/operators'\nimport {useKeyValueStore} from 'sanity'\n\nconst STRUCTURE_TOOL_NAMESPACE = 'studio.structure-tool'\n\n/**\n * @internal\n */\nexport function useStructureToolSetting<ValueType>(\n  namespace: string,\n  key: string | null,\n  defaultValue?: ValueType,\n): [ValueType | undefined, (_value: ValueType) => void] {\n  const keyValueStore = useKeyValueStore()\n\n  const keyValueStoreKey = [STRUCTURE_TOOL_NAMESPACE, namespace, key].filter(Boolean).join('.')\n\n  const value$ = useMemo(() => {\n    return keyValueStore\n      .getKey(keyValueStoreKey)\n      .pipe(map((value) => (value === null ? defaultValue : value)))\n  }, [defaultValue, keyValueStore, keyValueStoreKey])\n\n  const value = useObservable(value$, defaultValue) as ValueType\n  const set = useCallback(\n    (newValue: ValueType) => {\n      if (newValue !== value) {\n        keyValueStore.setKey(keyValueStoreKey, newValue as string)\n      }\n    },\n    [keyValueStore, keyValueStoreKey, value],\n  )\n\n  return useMemo(() => [value, set], [set, value])\n}\n","export const VIEW_MODE_PARSED = {id: 'parsed', title: 'document-inspector.view-mode.parsed'}\nexport const VIEW_MODE_RAW = {id: 'raw', title: 'document-inspector.view-mode.raw-json'}\nexport const VIEW_MODES = [VIEW_MODE_PARSED, VIEW_MODE_RAW]\n","import {type SanityDocumentLike} from '@sanity/types'\nimport LRU from 'quick-lru'\nimport {isRecord, isString} from 'sanity'\n\nconst lru = new LRU({maxSize: 1000})\n\nexport function isExpanded(keyPath: any, value: any): any {\n  const cached = lru.get(keyPath)\n\n  if (cached === undefined) {\n    lru.set(keyPath, Array.isArray(value) || isRecord(value))\n    return isExpanded(keyPath, value)\n  }\n\n  return cached\n}\n\nexport function toggleExpanded(event: any): void {\n  const {path} = event\n  const current = lru.get(path)\n\n  if (current === undefined) {\n    // something is wrong\n    return\n  }\n\n  lru.set(path, !current)\n}\n\nexport function selectElement(element: HTMLElement): void {\n  const sel = window.getSelection()\n\n  if (sel) {\n    const range = document.createRange()\n\n    sel.removeAllRanges()\n    range.selectNodeContents(element)\n    sel.addRange(range)\n  }\n}\n\nexport function select(event: any): void {\n  selectElement(event.currentTarget)\n}\n\nexport function maybeSelectAll(event: any): void {\n  const selectAll = event.keyCode === 65 && (event.metaKey || event.ctrlKey)\n\n  if (!selectAll) {\n    return\n  }\n\n  event.preventDefault()\n\n  selectElement(event.currentTarget)\n}\n\nexport function isDocumentLike(value: unknown): value is SanityDocumentLike {\n  return isRecord(value) && isString(value._id) && isString(value._type)\n}\n","import {rem, type Theme} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\nexport const JSONInspectorWrapper = styled.div(({theme}: {theme: Theme}) => {\n  const {color, fonts, space} = theme.sanity\n\n  return css`\n    & .json-inspector,\n    & .json-inspector .json-inspector__selection {\n      font-family: ${fonts.code.family};\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n      color: var(--card-code-fg-color);\n    }\n\n    & .json-inspector .json-inspector__leaf {\n      padding-left: ${rem(space[4])};\n    }\n\n    & .json-inspector .json-inspector__leaf.json-inspector__leaf_root {\n      padding-top: ${rem(space[3])};\n      padding-left: 0;\n    }\n\n    & .json-inspector > .json-inspector__leaf_root > .json-inspector__line > .json-inspector__key {\n      display: none;\n    }\n\n    & .json-inspector .json-inspector__line {\n      display: block;\n      position: relative;\n      cursor: default;\n    }\n\n    & .json-inspector .json-inspector__line::after {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: -200px;\n      right: -50px;\n      bottom: 0;\n      z-index: -1;\n      pointer-events: none;\n    }\n\n    & .json-inspector .json-inspector__line:hover::after {\n      background: var(--card-code-bg-color);\n    }\n\n    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line {\n      cursor: pointer;\n    }\n\n    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line::before {\n      content: '▸ ';\n      margin-left: calc(0 - ${rem(space[4])} + 3px);\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n    }\n\n    &\n      .json-inspector\n      .json-inspector__leaf_expanded.json-inspector__leaf_composite\n      > .json-inspector__line::before {\n      content: '▾ ';\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n    }\n\n    & .json-inspector .json-inspector__radio,\n    & .json-inspector .json-inspector__flatpath {\n      display: none;\n    }\n\n    & .json-inspector .json-inspector__value {\n      margin-left: ${rem(space[4] / 2)};\n    }\n\n    &\n      .json-inspector\n      > .json-inspector__leaf_root\n      > .json-inspector__line\n      > .json-inspector__key\n      + .json-inspector__value {\n      margin: 0;\n    }\n\n    & .json-inspector .json-inspector__key {\n      color: ${color.syntax.property};\n    }\n\n    & .json-inspector .json-inspector__value_helper,\n    & .json-inspector .json-inspector__value_null {\n      color: ${color.syntax.constant};\n    }\n\n    & .json-inspector .json-inspector__not-found {\n      padding-top: ${rem(space[3])};\n    }\n\n    & .json-inspector .json-inspector__value_string {\n      color: ${color.syntax.string};\n    }\n\n    & .json-inspector .json-inspector__value_boolean {\n      color: ${color.syntax.boolean};\n    }\n\n    & .json-inspector .json-inspector__value_number {\n      color: ${color.syntax.number};\n    }\n\n    & .json-inspector .json-inspector__show-original {\n      display: inline-block;\n      padding: 0 6px;\n      cursor: pointer;\n    }\n\n    & .json-inspector .json-inspector__show-original:hover {\n      color: inherit;\n    }\n\n    & .json-inspector .json-inspector__show-original::before {\n      content: '↔';\n    }\n\n    & .json-inspector .json-inspector__show-original:hover::after {\n      content: ' expand';\n    }\n  `\n})\n","import {SearchIcon} from '@sanity/icons'\nimport {TextInput} from '@sanity/ui'\nimport {type ChangeEvent, useCallback} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../i18n'\n\nexport function Search(props: {onChange: (q: string) => void; query: string}) {\n  const {onChange, query} = props\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => onChange(event.target.value),\n    [onChange],\n  )\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <TextInput\n      icon={SearchIcon}\n      onChange={handleChange}\n      placeholder={t('document-inspector.search.placeholder')}\n      radius={2}\n      value={query || ''}\n    />\n  )\n}\n","import JSONInspector from '@rexxars/react-json-inspector'\nimport {type SanityDocument} from '@sanity/types'\nimport {Card, Code, Flex, TabList, TabPanel} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {Translate, useTranslation} from 'sanity'\n\nimport {Dialog, Tab} from '../../../../ui-components'\nimport {DocTitle} from '../../../components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {useStructureToolSetting} from '../../../useStructureToolSetting'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {VIEW_MODE_PARSED, VIEW_MODE_RAW, VIEW_MODES} from './constants'\nimport {isDocumentLike, isExpanded, maybeSelectAll, select, toggleExpanded} from './helpers'\nimport {JSONInspectorWrapper} from './InspectDialog.styles'\nimport {Search} from './Search'\n\ninterface InspectDialogProps {\n  value: Partial<SanityDocument> | null\n}\n\nexport function InspectDialog(props: InspectDialogProps) {\n  const {value} = props\n  const {onInspectClose, paneKey} = useDocumentPane()\n  const dialogIdPrefix = `${paneKey}_inspect_`\n\n  /* this creates a view mode (the default that it opens with is the parsed tab) that is saved based on the paneKey\n  where the inspect dialog lives.\n  This also means that when a page is loaded, the state of the tabs remains and doesn't revert to the pane tab */\n  const [viewModeId, onViewModeChange] = useStructureToolSetting(\n    'inspect-view-mode',\n    null,\n    'parsed',\n  )\n\n  /* based on the view mode it shows the right tab content */\n  const viewMode = VIEW_MODES.find((mode) => mode.id === viewModeId)\n\n  const setParsedViewMode = useCallback(() => {\n    onViewModeChange(VIEW_MODE_PARSED.id)\n  }, [onViewModeChange])\n\n  const setRawViewMode = useCallback(() => {\n    onViewModeChange(VIEW_MODE_RAW.id)\n  }, [onViewModeChange])\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Dialog\n      bodyHeight=\"fill\"\n      id={`${dialogIdPrefix}dialog`}\n      header={\n        isDocumentLike(value) ? (\n          <Translate\n            t={t}\n            i18nKey=\"document-inspector.dialog.title\"\n            components={{\n              DocumentTitle: () => (\n                <em>\n                  <DocTitle document={value} />\n                </em>\n              ),\n            }}\n          />\n        ) : (\n          <em>{t('document-inspector.dialog.title-no-value')}</em>\n        )\n      }\n      onClose={onInspectClose}\n      onClickOutside={onInspectClose}\n      padding={false}\n      width={2}\n    >\n      <Flex direction=\"column\" height=\"fill\">\n        <Card\n          padding={3}\n          paddingTop={0}\n          shadow={1}\n          style={{position: 'sticky', bottom: 0, zIndex: 3}}\n        >\n          <TabList space={1}>\n            <Tab\n              aria-controls={`${dialogIdPrefix}tabpanel`}\n              id={`${dialogIdPrefix}tab-${VIEW_MODE_PARSED.id}`}\n              label={t(VIEW_MODE_PARSED.title)}\n              onClick={setParsedViewMode}\n              selected={viewMode === VIEW_MODE_PARSED}\n            />\n            <Tab\n              aria-controls={`${dialogIdPrefix}tabpanel`}\n              id={`${dialogIdPrefix}tab-${VIEW_MODE_RAW.id}`}\n              label={t(VIEW_MODE_RAW.title)}\n              onClick={setRawViewMode}\n              selected={viewMode === VIEW_MODE_RAW}\n            />\n          </TabList>\n        </Card>\n\n        <TabPanel\n          aria-labelledby={`${dialogIdPrefix}tab-${viewModeId}`}\n          flex={1}\n          id={`${dialogIdPrefix}tabpanel`}\n          overflow=\"auto\"\n          padding={4}\n          style={{outline: 'none'}}\n        >\n          {viewMode === VIEW_MODE_PARSED && (\n            <JSONInspectorWrapper>\n              <JSONInspector\n                data={value}\n                isExpanded={isExpanded}\n                onClick={toggleExpanded}\n                search={Search}\n                filterOptions={{ignoreCase: true}}\n              />\n            </JSONInspectorWrapper>\n          )}\n\n          {viewMode === VIEW_MODE_RAW && (\n            <Code\n              language=\"json\"\n              tabIndex={0}\n              onKeyDown={maybeSelectAll}\n              onDoubleClick={select}\n              onFocus={select}\n              size={1}\n            >\n              {JSON.stringify(value, null, 2)}\n            </Code>\n          )}\n        </TabPanel>\n      </Flex>\n    </Dialog>\n  )\n}\n","import {type ButtonMode, type ButtonTone, Card, type CardTone, Flex, Text} from '@sanity/ui'\nimport {type ComponentType, type ElementType, type JSX, type ReactNode} from 'react'\n\nimport {Button} from '../../../../../ui-components'\n\ninterface BannerProps {\n  action?: {\n    as?: ElementType | keyof JSX.IntrinsicElements\n    icon?: ComponentType\n    onClick?: () => void\n    text: string\n    tone?: ButtonTone\n    disabled?: boolean\n    mode?: ButtonMode\n  }\n  content: ReactNode\n  icon?: ComponentType\n  tone?: CardTone\n}\n\nexport function Banner(props: BannerProps) {\n  const {action, content, icon: Icon, tone = 'transparent', ...rest} = props\n\n  return (\n    <Card borderBottom paddingX={4} paddingY={2} tone={tone} {...rest}>\n      <Flex align=\"center\" gap={3}>\n        {Icon && (\n          <Text size={0}>\n            <Icon />\n          </Text>\n        )}\n\n        <Flex align=\"center\" flex={1} gap={2} paddingY={3}>\n          {content}\n        </Flex>\n\n        {action && (\n          <Button {...action} mode={action.mode || 'ghost'} tone={action.tone || 'default'} />\n        )}\n      </Flex>\n    </Card>\n  )\n}\n","import {ReadOnlyIcon} from '@sanity/icons'\nimport {Text} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {useDocumentOperation, useTranslation} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {Banner} from './Banner'\n\ninterface DeletedDocumentBannerProps {\n  revisionId?: string | null\n}\n\nexport function DeletedDocumentBanner({revisionId}: DeletedDocumentBannerProps) {\n  const {documentId, documentType} = useDocumentPane()\n  const {restore} = useDocumentOperation(documentId, documentType)\n  const {navigateIntent} = useRouter()\n  const handleRestore = useCallback(() => {\n    if (revisionId) {\n      restore.execute(revisionId)\n      navigateIntent('edit', {id: documentId, type: documentType})\n    }\n  }, [documentId, documentType, navigateIntent, restore, revisionId])\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Banner\n      action={\n        revisionId\n          ? {\n              onClick: handleRestore,\n              text: t('banners.deleted-document-banner.restore-button.text'),\n            }\n          : undefined\n      }\n      content={\n        <Text size={1} weight=\"medium\">\n          {t('banners.deleted-document-banner.text')}\n        </Text>\n      }\n      data-testid=\"deleted-document-banner\"\n      icon={ReadOnlyIcon}\n    />\n  )\n}\n","import {ErrorOutlineIcon} from '@sanity/icons'\nimport {Text} from '@sanity/ui'\nimport {isDeprecatedSchemaType, Translate, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {Banner} from './Banner'\n\nexport function DeprecatedDocumentTypeBanner() {\n  const {schemaType} = useDocumentPane()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (!isDeprecatedSchemaType(schemaType)) {\n    return null\n  }\n\n  return (\n    <Banner\n      content={\n        <Text size={1} weight=\"medium\">\n          <Translate t={t} i18nKey=\"banners.deprecated-document-type-banner.text\" />{' '}\n          {schemaType.deprecated.reason}\n        </Text>\n      }\n      data-testid=\"deprecated-document-type-banner\"\n      icon={ErrorOutlineIcon}\n    />\n  )\n}\n","import {defineEvent} from '@sanity/telemetry'\n\n/** @internal */\nexport const AskToEditDialogOpened = defineEvent({\n  name: 'Ask To Edit Dialog Opened',\n  version: 1,\n  description: 'User clicked the \"Ask to edit\" button in the document permissions banner',\n})\n\n/** @internal */\nexport const AskToEditRequestSent = defineEvent({\n  name: 'Ask To Edit Request Sent',\n  version: 1,\n  description: 'User sent a role change request from the dialog',\n})\n","import {useTelemetry} from '@sanity/telemetry/react'\nimport {Box, Card, DialogProvider, Flex, Stack, Text, TextInput, useToast} from '@sanity/ui'\nimport {useId, useMemo, useState} from 'react'\nimport {useObservable} from 'react-rx'\nimport {catchError, map, type Observable, of, startWith} from 'rxjs'\nimport {type Role, useClient, useProjectId, useTranslation, useZIndex} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Dialog} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {AskToEditRequestSent} from './__telemetry__/RequestPermissionDialog.telemetry'\nimport {type AccessRequest} from './useRoleRequestsStatus'\n\nconst MAX_NOTE_LENGTH = 150\n\n/** @internal */\nexport const DialogBody = styled(Box)`\n  box-sizing: border-box;\n`\n\n/** @internal */\nexport const LoadingContainer = styled(Flex).attrs({\n  align: 'center',\n  direction: 'column',\n  justify: 'center',\n})`\n  height: 110px;\n`\n\n/** @internal */\nexport interface RequestPermissionDialogProps {\n  onClose?: () => void\n  onRequestSubmitted?: () => void\n}\n\n/**\n * A dialog that enables the user to request permission to change their\n * member role from \"Viewer\" to \"Editor\" or \"Admin\" depending on the\n * project's available roles.\n *\n * @internal\n */\nexport function RequestPermissionDialog({\n  onClose,\n  onRequestSubmitted,\n}: RequestPermissionDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const telemtry = useTelemetry()\n  const dialogId = `request-permissions-${useId()}`\n  const projectId = useProjectId()\n  const client = useClient({apiVersion: '2024-09-26'})\n  const toast = useToast()\n  const zOffset = useZIndex()\n\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  const [note, setNote] = useState('')\n\n  const [msgError, setMsgError] = useState<string | undefined>()\n  const [hasTooManyRequests, setHasTooManyRequests] = useState<boolean>(false)\n  const [hasBeenDenied, setHasBeenDenied] = useState<boolean>(false)\n\n  const requestedRole$: Observable<'administrator' | 'editor'> = useMemo(() => {\n    const adminRole = 'administrator' as const\n    if (!projectId || !client) return of(adminRole)\n    return client.observable\n      .request<(Role & {appliesToUsers?: boolean})[]>({url: `/projects/${projectId}/roles`})\n      .pipe(\n        map((roles) => {\n          const hasEditor = roles\n            .filter((role) => role?.appliesToUsers)\n            .find((role) => role.name === 'editor')\n          return hasEditor ? 'editor' : adminRole\n        }),\n        startWith(adminRole),\n        catchError(() => of(adminRole)),\n      )\n  }, [projectId, client])\n\n  const requestedRole = useObservable(requestedRole$)\n\n  const onSubmit = () => {\n    setIsSubmitting(true)\n    client\n      .request<AccessRequest | null>({\n        url: `/access/project/${projectId}/requests`,\n        method: 'post',\n        body: {note, requestUrl: window?.location.href, requestedRole, type: 'role'},\n      })\n      .then((request) => {\n        if (request) {\n          if (onRequestSubmitted) onRequestSubmitted()\n          telemtry.log(AskToEditRequestSent)\n          toast.push({title: 'Edit access requested'})\n        }\n      })\n      .catch((err) => {\n        const statusCode = err?.response?.statusCode\n        const errMessage = err?.response?.body?.message\n        if (statusCode === 429) {\n          // User is over their cross-project request limit\n          setHasTooManyRequests(true)\n          setMsgError(errMessage)\n        }\n        if (statusCode === 409) {\n          // If we get a 409, user has been denied on this project or has a valid pending request\n          // valid pending request should be handled by GET request above\n          setHasBeenDenied(true)\n          setMsgError(errMessage)\n        } else {\n          toast.push({\n            title: 'There was a problem submitting your request.',\n            status: 'error',\n          })\n        }\n      })\n      .finally(() => {\n        setIsSubmitting(false)\n      })\n  }\n\n  return (\n    <DialogProvider position={'fixed'} zOffset={zOffset.fullscreen}>\n      <Dialog\n        width={1}\n        id={dialogId}\n        header={t('request-permission-dialog.header.text')}\n        footer={{\n          cancelButton: {\n            onClick: onClose,\n            text: t('confirm-dialog.cancel-button.fallback-text'),\n          },\n          confirmButton: {\n            onClick: onSubmit,\n            loading: isSubmitting,\n            disabled: hasTooManyRequests || hasBeenDenied,\n            text: t('request-permission-dialog.confirm-button.text'),\n            tone: 'primary',\n            type: 'submit',\n          },\n        }}\n        onClose={onClose}\n        onClickOutside={onClose}\n      >\n        <DialogBody>\n          <Stack space={4}>\n            <Text>{t('request-permission-dialog.description.text')}</Text>\n            {hasTooManyRequests || hasBeenDenied ? (\n              <Card tone={'caution'} padding={3} radius={2} shadow={1}>\n                <Text size={1}>\n                  {hasTooManyRequests && (\n                    <>{msgError ?? t('request-permission-dialog.warning.limit-reached.text')}</>\n                  )}\n                  {hasBeenDenied && (\n                    <>{msgError ?? t('request-permission-dialog.warning.denied.text')}</>\n                  )}\n                </Text>\n              </Card>\n            ) : (\n              <Stack space={3} paddingBottom={0}>\n                <TextInput\n                  placeholder={t('request-permission-dialog.note-input.placeholder.text')}\n                  disabled={isSubmitting}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter') onSubmit()\n                  }}\n                  maxLength={MAX_NOTE_LENGTH}\n                  value={note}\n                  onChange={(e) => {\n                    setNote(e.currentTarget.value)\n                  }}\n                />\n\n                <Text align=\"right\" muted size={1}>{`${note.length}/${MAX_NOTE_LENGTH}`}</Text>\n              </Stack>\n            )}\n          </Stack>\n        </DialogBody>\n      </Dialog>\n    </DialogProvider>\n  )\n}\n","import {addWeeks, isAfter, isBefore} from 'date-fns'\nimport {useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {of} from 'rxjs'\nimport {catchError, map, startWith} from 'rxjs/operators'\nimport {type SanityClient, useClient, useProjectId} from 'sanity'\n\n/** @internal */\nexport interface AccessRequest {\n  id: string\n  status: 'pending' | 'accepted' | 'declined'\n  resourceId: string\n  resourceType: 'project'\n  createdAt: string\n  updatedAt: string\n  updatedByUserId: string\n  requestedByUserId: string\n  requestedRole: string\n  type: 'access' | 'role'\n  note: string\n}\n\nconst LOADING_STATE = {loading: true, error: false, status: undefined}\nconst EMPTY_STATE = {loading: false, error: false, status: 'none'}\nconst DECLINED_STATE = {loading: false, error: false, status: 'declined'}\nconst PENDING_STATE = {loading: false, error: false, status: 'pending'}\nconst EXPIRED_STATE = {loading: false, error: false, status: 'expired'}\n\n/** @internal */\nexport const useRoleRequestsStatus = () => {\n  const client = useClient({apiVersion: '2024-07-01'})\n  const projectId = useProjectId()\n\n  const checkRoleRequests$ = useMemo(() => {\n    if (!client || !projectId) {\n      return of(EMPTY_STATE)\n    }\n\n    return checkRoleRequests(client, projectId)\n  }, [client, projectId])\n\n  const {loading, error, status} = useObservable(checkRoleRequests$, LOADING_STATE)\n  return {data: status, loading, error}\n}\n\nfunction checkRoleRequests(client: SanityClient, projectId: string) {\n  return client.observable\n    .request<AccessRequest[] | null>({\n      url: '/access/requests/me',\n      tag: 'use-role-requests-status',\n    })\n    .pipe(\n      map((requests) => {\n        if (!requests || requests.length === 0) {\n          return EMPTY_STATE\n        }\n\n        // Filter requests for the specific project and where type is 'role'\n        const projectRequests = requests.filter(\n          (request) => request.resourceId === projectId && request.type === 'role',\n        )\n\n        const declinedRequest = projectRequests.find((request) => request.status === 'declined')\n        if (\n          declinedRequest &&\n          isAfter(addWeeks(new Date(declinedRequest.createdAt), 2), new Date())\n        ) {\n          return DECLINED_STATE\n        }\n\n        const pendingRequest = projectRequests.find(\n          (request) =>\n            request.status === 'pending' &&\n            isAfter(addWeeks(new Date(request.createdAt), 2), new Date()),\n        )\n        if (pendingRequest) {\n          return PENDING_STATE\n        }\n\n        const oldPendingRequest = projectRequests.find(\n          (request) =>\n            request.status === 'pending' &&\n            isBefore(addWeeks(new Date(request.createdAt), 2), new Date()),\n        )\n\n        return oldPendingRequest ? EXPIRED_STATE : EMPTY_STATE\n      }),\n      catchError((err) => {\n        console.error('Failed to fetch access requests', err)\n        return of({loading: false, error: true, status: undefined})\n      }),\n      startWith(LOADING_STATE), // Start with loading state\n    )\n}\n","import {ReadOnlyIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {Text} from '@sanity/ui'\nimport {useMemo, useState} from 'react'\nimport {Translate, useCurrentUser, useListFormat, useTranslation} from 'sanity'\n\nimport {\n  RequestPermissionDialog,\n  useRoleRequestsStatus,\n} from '../../../../components/requestPermissionDialog'\nimport {AskToEditDialogOpened} from '../../../../components/requestPermissionDialog/__telemetry__/RequestPermissionDialog.telemetry'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {Banner} from './Banner'\n\ninterface InsufficientPermissionBannerProps {\n  requiredPermission: 'update' | 'create'\n}\n\nexport function InsufficientPermissionBanner({\n  requiredPermission,\n}: InsufficientPermissionBannerProps) {\n  const currentUser = useCurrentUser()\n\n  const {\n    data: roleRequestStatus,\n    loading: requestStatusLoading,\n    error: requestStatusError,\n  } = useRoleRequestsStatus()\n  const [requestSent, setRequestSent] = useState(false)\n  const requestPending = useMemo(\n    () => roleRequestStatus === 'pending' || roleRequestStatus === 'declined' || requestSent,\n    [roleRequestStatus, requestSent],\n  )\n  const currentUserRoles = currentUser?.roles || []\n  const isOnlyViewer = currentUserRoles.length === 1 && currentUserRoles[0].name === 'viewer'\n  const [showRequestPermissionDialog, setShowRequestPermissionDialog] = useState(false)\n\n  const listFormat = useListFormat({style: 'short'})\n  const {t} = useTranslation(structureLocaleNamespace)\n  const telemetry = useTelemetry()\n\n  const roleTitles = currentUserRoles.map((role) => role.title)\n  const roles = listFormat\n    .formatToParts(roleTitles)\n    .map((part) =>\n      part.type === 'element' ? <code key={part.value}>{part.value}</code> : part.value,\n    )\n\n  return (\n    <>\n      <Banner\n        content={\n          <Text size={1} weight=\"medium\">\n            <Translate\n              t={t}\n              i18nKey=\"banners.permission-check-banner.missing-permission\"\n              components={{Roles: () => <>{roles}</>}}\n              values={{count: roles.length, roles: roleTitles}}\n              context={requiredPermission}\n            />\n          </Text>\n        }\n        action={\n          isOnlyViewer && roleRequestStatus && !requestStatusError && !requestStatusLoading\n            ? {\n                onClick: requestPending\n                  ? undefined\n                  : () => {\n                      setShowRequestPermissionDialog(true)\n                      telemetry.log(AskToEditDialogOpened)\n                    },\n                text: requestPending\n                  ? t('banners.permission-check-banner.request-permission-button.sent')\n                  : t('banners.permission-check-banner.request-permission-button.text'),\n                tone: requestPending ? 'default' : 'primary',\n                disabled: requestPending,\n                mode: requestPending ? 'bleed' : undefined,\n              }\n            : undefined\n        }\n        data-testid=\"permission-check-banner\"\n        icon={ReadOnlyIcon}\n      />\n      {showRequestPermissionDialog && (\n        <RequestPermissionDialog\n          onClose={() => setShowRequestPermissionDialog(false)}\n          onRequestSubmitted={() => {\n            setRequestSent(true)\n            setShowRequestPermissionDialog(false)\n          }}\n        />\n      )}\n    </>\n  )\n}\n","import {CloseIcon, SyncIcon, WarningOutlineIcon} from '@sanity/icons'\nimport {type KeyedSegment, type Reference} from '@sanity/types'\nimport {Text} from '@sanity/ui'\nimport {fromString as pathFromString, get as pathGet} from '@sanity/util/paths'\nimport {memo, useCallback, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {concat, type Observable, of} from 'rxjs'\nimport {debounceTime, map} from 'rxjs/operators'\nimport {\n  type DocumentAvailability,\n  getPublishedId,\n  useDocumentPreviewStore,\n  useTranslation,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../../../components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {type RouterPaneGroup} from '../../../../types'\nimport {Banner} from './Banner'\n\ninterface ParentReferenceInfo {\n  loading: boolean\n  result?: {\n    availability: {draft: DocumentAvailability; published: DocumentAvailability}\n    refValue: string | undefined\n  }\n}\n\nexport const ReferenceChangedBanner = memo(() => {\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {params, groupIndex, routerPanesState, replaceCurrent, BackLink} = usePaneRouter()\n  const routerReferenceId = routerPanesState[groupIndex]?.[0].id\n  const parentGroup = routerPanesState[groupIndex - 1] as RouterPaneGroup | undefined\n  const parentSibling = parentGroup?.[0]\n  const parentId = parentSibling?.id\n  const hasHistoryOpen = Boolean(parentSibling?.params?.rev)\n  const parentRefPath = useMemo(() => {\n    return (params?.parentRefPath && pathFromString(params.parentRefPath)) || null\n  }, [params?.parentRefPath])\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  /**\n   * Loads information regarding the reference field of the parent pane. This\n   * is only applicable to child references (aka references-in-place).\n   *\n   * It utilizes the pane ID of the parent pane (which is a document ID) along\n   * with the `parentRefPath` router param on the current pane to find the\n   * current value of the reference field on the parent document.\n   *\n   * This is used to compare with the current pane's document ID. If the IDs\n   * don't match then this banner should reveal itself\n   */\n  const referenceInfoObservable = useMemo((): Observable<ParentReferenceInfo> => {\n    const parentRefPathSegment = parentRefPath?.[0] as string | undefined\n\n    // short-circuit: this document pane is not a child reference pane\n    if (!parentId || !parentRefPathSegment || !parentRefPath) {\n      return of({loading: false})\n    }\n\n    const publishedId = getPublishedId(parentId)\n    const path = pathFromString(parentRefPathSegment)\n\n    // note: observePaths doesn't support keyed path segments, so we need to select the nearest parent\n    const keyedSegmentIndex = path.findIndex(\n      (p): p is KeyedSegment => typeof p == 'object' && '_key' in p,\n    )\n\n    return concat(\n      // emit a loading state instantly\n      of({loading: true}),\n      // then emit the values from watching the published ID's path\n      documentPreviewStore\n        .unstable_observePathsDocumentPair(\n          publishedId,\n          (keyedSegmentIndex === -1 ? path : path.slice(0, keyedSegmentIndex)) as string[][],\n        )\n        .pipe(\n          // this debounce time is needed to prevent flashing banners due to\n          // the router state updating faster than the content-lake state. we\n          // debounce to wait for more emissions because the value pulled\n          // initially could be stale.\n          debounceTime(750),\n          map(\n            ({draft, published}): ParentReferenceInfo => ({\n              loading: false,\n              result: {\n                availability: {\n                  draft: draft.availability,\n                  published: published.availability,\n                },\n                refValue: pathGet<Reference>(draft.snapshot || published.snapshot, parentRefPath)\n                  ?._ref,\n              },\n            }),\n          ),\n        ),\n    )\n  }, [documentPreviewStore, parentId, parentRefPath])\n  const referenceInfo = useObservable(referenceInfoObservable, {loading: true})\n\n  const handleReloadReference = useCallback(() => {\n    if (referenceInfo.loading) return\n\n    if (referenceInfo.result?.refValue) {\n      replaceCurrent({\n        id: referenceInfo.result.refValue,\n        params: params as Record<string, string>,\n      })\n    }\n  }, [referenceInfo.loading, referenceInfo.result, replaceCurrent, params])\n\n  const shouldHide =\n    // if `parentId` or `parentRefPath` is not present then this banner is n/a\n    !parentId ||\n    !parentRefPath ||\n    // if viewing this pane via history, then hide\n    hasHistoryOpen ||\n    // if loading, hide\n    referenceInfo.loading ||\n    // if the parent document is not available (e.g. due to permission denied or\n    // not found) we don't want to display a warning here, but instead rely on the\n    // parent view to display the appropriate message\n    (!referenceInfo.result?.availability.draft.available &&\n      !referenceInfo.result?.availability.published.available) ||\n    // if the references are the same, then hide the reference changed banner\n    referenceInfo.result?.refValue === routerReferenceId\n\n  if (shouldHide) return null\n\n  return (\n    <Banner\n      action={\n        referenceInfo.result?.refValue\n          ? {\n              onClick: handleReloadReference,\n              icon: SyncIcon,\n              text: t('banners.reference-changed-banner.reason-changed.reload-button.text'),\n            }\n          : {\n              as: BackLink,\n              icon: CloseIcon,\n              text: t('banners.reference-changed-banner.reason-removed.close-button.text'),\n            }\n      }\n      data-testid=\"reference-changed-banner\"\n      content={\n        <Text size={1} weight=\"medium\">\n          {referenceInfo.result?.refValue\n            ? t('banners.reference-changed-banner.reason-changed.text')\n            : t('banners.reference-changed-banner.reason-removed.text')}\n        </Text>\n      }\n      icon={WarningOutlineIcon}\n      tone=\"caution\"\n    />\n  )\n})\n\nReferenceChangedBanner.displayName = 'Memo(ReferenceChangedBanner)'\n","import {defineEvent} from '@sanity/telemetry'\n\ninterface TypeInfo {\n  liveEditResolveType: 'publish' | 'discard'\n}\n\n/**\n * When a draft in a live edit document is published\n * @internal\n */\nexport const ResolvedLiveEdit = defineEvent<TypeInfo>({\n  name: 'Resolved LiveEdit Draft',\n  version: 1,\n  description: 'User resolved a draft of a live edit document to continue editing',\n})\n","import {type SanityDocument} from '@sanity/client'\nimport {ErrorOutlineIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {Flex, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useState} from 'react'\nimport {\n  isDraftId,\n  type ObjectSchemaType,\n  Translate,\n  useDocumentOperation,\n  useTranslation,\n} from 'sanity'\n\nimport {Button} from '../../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {ResolvedLiveEdit} from './__telemetry__/DraftLiveEditBanner.telemetry'\nimport {Banner} from './Banner'\n\ninterface DraftLiveEditBannerProps {\n  displayed: Partial<SanityDocument> | null\n  documentId: string\n  schemaType: ObjectSchemaType\n}\n\nexport function DraftLiveEditBanner({\n  displayed,\n  documentId,\n  schemaType,\n}: DraftLiveEditBannerProps): JSX.Element | null {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const [isPublishing, setPublishing] = useState(false)\n  const [isDiscarding, setDiscarding] = useState(false)\n  const telemetry = useTelemetry()\n\n  const {publish, discardChanges} = useDocumentOperation(documentId, displayed?._type || '')\n\n  const handlePublish = useCallback(() => {\n    publish.execute()\n    setPublishing(true)\n    telemetry.log(ResolvedLiveEdit, {liveEditResolveType: 'publish'})\n  }, [publish, telemetry])\n\n  const handleDiscard = useCallback(() => {\n    discardChanges.execute()\n    setDiscarding(true)\n    telemetry.log(ResolvedLiveEdit, {liveEditResolveType: 'discard'})\n  }, [discardChanges, telemetry])\n\n  useEffect(() => {\n    return () => {\n      setPublishing(false)\n      setDiscarding(false)\n    }\n  })\n\n  if (displayed && displayed._id && !isDraftId(displayed._id)) {\n    return null\n  }\n\n  return (\n    <Banner\n      content={\n        <Flex align=\"center\" justify=\"space-between\" gap={1}>\n          <Text size={1} weight=\"medium\">\n            <Translate\n              t={t}\n              i18nKey={'banners.live-edit-draft-banner.text'}\n              values={{schemaType: schemaType.title}}\n            />\n          </Text>\n          <Button\n            onClick={handlePublish}\n            text={t('action.publish.live-edit.label')}\n            tooltipProps={{content: t('banners.live-edit-draft-banner.publish.tooltip')}}\n            loading={isPublishing}\n          />\n\n          <Button\n            onClick={handleDiscard}\n            text={t('banners.live-edit-draft-banner.discard.tooltip')}\n            tooltipProps={{content: t('banners.live-edit-draft-banner.discard.tooltip')}}\n            loading={isDiscarding}\n          />\n        </Flex>\n      }\n      data-testid=\"live-edit-type-banner\"\n      icon={ErrorOutlineIcon}\n    />\n  )\n}\n","import {type ObjectSchemaType} from '@sanity/types'\nimport {Heading, Stack, Text} from '@sanity/ui'\nimport {useTranslation} from 'react-i18next'\nimport {css, styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\n\ninterface DocumentHeaderProps {\n  documentId: string\n  schemaType: ObjectSchemaType\n  title?: string\n}\n\n/**\n * Use CSS container queries to conditionally render headings at different sizes.\n * We hide this entire container (including the document type) if container queries\n * not supported in the current browser.\n *\n * Note that usage of container queries in `styled-components` is only supported in `6.x`.\n * As such, studios that include `\"styled-components\": \"<6\"` as a dependency will only see\n * the largest heading size here, even if their browser supports it!\n */\n\nexport const TitleContainer = styled(Stack)`\n  ${({theme}) => {\n    return css`\n      @supports not (container-type: inline-size) {\n        display: none !important;\n      }\n\n      container-type: inline-size;\n\n      [data-heading] {\n        font-size: ${theme.sanity.fonts.heading.sizes[4].fontSize}px;\n        line-height: ${theme.sanity.fonts.heading.sizes[4].lineHeight}px;\n        overflow-wrap: break-word;\n        text-wrap: pretty;\n      }\n\n      @container (max-width: 560px) {\n        [data-heading] {\n          font-size: ${theme.sanity.fonts.heading.sizes[3].fontSize}px;\n          line-height: ${theme.sanity.fonts.heading.sizes[3].lineHeight}px;\n        }\n      }\n\n      @container (max-width: 420px) {\n        [data-heading] {\n          font-size: ${theme.sanity.fonts.heading.sizes[2].fontSize}px;\n          line-height: ${theme.sanity.fonts.heading.sizes[2].lineHeight}px;\n        }\n      }\n    `\n  }}\n`\n\n/**\n * Header containing current document title and type.\n * Document type is hidden if the document `_id` matches the current document `_type`.\n * The entire header is hidden if container queries are not supported.\n */\nexport const FormHeader = ({documentId, schemaType, title}: DocumentHeaderProps) => {\n  const isSingleton = documentId === schemaType.name\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (schemaType.__experimental_formPreviewTitle === false) {\n    return null\n  }\n\n  return (\n    <TitleContainer marginBottom={6} space={4}>\n      {!isSingleton && (\n        <Text muted size={1}>\n          {schemaType.title ?? schemaType.name}\n        </Text>\n      )}\n\n      <Heading as=\"h2\" data-heading muted={!title} data-testid=\"document-panel-document-title\">\n        {title ?? t('document-view.form-view.form-title-fallback')}\n      </Heading>\n    </TitleContainer>\n  )\n}\n","import {type ToastParams, useToast} from '@sanity/ui'\nimport {useEffect} from 'react'\n\n// https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#maximum_delay_value\nconst LONG_ENOUGH_BUT_NOT_TOO_LONG = 1000 * 60 * 60 * 24 * 24\n\n/**\n * Workaround to support conditional toast (e.g. a toast that is visible as long as a condition holds true)\n */\nexport function useConditionalToast(params: ToastParams & {id: string; enabled?: boolean}) {\n  const toast = useToast()\n\n  // note1: there's a `duration || 0` in Sanity UI's pushToast(), so make it non-falsey\n  // note2: cannot use `Infinity` as duration, since it exceeds setTimeout's maximum delay value\n  useEffect(() => {\n    if (params.enabled) {\n      toast.push({...params, duration: LONG_ENOUGH_BUT_NOT_TOO_LONG})\n    }\n    return () => {\n      if (params.enabled) {\n        toast.push({\n          ...params,\n          // Note: @sanity/ui fallbacks to the default duration of 4s in case of falsey values\n          duration: 0.01,\n        })\n      }\n    }\n  }, [params, toast])\n}\n","/* eslint-disable no-nested-ternary */\nimport {Box, Container, Flex, focusFirstDescendant, Spinner, Text} from '@sanity/ui'\nimport {type FormEvent, forwardRef, useCallback, useEffect, useMemo, useState} from 'react'\nimport {tap} from 'rxjs/operators'\nimport {\n  createPatchChannel,\n  type DocumentMutationEvent,\n  type DocumentRebaseEvent,\n  FormBuilder,\n  type FormDocumentValue,\n  fromMutationPatches,\n  type PatchMsg,\n  PresenceOverlay,\n  useDocumentPresence,\n  useDocumentStore,\n  useTranslation,\n} from 'sanity'\n\nimport {Delay} from '../../../../components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {useDocumentTitle} from '../../useDocumentTitle'\nimport {FormHeader} from './FormHeader'\nimport {useConditionalToast} from './useConditionalToast'\n\ninterface FormViewProps {\n  hidden: boolean\n  margins: [number, number, number, number]\n}\n\nconst preventDefault = (ev: FormEvent) => ev.preventDefault()\n\nexport const FormView = forwardRef<HTMLDivElement, FormViewProps>(function FormView(props, ref) {\n  const {hidden, margins} = props\n\n  const {\n    collapsedFieldSets,\n    collapsedPaths,\n    displayed: value,\n    editState,\n    documentId,\n    documentType,\n    fieldActions,\n    onChange,\n    validation,\n    ready,\n    formState,\n    onFocus,\n    connectionState,\n    onBlur,\n    onSetCollapsedPath,\n    onPathOpen,\n    onSetCollapsedFieldSet,\n    onSetActiveFieldGroup,\n    openPath,\n  } = useDocumentPane()\n  const documentStore = useDocumentStore()\n  const presence = useDocumentPresence(documentId)\n  const {title} = useDocumentTitle()\n\n  // The `patchChannel` is an INTERNAL publish/subscribe channel that we use to notify form-builder\n  // nodes about both remote and local patches.\n  // - Used by the Portable Text input to modify selections.\n  // - Used by `withDocument` to reset value.\n  const patchChannel = useMemo(() => createPatchChannel(), [])\n\n  const isLocked = editState?.transactionSyncLock?.enabled\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const conditionalToastParams = useMemo(\n    () => ({\n      id: `sync-lock`,\n      status: 'warning' as const,\n      enabled: isLocked,\n      title: t('document-view.form-view.sync-lock-toast.title'),\n      description: t('document-view.form-view.sync-lock-toast.description'),\n      closable: true,\n    }),\n    [isLocked, t],\n  )\n\n  useConditionalToast(conditionalToastParams)\n\n  useEffect(() => {\n    const sub = documentStore.pair\n      .documentEvents(documentId, documentType)\n      .pipe(\n        tap((event) => {\n          if (event.type === 'mutation') {\n            patchChannel.publish(prepareMutationEvent(event))\n          }\n\n          if (event.type === 'rebase') {\n            patchChannel.publish(prepareRebaseEvent(event))\n          }\n        }),\n      )\n      .subscribe()\n\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [documentId, documentStore, documentType, patchChannel])\n\n  const hasRev = Boolean(value?._rev)\n  useEffect(() => {\n    if (hasRev) {\n      // this is a workaround for an issue that caused the document pushed to withDocument to get\n      // stuck at the first initial value.\n      // This effect is triggered only when the document goes from not having a revision, to getting one\n      // so it will kick in as soon as the document is received from the backend\n      patchChannel.publish({\n        type: 'mutation',\n        patches: [],\n        snapshot: value,\n      })\n    }\n    // React to changes in hasRev only\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [hasRev])\n\n  const [formRef, setFormRef] = useState<null | HTMLDivElement>(null)\n\n  // We only want to run it on first mount\n  const [focusedFirstDescendant, setFocusedFirstDescendant] = useState(false)\n  useEffect(() => {\n    // Only focus on the first descendant if there is not already a focus path\n    // This is to avoid stealing focus from intent links\n    if (!focusedFirstDescendant && ready && !formState?.focusPath.length && formRef) {\n      setFocusedFirstDescendant(true)\n      focusFirstDescendant(formRef)\n    }\n  }, [focusedFirstDescendant, formRef, formState?.focusPath.length, ready])\n\n  const setRef = useCallback(\n    (node: HTMLDivElement | null) => {\n      setFormRef(node)\n      if (typeof ref === 'function') {\n        ref(node)\n      } else if (ref) {\n        ref.current = node\n      }\n    },\n    [ref],\n  )\n\n  // const after = useMemo(\n  //   () =>\n  //     Array.isArray(afterEditorComponents) &&\n  //     afterEditorComponents.map(\n  //       (AfterEditorComponent: ComponentType<{documentId: string}>, idx: number) => (\n  //         <AfterEditorComponent key={String(idx)} documentId={documentId} />\n  //       )\n  //     ),\n  //   [documentId]\n  // )\n\n  return (\n    <Container\n      hidden={hidden}\n      paddingX={4}\n      paddingTop={5}\n      paddingBottom={9}\n      sizing=\"border\"\n      width={1}\n    >\n      <PresenceOverlay margins={margins}>\n        <Box as=\"form\" onSubmit={preventDefault} ref={setRef}>\n          {connectionState === 'connecting' && !editState?.draft && !editState?.published ? (\n            <Delay ms={300}>\n              {/* TODO: replace with loading block */}\n              <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n                <Spinner muted />\n                <Box marginTop={3}>\n                  <Text align=\"center\" muted size={1}>\n                    {t('document-view.form-view.loading')}\n                  </Text>\n                </Box>\n              </Flex>\n            </Delay>\n          ) : formState === null || hidden ? (\n            <Box padding={2}>\n              <Text>{t('document-view.form-view.form-hidden')}</Text>\n            </Box>\n          ) : (\n            <>\n              <FormHeader documentId={documentId} schemaType={formState.schemaType} title={title} />\n              <FormBuilder\n                __internal_fieldActions={fieldActions}\n                __internal_patchChannel={patchChannel}\n                changed={formState.changed}\n                collapsedFieldSets={collapsedFieldSets}\n                collapsedPaths={collapsedPaths}\n                focused={formState.focused}\n                focusPath={formState.focusPath}\n                groups={formState.groups}\n                id=\"root\"\n                members={formState.members}\n                onChange={onChange}\n                onFieldGroupSelect={onSetActiveFieldGroup}\n                onPathBlur={onBlur}\n                onPathFocus={onFocus}\n                onPathOpen={onPathOpen}\n                onSetFieldSetCollapsed={onSetCollapsedFieldSet}\n                onSetPathCollapsed={onSetCollapsedPath}\n                openPath={openPath}\n                presence={presence}\n                readOnly={\n                  connectionState === 'reconnecting' || formState.readOnly || !editState?.ready\n                }\n                schemaType={formState.schemaType}\n                validation={validation}\n                value={\n                  // note: the form state doesn't have a typed concept of a \"document\" value\n                  // but these should be compatible\n                  formState.value as FormDocumentValue\n                }\n              />\n            </>\n          )}\n        </Box>\n      </PresenceOverlay>\n    </Container>\n  )\n})\n\nfunction prepareMutationEvent(event: DocumentMutationEvent): PatchMsg {\n  const patches = event.mutations.map((mut) => mut.patch).filter(Boolean)\n\n  return {\n    type: 'mutation',\n    snapshot: event.document,\n    patches: fromMutationPatches(event.origin, patches),\n  }\n}\n\nfunction prepareRebaseEvent(event: DocumentRebaseEvent): PatchMsg {\n  const remotePatches = event.remoteMutations.map((mut) => mut.patch).filter(Boolean)\n  const localPatches = event.localMutations.map((mut) => mut.patch).filter(Boolean)\n\n  return {\n    type: 'rebase',\n    snapshot: event.document,\n    patches: fromMutationPatches('remote', remotePatches).concat(\n      fromMutationPatches('local', localPatches),\n    ),\n  }\n}\n","import {BoundaryElementProvider, Box, Flex, PortalProvider, usePortal} from '@sanity/ui'\nimport {createElement, useEffect, useMemo, useRef, useState} from 'react'\nimport {ScrollContainer, useTimelineSelector, VirtualizerScrollInstanceProvider} from 'sanity'\nimport {css, styled} from 'styled-components'\n\nimport {PaneContent, usePane, usePaneLayout} from '../../../components'\nimport {isLiveEditEnabled} from '../../../components/paneItem/helpers'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {DocumentInspectorPanel} from '../documentInspector'\nimport {InspectDialog} from '../inspectDialog'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {\n  DeletedDocumentBanner,\n  DeprecatedDocumentTypeBanner,\n  InsufficientPermissionBanner,\n  ReferenceChangedBanner,\n} from './banners'\nimport {DraftLiveEditBanner} from './banners/DraftLiveEditBanner'\nimport {FormView} from './documentViews'\n\ninterface DocumentPanelProps {\n  footerHeight: number | null\n  headerHeight: number | null\n  isInspectOpen: boolean\n  rootElement: HTMLDivElement | null\n  setDocumentPanelPortalElement: (el: HTMLElement | null) => void\n}\n\nconst DocumentBox = styled(Box)({\n  position: 'relative',\n})\n\nconst Scroller = styled(ScrollContainer)<{$disabled: boolean}>(({$disabled}) => {\n  if ($disabled) {\n    return {height: '100%'}\n  }\n\n  return css`\n    height: 100%;\n    overflow: auto;\n    position: relative;\n    scroll-behavior: smooth;\n    outline: none;\n  `\n})\n\nexport const DocumentPanel = function DocumentPanel(props: DocumentPanelProps) {\n  const {footerHeight, headerHeight, isInspectOpen, rootElement, setDocumentPanelPortalElement} =\n    props\n  const {\n    activeViewId,\n    displayed,\n    documentId,\n    editState,\n    inspector,\n    value,\n    views,\n    ready,\n    schemaType,\n    permissions,\n    isPermissionsLoading,\n    isDeleting,\n    isDeleted,\n    timelineStore,\n  } = useDocumentPane()\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const {collapsed} = usePane()\n  const parentPortal = usePortal()\n  const {features} = useStructureTool()\n  const portalRef = useRef<HTMLDivElement | null>(null)\n  const [documentScrollElement, setDocumentScrollElement] = useState<HTMLDivElement | null>(null)\n  const formContainerElement = useRef<HTMLDivElement | null>(null)\n\n  const requiredPermission = value._createdAt ? 'update' : 'create'\n\n  const activeView = useMemo(\n    () => views.find((view) => view.id === activeViewId) || views[0] || {type: 'form'},\n    [activeViewId, views],\n  )\n\n  // Use a local portal container when split panes is supported\n  const portalElement: HTMLElement | null = features.splitPanes\n    ? portalRef.current || parentPortal.element\n    : parentPortal.element\n\n  // Calculate the height of the header\n  const margins: [number, number, number, number] = useMemo(() => {\n    if (layoutCollapsed) {\n      return [headerHeight || 0, 0, footerHeight ? footerHeight + 2 : 2, 0]\n    }\n\n    return [0, 0, 2, 0]\n  }, [layoutCollapsed, footerHeight, headerHeight])\n\n  const formViewHidden = activeView.type !== 'form'\n\n  const activeViewNode = useMemo(\n    () =>\n      activeView.type === 'component' &&\n      activeView.component &&\n      createElement(activeView.component, {\n        document: {\n          draft: editState?.draft || null,\n          displayed: displayed || value,\n          historical: displayed,\n          published: editState?.published || null,\n        },\n        documentId,\n        options: activeView.options,\n        schemaType,\n      }),\n    [activeView, displayed, documentId, editState?.draft, editState?.published, schemaType, value],\n  )\n\n  const lastNonDeletedRevId = useTimelineSelector(\n    timelineStore,\n    (state) => state.lastNonDeletedRevId,\n  )\n\n  const isLiveEdit = isLiveEditEnabled(schemaType)\n\n  // Scroll to top as `documentId` changes\n  useEffect(() => {\n    if (!documentScrollElement?.scrollTo) return\n    documentScrollElement.scrollTo(0, 0)\n  }, [documentId, documentScrollElement])\n\n  // Pass portal element to `DocumentPane`\n  useEffect(() => {\n    if (portalElement) {\n      setDocumentPanelPortalElement(portalElement)\n    }\n  }, [portalElement, setDocumentPanelPortalElement])\n\n  const inspectDialog = useMemo(() => {\n    return isInspectOpen ? <InspectDialog value={displayed || value} /> : null\n  }, [isInspectOpen, displayed, value])\n\n  const showInspector = Boolean(!collapsed && inspector)\n\n  return (\n    <PaneContent>\n      <Flex height=\"fill\">\n        {(features.resizablePanes || !showInspector) && (\n          <DocumentBox flex={2} overflow=\"hidden\">\n            <PortalProvider\n              element={portalElement}\n              __unstable_elements={{documentScrollElement: documentScrollElement}}\n            >\n              <BoundaryElementProvider element={documentScrollElement}>\n                <VirtualizerScrollInstanceProvider\n                  scrollElement={documentScrollElement}\n                  containerElement={formContainerElement}\n                >\n                  {activeView.type === 'form' && isLiveEdit && ready && (\n                    <DraftLiveEditBanner\n                      displayed={displayed}\n                      documentId={documentId}\n                      schemaType={schemaType}\n                    />\n                  )}\n\n                  {activeView.type === 'form' && !isPermissionsLoading && ready && (\n                    <>\n                      {!permissions?.granted && (\n                        <InsufficientPermissionBanner requiredPermission={requiredPermission} />\n                      )}\n                      {!isDeleting && isDeleted && (\n                        <DeletedDocumentBanner revisionId={lastNonDeletedRevId} />\n                      )}\n                      <ReferenceChangedBanner />\n                      <DeprecatedDocumentTypeBanner />\n                    </>\n                  )}\n\n                  <Scroller\n                    $disabled={layoutCollapsed || false}\n                    data-testid=\"document-panel-scroller\"\n                    ref={setDocumentScrollElement}\n                  >\n                    <FormView\n                      hidden={formViewHidden}\n                      margins={margins}\n                      ref={formContainerElement}\n                    />\n                    {activeViewNode}\n                  </Scroller>\n\n                  {inspectDialog}\n\n                  <div data-testid=\"document-panel-portal\" ref={portalRef} />\n                </VirtualizerScrollInstanceProvider>\n              </BoundaryElementProvider>\n            </PortalProvider>\n          </DocumentBox>\n        )}\n\n        {showInspector && (\n          <BoundaryElementProvider element={rootElement}>\n            <DocumentInspectorPanel\n              documentId={documentId}\n              documentType={schemaType.name}\n              flex={1}\n            />\n          </BoundaryElementProvider>\n        )}\n      </Flex>\n    </PaneContent>\n  )\n}\n","import {type Placement} from '@sanity/ui'\n\nimport {type DialogProps} from '../../../../../ui-components'\n\nexport const POPOVER_FALLBACK_PLACEMENTS: Placement[] = ['left', 'bottom']\n\nexport const DIALOG_WIDTH_TO_UI_WIDTH: {[key: string]: DialogProps['width']} = {\n  small: 0,\n  medium: 1,\n  large: 2,\n  full: 'auto',\n}\n","import {\n  Box,\n  Button, // eslint-disable-line no-restricted-imports\n  Flex,\n  Grid,\n  Popover, // eslint-disable-line no-restricted-imports\n  Text,\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useLayer,\n} from '@sanity/ui'\nimport {useCallback, useRef} from 'react'\nimport {type DocumentActionConfirmDialogProps, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {POPOVER_FALLBACK_PLACEMENTS} from './constants'\n\nexport function ConfirmDialog(props: {\n  dialog: DocumentActionConfirmDialogProps\n  referenceElement: HTMLElement | null\n}) {\n  const {dialog, referenceElement} = props\n\n  return (\n    <Popover\n      content={<ConfirmDialogContent dialog={dialog} />}\n      fallbackPlacements={POPOVER_FALLBACK_PLACEMENTS}\n      open\n      placement=\"top\"\n      portal\n      preventOverflow\n      referenceElement={referenceElement}\n    />\n  )\n}\n\n/**\n * Dialog rendered by custom document actions of dialog type `confirm`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nfunction ConfirmDialogContent(props: {dialog: DocumentActionConfirmDialogProps}) {\n  const {dialog} = props\n  const {\n    cancelButtonIcon,\n    cancelButtonText,\n    confirmButtonIcon,\n    confirmButtonText,\n    // color,\n    message,\n    onCancel,\n    onConfirm,\n    tone,\n  } = dialog\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {isTopLayer} = useLayer()\n  const ref = useRef<HTMLDivElement | null>(null)\n\n  const handleGlobalKeyDown = useCallback(\n    (event: any) => {\n      if (event.key === 'Escape' && isTopLayer) onCancel()\n    },\n    [isTopLayer, onCancel],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(isTopLayer && onCancel, () => [ref.current])\n\n  return (\n    <Flex direction=\"column\" ref={ref} style={{minWidth: 320 - 16, maxWidth: 400}}>\n      <Box flex={1} overflow=\"auto\" padding={4}>\n        <Text>{message}</Text>\n      </Box>\n      <Box paddingX={4} paddingY={3} style={{borderTop: '1px solid var(--card-border-color)'}}>\n        <Grid columns={2} gap={2}>\n          <Button\n            data-testid=\"confirm-dialog-cancel-button\"\n            icon={cancelButtonIcon}\n            onClick={onCancel}\n            mode=\"ghost\"\n            text={cancelButtonText || t('confirm-dialog.cancel-button.fallback-text')}\n          />\n          <Button\n            data-testid=\"confirm-dialog-confirm-button\"\n            icon={confirmButtonIcon}\n            onClick={onConfirm}\n            text={confirmButtonText || t('confirm-dialog.confirm-button.fallback-text')}\n            tone={tone}\n          />\n        </Grid>\n      </Box>\n    </Flex>\n  )\n}\n","import {\n  Box,\n  Dialog, // eslint-disable-line no-restricted-imports\n} from '@sanity/ui'\nimport {useId} from 'react'\nimport {type DocumentActionModalDialogProps, LegacyLayerProvider} from 'sanity'\n\nimport {DIALOG_WIDTH_TO_UI_WIDTH} from './constants'\n\n/**\n * Dialog rendered by custom document actions of dialog type `dialog`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nexport function ModalDialog(props: {dialog: DocumentActionModalDialogProps}) {\n  const {dialog} = props\n  const dialogId = useId()\n\n  const footer = dialog.footer && (\n    <Box paddingX={4} paddingY={3}>\n      {dialog.footer}\n    </Box>\n  )\n\n  return (\n    <LegacyLayerProvider zOffset=\"fullscreen\">\n      <Dialog\n        animate\n        __unstable_hideCloseButton={dialog.showCloseButton === false}\n        footer={footer}\n        header={dialog.header}\n        id={dialogId}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClose={dialog.onClose}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClickOutside={dialog.onClose}\n        width={dialog.width === undefined ? 1 : DIALOG_WIDTH_TO_UI_WIDTH[dialog.width]}\n      >\n        <Box padding={4}>{dialog.content}</Box>\n      </Dialog>\n    </LegacyLayerProvider>\n  )\n}\n","import {\n  Popover, // eslint-disable-line no-restricted-imports\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useLayer,\n} from '@sanity/ui'\nimport {useCallback, useRef} from 'react'\nimport {type DocumentActionPopoverDialogProps} from 'sanity'\n\nimport {POPOVER_FALLBACK_PLACEMENTS} from './constants'\n\nexport function PopoverDialog(props: {\n  dialog: DocumentActionPopoverDialogProps\n  referenceElement: HTMLElement | null\n}) {\n  const {dialog, referenceElement} = props\n\n  return (\n    <Popover\n      content={<PopoverDialogContent dialog={dialog} />}\n      fallbackPlacements={POPOVER_FALLBACK_PLACEMENTS}\n      open\n      placement=\"top\"\n      portal\n      preventOverflow\n      referenceElement={referenceElement}\n    />\n  )\n}\n\n/**\n * Popover rendered by custom document actions of dialog type `popover`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nfunction PopoverDialogContent(props: {dialog: DocumentActionPopoverDialogProps}) {\n  const {dialog} = props\n  const {content, onClose} = dialog\n  const {isTopLayer} = useLayer()\n  const ref = useRef<HTMLDivElement | null>(null)\n\n  const handleGlobalKeyDown = useCallback(\n    (event: any) => {\n      if (event.key === 'Escape' && isTopLayer) onClose()\n    },\n    [isTopLayer, onClose],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(isTopLayer && onClose, () => [ref.current])\n\n  return <div ref={ref}>{content}</div>\n}\n","import {PortalProvider, Text, usePortal} from '@sanity/ui'\nimport {type ReactNode, useId} from 'react'\nimport {type DocumentActionDialogProps} from 'sanity'\n\nimport {Dialog} from '../../../../ui-components'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {ConfirmDialog} from './dialogs/ConfirmDialog'\nimport {ModalDialog} from './dialogs/ModalDialog'\nimport {PopoverDialog} from './dialogs/PopoverDialog'\n\nexport interface ActionStateDialogProps {\n  dialog: DocumentActionDialogProps\n  referenceElement?: HTMLElement | null\n}\n\n// A portal provider that uses the document panel portal element if it exists\n// as the portal element so that dialogs are scoped to the document panel\nfunction DocumentActionPortalProvider(props: {children: ReactNode}) {\n  const {children} = props\n  const {element, elements} = usePortal()\n  const portalElement = elements?.[DOCUMENT_PANEL_PORTAL_ELEMENT] || element\n\n  return <PortalProvider element={portalElement}>{children}</PortalProvider>\n}\n\nexport function ActionStateDialog(props: ActionStateDialogProps) {\n  const {dialog, referenceElement = null} = props\n  const modalId = useId()\n\n  if (dialog.type === 'confirm') {\n    return <ConfirmDialog dialog={dialog} referenceElement={referenceElement} />\n  }\n\n  if (dialog.type === 'popover') {\n    return <PopoverDialog dialog={dialog} referenceElement={referenceElement} />\n  }\n\n  if (dialog.type === 'dialog' || !dialog.type) {\n    return (\n      <DocumentActionPortalProvider>\n        <ModalDialog dialog={dialog} />\n      </DocumentActionPortalProvider>\n    )\n  }\n\n  if (dialog.type === 'custom') {\n    return <DocumentActionPortalProvider>{dialog?.component}</DocumentActionPortalProvider>\n  }\n\n  // @todo: add validation?\n  const unknownModal: any = dialog\n\n  // eslint-disable-next-line no-console\n  console.warn(`Unsupported modal type ${unknownModal.type}`)\n\n  return (\n    <Dialog\n      id={modalId}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClose={unknownModal.onClose}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClickOutside={unknownModal.onClose}\n      width={1}\n    >\n      {unknownModal.content || (\n        // eslint-disable-next-line i18next/no-literal-string\n        <Text size={1}>\n          Unexpected modal type (<code>{unknownModal.type}</code>)\n        </Text>\n      )}\n    </Dialog>\n  )\n}\n","import {Menu} from '@sanity/ui'\nimport {memo, type ReactNode, useCallback, useId, useMemo, useState} from 'react'\nimport {\n  ContextMenuButton,\n  type DocumentActionDescription,\n  LegacyLayerProvider,\n  useTranslation,\n} from 'sanity'\n\nimport {MenuButton, MenuItem, type PopoverProps} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {ActionStateDialog} from './ActionStateDialog'\n\nexport interface ActionMenuButtonProps {\n  actionStates: DocumentActionDescription[]\n  disabled: boolean\n}\n\n/**\n * @internal\n */\nexport const ActionDialogWrapper = memo(function ActionDialogWrapper({\n  actionStates,\n  children,\n  referenceElement,\n}: {\n  actionStates: DocumentActionDescription[]\n  children: ({handleAction}: {handleAction: (idx: number) => void}) => ReactNode\n  referenceElement?: HTMLElement | null\n}) {\n  const [actionIndex, setActionIndex] = useState(-1)\n  const currentAction = useMemo(() => actionStates[actionIndex], [actionIndex, actionStates])\n\n  const handleAction = useCallback((idx: number) => {\n    setActionIndex(idx)\n  }, [])\n\n  const result = useMemo(() => children({handleAction}), [children, handleAction])\n\n  return (\n    <>\n      {currentAction && currentAction.dialog && (\n        <LegacyLayerProvider zOffset=\"paneFooter\">\n          <ActionStateDialog dialog={currentAction.dialog} referenceElement={referenceElement} />\n        </LegacyLayerProvider>\n      )}\n      {result}\n    </>\n  )\n})\n\n/**\n * @internal\n */\nexport function ActionMenuButton(props: ActionMenuButtonProps) {\n  const {actionStates, disabled} = props\n  const idPrefix = useId()\n\n  const [referenceElement, setReferenceElement] = useState<HTMLButtonElement | null>(null)\n\n  const popoverProps: PopoverProps = useMemo(\n    () => ({\n      placement: 'top-end',\n      portal: true,\n      preventOverflow: true,\n    }),\n    [],\n  )\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const renderActionDialog = useCallback<\n    ({handleAction}: {handleAction: (idx: number) => void}) => ReactNode\n  >(\n    ({handleAction}) => (\n      <MenuButton\n        id={`${idPrefix}-action-menu`}\n        button={\n          <ContextMenuButton\n            aria-label={t('buttons.action-menu-button.aria-label')}\n            disabled={disabled}\n            data-testid=\"action-menu-button\"\n            size=\"large\"\n            tooltipProps={{content: t('buttons.action-menu-button.tooltip')}}\n          />\n        }\n        menu={\n          <Menu padding={1}>\n            {actionStates.map((actionState, idx) => (\n              <ActionMenuListItem\n                actionState={actionState}\n                disabled={disabled}\n                index={idx}\n                // eslint-disable-next-line react/no-array-index-key\n                key={idx}\n                onAction={handleAction}\n              />\n            ))}\n          </Menu>\n        }\n        popover={popoverProps}\n        ref={setReferenceElement}\n      />\n    ),\n    [actionStates, disabled, idPrefix, popoverProps, t],\n  )\n\n  return (\n    <ActionDialogWrapper actionStates={actionStates} referenceElement={referenceElement}>\n      {renderActionDialog}\n    </ActionDialogWrapper>\n  )\n}\n\ninterface ActionMenuListItemProps {\n  actionState: DocumentActionDescription\n  disabled: boolean\n  index: number\n  onAction: (idx: number) => void\n}\n\nexport function ActionMenuListItem(props: ActionMenuListItemProps) {\n  const {actionState, disabled, index, onAction} = props\n  const {onHandle} = actionState\n\n  const handleClick = useCallback(() => {\n    onAction(index)\n    if (onHandle) onHandle()\n  }, [index, onAction, onHandle])\n\n  const hotkeys = useMemo(() => {\n    return actionState.shortcut\n      ? String(actionState.shortcut)\n          .split('+')\n          .map((s) => s.slice(0, 1).toUpperCase() + s.slice(1))\n      : undefined\n  }, [actionState.shortcut])\n\n  return (\n    <MenuItem\n      data-testid={`action-${actionState.label.replace(' ', '')}`}\n      disabled={disabled || Boolean(actionState.disabled)}\n      hotkeys={hotkeys}\n      icon={actionState.icon}\n      onClick={handleClick}\n      text={actionState.label}\n      tone={actionState.tone}\n      {...(actionState.disabled && {tooltipProps: {content: actionState.title}})}\n    />\n  )\n}\n","/* eslint-disable import/no-extraneous-dependencies */\n\nimport {TrashIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {ConfirmDeleteDialog} from '../components'\nimport {structureLocaleNamespace} from '../i18n'\nimport {useDocumentPane} from '../panes/document/useDocumentPane'\n\nconst DISABLED_REASON_TITLE_KEY = {\n  NOTHING_TO_DELETE: 'action.delete.disabled.nothing-to-delete',\n  NOT_READY: 'action.delete.disabled.not-ready',\n}\n\n/** @internal */\nexport const DeleteAction: DocumentActionComponent = ({id, type, draft, onComplete}) => {\n  const {setIsDeleting: paneSetIsDeleting} = useDocumentPane()\n  const {delete: deleteOp} = useDocumentOperation(id, type)\n  const [isDeleting, setIsDeleting] = useState(false)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleCancel = useCallback(() => {\n    setConfirmDialogOpen(false)\n    onComplete()\n  }, [onComplete])\n\n  const handleConfirm = useCallback(() => {\n    setIsDeleting(true)\n    setConfirmDialogOpen(false)\n    paneSetIsDeleting(true)\n    deleteOp.execute()\n    onComplete()\n  }, [deleteOp, onComplete, paneSetIsDeleting])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'delete',\n  })\n\n  const currentUser = useCurrentUser()\n\n  return useMemo(() => {\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: TrashIcon,\n        disabled: true,\n        label: t('action.delete.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"delete-document\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: TrashIcon,\n      disabled: isDeleting || Boolean(deleteOp.disabled) || isPermissionsLoading,\n      title: (deleteOp.disabled && t(DISABLED_REASON_TITLE_KEY[deleteOp.disabled])) || '',\n      label: isDeleting ? t('action.delete.running.label') : t('action.delete.label'),\n      shortcut: 'Ctrl+Alt+D',\n      onHandle: handle,\n      dialog: isConfirmDialogOpen && {\n        type: 'custom',\n        component: (\n          <ConfirmDeleteDialog\n            // eslint-disable-next-line @sanity/i18n/no-attribute-string-literals\n            action=\"delete\"\n            id={draft?._id || id}\n            type={type}\n            onCancel={handleCancel}\n            onConfirm={handleConfirm}\n          />\n        ),\n      },\n    }\n  }, [\n    currentUser,\n    deleteOp.disabled,\n    draft?._id,\n    handle,\n    handleCancel,\n    handleConfirm,\n    id,\n    isConfirmDialogOpen,\n    isDeleting,\n    isPermissionsLoading,\n    permissions?.granted,\n    t,\n    type,\n  ])\n}\n\nDeleteAction.action = 'delete'\nDeleteAction.displayName = 'DeleteAction'\n","/* eslint-disable import/no-extraneous-dependencies */\n\nimport {ResetIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDialogProps,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NO_CHANGES: 'action.discard-changes.disabled.no-change',\n  NOT_PUBLISHED: 'action.discard-changes.disabled.not-published',\n  NOT_READY: 'action.discard-changes.disabled.not-ready',\n} as const\n\n/** @internal */\nexport const DiscardChangesAction: DocumentActionComponent = ({\n  id,\n  type,\n  published,\n  liveEdit,\n  onComplete,\n}) => {\n  const {discardChanges} = useDocumentOperation(id, type)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'discardDraft',\n  })\n  const currentUser = useCurrentUser()\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleConfirm = useCallback(() => {\n    discardChanges.execute()\n    onComplete()\n  }, [discardChanges, onComplete])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const dialog: DocumentActionDialogProps | false = useMemo(\n    () =>\n      isConfirmDialogOpen && {\n        type: 'confirm',\n        tone: 'critical',\n        onCancel: onComplete,\n        onConfirm: handleConfirm,\n        message: t('action.discard-changes.confirm-dialog.confirm-discard-changes'),\n      },\n    [handleConfirm, isConfirmDialogOpen, onComplete, t],\n  )\n\n  return useMemo(() => {\n    if (!published || liveEdit) {\n      return null\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: ResetIcon,\n        disabled: true,\n        label: t('action.discard-changes.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"discard-changes\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: ResetIcon,\n      disabled: Boolean(discardChanges.disabled) || isPermissionsLoading,\n      title: (discardChanges.disabled && DISABLED_REASON_KEY[discardChanges.disabled]) || '',\n      label: t('action.discard-changes.label'),\n      onHandle: handle,\n      dialog,\n    }\n  }, [\n    currentUser,\n    dialog,\n    discardChanges.disabled,\n    handle,\n    isPermissionsLoading,\n    liveEdit,\n    permissions?.granted,\n    published,\n    t,\n  ])\n}\n\nDiscardChangesAction.action = 'discardChanges'\nDiscardChangesAction.displayName = 'DiscardChangesAction'\n","import {CopyIcon} from '@sanity/icons'\nimport {uuid} from '@sanity/uuid'\nimport {useCallback, useMemo, useState} from 'react'\nimport {filter, firstValueFrom} from 'rxjs'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useDocumentStore,\n  useTranslation,\n} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NOTHING_TO_DUPLICATE: 'action.duplicate.disabled.nothing-to-duplicate',\n  NOT_READY: 'action.duplicate.disabled.not-ready',\n}\n\n/** @internal */\nexport const DuplicateAction: DocumentActionComponent = ({id, type, onComplete}) => {\n  const documentStore = useDocumentStore()\n  const {duplicate} = useDocumentOperation(id, type)\n  const {navigateIntent} = useRouter()\n  const [isDuplicating, setDuplicating] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'duplicate',\n  })\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const currentUser = useCurrentUser()\n\n  const handle = useCallback(async () => {\n    const dupeId = uuid()\n\n    setDuplicating(true)\n\n    // set up the listener before executing\n    const duplicateSuccess = firstValueFrom(\n      documentStore.pair\n        .operationEvents(id, type)\n        .pipe(filter((e) => e.op === 'duplicate' && e.type === 'success')),\n    )\n    duplicate.execute(dupeId)\n\n    // only navigate to the duplicated document when the operation is successful\n    await duplicateSuccess\n    navigateIntent('edit', {id: dupeId, type})\n\n    onComplete()\n  }, [documentStore.pair, duplicate, id, navigateIntent, onComplete, type])\n\n  return useMemo(() => {\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        icon: CopyIcon,\n        disabled: true,\n        label: t('action.duplicate.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"duplicate-document\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      icon: CopyIcon,\n      disabled: isDuplicating || Boolean(duplicate.disabled) || isPermissionsLoading,\n      label: isDuplicating ? t('action.duplicate.running.label') : t('action.duplicate.label'),\n      title: duplicate.disabled ? t(DISABLED_REASON_KEY[duplicate.disabled]) : '',\n      onHandle: handle,\n    }\n  }, [\n    currentUser,\n    duplicate.disabled,\n    handle,\n    isDuplicating,\n    isPermissionsLoading,\n    permissions?.granted,\n    t,\n  ])\n}\n\nDuplicateAction.action = 'duplicate'\nDuplicateAction.displayName = 'DuplicateAction'\n","import {RevertIcon} from '@sanity/icons'\nimport {useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDialogProps,\n  useDocumentOperation,\n  useDocumentOperationEvent,\n  useTranslation,\n} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../i18n'\n\n/** @internal */\nexport const HistoryRestoreAction: DocumentActionComponent = ({id, type, revision, onComplete}) => {\n  const {restore} = useDocumentOperation(id, type)\n  const event = useDocumentOperationEvent(id, type)\n  const {navigateIntent} = useRouter()\n  const prevEvent = useRef(event)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleConfirm = useCallback(() => {\n    restore.execute(revision!)\n    onComplete()\n  }, [restore, revision, onComplete])\n\n  /**\n   * If the restore operation is successful, navigate to the document edit view\n   */\n  useEffect(() => {\n    if (!event || event === prevEvent.current) return\n\n    if (event.type === 'success' && event.op === 'restore') {\n      navigateIntent('edit', {id, type})\n    }\n\n    prevEvent.current = event\n  }, [event, id, navigateIntent, type])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const dialog: DocumentActionDialogProps | null = useMemo(() => {\n    if (isConfirmDialogOpen) {\n      return {\n        type: 'confirm',\n        tone: 'critical',\n        onCancel: onComplete,\n        onConfirm: handleConfirm,\n        message: t('action.restore.confirm.message'),\n      }\n    }\n\n    return null\n  }, [handleConfirm, isConfirmDialogOpen, onComplete, t])\n\n  const isRevisionInitial = revision === '@initial'\n  const isRevisionLatest = revision === undefined // undefined means latest revision\n\n  return useMemo(() => {\n    if (isRevisionLatest) {\n      return null\n    }\n\n    return {\n      label: t('action.restore.label'),\n      tone: 'caution',\n      onHandle: handle,\n      title: t(\n        isRevisionInitial\n          ? 'action.restore.disabled.cannot-restore-initial'\n          : 'action.restore.tooltip',\n      ),\n      icon: RevertIcon,\n      dialog,\n      disabled: isRevisionInitial,\n    }\n  }, [dialog, handle, isRevisionInitial, isRevisionLatest, t])\n}\n\nHistoryRestoreAction.action = 'restore'\nHistoryRestoreAction.displayName = 'HistoryRestoreAction'\n","import {defineEvent} from '@sanity/telemetry'\n\ninterface DocumentPublishedInfo {\n  /**\n   * The document was created and published straight away\n   */\n  publishedImmediately: boolean\n\n  /**\n   * The document had a previously published version when it was published\n   */\n  previouslyPublished: boolean\n}\nexport const DocumentPublished = defineEvent<DocumentPublishedInfo>({\n  name: 'Document Published',\n  version: 1,\n  description: 'User clicked the \"Publish\" button in the document pane',\n})\n","import {PublishIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {isValidationErrorMarker} from '@sanity/types'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  type TFunction,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useEditState,\n  useRelativeTime,\n  useSyncState,\n  useTranslation,\n  useValidationStatus,\n} from 'sanity'\n\nimport {structureLocaleNamespace, type StructureLocaleResourceKeys} from '../i18n'\nimport {useDocumentPane} from '../panes/document/useDocumentPane'\nimport {DocumentPublished} from './__telemetry__/documentActions.telemetry'\n\nconst DISABLED_REASON_TITLE_KEY: Record<string, StructureLocaleResourceKeys> = {\n  LIVE_EDIT_ENABLED: 'action.publish.live-edit.publish-disabled',\n  ALREADY_PUBLISHED: 'action.publish.already-published.no-time-ago.tooltip',\n  NO_CHANGES: 'action.publish.no-changes.tooltip',\n  NOT_READY: 'action.publish.disabled.not-ready',\n} as const\n\nfunction getDisabledReason(\n  reason: keyof typeof DISABLED_REASON_TITLE_KEY,\n  publishedAt: string | undefined,\n  t: TFunction,\n) {\n  if (reason === 'ALREADY_PUBLISHED' && publishedAt) {\n    return <AlreadyPublished publishedAt={publishedAt} />\n  }\n  return t(DISABLED_REASON_TITLE_KEY[reason])\n}\n\nfunction AlreadyPublished({publishedAt}: {publishedAt: string}) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const timeSincePublished = useRelativeTime(publishedAt, {useTemporalPhrase: true})\n  return <span>{t('action.publish.already-published.tooltip', {timeSincePublished})}</span>\n}\n\n/** @internal */\n// eslint-disable-next-line complexity\nexport const PublishAction: DocumentActionComponent = (props) => {\n  const {id, type, liveEdit, draft, published} = props\n  const [publishState, setPublishState] = useState<'publishing' | 'published' | null>(null)\n  const {publish} = useDocumentOperation(id, type)\n  const validationStatus = useValidationStatus(id, type)\n  const syncState = useSyncState(id, type)\n  const {changesOpen, onHistoryOpen, documentId, documentType} = useDocumentPane()\n  const editState = useEditState(documentId, documentType)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const revision = (editState?.draft || editState?.published || {})._rev\n\n  const hasValidationErrors = validationStatus.validation.some(isValidationErrorMarker)\n  // we use this to \"schedule\" publish after pending tasks (e.g. validation and sync) has completed\n  const [publishScheduled, setPublishScheduled] = useState<boolean>(false)\n  const isSyncing = syncState.isSyncing\n  const isValidating = validationStatus.isValidating\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'publish',\n  })\n\n  const currentUser = useCurrentUser()\n\n  // eslint-disable-next-line no-nested-ternary\n  const title = publish.disabled\n    ? getDisabledReason(publish.disabled, (published || {})._updatedAt, t) || ''\n    : hasValidationErrors\n      ? t('action.publish.validation-issues.tooltip')\n      : ''\n\n  const hasDraft = Boolean(draft)\n\n  const doPublish = useCallback(() => {\n    publish.execute()\n    setPublishState('publishing')\n  }, [publish])\n\n  useEffect(() => {\n    // make sure the validation status is about the current revision and not an earlier one\n    const validationComplete =\n      validationStatus.isValidating === false && validationStatus.revision !== revision\n\n    if (!publishScheduled || isSyncing || !validationComplete) {\n      return\n    }\n\n    if (!hasValidationErrors) {\n      doPublish()\n    }\n    setPublishScheduled(false)\n  }, [\n    isSyncing,\n    doPublish,\n    hasValidationErrors,\n    publishScheduled,\n    validationStatus.revision,\n    revision,\n    isValidating,\n    validationStatus.isValidating,\n  ])\n\n  useEffect(() => {\n    const didPublish = publishState === 'publishing' && !hasDraft\n\n    const nextState = didPublish ? 'published' : null\n    const delay = didPublish ? 200 : 4000\n    const timer = setTimeout(() => {\n      setPublishState(nextState)\n    }, delay)\n    return () => clearTimeout(timer)\n  }, [changesOpen, publishState, hasDraft])\n\n  const telemetry = useTelemetry()\n\n  const handle = useCallback(() => {\n    telemetry.log(DocumentPublished, {\n      publishedImmediately: !draft?._createdAt,\n      previouslyPublished: Boolean(published),\n    })\n    if (\n      syncState.isSyncing ||\n      validationStatus.isValidating ||\n      validationStatus.revision !== revision\n    ) {\n      setPublishScheduled(true)\n    } else {\n      doPublish()\n    }\n  }, [\n    telemetry,\n    draft?._createdAt,\n    published,\n    syncState.isSyncing,\n    validationStatus.isValidating,\n    validationStatus.revision,\n    revision,\n    doPublish,\n  ])\n\n  return useMemo(() => {\n    if (liveEdit) {\n      return {\n        tone: 'default',\n        icon: PublishIcon,\n        label: t('action.publish.live-edit.label'),\n        title: t('action.publish.live-edit.tooltip'),\n        disabled: true,\n      }\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'default',\n        icon: PublishIcon,\n        label: 'Publish',\n        title: (\n          <InsufficientPermissionsMessage context=\"publish-document\" currentUser={currentUser} />\n        ),\n        disabled: true,\n      }\n    }\n\n    const disabled = Boolean(\n      publishScheduled ||\n        editState?.transactionSyncLock?.enabled ||\n        publishState === 'publishing' ||\n        publishState === 'published' ||\n        hasValidationErrors ||\n        publish.disabled,\n    )\n\n    return {\n      disabled: disabled || isPermissionsLoading,\n      tone: 'default',\n      label:\n        // eslint-disable-next-line no-nested-ternary\n        publishState === 'published'\n          ? t('action.publish.published.label')\n          : publishScheduled || publishState === 'publishing'\n            ? t('action.publish.running.label')\n            : t('action.publish.draft.label'),\n      // @todo: Implement loading state, to show a `<Button loading />` state\n      // loading: publishScheduled || publishState === 'publishing',\n      icon: PublishIcon,\n      // eslint-disable-next-line no-nested-ternary\n      title: publishScheduled\n        ? t('action.publish.waiting')\n        : publishState === 'published' || publishState === 'publishing'\n          ? null\n          : title,\n      shortcut: disabled || publishScheduled ? null : 'Ctrl+Alt+P',\n      onHandle: handle,\n    }\n  }, [\n    currentUser,\n    editState?.transactionSyncLock?.enabled,\n    handle,\n    hasValidationErrors,\n    isPermissionsLoading,\n    liveEdit,\n    permissions?.granted,\n    publish.disabled,\n    publishScheduled,\n    publishState,\n    t,\n    title,\n  ])\n}\n\nPublishAction.action = 'publish'\nPublishAction.displayName = 'PublishAction'\n","import {UnpublishIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionModalDialogProps,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {ConfirmDeleteDialog} from '../components'\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NOT_PUBLISHED: 'action.unpublish.disabled.not-published',\n  NOT_READY: 'action.unpublish.disabled.not-ready',\n  LIVE_EDIT_ENABLED: 'action.unpublish.disabled.live-edit-enabled',\n}\n\n/** @internal */\nexport const UnpublishAction: DocumentActionComponent = ({\n  id,\n  type,\n  draft,\n  onComplete,\n  liveEdit,\n}) => {\n  const {unpublish} = useDocumentOperation(id, type)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'unpublish',\n  })\n  const currentUser = useCurrentUser()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleCancel = useCallback(() => {\n    setConfirmDialogOpen(false)\n    onComplete()\n  }, [onComplete])\n\n  const handleConfirm = useCallback(() => {\n    setConfirmDialogOpen(false)\n    unpublish.execute()\n    onComplete()\n  }, [onComplete, unpublish])\n\n  const dialog: DocumentActionModalDialogProps | null = useMemo(() => {\n    if (isConfirmDialogOpen) {\n      return {\n        type: 'dialog',\n        onClose: onComplete,\n        content: (\n          <ConfirmDeleteDialog\n            id={draft?._id || id}\n            type={type}\n            // eslint-disable-next-line @sanity/i18n/no-attribute-string-literals\n            action=\"unpublish\"\n            onCancel={handleCancel}\n            onConfirm={handleConfirm}\n          />\n        ),\n      }\n    }\n\n    return null\n  }, [draft, id, handleCancel, handleConfirm, isConfirmDialogOpen, onComplete, type])\n\n  return useMemo(() => {\n    if (liveEdit) {\n      return null\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: UnpublishIcon,\n        label: 'Unpublish',\n        title: (\n          <InsufficientPermissionsMessage context=\"unpublish-document\" currentUser={currentUser} />\n        ),\n        disabled: true,\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: UnpublishIcon,\n      disabled: Boolean(unpublish.disabled) || isPermissionsLoading,\n      label: t('action.unpublish.label'),\n      title: unpublish.disabled ? t(DISABLED_REASON_KEY[unpublish.disabled]) : '',\n      onHandle: () => setConfirmDialogOpen(true),\n      dialog,\n    }\n  }, [\n    currentUser,\n    dialog,\n    isPermissionsLoading,\n    liveEdit,\n    permissions?.granted,\n    t,\n    unpublish.disabled,\n  ])\n}\n\nUnpublishAction.action = 'unpublish'\nUnpublishAction.displayName = 'UnpublishAction'\n","/* eslint-disable camelcase */\nimport {Flex, LayerProvider, Stack, Text} from '@sanity/ui'\nimport {memo, useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDescription,\n  Hotkeys,\n  useTimelineSelector,\n} from 'sanity'\n\nimport {Button, Tooltip} from '../../../../ui-components'\nimport {RenderActionCollectionState} from '../../../components'\nimport {HistoryRestoreAction} from '../../../documentActions'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {ActionMenuButton} from './ActionMenuButton'\nimport {ActionStateDialog} from './ActionStateDialog'\n\ninterface DocumentStatusBarActionsInnerProps {\n  disabled: boolean\n  showMenu: boolean\n  states: DocumentActionDescription[]\n}\n\nconst DocumentStatusBarActionsInner = memo(function DocumentStatusBarActionsInner(\n  props: DocumentStatusBarActionsInnerProps,\n) {\n  const {disabled, showMenu, states} = props\n  const {__internal_tasks} = useDocumentPane()\n  const [firstActionState, ...menuActionStates] = states\n  const [buttonElement, setButtonElement] = useState<HTMLButtonElement | null>(null)\n\n  // TODO: This could be refactored to use the tooltip from the button if the firstAction.title was updated to a string.\n  const tooltipContent = useMemo(() => {\n    if (!firstActionState || (!firstActionState.title && !firstActionState.shortcut)) return null\n\n    return (\n      <Flex style={{maxWidth: 300}} align=\"center\" gap={3}>\n        {firstActionState.title && <Text size={1}>{firstActionState.title}</Text>}\n        {firstActionState.shortcut && (\n          <Hotkeys\n            data-testid=\"document-status-bar-hotkeys\"\n            fontSize={1}\n            style={{marginTop: -4, marginBottom: -4}}\n            keys={String(firstActionState.shortcut)\n              .split('+')\n              .map((s) => s.slice(0, 1).toUpperCase() + s.slice(1).toLowerCase())}\n          />\n        )}\n      </Flex>\n    )\n  }, [firstActionState])\n\n  return (\n    <Flex align=\"center\" gap={1}>\n      {__internal_tasks && __internal_tasks.footerAction}\n      {firstActionState && (\n        <LayerProvider zOffset={200}>\n          <Tooltip disabled={!tooltipContent} content={tooltipContent} placement=\"top\">\n            <Stack>\n              <Button\n                data-testid={`action-${firstActionState.label}`}\n                disabled={disabled || Boolean(firstActionState.disabled)}\n                icon={firstActionState.icon}\n                // eslint-disable-next-line react/jsx-handler-names\n                onClick={firstActionState.onHandle}\n                ref={setButtonElement}\n                size=\"large\"\n                text={firstActionState.label}\n                tone={firstActionState.tone || 'primary'}\n              />\n            </Stack>\n          </Tooltip>\n        </LayerProvider>\n      )}\n      {showMenu && menuActionStates.length > 0 && (\n        <ActionMenuButton actionStates={menuActionStates} disabled={disabled} />\n      )}\n      {firstActionState && firstActionState.dialog && (\n        <ActionStateDialog dialog={firstActionState.dialog} referenceElement={buttonElement} />\n      )}\n    </Flex>\n  )\n})\n\nexport const DocumentStatusBarActions = memo(function DocumentStatusBarActions() {\n  const {actions: allActions, connectionState, documentId, editState} = useDocumentPane()\n  // const [isMenuOpen, setMenuOpen] = useState(false)\n  // const handleMenuOpen = useCallback(() => setMenuOpen(true), [])\n  // const handleMenuClose = useCallback(() => setMenuOpen(false), [])\n  // const handleActionComplete = useCallback(() => setMenuOpen(false), [])\n\n  // The restore action has a dedicated place in the UI; it's only visible when the user is viewing\n  // a different document revision. It must be omitted from this collection.\n  const actions = useMemo(\n    () => (allActions ?? []).filter((action) => !isRestoreAction(action)),\n    [allActions],\n  )\n\n  const renderDocumentStatusBarActions = useCallback<\n    (props: {states: DocumentActionDescription[]}) => React.ReactNode\n  >(\n    ({states}) => (\n      <DocumentStatusBarActionsInner\n        disabled={connectionState !== 'connected'}\n        // isMenuOpen={isMenuOpen}\n        // onMenuOpen={handleMenuOpen}\n        // onMenuClose={handleMenuClose}\n        showMenu={actions.length > 1}\n        states={states}\n        // Use document ID as key to make sure that the actions state is reset when the document changes\n        key={documentId}\n      />\n    ),\n    [actions.length, connectionState, documentId],\n  )\n\n  if (actions.length === 0 || !editState) {\n    return null\n  }\n\n  return (\n    <RenderActionCollectionState\n      // component={}\n      // onActionComplete={handleActionComplete}\n      actions={actions}\n      actionProps={editState}\n      group=\"default\"\n    >\n      {renderDocumentStatusBarActions}\n    </RenderActionCollectionState>\n  )\n})\n\nexport const HistoryStatusBarActions = memo(function HistoryStatusBarActions() {\n  const {actions, connectionState, editState, timelineStore} = useDocumentPane()\n\n  // Subscribe to external timeline state changes\n  const revTime = useTimelineSelector(timelineStore, (state) => state.revTime)\n\n  const revision = revTime?.id || ''\n  const disabled = (editState?.draft || editState?.published || {})._rev === revision\n  const actionProps = useMemo(() => ({...(editState || {}), revision}), [editState, revision])\n\n  // If multiple `restore` actions are defined, ensure only the final one is used.\n  const historyActions = useMemo(() => (actions ?? []).filter(isRestoreAction).slice(-1), [actions])\n\n  const renderDocumentStatusBarActions = useCallback<\n    (props: {states: DocumentActionDescription[]}) => React.ReactNode\n  >(\n    ({states}) => (\n      <DocumentStatusBarActionsInner\n        disabled={connectionState !== 'connected' || Boolean(disabled)}\n        showMenu={false}\n        states={states}\n      />\n    ),\n    [connectionState, disabled],\n  )\n\n  return (\n    <RenderActionCollectionState\n      actions={historyActions}\n      actionProps={actionProps as any}\n      group=\"default\"\n    >\n      {renderDocumentStatusBarActions}\n    </RenderActionCollectionState>\n  )\n})\n\nexport function isRestoreAction(\n  action: DocumentActionComponent,\n): action is DocumentActionComponent & {action: 'restore'} {\n  return action.action === HistoryRestoreAction.action\n}\n","import {TabList} from '@sanity/ui'\nimport {type ComponentType, type ReactNode, useCallback} from 'react'\n\nimport {Tab} from '../../../../../ui-components'\nimport {usePaneRouter} from '../../../../components'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nexport function DocumentHeaderTabs() {\n  const {activeViewId, paneKey, views} = useDocumentPane()\n  const tabPanelId = `${paneKey}tabpanel`\n\n  return (\n    <TabList space={1}>\n      {views.map((view, index) => (\n        <DocumentHeaderTab\n          icon={view.icon}\n          id={`${paneKey}tab-${view.id}`}\n          isActive={activeViewId === view.id}\n          key={view.id}\n          label={view.title}\n          tabPanelId={tabPanelId}\n          viewId={index === 0 ? null : (view.id ?? null)}\n        />\n      ))}\n    </TabList>\n  )\n}\n\nfunction DocumentHeaderTab(props: {\n  icon?: ComponentType | ReactNode\n  id: string\n  isActive: boolean\n  label: string\n  tabPanelId: string\n  viewId: string | null\n}) {\n  const {icon, id, isActive, label, tabPanelId, viewId, ...rest} = props\n  const {ready, editState} = useDocumentPane()\n  const {setView} = usePaneRouter()\n  const handleClick = useCallback(() => setView(viewId), [setView, viewId])\n\n  return (\n    <Tab\n      {...rest} // required to enable <TabList> keyboard navigation\n      aria-controls={tabPanelId}\n      disabled={!ready && !editState?.draft && !editState?.published}\n      icon={icon}\n      id={id}\n      label={label}\n      onClick={handleClick}\n      selected={isActive}\n    />\n  )\n}\n","import {type ReactElement} from 'react'\nimport {unstable_useValuePreview as useValuePreview, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nexport function DocumentHeaderTitle(): ReactElement {\n  const {connectionState, schemaType, title, editState} = useDocumentPane()\n  const documentValue = editState?.draft || editState?.published\n  const subscribed = Boolean(documentValue)\n\n  const {error, value} = useValuePreview({\n    enabled: subscribed,\n    schemaType,\n    value: documentValue,\n  })\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (connectionState === 'connecting' && !subscribed) {\n    return <></>\n  }\n\n  if (title) {\n    return <>{title}</>\n  }\n\n  if (!documentValue) {\n    return (\n      <>\n        {t('panes.document-header-title.new.text', {\n          schemaType: schemaType?.title || schemaType?.name,\n        })}\n      </>\n    )\n  }\n\n  if (error) {\n    return <>{t('panes.document-header-title.error.text', {error: error.message})}</>\n  }\n\n  return (\n    <>\n      {value?.title || (\n        <span style={{color: 'var(--card-muted-fg-color)'}}>\n          {t('panes.document-header-title.untitled.text')}\n        </span>\n      )}\n    </>\n  )\n}\n","import {ArrowLeftIcon, CloseIcon, SplitVerticalIcon} from '@sanity/icons'\nimport {Flex} from '@sanity/ui'\nimport {\n  createElement,\n  type ForwardedRef,\n  forwardRef,\n  memo,\n  useCallback,\n  useDeferredValue,\n  useMemo,\n  useState,\n} from 'react'\nimport {type DocumentActionDescription, useFieldActions, useTranslation} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../../../ui-components'\nimport {\n  PaneContextMenuButton,\n  PaneHeader,\n  PaneHeaderActionButton,\n  RenderActionCollectionState,\n  usePane,\n  usePaneRouter,\n} from '../../../../components'\nimport {type _PaneMenuNode} from '../../../../components/pane/types'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {isMenuNodeButton, isNotMenuNodeButton, resolveMenuNodes} from '../../../../menuNodes'\nimport {type PaneMenuItem} from '../../../../types'\nimport {useStructureTool} from '../../../../useStructureTool'\nimport {ActionDialogWrapper, ActionMenuListItem} from '../../statusBar/ActionMenuButton'\nimport {isRestoreAction} from '../../statusBar/DocumentStatusBarActions'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {DocumentHeaderTabs} from './DocumentHeaderTabs'\nimport {DocumentHeaderTitle} from './DocumentHeaderTitle'\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface DocumentPanelHeaderProps {\n  menuItems: PaneMenuItem[]\n}\n\nexport const DocumentPanelHeader = memo(\n  forwardRef(function DocumentPanelHeader(\n    _props: DocumentPanelHeaderProps,\n    ref: ForwardedRef<HTMLDivElement>,\n  ) {\n    const {menuItems} = _props\n    const {\n      actions: allActions,\n      editState,\n      onMenuAction,\n      onPaneClose,\n      onPaneSplit,\n      menuItemGroups,\n      schemaType,\n      connectionState,\n      views,\n      unstable_languageFilter,\n    } = useDocumentPane()\n    const {features} = useStructureTool()\n    const {index, BackLink, hasGroupSiblings} = usePaneRouter()\n    const {actions: fieldActions} = useFieldActions()\n    const [referenceElement, setReferenceElement] = useState<HTMLElement | null>(null)\n\n    // The restore action has a dedicated place in the UI; it's only visible when the user is\n    // viewing a different document revision. It must be omitted from this collection.\n    const actions = useMemo(\n      () => (allActions ?? []).filter((action) => !isRestoreAction(action)),\n      [allActions],\n    )\n\n    const menuNodes = useMemo(\n      () =>\n        resolveMenuNodes({actionHandler: onMenuAction, fieldActions, menuItems, menuItemGroups}),\n      [onMenuAction, fieldActions, menuItemGroups, menuItems],\n    )\n\n    const menuButtonNodes = useMemo(() => menuNodes.filter(isMenuNodeButton), [menuNodes])\n    const contextMenuNodes = useMemo(() => menuNodes.filter(isNotMenuNodeButton), [menuNodes])\n    const showTabs = views.length > 1\n\n    const {collapsed, isLast} = usePane()\n    // Prevent focus if this is the last (non-collapsed) pane.\n    const tabIndex = isLast && !collapsed ? -1 : 0\n\n    // there are three kinds of buttons possible:\n    //\n    // 1. split pane - creates a new split pane\n    // 2. close split pane — closes the current split pane\n    // 3. close pane group — closes the current pane group\n\n    // show the split pane button if they're enabled and there is more than one\n    // view available to use to create a split view\n    const showSplitPaneButton = features.splitViews && onPaneSplit && views.length > 1\n\n    // show the split pane button close button if the split button is showing\n    // and there is more than one split pane open (aka has-siblings)\n    const showSplitPaneCloseButton = showSplitPaneButton && hasGroupSiblings\n\n    // show the back button if both the feature is enabled and the current pane\n    // is not the first\n    const showBackButton = features.backButton && index > 0\n\n    // show the pane group close button if the `showSplitPaneCloseButton` is\n    // _not_ showing (the split pane button replaces the group close button)\n    // and if the back button is not showing (the back button and the close\n    // button do the same thing and shouldn't be shown at the same time)\n    // and if a BackLink component was provided\n    const showPaneGroupCloseButton = !showSplitPaneCloseButton && !showBackButton && !!BackLink\n\n    const {t} = useTranslation(structureLocaleNamespace)\n\n    const renderPaneActions = useCallback<\n      (props: {states: DocumentActionDescription[]}) => React.ReactNode\n    >(\n      ({states}) => (\n        <DocumentPanelHeaderActionDialogDeferred\n          contextMenuNodes={contextMenuNodes}\n          setReferenceElement={setReferenceElement}\n          referenceElement={referenceElement}\n          states={states}\n        />\n      ),\n      [contextMenuNodes, referenceElement],\n    )\n\n    return (\n      <TooltipDelayGroupProvider>\n        <PaneHeader\n          border\n          ref={ref}\n          loading={connectionState === 'connecting' && !editState?.draft && !editState?.published}\n          title={<DocumentHeaderTitle />}\n          tabs={showTabs && <DocumentHeaderTabs />}\n          tabIndex={tabIndex}\n          backButton={\n            showBackButton && (\n              <Button\n                as={BackLink}\n                data-as=\"a\"\n                icon={ArrowLeftIcon}\n                mode=\"bleed\"\n                tooltipProps={{content: t('pane-header.back-button.text')}}\n              />\n            )\n          }\n          actions={\n            <Flex align=\"center\" gap={1}>\n              {unstable_languageFilter.length > 0 && (\n                <>\n                  {unstable_languageFilter.map((languageFilterComponent, idx) => {\n                    return createElement(languageFilterComponent, {\n                      // eslint-disable-next-line react/no-array-index-key\n                      key: `language-filter-${idx}`,\n                      schemaType,\n                    })\n                  })}\n                </>\n              )}\n\n              {menuButtonNodes.map((item) => (\n                <PaneHeaderActionButton key={item.key} node={item} />\n              ))}\n              {editState && (\n                <RenderActionCollectionState\n                  actions={actions}\n                  actionProps={editState}\n                  group=\"paneActions\"\n                >\n                  {renderPaneActions}\n                </RenderActionCollectionState>\n              )}\n\n              {showSplitPaneButton && (\n                <Button\n                  aria-label={t('buttons.split-pane-button.aria-label')}\n                  icon={SplitVerticalIcon}\n                  key=\"split-pane-button\"\n                  mode=\"bleed\"\n                  onClick={onPaneSplit}\n                  tooltipProps={{content: t('buttons.split-pane-button.tooltip')}}\n                />\n              )}\n\n              {showSplitPaneCloseButton && (\n                <Button\n                  icon={CloseIcon}\n                  key=\"close-view-button\"\n                  mode=\"bleed\"\n                  onClick={onPaneClose}\n                  tooltipProps={{content: t('buttons.split-pane-close-button.title')}}\n                />\n              )}\n\n              {showPaneGroupCloseButton && (\n                <Button\n                  icon={CloseIcon}\n                  key=\"close-view-button\"\n                  mode=\"bleed\"\n                  tooltipProps={{content: t('buttons.split-pane-close-group-button.title')}}\n                  as={BackLink}\n                />\n              )}\n            </Flex>\n          }\n        />\n      </TooltipDelayGroupProvider>\n    )\n  }),\n)\n\nconst DocumentPanelHeaderActionDialogDeferred = memo(\n  function DocumentPanelHeaderActionDialogDeferred(props: {\n    states: DocumentActionDescription[]\n    setReferenceElement: React.Dispatch<React.SetStateAction<HTMLElement | null>>\n    referenceElement: HTMLElement | null\n    contextMenuNodes: _PaneMenuNode[]\n  }) {\n    const {setReferenceElement, referenceElement, contextMenuNodes} = props\n    /**\n     * The purpose of this component is to allow deferring the rendering of document action hook states if the main thread becomes very busy.\n     * The `useDeferredValue` doesn't have an effect unless it's used to delay rendering a component that has `React.memo` to prevent unnecessary re-renders.\n     */\n    const states = useDeferredValue(props.states)\n\n    return (\n      <DocumentPanelHeaderActionDialog\n        setReferenceElement={setReferenceElement}\n        referenceElement={referenceElement}\n        contextMenuNodes={contextMenuNodes}\n        states={states}\n      />\n    )\n  },\n)\n\nconst DocumentPanelHeaderActionDialog = memo(function DocumentPanelHeaderActionDialog(props: {\n  states: DocumentActionDescription[]\n  setReferenceElement: React.Dispatch<React.SetStateAction<HTMLElement | null>>\n  referenceElement: HTMLElement | null\n  contextMenuNodes: _PaneMenuNode[]\n}) {\n  const {states, setReferenceElement, contextMenuNodes, referenceElement} = props\n\n  const renderActionDialog = useCallback<\n    ({handleAction}: {handleAction: (idx: number) => void}) => React.ReactNode\n  >(\n    ({handleAction}) => (\n      <div ref={setReferenceElement}>\n        <PaneContextMenuButton\n          nodes={contextMenuNodes}\n          key=\"context-menu\"\n          actionsNodes={\n            states.length > 0\n              ? states.map((actionState, actionIndex) => (\n                  <ActionMenuListItem\n                    key={actionState.label}\n                    actionState={actionState}\n                    disabled={Boolean(actionState.disabled)}\n                    index={actionIndex}\n                    onAction={handleAction}\n                  />\n                ))\n              : undefined\n          }\n        />\n      </div>\n    ),\n    [contextMenuNodes, setReferenceElement, states],\n  )\n\n  return (\n    <ActionDialogWrapper actionStates={states} referenceElement={referenceElement}>\n      {renderActionDialog}\n    </ActionDialogWrapper>\n  )\n})\n","import {Button, type ButtonProps} from '../../../ui-components'\n\ninterface SpacerButtonProps {\n  size?: ButtonProps['size']\n}\n\n/**\n * This renders a visually hidden <Button> component that is still contributes\n * to document layout.\n *\n * It's used to simplify padding in Sanity UI components that contain buttons which\n * may not always be rendered.\n *\n * TODO: let's find a more elegant solve to this layout shift problem\n *\n * @internal\n */\nexport function SpacerButton({size}: SpacerButtonProps) {\n  return (\n    <Button\n      aria-hidden\n      disabled\n      size={size}\n      style={{\n        pointerEvents: 'none',\n        visibility: 'hidden',\n        width: 0,\n      }}\n      text=\"-\"\n    />\n  )\n}\n","import {Badge, type BadgeTone, Inline} from '@sanity/ui'\nimport {memo, useCallback, useDeferredValue} from 'react'\nimport {type DocumentBadgeDescription} from 'sanity'\n\nimport {Tooltip} from '../../../../ui-components'\nimport {RenderBadgeCollectionState} from '../../../components'\nimport {useDocumentPane} from '../useDocumentPane'\n\ninterface DocumentBadgesInnerProps {\n  states: DocumentBadgeDescription[]\n}\n\nconst BADGE_TONES: Record<string, BadgeTone | undefined> = {\n  primary: 'primary',\n  success: 'positive',\n  warning: 'caution',\n  danger: 'critical',\n}\n\nconst DocumentBadgesInner = memo(function DocumentBadgesInner({states}: DocumentBadgesInnerProps) {\n  if (states.length === 0) {\n    return null\n  }\n  return (\n    <Inline space={1}>\n      {states.map((badge, index) => (\n        <Tooltip\n          content={badge.title}\n          disabled={!badge.title}\n          key={`${badge.label}-${index}`}\n          placement=\"top\"\n          portal\n        >\n          <Badge\n            fontSize={1}\n            mode=\"outline\"\n            paddingX={2}\n            paddingY={1}\n            radius={4}\n            tone={badge.color ? BADGE_TONES[badge.color] : undefined}\n            style={{whiteSpace: 'nowrap'}}\n          >\n            {badge.label}\n          </Badge>\n        </Tooltip>\n      ))}\n    </Inline>\n  )\n})\n\nconst DocumentBadgesDeferred = memo(function DocumentBadgesDeferred(\n  props: DocumentBadgesInnerProps,\n) {\n  /**\n   * The purpose of this component is to allow deferring the rendering of document action hook states if the main thread becomes very busy.\n   * The `useDeferredValue` doesn't have an effect unless it's used to delay rendering a component that has `React.memo` to prevent unnecessary re-renders.\n   */\n  const states = useDeferredValue(props.states)\n  return <DocumentBadgesInner states={states} />\n})\n\nexport function DocumentBadges() {\n  const {badges, editState} = useDocumentPane()\n\n  const renderDocumentBadges = useCallback<\n    (props: {states: DocumentBadgeDescription[]}) => React.ReactNode\n  >(({states}) => <DocumentBadgesDeferred states={states} />, [])\n\n  if (!editState || !badges) return null\n\n  return (\n    <RenderBadgeCollectionState badges={badges} badgeProps={editState}>\n      {renderDocumentBadges}\n    </RenderBadgeCollectionState>\n  )\n}\n","import {motion} from 'framer-motion'\nimport {type ComponentProps} from 'react'\nimport {keyframes, styled} from 'styled-components'\n\nconst StyledMotionPath = styled(motion.path)`\n  transform-origin: center;\n`\n\ntype MotionCircleProps = Omit<ComponentProps<typeof motion.circle>, 'd'>\ntype MotionPathProps = Omit<ComponentProps<typeof motion.path>, 'd' | 'ref'>\n\nconst Circle = (props: MotionCircleProps) => (\n  <motion.circle fill=\"none\" r=\"8\" cx=\"12.5\" cy=\"12.5\" strokeWidth=\"1.2\" {...props} />\n)\nconst Arrows = (props: MotionPathProps) => (\n  <StyledMotionPath\n    fill=\"none\"\n    d=\"M14 17.5619L11.5 20.5L14.5 23.0619M11 7.43811L13.5 4.50001L10.5 1.93811\"\n    {...props}\n  />\n)\nconst Checkmark = (props: MotionPathProps) => (\n  <motion.path d=\"M9.5 12.1316L11.7414 14.5L16 10\" {...props} />\n)\n\nconst rotateAnimation = keyframes`\n  0% {\n    transform: rotate(0);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n`\nconst RotateGroup = styled.g`\n  transform-origin: center;\n\n  &[data-rotate] {\n    animation: ${rotateAnimation} 1s ease-in-out infinite;\n  }\n`\n\nconst root = {\n  syncing: {\n    scale: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    scale: [1, 0.8, 1.2, 0.9, 1.1, 0.95, 1.05, 0.99, 1],\n    transition: {\n      duration: 0.5,\n      delay: 0.2,\n    },\n  },\n  changes: {transition: {duration: 0}},\n}\n\nconst circle = {\n  syncing: {\n    strokeDasharray: '0, 0, 23, 3, 23, 3',\n    strokeDashoffset: 10,\n    opacity: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    strokeDasharray: '0, 0, 23, 0, 23, 0',\n    strokeDashoffset: 10,\n    opacity: 1,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  changes: {\n    strokeDasharray: '0, 60, 23, 0, 23, 0',\n    strokeDashoffset: 0,\n    opacity: 0,\n    transition: {\n      duration: 0.5,\n    },\n  },\n}\n\nconst arrows = {\n  syncing: {\n    opacity: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    opacity: 0,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  changes: {\n    opacity: 0,\n  },\n}\n\nconst checkmark = {\n  syncing: {\n    pathLength: 0,\n    transition: {duration: 0},\n  },\n  saved: {\n    pathLength: 1,\n    transition: {\n      delay: 0.4,\n      duration: 0.3,\n    },\n  },\n  changes: {\n    pathLength: 0,\n    transition: {\n      duration: 0.2,\n    },\n  },\n}\n\ninterface AnimatedStatusIconProps {\n  status?: 'changes' | 'saved' | 'syncing'\n}\n\nexport function AnimatedStatusIcon(props: AnimatedStatusIconProps) {\n  const {status} = props\n\n  if (!status) {\n    return null\n  }\n\n  return (\n    <svg\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0 0 25 25\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.2\"\n      data-sanity-icon=\"animated-status-icon\"\n    >\n      <motion.g variants={root} initial={status} animate={status}>\n        <RotateGroup data-rotate={status === 'changes' ? undefined : ''}>\n          <Arrows variants={arrows} initial={status} animate={status} />\n          <Circle variants={circle} initial={status} animate={status} />\n        </RotateGroup>\n        <Checkmark variants={checkmark} initial={status} animate={status} />\n      </motion.g>\n    </svg>\n  )\n}\n","import {type ButtonTone, Flex, Text} from '@sanity/ui'\nimport {TextWithTone, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {AnimatedStatusIcon} from './AnimatedStatusIcon'\n\ntype StatusType = 'saved' | 'syncing'\ninterface ReviewChangesButtonProps {\n  status?: StatusType\n}\n\nconst STATUS_DICTIONARY: Record<StatusType, {i18nKey: string; tone: ButtonTone}> = {\n  saved: {\n    i18nKey: 'status-bar.document-status-pulse.status.saved.text',\n    tone: 'positive',\n  },\n  syncing: {\n    i18nKey: 'status-bar.document-status-pulse.status.syncing.text',\n    tone: 'default',\n  },\n}\n\nexport const DocumentStatusPulse = (props: ReviewChangesButtonProps) => {\n  const {status} = props\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (status !== 'saved' && status !== 'syncing') {\n    return null\n  }\n\n  const currentStatus = STATUS_DICTIONARY[status]\n\n  return (\n    <Flex align=\"center\" gap={2} data-testid=\"pane-footer-document-status-pulse\">\n      <TextWithTone size={1} tone={currentStatus.tone}>\n        <AnimatedStatusIcon status={status} />\n      </TextWithTone>\n\n      <Text muted size={1}>\n        {t(currentStatus.i18nKey)}\n      </Text>\n    </Flex>\n  )\n}\n","import {Flex} from '@sanity/ui'\nimport {useEffect, useLayoutEffect, useState} from 'react'\nimport {DocumentStatus, DocumentStatusIndicator, useSyncState} from 'sanity'\n\nimport {Tooltip} from '../../../../ui-components'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {DocumentStatusPulse} from './DocumentStatusPulse'\n\nconst SYNCING_TIMEOUT = 1000\nconst SAVED_TIMEOUT = 3000\n\ninterface DocumentStatusLineProps {\n  singleLine?: boolean\n}\n\nexport function DocumentStatusLine({singleLine}: DocumentStatusLineProps) {\n  const {documentId, documentType, editState, value} = useDocumentPane()\n\n  const [status, setStatus] = useState<'saved' | 'syncing' | null>(null)\n\n  const syncState = useSyncState(documentId, documentType)\n\n  const lastUpdated = value?._updatedAt\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    // Schedule an update to set the status to 'saved' when status changed to 'syncing.\n    // We use `syncState.isSyncing` here to avoid the status being set to 'saved' when the document is syncing.\n    if (status === 'syncing' && !syncState.isSyncing) {\n      const timerId = setTimeout(() => setStatus('saved'), SYNCING_TIMEOUT)\n      return () => clearTimeout(timerId)\n    }\n    // Schedule an update to clear the status when status changed to 'saved'\n    if (status === 'saved') {\n      const timerId = setTimeout(() => setStatus(null), SAVED_TIMEOUT)\n      return () => clearTimeout(timerId)\n    }\n  }, [status, lastUpdated, syncState.isSyncing])\n\n  // Clear the status when documentId changes to make sure we don't show the wrong status when opening a new document\n  useLayoutEffect(() => {\n    setStatus(null)\n  }, [documentId])\n\n  // Set status to 'syncing' when lastUpdated changes and we go from not syncing to syncing\n  useLayoutEffect(() => {\n    if (syncState.isSyncing) {\n      setStatus('syncing')\n    }\n  }, [syncState.isSyncing, lastUpdated])\n\n  if (status) {\n    return <DocumentStatusPulse status={status || undefined} />\n  }\n\n  return (\n    <Tooltip\n      content={\n        <DocumentStatus absoluteDate draft={editState?.draft} published={editState?.published} />\n      }\n      placement=\"top\"\n    >\n      <Flex align=\"center\" gap={3}>\n        <DocumentStatusIndicator draft={editState?.draft} published={editState?.published} />\n        <DocumentStatus\n          draft={editState?.draft}\n          published={editState?.published}\n          singleLine={singleLine}\n        />\n      </Flex>\n    </Tooltip>\n  )\n}\n","import {RestoreIcon} from '@sanity/icons'\nimport {Box, Flex, Text} from '@sanity/ui'\nimport {format} from 'date-fns'\nimport {createElement} from 'react'\nimport {Translate, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {useDocumentPane} from '../useDocumentPane'\n\nexport const StatusText = styled(Text)`\n  color: var(--card-muted-fg-color);\n\n  em {\n    color: var(--card-fg-color);\n    font-weight: 500;\n    font-style: normal;\n  }\n`\n\nexport function RevisionStatusLine(): JSX.Element {\n  const {displayed} = useDocumentPane()\n  const {t} = useTranslation()\n  const date = displayed?._updatedAt || displayed?._createdAt\n\n  const message = {\n    name: 'revision',\n    icon: RestoreIcon,\n    text: date ? (\n      <Translate\n        t={t}\n        i18nKey=\"document-status.revision-from\"\n        values={{\n          date: format(new Date(date), `MMM d, yyyy '@' pp`),\n        }}\n      />\n    ) : null,\n    tone: 'caution',\n  }\n\n  return (\n    <>\n      <Flex flex={1} gap={3} padding={2}>\n        <Box flex=\"none\">\n          <Text size={1}>{createElement(message.icon)}</Text>\n        </Box>\n        <Box flex={1}>\n          <StatusText size={1} textOverflow=\"ellipsis\">\n            {message.text}\n          </StatusText>\n        </Box>\n      </Flex>\n    </>\n  )\n}\n","import {useLayoutEffect} from 'react'\nimport {resizeObserver} from 'sanity'\n\nexport function useResizeObserver({\n  element,\n  onResize,\n}: {\n  element?: HTMLDivElement | null\n  onResize: (event: ResizeObserverEntry) => void\n}): void {\n  useLayoutEffect(() => {\n    if (element) {\n      resizeObserver.observe(element, onResize)\n    }\n\n    return () => {\n      if (element) {\n        resizeObserver.unobserve(element)\n      }\n    }\n  }, [element, onResize])\n}\n","import {Card, Flex} from '@sanity/ui'\nimport {type Ref, useCallback, useState} from 'react'\nimport {\n  type CreateLinkMetadata,\n  isSanityCreateLinked,\n  useSanityCreateConfig,\n  useTimelineSelector,\n} from 'sanity'\n\nimport {SpacerButton} from '../../../components/spacerButton'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {useDocumentTitle} from '../useDocumentTitle'\nimport {DocumentBadges} from './DocumentBadges'\nimport {DocumentStatusBarActions, HistoryStatusBarActions} from './DocumentStatusBarActions'\nimport {DocumentStatusLine} from './DocumentStatusLine'\nimport {RevisionStatusLine} from './RevisionStatusLine'\nimport {useResizeObserver} from './useResizeObserver'\n\nexport interface DocumentStatusBarProps {\n  actionsBoxRef?: Ref<HTMLDivElement>\n  createLinkMetadata?: CreateLinkMetadata\n}\n\nconst CONTAINER_BREAKPOINT = 480 // px\n\nexport function DocumentStatusBar(props: DocumentStatusBarProps) {\n  const {actionsBoxRef, createLinkMetadata} = props\n  const {editState, timelineStore, onChange: onDocumentChange} = useDocumentPane()\n  const {title} = useDocumentTitle()\n\n  const CreateLinkedActions = useSanityCreateConfig().components?.documentLinkedActions\n\n  // Subscribe to external timeline state changes\n  const showingRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n\n  const [collapsed, setCollapsed] = useState<boolean | null>(null)\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n\n  const handleResize = useCallback((event: ResizeObserverEntry) => {\n    setCollapsed(event.contentRect.width < CONTAINER_BREAKPOINT)\n  }, [])\n\n  useResizeObserver({element: rootElement, onResize: handleResize})\n\n  const shouldRender = editState?.ready && typeof collapsed === 'boolean'\n\n  let actions: JSX.Element | null = null\n  if (createLinkMetadata && isSanityCreateLinked(createLinkMetadata) && CreateLinkedActions) {\n    actions = (\n      <CreateLinkedActions\n        metadata={createLinkMetadata}\n        panelPortalElementId={DOCUMENT_PANEL_PORTAL_ELEMENT}\n        onDocumentChange={onDocumentChange}\n        documentTitle={title}\n      />\n    )\n  } else if (showingRevision) {\n    actions = <HistoryStatusBarActions />\n  } else {\n    actions = <DocumentStatusBarActions />\n  }\n\n  return (\n    <Card tone={showingRevision ? 'caution' : undefined}>\n      <Flex direction=\"column\" ref={setRootElement} sizing=\"border\">\n        {shouldRender && (\n          <Flex\n            align=\"stretch\"\n            gap={1}\n            justify=\"space-between\"\n            paddingY={2}\n            paddingLeft={showingRevision ? 3 : 4}\n            paddingRight={showingRevision ? 2 : 3}\n          >\n            <Flex align=\"center\" flex={1} gap={collapsed ? 2 : 3} wrap=\"wrap\" paddingRight={3}>\n              <Flex align=\"center\">\n                {showingRevision ? (\n                  <RevisionStatusLine />\n                ) : (\n                  <DocumentStatusLine singleLine={!collapsed} />\n                )}\n                <SpacerButton size=\"large\" />\n              </Flex>\n              <DocumentBadges />\n            </Flex>\n\n            <Flex\n              align=\"flex-start\"\n              justify=\"flex-end\"\n              ref={actionsBoxRef}\n              style={{flexShrink: 0, marginLeft: 'auto'}}\n            >\n              <SpacerButton size=\"large\" />\n              {actions}\n            </Flex>\n          </Flex>\n        )}\n      </Flex>\n    </Card>\n  )\n}\n","import {isHotkey} from 'is-hotkey-esm'\nimport {\n  createElement,\n  type ElementType,\n  type HTMLProps,\n  memo,\n  type Ref,\n  useCallback,\n  useMemo,\n  useState,\n} from 'react'\nimport {type DocumentActionDescription, type DocumentActionProps, LegacyLayerProvider} from 'sanity'\n\nimport {RenderActionCollectionState} from '../../../components'\nimport {ActionStateDialog} from '../statusBar'\nimport {useDocumentPane} from '../useDocumentPane'\n\nexport interface KeyboardShortcutResponderProps {\n  actionsBoxElement: HTMLElement | null\n  activeIndex: number\n  as?: ElementType\n  currentMinWidth?: number\n  flex?: number\n  id: string\n  minWidth?: number\n  onActionStart: (index: number) => void\n  rootRef: Ref<HTMLDivElement>\n  states: DocumentActionDescription[]\n}\n\nconst KeyboardShortcutResponder = memo(function KeyboardShortcutResponder(\n  props: KeyboardShortcutResponderProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height'>,\n) {\n  const {\n    actionsBoxElement,\n    activeIndex,\n    as = 'div',\n    children,\n    id,\n    onActionStart,\n    onKeyDown,\n    rootRef,\n    states,\n    ...rest\n  } = props\n\n  const activeAction = states[activeIndex]\n\n  const handleKeyDown = useCallback(\n    (event: any) => {\n      const matchingStates = states.filter(\n        (state) => state.shortcut && isHotkey(state.shortcut, event),\n      )\n\n      const matchingState = matchingStates[0]\n\n      if (matchingStates.length > 1) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Keyboard shortcut conflict: More than one document action matches the shortcut \"${matchingState.shortcut}\"`,\n        )\n      }\n\n      if (matchingState && !matchingState.disabled && matchingState.onHandle) {\n        event.preventDefault()\n        matchingState.onHandle()\n        onActionStart(states.indexOf(matchingState))\n        return\n      }\n\n      if (onKeyDown) {\n        onKeyDown(event)\n      }\n    },\n    [onActionStart, onKeyDown, states],\n  )\n\n  return createElement(\n    as,\n    {\n      id,\n      onKeyDown: handleKeyDown,\n      tabIndex: -1,\n      ...rest,\n      ref: rootRef,\n    },\n    [\n      children,\n      activeAction && activeAction.dialog && (\n        <LegacyLayerProvider zOffset=\"paneFooter\">\n          <ActionStateDialog dialog={activeAction.dialog} referenceElement={actionsBoxElement} />\n        </LegacyLayerProvider>\n      ),\n    ],\n  )\n})\n\nexport interface DocumentActionShortcutsProps {\n  actionsBoxElement: HTMLElement | null\n  as?: ElementType\n  currentMinWidth?: number\n  debug?: boolean\n  flex: number\n  id: string\n  minWidth: number\n  rootRef: Ref<HTMLDivElement>\n}\n\nexport const DocumentActionShortcuts = memo(\n  (props: DocumentActionShortcutsProps & Omit<HTMLProps<HTMLDivElement>, 'as'>) => {\n    const {actionsBoxElement, as = 'div', children, ...rest} = props\n    const {actions, editState} = useDocumentPane()\n    const [activeIndex, setActiveIndex] = useState(-1)\n\n    const onActionStart = useCallback((idx: number) => {\n      setActiveIndex(idx)\n    }, [])\n\n    const actionProps: DocumentActionProps | null = useMemo(\n      () =>\n        editState && {\n          ...editState,\n\n          // @todo: what to call here?\n          onComplete: () => undefined,\n\n          // @todo: get revision string\n          revision: undefined,\n        },\n      [editState],\n    )\n\n    const renderDocumentActionShortcuts = useCallback<\n      (props: {states: DocumentActionDescription[]}) => React.ReactNode\n    >(\n      ({states}) => (\n        <KeyboardShortcutResponder\n          {...rest}\n          activeIndex={activeIndex}\n          actionsBoxElement={actionsBoxElement}\n          as={as}\n          onActionStart={onActionStart}\n          states={states}\n        >\n          {children}\n        </KeyboardShortcutResponder>\n      ),\n      [actionsBoxElement, activeIndex, as, children, onActionStart, rest],\n    )\n\n    if (!actionProps || !actions) return null\n\n    return (\n      <RenderActionCollectionState actionProps={actionProps} actions={actions}>\n        {renderDocumentActionShortcuts}\n      </RenderActionCollectionState>\n    )\n  },\n)\n\nDocumentActionShortcuts.displayName = 'Memo(DocumentActionShortcuts)'\n","import {EarthAmericasIcon, JsonIcon, LinkIcon} from '@sanity/icons'\nimport {type DocumentInspector, type DocumentInspectorMenuItem, type TFunction} from 'sanity'\n\nimport {type PaneMenuItem, type StructureToolFeatures} from '../../types'\nimport {INSPECT_ACTION_PREFIX} from './constants'\n\ninterface GetMenuItemsParams {\n  currentInspector?: DocumentInspector\n  features: StructureToolFeatures\n  hasValue: boolean\n  inspectors: DocumentInspector[]\n  previewUrl?: string | null\n  inspectorMenuItems: DocumentInspectorMenuItem[]\n  t: TFunction\n}\n\nfunction getInspectorItems({\n  currentInspector,\n  hasValue,\n  inspectors,\n  inspectorMenuItems,\n}: GetMenuItemsParams): PaneMenuItem[] {\n  return inspectors\n    .map((inspector, index) => {\n      const menuItem = inspectorMenuItems[index]\n\n      if (!menuItem || menuItem.hidden) return null\n\n      return {\n        action: `${INSPECT_ACTION_PREFIX}${inspector.name}`,\n        group: menuItem.showAsAction ? undefined : 'inspectors',\n        icon: menuItem.icon,\n        isDisabled: !hasValue,\n        selected: currentInspector?.name === inspector.name,\n        shortcut: menuItem.hotkeys?.join('+'),\n        showAsAction: menuItem.showAsAction,\n        title: menuItem.title,\n        tone: menuItem.tone,\n      }\n    })\n    .filter(Boolean) as PaneMenuItem[]\n}\n\nfunction getInspectItem({hasValue, t}: GetMenuItemsParams): PaneMenuItem {\n  return {\n    action: 'inspect',\n    group: 'inspectors',\n    title: t('document-inspector.menu-item.title'),\n    icon: JsonIcon,\n    isDisabled: !hasValue,\n    shortcut: 'Ctrl+Alt+I',\n  }\n}\n\nexport function getProductionPreviewItem({previewUrl, t}: GetMenuItemsParams): PaneMenuItem | null {\n  if (!previewUrl) return null\n\n  return {\n    action: 'production-preview',\n    group: 'links',\n    title: t('production-preview.menu-item.title'),\n    icon: EarthAmericasIcon,\n    shortcut: 'Ctrl+Alt+O',\n  }\n}\n\nexport function getMenuItems(params: GetMenuItemsParams): PaneMenuItem[] {\n  const inspectorItems = getInspectorItems(params)\n  const items = [\n    // Get production preview item\n    getProductionPreviewItem(params),\n  ].filter(Boolean) as PaneMenuItem[]\n\n  return [\n    // Always present document menu item to copy current url to clipboard\n    {\n      action: 'copy-document-url',\n      showAsAction: true,\n      title: params.t('action.copy-document-url.label'),\n      icon: LinkIcon,\n    },\n    ...inspectorItems,\n\n    // TODO: convert to inspector or document view?\n    getInspectItem(params),\n\n    ...items,\n  ]\n}\n","import {type SanityDocument} from '@sanity/types'\nimport {useEffect, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {BehaviorSubject, from, of} from 'rxjs'\nimport {catchError, debounceTime, distinctUntilChanged, switchMap} from 'rxjs/operators'\nimport {isRecord, useSource} from 'sanity'\n\nconst isSanityDocument = (value: unknown): value is SanityDocument =>\n  isRecord(value) && typeof value._id === 'string' && typeof value._type === 'string'\n\nexport function usePreviewUrl(value: Partial<SanityDocument> | undefined): string | undefined {\n  const {resolveProductionUrl} = useSource().document\n  const subject = useMemo(\n    () => new BehaviorSubject<Partial<SanityDocument> | undefined>(undefined),\n    [],\n  )\n\n  useEffect(() => {\n    subject.next(value)\n  }, [subject, value])\n\n  const resolvedUrlObservable = useMemo(() => {\n    return subject.asObservable().pipe(\n      // this so that the preview URL isn't fetched on every keystroke\n      distinctUntilChanged(),\n      debounceTime(500),\n      switchMap((document) =>\n        isSanityDocument(document) ? from(resolveProductionUrl({document})) : of(undefined),\n      ),\n      distinctUntilChanged(),\n      catchError((err) => {\n        const message =\n          isRecord(err) && typeof err.message === 'string' ? err.message : 'Unknown error'\n        throw new Error(`An error was thrown while trying to get your preview url: ${message}`)\n      }),\n    )\n  }, [resolveProductionUrl, subject])\n\n  return useObservable(resolvedUrlObservable)\n}\n","import {Card, Code, Stack, Text} from '@sanity/ui'\nimport {isDev, Translate, useTranslation} from 'sanity'\n\nimport {ErrorPane} from '../../error'\n\ninterface DocumentLayoutErrorProps {\n  currentMinWidth?: number\n  documentType?: string\n  minWidth?: number\n  paneKey: string\n  value?: Record<string, unknown>\n}\n\nexport function DocumentLayoutError(props: DocumentLayoutErrorProps) {\n  const {documentType, value, currentMinWidth, paneKey, minWidth} = props\n  const {t} = useTranslation()\n\n  return (\n    <ErrorPane\n      currentMinWidth={currentMinWidth}\n      flex={2.5}\n      minWidth={minWidth}\n      paneKey={paneKey}\n      title={\n        <Translate\n          t={t}\n          i18nKey=\"panes.document-pane.document-unknown-type.title\"\n          values={{documentType}}\n        />\n      }\n      tone=\"caution\"\n    >\n      <Stack space={4}>\n        {documentType && (\n          <Text as=\"p\">\n            <Translate\n              t={t}\n              i18nKey=\"panes.document-pane.document-unknown-type.text\"\n              values={{documentType}}\n            />\n          </Text>\n        )}\n\n        {!documentType && (\n          <Text as=\"p\">{t('panes.document-pane.document-unknown-type.without-schema.text')}</Text>\n        )}\n\n        {isDev && value && (\n          /* eslint-disable i18next/no-literal-string */\n          <>\n            <Text as=\"p\">Here is the JSON representation of the document:</Text>\n\n            <Card padding={3} overflow=\"auto\" radius={2} shadow={1} tone=\"inherit\">\n              <Code language=\"json\" size={[1, 1, 2]}>\n                {JSON.stringify(value, null, 2)}\n              </Code>\n            </Card>\n          </>\n          /* eslint-enable i18next/no-literal-string */\n        )}\n      </Stack>\n    </ErrorPane>\n  )\n}\n","import {\n  DialogProvider,\n  type DialogProviderProps,\n  Flex,\n  PortalProvider,\n  useElementRect,\n} from '@sanity/ui'\nimport {isHotkey} from 'is-hotkey-esm'\nimport {type ReactNode, useCallback, useMemo, useState} from 'react'\nimport {useTranslation} from 'react-i18next'\nimport {\n  ChangeConnectorRoot,\n  type DocumentFieldActionNode,\n  type DocumentInspectorMenuItem,\n  FieldActionsProvider,\n  FieldActionsResolver,\n  GetFormValueProvider,\n  getSanityCreateLinkMetadata,\n  isSanityCreateLinked,\n  useGlobalCopyPasteElementHandler,\n  useSanityCreateConfig,\n  useZIndex,\n} from 'sanity'\nimport {type Path} from 'sanity-diff-patch'\nimport {styled} from 'styled-components'\n\nimport {TooltipDelayGroupProvider} from '../../../../ui-components'\nimport {Pane, PaneFooter, usePane, usePaneLayout, usePaneRouter} from '../../../components'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {\n  DOCUMENT_INSPECTOR_MIN_WIDTH,\n  DOCUMENT_PANEL_INITIAL_MIN_WIDTH,\n  DOCUMENT_PANEL_MIN_WIDTH,\n} from '../constants'\nimport {DocumentInspectorMenuItemsResolver} from '../DocumentInspectorMenuItemsResolver'\nimport {DocumentOperationResults} from '../DocumentOperationResults'\nimport {DocumentPanel} from '../documentPanel'\nimport {Banner} from '../documentPanel/banners/Banner'\nimport {DocumentPanelHeader} from '../documentPanel/header'\nimport {DocumentActionShortcuts} from '../keyboardShortcuts'\nimport {getMenuItems} from '../menuItems'\nimport {DocumentStatusBar} from '../statusBar'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {usePreviewUrl} from '../usePreviewUrl'\nimport {DocumentLayoutError} from './DocumentLayoutError'\n\nconst EMPTY_ARRAY: [] = []\n\nconst DIALOG_PROVIDER_POSITION: DialogProviderProps['position'] = [\n  // We use the `position: fixed` for dialogs on narrower screens (first two media breakpoints).\n  'fixed',\n  'fixed',\n  // And we use the `position: absolute` strategy (within panes) on wide screens.\n  'absolute',\n]\n\nconst StyledChangeConnectorRoot = styled(ChangeConnectorRoot)`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  min-height: 0;\n  min-width: 0;\n`\n\nexport function DocumentLayout() {\n  const {\n    changesOpen,\n    documentId,\n    documentType,\n    fieldActions,\n    focusPath,\n    inspectOpen,\n    inspector,\n    inspectors,\n    onFocus,\n    onHistoryOpen,\n    onMenuAction,\n    onPathOpen,\n    paneKey,\n    schemaType,\n    value,\n  } = useDocumentPane()\n  const {params: paneParams} = usePaneRouter()\n  const {features} = useStructureTool()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n\n  const zOffsets = useZIndex()\n  const previewUrl = usePreviewUrl(value)\n\n  const createLinkMetadata = getSanityCreateLinkMetadata(value)\n  const CreateLinkedBannerContent = useSanityCreateConfig().components?.documentLinkedBannerContent\n\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const [footerElement, setFooterElement] = useState<HTMLDivElement | null>(null)\n  const [headerElement, setHeaderElement] = useState<HTMLDivElement | null>(null)\n\n  const [actionsBoxElement, setActionsBoxElement] = useState<HTMLDivElement | null>(null)\n  const [documentPanelPortalElement, setDocumentPanelPortalElement] = useState<HTMLElement | null>(\n    null,\n  )\n\n  useGlobalCopyPasteElementHandler({\n    element: rootElement,\n    focusPath,\n    value,\n  })\n\n  const [inspectorMenuItems, setInspectorMenuItems] = useState<DocumentInspectorMenuItem[]>([])\n  const [rootFieldActionNodes, setRootFieldActionNodes] = useState<DocumentFieldActionNode[]>([])\n\n  const footerRect = useElementRect(footerElement)\n  const headerRect = useElementRect(headerElement)\n  const footerHeight = footerRect?.height\n  const headerHeight = headerRect?.height\n  const currentMinWidth =\n    DOCUMENT_PANEL_INITIAL_MIN_WIDTH + (inspector ? DOCUMENT_INSPECTOR_MIN_WIDTH : 0)\n  const minWidth = DOCUMENT_PANEL_MIN_WIDTH + (inspector ? DOCUMENT_INSPECTOR_MIN_WIDTH : 0)\n\n  const currentInspector = useMemo(\n    () => inspectors?.find((i) => i.name === inspector?.name),\n    [inspectors, inspector?.name],\n  )\n\n  const hasValue = Boolean(value)\n\n  const menuItems = useMemo(\n    () =>\n      getMenuItems({\n        currentInspector,\n        features,\n        hasValue,\n        inspectorMenuItems,\n        inspectors,\n        previewUrl,\n        t,\n      }),\n    [currentInspector, features, hasValue, inspectorMenuItems, inspectors, previewUrl, t],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      for (const item of menuItems) {\n        if (item.shortcut) {\n          if (isHotkey(item.shortcut, event)) {\n            event.preventDefault()\n            event.stopPropagation()\n            onMenuAction(item)\n            return\n          }\n        }\n      }\n    },\n    [onMenuAction, menuItems],\n  )\n\n  const onConnectorSetFocus = useCallback(\n    (path: Path) => {\n      onPathOpen(path)\n      onFocus(path)\n    },\n    [onPathOpen, onFocus],\n  )\n\n  if (!schemaType) {\n    return (\n      <DocumentLayoutError\n        currentMinWidth={currentMinWidth}\n        documentType={documentType}\n        minWidth={minWidth}\n        paneKey={paneKey}\n        value={value}\n      />\n    )\n  }\n\n  return (\n    <GetFormValueProvider value={value}>\n      {inspectors.length > 0 && (\n        <DocumentInspectorMenuItemsResolver\n          documentId={documentId}\n          documentType={documentType}\n          inspectors={inspectors}\n          onMenuItems={setInspectorMenuItems}\n        />\n      )}\n\n      {fieldActions.length > 0 && schemaType && (\n        <FieldActionsResolver\n          actions={fieldActions}\n          documentId={documentId}\n          documentType={documentType}\n          onActions={setRootFieldActionNodes}\n          path={EMPTY_ARRAY}\n          schemaType={schemaType}\n        />\n      )}\n\n      <FieldActionsProvider actions={rootFieldActionNodes} path={EMPTY_ARRAY}>\n        <DocumentActionShortcuts\n          actionsBoxElement={actionsBoxElement}\n          as={Pane}\n          currentMinWidth={currentMinWidth}\n          data-testid=\"document-pane\"\n          flex={2.5}\n          id={paneKey}\n          minWidth={minWidth}\n          onKeyUp={handleKeyUp}\n          rootRef={setRootElement}\n        >\n          <DocumentPanelHeader ref={setHeaderElement} menuItems={menuItems} />\n\n          {createLinkMetadata &&\n            isSanityCreateLinked(createLinkMetadata) &&\n            CreateLinkedBannerContent && (\n              <ShowWhenPaneOpen>\n                <Banner\n                  tone=\"transparent\"\n                  data-test-id=\"sanity-create-read-only-banner\"\n                  content={<CreateLinkedBannerContent metadata={createLinkMetadata} />}\n                />\n              </ShowWhenPaneOpen>\n            )}\n\n          <DialogProvider position={DIALOG_PROVIDER_POSITION} zOffset={zOffsets.paneDialog}>\n            <Flex direction=\"column\" flex={1} height={layoutCollapsed ? undefined : 'fill'}>\n              <StyledChangeConnectorRoot\n                data-testid=\"change-connector-root\"\n                isReviewChangesOpen={changesOpen && paneParams?.changesInspectorTab === 'review'}\n                onOpenReviewChanges={onHistoryOpen}\n                onSetFocus={onConnectorSetFocus}\n              >\n                <DocumentPanel\n                  footerHeight={footerHeight || null}\n                  headerHeight={headerHeight || null}\n                  isInspectOpen={inspectOpen}\n                  rootElement={rootElement}\n                  setDocumentPanelPortalElement={setDocumentPanelPortalElement}\n                />\n              </StyledChangeConnectorRoot>\n            </Flex>\n          </DialogProvider>\n\n          {/* These providers are added because we want the dialogs in `DocumentStatusBar` to be scoped to the document pane. */}\n          {/* The portal element comes from `DocumentPanel`. */}\n          <PortalProvider\n            __unstable_elements={{[DOCUMENT_PANEL_PORTAL_ELEMENT]: documentPanelPortalElement}}\n          >\n            <DialogProvider position={DIALOG_PROVIDER_POSITION} zOffset={zOffsets.portal}>\n              <PaneFooter ref={setFooterElement}>\n                <TooltipDelayGroupProvider>\n                  <DocumentStatusBar\n                    actionsBoxRef={setActionsBoxElement}\n                    createLinkMetadata={createLinkMetadata}\n                  />\n                </TooltipDelayGroupProvider>\n              </PaneFooter>\n            </DialogProvider>\n          </PortalProvider>\n          <DocumentOperationResults />\n        </DocumentActionShortcuts>\n      </FieldActionsProvider>\n    </GetFormValueProvider>\n  )\n}\n\n/**\n * Prevents whatever is inside of it from rendering when the pane is collapsed.\n * Needed locally as DocumentLayout does lives outside PaneContext, but is provided _somewhere_ within it.\n */\nfunction ShowWhenPaneOpen(props: {children: ReactNode}) {\n  const {collapsed} = usePane()\n  return collapsed ? null : props.children\n}\n","import {type ComponentType} from 'react'\nimport {type DocumentLayoutProps, type PluginOptions, useMiddlewareComponents} from 'sanity'\n\nimport {DocumentLayout} from './DocumentLayout'\n\nfunction pick(plugin: PluginOptions) {\n  return plugin.document?.components?.unstable_layout as ComponentType<\n    Omit<DocumentLayoutProps, 'renderDefault'>\n  >\n}\n\n/**\n * A hook that returns the document layout composed\n * by the Components API (`document.components.layout`).\n */\nexport function useDocumentLayoutComponent(): ComponentType<\n  Omit<DocumentLayoutProps, 'renderDefault'>\n> {\n  return useMiddlewareComponents({\n    pick,\n    defaultComponent: DocumentLayout,\n  })\n}\n","import {defineEvent} from '@sanity/telemetry'\n\n/**\n * @internal\n */\nexport const DocumentURLCopied = defineEvent({\n  name: 'DocumentURLCopied',\n  version: 1,\n  description: 'User copied document URL to clipboard',\n})\n\n/**\n * When a draft is successfully created\n * @internal\n */\nexport const CreatedDraft = defineEvent({\n  name: 'New Draft Created',\n  version: 1,\n  description: 'User created a new draft',\n})\n","import {type Template} from 'sanity'\n\ninterface InitialValueOptions {\n  documentType: string\n  panePayload?: unknown\n  templateName?: string\n  templateParams?: Record<string, unknown>\n  urlTemplate?: string\n}\n\n/**\n * @internal\n */\nexport function getInitialValueTemplateOpts(\n  templates: Template[],\n  opts: InitialValueOptions,\n): {templateName: string; templateParams: Record<string, unknown>} {\n  const payload = opts.panePayload || {}\n  const structureNodeTemplate = opts.templateName\n\n  if (opts.urlTemplate && structureNodeTemplate && structureNodeTemplate !== opts.urlTemplate) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `Conflicting templates: URL says \"${opts.urlTemplate}\", structure node says \"${structureNodeTemplate}\". Using \"${structureNodeTemplate}\".`,\n    )\n  }\n\n  const template = structureNodeTemplate || opts.urlTemplate\n  const typeTemplates = templates.filter((t) => t.schemaType === opts.documentType)\n\n  const templateParams = {\n    ...opts.templateParams,\n    ...(typeof payload === 'object' ? payload || {} : {}),\n  }\n\n  let templateName = template\n\n  // If we have not specified a specific template, and we only have a single\n  // template available for a schema type, use it\n  if (!template && typeTemplates.length === 1) {\n    templateName = typeTemplates[0].id\n  }\n\n  return {templateName: templateName!, templateParams}\n}\n","/* eslint-disable camelcase */\nimport {isActionEnabled} from '@sanity/schema/_internal'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {\n  type ObjectSchemaType,\n  type Path,\n  type SanityDocument,\n  type SanityDocumentLike,\n} from '@sanity/types'\nimport {useToast} from '@sanity/ui'\nimport {fromString as pathFromString, pathFor, resolveKeyedPath} from '@sanity/util/paths'\nimport {omit, throttle} from 'lodash'\nimport {memo, useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport deepEquals from 'react-fast-compare'\nimport {\n  type DocumentFieldAction,\n  type DocumentInspector,\n  type DocumentPresence,\n  EMPTY_ARRAY,\n  getDraftId,\n  getExpandOperations,\n  getPublishedId,\n  isSanityCreateLinkedDocument,\n  type OnPathFocusPayload,\n  type PatchEvent,\n  setAtPath,\n  type StateTree,\n  toMutationPatches,\n  useConnectionState,\n  useCopyPaste,\n  useDocumentOperation,\n  useDocumentValuePermissions,\n  useEditState,\n  useFormState,\n  useInitialValue,\n  usePresenceStore,\n  useSchema,\n  useSource,\n  useTemplates,\n  useTimelineSelector,\n  useTimelineStore,\n  useTranslation,\n  useUnique,\n  useValidationStatus,\n} from 'sanity'\nimport {DocumentPaneContext} from 'sanity/_singletons'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type PaneMenuItem} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {CreatedDraft, DocumentURLCopied} from './__telemetry__'\nimport {\n  DEFAULT_MENU_ITEM_GROUPS,\n  EMPTY_PARAMS,\n  HISTORY_INSPECTOR_NAME,\n  INSPECT_ACTION_PREFIX,\n} from './constants'\nimport {type DocumentPaneContextValue} from './DocumentPaneContext'\nimport {getInitialValueTemplateOpts} from './getInitialValueTemplateOpts'\nimport {type DocumentPaneProviderProps} from './types'\nimport {usePreviewUrl} from './usePreviewUrl'\n\n/**\n * @internal\n */\n// eslint-disable-next-line complexity, max-statements\nexport const DocumentPaneProvider = memo((props: DocumentPaneProviderProps) => {\n  const {children, index, pane, paneKey, onFocusPath} = props\n  const schema = useSchema()\n  const templates = useTemplates()\n  const {setDocumentMeta} = useCopyPaste()\n  const {\n    __internal_tasks,\n    document: {\n      actions: documentActions,\n      badges: documentBadges,\n      unstable_fieldActions: fieldActionsResolver,\n      unstable_languageFilter: languageFilterResolver,\n      inspectors: inspectorsResolver,\n    },\n  } = useSource()\n  const presenceStore = usePresenceStore()\n  const paneRouter = usePaneRouter()\n  const setPaneParams = paneRouter.setParams\n  const {features} = useStructureTool()\n  const {push: pushToast} = useToast()\n  const {\n    options,\n    menuItemGroups = DEFAULT_MENU_ITEM_GROUPS,\n    title = null,\n    views: viewsProp = [],\n  } = pane\n  const paneOptions = useUnique(options)\n  const documentIdRaw = paneOptions.id\n  const documentId = getPublishedId(documentIdRaw)\n  const documentType = options.type\n  const params = useUnique(paneRouter.params) || EMPTY_PARAMS\n  const panePayload = useUnique(paneRouter.payload)\n  const {templateName, templateParams} = useMemo(\n    () =>\n      getInitialValueTemplateOpts(templates, {\n        documentType,\n        templateName: paneOptions.template,\n        templateParams: paneOptions.templateParameters,\n        panePayload,\n        urlTemplate: params.template,\n      }),\n    [documentType, paneOptions, params, panePayload, templates],\n  )\n  const initialValueRaw = useInitialValue({\n    documentId,\n    documentType,\n    templateName,\n    templateParams,\n  })\n  const initialValue = useUnique(initialValueRaw)\n  const {patch} = useDocumentOperation(documentId, documentType)\n  const editState = useEditState(documentId, documentType)\n  const {validation: validationRaw} = useValidationStatus(documentId, documentType)\n  const connectionState = useConnectionState(documentId, documentType)\n  const schemaType = schema.get(documentType) as ObjectSchemaType | undefined\n  const value: SanityDocumentLike = editState?.draft || editState?.published || initialValue.value\n  const [isDeleting, setIsDeleting] = useState(false)\n\n  // Resolve document actions\n  const actions = useMemo(\n    () => documentActions({schemaType: documentType, documentId}),\n    [documentActions, documentId, documentType],\n  )\n\n  // Resolve document badges\n  const badges = useMemo(\n    () => documentBadges({schemaType: documentType, documentId}),\n    [documentBadges, documentId, documentType],\n  )\n\n  // Resolve document language filter\n  const languageFilter = useMemo(\n    () => languageFilterResolver({schemaType: documentType, documentId}),\n    [documentId, documentType, languageFilterResolver],\n  )\n\n  const validation = useUnique(validationRaw)\n  const views = useUnique(viewsProp)\n\n  const [focusPath, setFocusPath] = useState<Path>(() =>\n    params.path ? pathFromString(params.path) : EMPTY_ARRAY,\n  )\n  const focusPathRef = useRef<Path>([])\n  const activeViewId = params.view || (views[0] && views[0].id) || null\n  const [timelineMode, setTimelineMode] = useState<'since' | 'rev' | 'closed'>('closed')\n\n  const [timelineError, setTimelineError] = useState<Error | null>(null)\n\n  /**\n   * Create an intermediate store which handles document Timeline + TimelineController\n   * creation, and also fetches pre-requsite document snapshots. Compatible with `useSyncExternalStore`\n   * and made available to child components via DocumentPaneContext.\n   */\n  const timelineStore = useTimelineStore({\n    documentId,\n    documentType,\n    onError: setTimelineError,\n    rev: params.rev,\n    since: params.since,\n  })\n\n  // Subscribe to external timeline state changes\n  const onOlderRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n  const revTime = useTimelineSelector(timelineStore, (state) => state.revTime)\n  const sinceAttributes = useTimelineSelector(timelineStore, (state) => state.sinceAttributes)\n  const timelineDisplayed = useTimelineSelector(timelineStore, (state) => state.timelineDisplayed)\n  const timelineReady = useTimelineSelector(timelineStore, (state) => state.timelineReady)\n  const isPristine = useTimelineSelector(timelineStore, (state) => state.isPristine)\n\n  /**\n   * Determine if the current document is deleted.\n   *\n   * When the timeline is available – we check for the absence of an editable document pair\n   * (both draft + published versions) as well as a non 'pristine' timeline (i.e. a timeline that consists\n   * of at least one chunk).\n   *\n   * In the _very rare_ case where the timeline cannot be loaded – we skip this check and always assume\n   * the document is NOT deleted. Since we can't accurately determine document deleted status without history,\n   * skipping this check means that in these cases, users will at least be able to create new documents\n   * without them being incorrectly marked as deleted.\n   */\n  const isDeleted = useMemo(() => {\n    if (!timelineReady) {\n      return false\n    }\n    return Boolean(!editState?.draft && !editState?.published) && !isPristine\n  }, [editState?.draft, editState?.published, isPristine, timelineReady])\n\n  // TODO: this may cause a lot of churn. May be a good idea to prevent these\n  // requests unless the menu is open somehow\n  const previewUrl = usePreviewUrl(value)\n\n  const [presence, setPresence] = useState<DocumentPresence[]>([])\n  useEffect(() => {\n    const subscription = presenceStore.documentPresence(documentId).subscribe((nextPresence) => {\n      setPresence(nextPresence)\n    })\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [documentId, presenceStore])\n\n  const inspectors: DocumentInspector[] = useMemo(\n    () => inspectorsResolver({documentId, documentType}),\n    [documentId, documentType, inspectorsResolver],\n  )\n\n  const [inspectorName, setInspectorName] = useState<string | null>(() => params.inspect || null)\n\n  // Handle inspector name changes from URL\n  const inspectParamRef = useRef<string | undefined>(params.inspect)\n  useEffect(() => {\n    if (inspectParamRef.current !== params.inspect) {\n      inspectParamRef.current = params.inspect\n      setInspectorName(params.inspect || null)\n    }\n  }, [params.inspect])\n\n  const currentInspector = inspectors?.find((i) => i.name === inspectorName)\n  const resolvedChangesInspector = inspectors.find((i) => i.name === HISTORY_INSPECTOR_NAME)\n\n  const changesOpen = currentInspector?.name === HISTORY_INSPECTOR_NAME\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const inspectOpen = params.inspect === 'on'\n  const compareValue: Partial<SanityDocument> | null = changesOpen\n    ? sinceAttributes\n    : editState?.published || null\n\n  const fieldActions: DocumentFieldAction[] = useMemo(\n    () => (schemaType ? fieldActionsResolver({documentId, documentType, schemaType}) : []),\n    [documentId, documentType, fieldActionsResolver, schemaType],\n  )\n\n  /**\n   * Note that in addition to connection and edit state, we also wait for a valid document timeline\n   * range to be loaded. This means if we're loading an older revision, the full transaction range must\n   * be loaded in full prior to the document being displayed.\n   *\n   * Previously, visiting studio URLs with timeline params would display the 'current' document and then\n   * 'snap' in the older revision, which was disorienting and could happen mid-edit.\n   *\n   * In the event that the timeline cannot be loaded due to TimelineController errors or blocked requests,\n   * we skip this readiness check to ensure that users aren't locked out of editing. Trying to select\n   * a timeline revision in this instance will display an error localized to the popover itself.\n   */\n  const ready =\n    connectionState === 'connected' &&\n    editState.ready &&\n    (!params.rev || timelineReady || !!timelineError)\n\n  const displayed: Partial<SanityDocument> | undefined = useMemo(\n    () => (onOlderRevision ? timelineDisplayed || {_id: value._id, _type: value._type} : value),\n    [onOlderRevision, timelineDisplayed, value],\n  )\n\n  const setTimelineRange = useCallback(\n    (newSince: string, newRev: string | null) => {\n      setPaneParams({\n        ...params,\n        since: newSince,\n        rev: newRev || undefined,\n      })\n    },\n    [params, setPaneParams],\n  )\n\n  const handleBlur = useCallback(\n    (blurredPath: Path) => {\n      if (disableBlurRef.current) {\n        return\n      }\n\n      setFocusPath(EMPTY_ARRAY)\n\n      if (focusPathRef.current !== EMPTY_ARRAY) {\n        focusPathRef.current = EMPTY_ARRAY\n        onFocusPath?.(EMPTY_ARRAY)\n      }\n\n      // note: we're deliberately not syncing presence here since it would make the user avatar disappear when a\n      // user clicks outside a field without focusing another one\n    },\n    [onFocusPath, setFocusPath],\n  )\n\n  const patchRef = useRef<(event: PatchEvent) => void>(() => {\n    throw new Error('Nope')\n  })\n\n  patchRef.current = (event: PatchEvent) => {\n    // when creating a new draft\n    if (!editState.draft && !editState.published) {\n      telemetry.log(CreatedDraft)\n    }\n    patch.execute(toMutationPatches(event.patches), initialValue.value)\n  }\n\n  const handleChange = useCallback((event: PatchEvent) => patchRef.current(event), [])\n\n  const closeInspector = useCallback(\n    (closeInspectorName?: string) => {\n      // inspector?: DocumentInspector\n      const inspector = closeInspectorName && inspectors.find((i) => i.name === closeInspectorName)\n\n      if (closeInspectorName && !inspector) {\n        console.warn(`No inspector named \"${closeInspectorName}\"`)\n        return\n      }\n\n      if (!currentInspector) {\n        return\n      }\n\n      if (inspector) {\n        const result = inspector.onClose?.({params}) ?? {params}\n\n        setInspectorName(null)\n        inspectParamRef.current = undefined\n\n        setPaneParams({...result.params, inspect: undefined})\n\n        return\n      }\n\n      if (currentInspector) {\n        const result = currentInspector.onClose?.({params}) ?? {params}\n\n        setInspectorName(null)\n        inspectParamRef.current = undefined\n\n        setPaneParams({...result.params, inspect: undefined})\n      }\n    },\n    [currentInspector, inspectors, params, setPaneParams],\n  )\n\n  const openInspector = useCallback(\n    (nextInspectorName: string, paneParams?: Record<string, string>) => {\n      const nextInspector = inspectors.find((i) => i.name === nextInspectorName)\n\n      if (!nextInspector) {\n        console.warn(`No inspector named \"${nextInspectorName}\"`)\n        return\n      }\n\n      // if the inspector is already open, only update params\n      if (currentInspector?.name === nextInspector.name) {\n        setPaneParams({...params, ...paneParams, inspect: nextInspector.name})\n        return\n      }\n\n      let currentParams = params\n\n      if (currentInspector) {\n        const closeResult = nextInspector.onClose?.({params: currentParams}) ?? {\n          params: currentParams,\n        }\n\n        currentParams = closeResult.params\n      }\n\n      const result = nextInspector.onOpen?.({params: currentParams}) ?? {params: currentParams}\n\n      setInspectorName(nextInspector.name)\n      inspectParamRef.current = nextInspector.name\n\n      setPaneParams({...result.params, ...paneParams, inspect: nextInspector.name})\n    },\n    [currentInspector, inspectors, params, setPaneParams],\n  )\n\n  const handleHistoryClose = useCallback(() => {\n    if (resolvedChangesInspector) {\n      closeInspector(resolvedChangesInspector.name)\n    }\n  }, [closeInspector, resolvedChangesInspector])\n\n  const handleHistoryOpen = useCallback(() => {\n    if (!features.reviewChanges) {\n      return\n    }\n\n    if (resolvedChangesInspector) {\n      openInspector(resolvedChangesInspector.name, {changesInspectorTab: 'review'})\n    }\n  }, [features.reviewChanges, openInspector, resolvedChangesInspector])\n\n  const handlePaneClose = useCallback(() => paneRouter.closeCurrent(), [paneRouter])\n\n  const handlePaneSplit = useCallback(() => paneRouter.duplicateCurrent(), [paneRouter])\n\n  const toggleLegacyInspect = useCallback(\n    (toggle = !inspectOpen) => {\n      if (toggle) {\n        setPaneParams({...params, inspect: 'on'})\n      } else {\n        setPaneParams(omit(params, 'inspect'))\n      }\n    },\n    [inspectOpen, params, setPaneParams],\n  )\n\n  const telemetry = useTelemetry()\n\n  const handleMenuAction = useCallback(\n    (item: PaneMenuItem) => {\n      if (item.action === 'production-preview' && previewUrl) {\n        window.open(previewUrl)\n        return true\n      }\n\n      if (item.action === 'copy-document-url' && navigator) {\n        telemetry.log(DocumentURLCopied)\n        // Chose to copy the user's current URL instead of\n        // the document's edit intent link because\n        // of bugs when resolving a document that has\n        // multiple access paths within Structure\n        navigator.clipboard.writeText(window.location.toString())\n        pushToast({\n          id: 'copy-document-url',\n          status: 'info',\n          title: t('panes.document-operation-results.operation-success_copy-url'),\n        })\n        return true\n      }\n\n      if (item.action === 'inspect') {\n        toggleLegacyInspect(true)\n        return true\n      }\n\n      if (item.action === 'reviewChanges') {\n        handleHistoryOpen()\n        return true\n      }\n\n      if (typeof item.action === 'string' && item.action.startsWith(INSPECT_ACTION_PREFIX)) {\n        const nextInspectorName = item.action.slice(INSPECT_ACTION_PREFIX.length)\n        const nextInspector = inspectors.find((i) => i.name === nextInspectorName)\n\n        if (nextInspector) {\n          if (nextInspector.name === inspectorName) {\n            closeInspector(nextInspector.name)\n          } else {\n            openInspector(nextInspector.name)\n          }\n          return true\n        }\n      }\n\n      return false\n    },\n    [\n      t,\n      closeInspector,\n      handleHistoryOpen,\n      inspectorName,\n      inspectors,\n      openInspector,\n      previewUrl,\n      toggleLegacyInspect,\n      pushToast,\n      telemetry,\n    ],\n  )\n\n  const handleLegacyInspectClose = useCallback(\n    () => toggleLegacyInspect(false),\n    [toggleLegacyInspect],\n  )\n\n  const [openPath, onSetOpenPath] = useState<Path>([])\n  const [fieldGroupState, onSetFieldGroupState] = useState<StateTree<string>>()\n  const [collapsedPaths, onSetCollapsedPath] = useState<StateTree<boolean>>()\n  const [collapsedFieldSets, onSetCollapsedFieldSets] = useState<StateTree<boolean>>()\n\n  const handleOnSetCollapsedPath = useCallback((path: Path, collapsed: boolean) => {\n    onSetCollapsedPath((prevState) => setAtPath(prevState, path, collapsed))\n  }, [])\n\n  const handleOnSetCollapsedFieldSet = useCallback((path: Path, collapsed: boolean) => {\n    onSetCollapsedFieldSets((prevState) => setAtPath(prevState, path, collapsed))\n  }, [])\n\n  const handleSetActiveFieldGroup = useCallback(\n    (path: Path, groupName: string) =>\n      onSetFieldGroupState((prevState) => setAtPath(prevState, path, groupName)),\n    [],\n  )\n\n  const requiredPermission = value._createdAt ? 'update' : 'create'\n  const liveEdit = Boolean(schemaType?.liveEdit)\n  const docId = value._id ? value._id : 'dummy-id'\n  const docPermissionsInput = useMemo(() => {\n    return {\n      ...value,\n      _id: liveEdit ? getPublishedId(docId) : getDraftId(docId),\n    }\n  }, [liveEdit, value, docId])\n\n  const [permissions, isPermissionsLoading] = useDocumentValuePermissions({\n    document: docPermissionsInput,\n    permission: requiredPermission,\n  })\n\n  const isCreateLinked = isSanityCreateLinkedDocument(value)\n  const isNonExistent = !value?._id\n\n  const readOnly = useMemo(() => {\n    const hasNoPermission = !isPermissionsLoading && !permissions?.granted\n    const updateActionDisabled = !isActionEnabled(schemaType!, 'update')\n    const createActionDisabled = isNonExistent && !isActionEnabled(schemaType!, 'create')\n    const reconnecting = connectionState === 'reconnecting'\n    const isLocked = editState.transactionSyncLock?.enabled\n    // in cases where the document has drafts but the schema is live edit,\n    // there is a risk of data loss, so we disable editing in this case\n    const isLiveEditAndDraft = Boolean(liveEdit && editState.draft)\n\n    return (\n      !ready ||\n      revTime !== null ||\n      hasNoPermission ||\n      updateActionDisabled ||\n      createActionDisabled ||\n      reconnecting ||\n      isLocked ||\n      isDeleting ||\n      isDeleted ||\n      isLiveEditAndDraft ||\n      isCreateLinked\n    )\n  }, [\n    isPermissionsLoading,\n    permissions?.granted,\n    schemaType,\n    isNonExistent,\n    connectionState,\n    editState.transactionSyncLock?.enabled,\n    editState.draft,\n    liveEdit,\n    ready,\n    revTime,\n    isDeleting,\n    isDeleted,\n    isCreateLinked,\n  ])\n\n  const formState = useFormState({\n    schemaType: schemaType!,\n    documentValue: displayed,\n    readOnly,\n    comparisonValue: compareValue,\n    focusPath,\n    openPath,\n    collapsedPaths,\n    presence,\n    validation,\n    collapsedFieldSets,\n    fieldGroupState,\n    changesOpen,\n  })\n\n  useEffect(() => {\n    setDocumentMeta({\n      documentId,\n      documentType,\n      schemaType: schemaType!,\n      onChange: handleChange,\n    })\n  }, [documentId, documentType, schemaType, handleChange, setDocumentMeta])\n\n  const formStateRef = useRef(formState)\n  formStateRef.current = formState\n\n  const setOpenPath = useCallback(\n    (path: Path) => {\n      const ops = getExpandOperations(formStateRef.current!, path)\n      ops.forEach((op) => {\n        if (op.type === 'expandPath') {\n          onSetCollapsedPath((prevState) => setAtPath(prevState, op.path, false))\n        }\n        if (op.type === 'expandFieldSet') {\n          onSetCollapsedFieldSets((prevState) => setAtPath(prevState, op.path, false))\n        }\n        if (op.type === 'setSelectedGroup') {\n          onSetFieldGroupState((prevState) => setAtPath(prevState, op.path, op.groupName))\n        }\n      })\n      onSetOpenPath(path)\n    },\n    [formStateRef],\n  )\n\n  const updatePresence = useCallback(\n    (nextFocusPath: Path, payload?: OnPathFocusPayload) => {\n      presenceStore.setLocation([\n        {\n          type: 'document',\n          documentId,\n          path: nextFocusPath,\n          lastActiveAt: new Date().toISOString(),\n          selection: payload?.selection,\n        },\n      ])\n    },\n    [documentId, presenceStore],\n  )\n\n  const updatePresenceThrottled = useMemo(\n    () => throttle(updatePresence, 1000, {leading: true, trailing: true}),\n    [updatePresence],\n  )\n\n  const handleFocus = useCallback(\n    (_nextFocusPath: Path, payload?: OnPathFocusPayload) => {\n      const nextFocusPath = pathFor(_nextFocusPath)\n      if (nextFocusPath !== focusPathRef.current) {\n        setFocusPath(pathFor(nextFocusPath))\n        setOpenPath(pathFor(nextFocusPath.slice(0, -1)))\n        focusPathRef.current = nextFocusPath\n        onFocusPath?.(nextFocusPath)\n      }\n      updatePresenceThrottled(nextFocusPath, payload)\n    },\n    [onFocusPath, setOpenPath, updatePresenceThrottled],\n  )\n\n  const documentPane: DocumentPaneContextValue = useMemo(\n    () => ({\n      actions,\n      activeViewId,\n      badges,\n      changesOpen,\n      closeInspector,\n      collapsedFieldSets,\n      collapsedPaths,\n      compareValue,\n      connectionState,\n      displayed,\n      documentId,\n      documentIdRaw,\n      documentType,\n      editState,\n      fieldActions,\n      focusPath,\n      inspector: currentInspector || null,\n      inspectors,\n      __internal_tasks,\n      onBlur: handleBlur,\n      onChange: handleChange,\n      onFocus: handleFocus,\n      onPathOpen: setOpenPath,\n      onHistoryClose: handleHistoryClose,\n      onHistoryOpen: handleHistoryOpen,\n      onInspectClose: handleLegacyInspectClose,\n      onMenuAction: handleMenuAction,\n      onPaneClose: handlePaneClose,\n      onPaneSplit: handlePaneSplit,\n      onSetActiveFieldGroup: handleSetActiveFieldGroup,\n      onSetCollapsedPath: handleOnSetCollapsedPath,\n      onSetCollapsedFieldSet: handleOnSetCollapsedFieldSet,\n      openInspector,\n      openPath,\n      index,\n      inspectOpen,\n      validation,\n      menuItemGroups: menuItemGroups || [],\n      paneKey,\n      previewUrl,\n      ready,\n      schemaType: schemaType!,\n      isPermissionsLoading,\n      permissions,\n      setTimelineMode,\n      setTimelineRange,\n      setIsDeleting,\n      isDeleting,\n      isDeleted,\n      timelineError,\n      timelineMode,\n      timelineStore,\n      title,\n      value,\n      views,\n      formState,\n      unstable_languageFilter: languageFilter,\n    }),\n    [\n      __internal_tasks,\n      actions,\n      activeViewId,\n      badges,\n      changesOpen,\n      closeInspector,\n      collapsedFieldSets,\n      collapsedPaths,\n      compareValue,\n      connectionState,\n      currentInspector,\n      displayed,\n      documentId,\n      documentIdRaw,\n      documentType,\n      editState,\n      fieldActions,\n      focusPath,\n      formState,\n      handleBlur,\n      handleChange,\n      handleFocus,\n      handleHistoryClose,\n      handleHistoryOpen,\n      handleLegacyInspectClose,\n      handleMenuAction,\n      handleOnSetCollapsedFieldSet,\n      handleOnSetCollapsedPath,\n      handlePaneClose,\n      handlePaneSplit,\n      handleSetActiveFieldGroup,\n      index,\n      inspectOpen,\n      inspectors,\n      isDeleted,\n      isDeleting,\n      isPermissionsLoading,\n      languageFilter,\n      menuItemGroups,\n      openInspector,\n      openPath,\n      paneKey,\n      permissions,\n      previewUrl,\n      ready,\n      schemaType,\n      setOpenPath,\n      setTimelineRange,\n      timelineError,\n      timelineMode,\n      timelineStore,\n      title,\n      validation,\n      value,\n      views,\n    ],\n  )\n\n  useEffect(() => {\n    let timeout: ReturnType<typeof setTimeout>\n    if (connectionState === 'reconnecting') {\n      timeout = setTimeout(() => {\n        pushToast({\n          id: 'sanity/structure/reconnecting',\n          status: 'warning',\n          title: t('panes.document-pane-provider.reconnecting.title'),\n        })\n      }, 2000) // 2 seconds, we can iterate on the value\n    }\n    return () => {\n      if (timeout) clearTimeout(timeout)\n    }\n  }, [connectionState, pushToast, t])\n\n  const disableBlurRef = useRef(false)\n\n  // Reset `focusPath` when `documentId` or `params.path` changes\n  useEffect(() => {\n    if (ready && params.path) {\n      const {path, ...restParams} = params\n      const pathFromUrl = resolveKeyedPath(formStateRef.current?.value, pathFromString(path))\n\n      disableBlurRef.current = true\n\n      // Reset focus path when url params path changes\n      if (!deepEquals(focusPathRef.current, pathFromUrl)) {\n        setFocusPath(pathFromUrl)\n        setOpenPath(pathFromUrl)\n        focusPathRef.current = pathFromUrl\n        onFocusPath?.(pathFromUrl)\n      }\n\n      const timeout = setTimeout(() => {\n        disableBlurRef.current = false\n      }, 0)\n\n      // remove the `path`-param from url after we have consumed it as the initial focus path\n      paneRouter.setParams(restParams)\n\n      return () => clearTimeout(timeout)\n    }\n\n    return undefined\n  }, [params, documentId, onFocusPath, setOpenPath, ready, paneRouter])\n\n  return (\n    <DocumentPaneContext.Provider value={documentPane}>{children}</DocumentPaneContext.Provider>\n  )\n})\n\nDocumentPaneProvider.displayName = 'Memo(DocumentPaneProvider)'\n","import {type Path} from '@sanity/types'\nimport {Stack, Text} from '@sanity/ui'\nimport {fromString as pathFromString} from '@sanity/util/paths'\nimport {memo, useMemo} from 'react'\nimport {\n  CopyPasteProvider,\n  ReferenceInputOptionsProvider,\n  SourceProvider,\n  Translate,\n  useDocumentType,\n  useSource,\n  useTemplatePermissions,\n  useTemplates,\n  useTranslation,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type DocumentPaneNode} from '../../types'\nimport {ErrorPane} from '../error'\nimport {LoadingPane} from '../loading'\nimport {CommentsWrapper} from './comments'\nimport {useDocumentLayoutComponent} from './document-layout'\nimport {DocumentPaneProvider} from './DocumentPaneProvider'\nimport {type DocumentPaneProviderProps} from './types'\n\ntype DocumentPaneOptions = DocumentPaneNode['options']\n\n/**\n * @internal\n */\nexport const DocumentPane = memo(function DocumentPane(props: DocumentPaneProviderProps) {\n  const {name: parentSourceName} = useSource()\n\n  return (\n    <SourceProvider name={props.pane.source || parentSourceName}>\n      <CopyPasteProvider>\n        <DocumentPaneInner {...props} />\n      </CopyPasteProvider>\n    </SourceProvider>\n  )\n})\n\nfunction DocumentPaneInner(props: DocumentPaneProviderProps) {\n  const {pane, paneKey} = props\n  const {resolveNewDocumentOptions} = useSource().document\n  const paneRouter = usePaneRouter()\n  const options = usePaneOptions(pane.options, paneRouter.params)\n  const {documentType, isLoaded: isDocumentLoaded} = useDocumentType(options.id, options.type)\n\n  const DocumentLayout = useDocumentLayoutComponent()\n\n  // The templates that should be creatable from inside this document pane.\n  // For example, from the \"Create new\" menu in reference inputs.\n  const templateItems = useMemo(() => {\n    return resolveNewDocumentOptions({\n      type: 'document',\n      documentId: options.id,\n      schemaType: options.type,\n    })\n  }, [options.id, options.type, resolveNewDocumentOptions])\n\n  const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions({\n    templateItems,\n  })\n  const isLoaded = isDocumentLoaded && !isTemplatePermissionsLoading\n\n  const providerProps = useMemo(() => {\n    return isLoaded && documentType && options.type !== documentType\n      ? mergeDocumentType(props, options, documentType)\n      : props\n  }, [props, documentType, isLoaded, options])\n\n  const {ReferenceChildLink, handleEditReference, groupIndex, routerPanesState} = paneRouter\n  const childParams = routerPanesState[groupIndex + 1]?.[0].params || {}\n  const routerPanesStateLength = routerPanesState.length\n  const {parentRefPath} = childParams\n\n  const activePath: {path: Path; state: 'selected' | 'pressed' | 'none'} = useMemo(() => {\n    return parentRefPath\n      ? {\n          path: pathFromString(parentRefPath),\n          state:\n            // eslint-disable-next-line no-nested-ternary\n            groupIndex >= routerPanesStateLength - 1\n              ? 'none'\n              : groupIndex >= routerPanesStateLength - 2\n                ? 'selected'\n                : 'pressed',\n        }\n      : {path: [], state: 'none'}\n  }, [parentRefPath, groupIndex, routerPanesStateLength])\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (options.type === '*' && !isLoaded) {\n    return (\n      <LoadingPane\n        flex={2.5}\n        minWidth={320}\n        paneKey={paneKey}\n        title={t('panes.document-pane.document-not-found.loading')}\n      />\n    )\n  }\n\n  if (!documentType) {\n    return (\n      <ErrorPane\n        flex={2.5}\n        minWidth={320}\n        paneKey={paneKey}\n        title={t('panes.document-pane.document-not-found.title')}\n      >\n        <Stack space={4}>\n          <Text as=\"p\">\n            <Translate\n              t={t}\n              i18nKey=\"panes.document-pane.document-not-found.text\"\n              values={{id: options.id}}\n              components={{Code: ({children}) => <code>{children}</code>}}\n            />\n          </Text>\n        </Stack>\n      </ErrorPane>\n    )\n  }\n\n  return (\n    <DocumentPaneProvider\n      // this needs to be here to avoid formState from being re-used across (incompatible) document types\n      // see https://github.com/sanity-io/sanity/discussions/3794 for a description of the problem\n      key={`${documentType}-${options.id}`}\n      {...providerProps}\n    >\n      {/* NOTE: this is a temporary location for this provider until we */}\n      {/* stabilize the reference input options formally in the form builder */}\n      {/* eslint-disable-next-line react/jsx-pascal-case */}\n      <ReferenceInputOptionsProvider\n        EditReferenceLinkComponent={ReferenceChildLink}\n        onEditReference={handleEditReference}\n        initialValueTemplateItems={templatePermissions}\n        activePath={activePath}\n      >\n        <CommentsWrapper documentId={options.id} documentType={options.type}>\n          <DocumentLayout documentId={options.id} documentType={options.type} />\n        </CommentsWrapper>\n      </ReferenceInputOptionsProvider>\n    </DocumentPaneProvider>\n  )\n}\n\nfunction usePaneOptions(\n  options: DocumentPaneOptions,\n  params: Record<string, string | undefined> = {},\n): DocumentPaneOptions {\n  const templates = useTemplates()\n\n  return useMemo(() => {\n    // The document type is provided, so return\n    if (options.type && options.type !== '*') {\n      return options\n    }\n\n    // Attempt to derive document type from the template configuration\n    const templateName = options.template || params.template\n    const template = templateName ? templates.find((t) => t.id === templateName) : undefined\n    const documentType = template?.schemaType\n\n    // No document type was found in a template\n    if (!documentType) {\n      return options\n    }\n\n    // The template provided the document type, so modify the pane’s `options` property\n    return {...options, type: documentType}\n  }, [options, params.template, templates])\n}\n\nfunction mergeDocumentType(\n  props: DocumentPaneProviderProps,\n  options: DocumentPaneOptions,\n  documentType: string,\n): DocumentPaneProviderProps {\n  return {\n    ...props,\n    pane: {\n      ...props.pane,\n      options: {...options, type: documentType},\n    },\n  }\n}\n","import {type SortOrder} from './types'\n\nexport const PARTIAL_PAGE_LIMIT = 100\nexport const FULL_LIST_LIMIT = 2000\nexport const DEFAULT_ORDERING: SortOrder = {by: [{field: '_updatedAt', direction: 'desc'}]}\nexport const EMPTY_RECORD: Record<string, unknown> = {}\n\nexport const ENABLE_LRU_MEMO = true\n","import {type SanityDocument} from '@sanity/types'\nimport {Box, Container, Flex, Heading, Stack, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  CommandList,\n  type CommandListRenderItemCallback,\n  ErrorActions,\n  type GeneralPreviewLayoutKey,\n  getPublishedId,\n  LoadingBlock,\n  SanityDefaultPreview,\n  Translate,\n  useSchema,\n  useTranslation,\n} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Delay, PaneContent, PaneItem, usePane, usePaneLayout} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {FULL_LIST_LIMIT} from './constants'\nimport {type DocumentListPaneItem, type LoadingVariant} from './types'\n\nconst RootBox = styled(Box)<{$opacity?: number}>`\n  position: relative;\n  opacity: ${(props) => props.$opacity || 1};\n  transition: opacity 0.4s;\n`\n\nconst CommandListBox = styled(Box)`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n`\n\ninterface DocumentListPaneContentProps {\n  childItemId?: string\n  error: {message: string} | null\n  filterIsSimpleTypeConstraint: boolean\n  hasMaxItems?: boolean\n  hasSearchQuery: boolean\n  isActive?: boolean\n  isLazyLoading: boolean\n  isLoading: boolean\n  items: DocumentListPaneItem[]\n  layout?: GeneralPreviewLayoutKey\n  loadingVariant?: LoadingVariant\n  onEndReached: () => void\n  onRetry?: () => void\n  paneTitle: string\n  searchInputElement: HTMLInputElement | null\n  showIcons: boolean\n}\n\nconst SKELETON_ITEMS = [...Array(30).keys()]\n\nfunction LoadingView(props: {layout?: GeneralPreviewLayoutKey}) {\n  const {layout} = props\n\n  return (\n    <Stack paddingX={3} paddingY={2} paddingTop={0} space={1}>\n      {SKELETON_ITEMS.map((num) => (\n        <SanityDefaultPreview isPlaceholder layout={layout} key={num} />\n      ))}\n    </Stack>\n  )\n}\n\nexport function DocumentListPaneContent(props: DocumentListPaneContentProps) {\n  const {\n    childItemId,\n    error,\n    filterIsSimpleTypeConstraint,\n    hasMaxItems,\n    hasSearchQuery,\n    isActive,\n    isLazyLoading,\n    isLoading,\n    items,\n    layout,\n    loadingVariant,\n    onEndReached,\n    onRetry,\n    paneTitle,\n    searchInputElement,\n    showIcons,\n  } = props\n\n  const schema = useSchema()\n\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const {collapsed, index} = usePane()\n  const [shouldRender, setShouldRender] = useState(!collapsed)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleEndReached = useCallback(() => {\n    if (shouldRender) {\n      onEndReached()\n    }\n  }, [onEndReached, shouldRender])\n\n  useEffect(() => {\n    if (collapsed) return undefined\n\n    const timer = setTimeout(() => {\n      setShouldRender(true)\n    }, 0)\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [collapsed, items])\n\n  const renderItem = useCallback<CommandListRenderItemCallback<SanityDocument>>(\n    (item, {activeIndex}) => {\n      const publishedId = getPublishedId(item._id)\n      const isSelected = childItemId === publishedId\n      const pressed = !isActive && isSelected\n      const selected = isActive && isSelected\n      const isLastItem = activeIndex === items.length - 1\n      const showSpinner = isLastItem && isLazyLoading\n      const showMaxItemsMessage = isLastItem && hasMaxItems\n\n      return (\n        <>\n          <PaneItem\n            icon={showIcons === false ? false : undefined}\n            id={publishedId}\n            layout={layout}\n            marginBottom={1}\n            pressed={pressed}\n            schemaType={schema.get(item._type)}\n            selected={selected}\n            value={item}\n          />\n\n          {showSpinner && <LoadingBlock />}\n\n          {showMaxItemsMessage && (\n            <Box marginY={1} paddingX={3} paddingY={4}>\n              <Text align=\"center\" muted size={1}>\n                {t('panes.document-list-pane.max-items.text', {limit: FULL_LIST_LIMIT})}\n              </Text>\n            </Box>\n          )}\n        </>\n      )\n    },\n    [childItemId, isActive, items.length, layout, schema, showIcons, hasMaxItems, isLazyLoading, t],\n  )\n\n  const noDocumentsContent = useMemo(() => {\n    if (hasSearchQuery) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Container width={1}>\n            <Box paddingX={4} paddingY={5}>\n              <Text align=\"center\" muted>\n                {t('panes.document-list-pane.no-documents.text')}\n              </Text>\n            </Box>\n          </Container>\n        </Flex>\n      )\n    }\n\n    return (\n      <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n        <Container width={1}>\n          <Box paddingX={4} paddingY={5}>\n            <Text align=\"center\" muted>\n              {filterIsSimpleTypeConstraint\n                ? t('panes.document-list-pane.no-documents-of-type.text')\n                : t('panes.document-list-pane.no-matching-documents.text')}\n            </Text>\n          </Box>\n        </Container>\n      </Flex>\n    )\n  }, [filterIsSimpleTypeConstraint, hasSearchQuery, t])\n\n  const mainContent = useMemo(() => {\n    if (!shouldRender) {\n      return null\n    }\n\n    if (error) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Container width={1}>\n            <Stack paddingX={4} paddingY={5} space={4}>\n              <Heading as=\"h3\">{t('panes.document-list-pane.error.title')}</Heading>\n              <Text as=\"p\">\n                <Translate\n                  t={t}\n                  i18nKey=\"panes.document-list-pane.error.text\"\n                  values={{error: error.message}}\n                  components={{Code: ({children}) => <code>{children}</code>}}\n                />\n              </Text>\n              <ErrorActions error={error} eventId={null} onRetry={onRetry} />\n            </Stack>\n          </Container>\n        </Flex>\n      )\n    }\n\n    if (!isLoading && items.length === 0) {\n      return noDocumentsContent\n    }\n\n    if (loadingVariant === 'initial' && isLoading) {\n      return (\n        <Delay ms={300}>\n          <LoadingView layout={layout} />\n        </Delay>\n      )\n    }\n\n    if (loadingVariant === 'spinner' && isLoading) {\n      return null\n    }\n\n    // prevents bug when panes won't render if first rendered while collapsed\n    const key = `${index}-${collapsed}`\n\n    return (\n      <RootBox overflow=\"hidden\" height=\"fill\" $opacity={loadingVariant === 'subtle' ? 0.8 : 1}>\n        <CommandListBox>\n          <CommandList\n            activeItemDataAttr=\"data-hovered\"\n            ariaLabel={paneTitle}\n            canReceiveFocus\n            inputElement={searchInputElement}\n            itemHeight={51}\n            items={items}\n            key={key}\n            onEndReached={handleEndReached}\n            onlyShowSelectionWhenActive\n            overscan={10}\n            paddingBottom={1}\n            paddingX={3}\n            renderItem={renderItem}\n            wrapAround={false}\n          />\n        </CommandListBox>\n      </RootBox>\n    )\n    // Explicitly don't include `noDocumentsContent` in the deps array, as it's\n    // causing a visual bug where the \"No documents\" message is shown for a split second\n    // when clearing a search query with no results\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    collapsed,\n    error,\n    handleEndReached,\n    index,\n    isLoading,\n    items,\n    layout,\n    loadingVariant,\n    // noDocumentsContent,\n    onRetry,\n    renderItem,\n    searchInputElement,\n    shouldRender,\n  ])\n\n  return (\n    <PaneContent\n      data-testid=\"document-list-pane\"\n      overflow={layoutCollapsed || loadingVariant === 'initial' ? 'hidden' : 'auto'}\n    >\n      {mainContent}\n    </PaneContent>\n  )\n}\n","import {\n  isIndexSegment,\n  isKeySegment,\n  isReferenceSchemaType,\n  type ObjectField,\n  type ObjectFieldType,\n  type ObjectSchemaType,\n  type SanityDocumentLike,\n  type SchemaType,\n} from '@sanity/types'\nimport * as PathUtils from '@sanity/util/paths'\nimport {type ExprNode, parse} from 'groq-js'\nimport {collate, getPublishedId} from 'sanity'\n\nimport {type DocumentListPaneItem, type SortOrder} from './types'\n\nexport function getDocumentKey(value: DocumentListPaneItem, index: number): string {\n  return value._id ? getPublishedId(value._id) : `item-${index}`\n}\n\nexport function removePublishedWithDrafts(documents: SanityDocumentLike[]): DocumentListPaneItem[] {\n  return collate(documents).map((entry) => {\n    const doc = entry.draft || entry.published\n    return {\n      ...doc,\n      hasPublished: !!entry.published,\n      hasDraft: !!entry.draft,\n    }\n  }) as any\n}\n\nexport function applyOrderingFunctions(order: SortOrder, schemaType: ObjectSchemaType): SortOrder {\n  const orderBy = order.by.map((by) => {\n    // Skip those that already have a mapper\n    if (by.mapWith) {\n      return by\n    }\n\n    const fieldType = tryResolveSchemaTypeForPath(schemaType, by.field)\n    if (!fieldType) {\n      return by\n    }\n\n    // Note: order matters here, since the jsonType of a date field is `string`,\n    // but we want to apply `datetime()`, not `lower()`\n    if (fieldExtendsType(fieldType, 'datetime')) {\n      return {...by, mapWith: 'dateTime'}\n    }\n\n    if (fieldType.jsonType === 'string') {\n      return {...by, mapWith: 'lower'}\n    }\n\n    return by\n  })\n\n  return orderBy.every((item, index) => item === order.by[index]) ? order : {...order, by: orderBy}\n}\n\nfunction tryResolveSchemaTypeForPath(baseType: SchemaType, path: string): SchemaType | undefined {\n  const pathSegments = PathUtils.fromString(path)\n\n  let current: SchemaType | undefined = baseType\n  for (const segment of pathSegments) {\n    if (!current) {\n      return undefined\n    }\n\n    if (typeof segment === 'string') {\n      current = getFieldTypeByName(current, segment)\n      continue\n    }\n\n    const isArrayAccessor = isKeySegment(segment) || isIndexSegment(segment)\n    if (!isArrayAccessor || current.jsonType !== 'array') {\n      return undefined\n    }\n\n    const [memberType, otherType] = current.of || []\n    if (otherType || !memberType) {\n      // Can't figure out the type without knowing the value\n      return undefined\n    }\n\n    if (!isReferenceSchemaType(memberType)) {\n      current = memberType\n      continue\n    }\n\n    const [refType, otherRefType] = memberType.to || []\n    if (otherRefType || !refType) {\n      // Can't figure out the type without knowing the value\n      return undefined\n    }\n\n    current = refType\n  }\n\n  return current\n}\n\nfunction getFieldTypeByName(type: SchemaType, fieldName: string): SchemaType | undefined {\n  if (!('fields' in type)) {\n    return undefined\n  }\n\n  const fieldType = type.fields.find((field) => field.name === fieldName)\n  return fieldType ? fieldType.type : undefined\n}\n\nexport function fieldExtendsType(field: ObjectField | ObjectFieldType, ofType: string): boolean {\n  let current: SchemaType | undefined = field.type\n  while (current) {\n    if (current.name === ofType) {\n      return true\n    }\n\n    if (!current.type && current.jsonType === ofType) {\n      return true\n    }\n\n    current = current.type\n  }\n\n  return false\n}\n\n/**\n * Recursively extract static `_type`s from GROQ filter expressions. If the\n * types can't be statically determined then it will return `null`.\n */\n// eslint-disable-next-line complexity\nfunction findTypes(node: ExprNode): Set<string> | null {\n  switch (node.type) {\n    case 'OpCall': {\n      const {left, right} = node\n\n      switch (node.op) {\n        // e.g. `a == b`\n        case '==': {\n          // e.g. `_type == 'value'`\n          if (left.type === 'AccessAttribute' && left.name === '_type' && !left.base) {\n            if (right.type !== 'Value' || typeof right.value !== 'string') return null\n            return new Set([right.value])\n          }\n\n          // e.g. `'value' == _type`\n          if (right.type === 'AccessAttribute' && right.name === '_type' && !right.base) {\n            if (left.type !== 'Value' || typeof left.value !== 'string') return null\n            return new Set([left.value])\n          }\n\n          // otherwise, we can't determine the types statically\n          return null\n        }\n\n        // e.g. `a in b`\n        case 'in': {\n          // if `_type` is not on the left hand side of `in` then it can't be determined\n          if (left.type !== 'AccessAttribute' || left.name !== '_type' || left.base) return null\n          // if the right hand side is not an array then the types can't be determined\n          if (right.type !== 'Array') return null\n\n          const types = new Set<string>()\n          // iterate through all the types\n          for (const element of right.elements) {\n            // if we find a splat, then early return, we can't determine the types\n            if (element.isSplat) return null\n            // if the array element is not just a simple value, then early return\n            if (element.value.type !== 'Value') return null\n            // if the array element value is not a string, then early return\n            if (typeof element.value.value !== 'string') return null\n            // otherwise add the element value to the set of types\n            types.add(element.value.value)\n          }\n\n          // if there were any elements in the types set, return it\n          if (types.size) return types\n          // otherwise, the set of types cannot be determined\n          return null\n        }\n\n        default: {\n          return null\n        }\n      }\n    }\n\n    // groups can just be unwrapped, the AST preserves the order\n    case 'Group': {\n      return findTypes(node.base)\n    }\n\n    // e.g. `_type == 'a' || _type == 'b'`\n    // with Or nodes, if we can't determine the types for either the left or\n    // right hand side then we can't determine the types for any\n    // e.g. `_type == 'a' || isActive`\n    // — can't determine types because `isActive` could be true on another types\n    case 'Or': {\n      const left = findTypes(node.left)\n      if (!left) return null\n\n      const right = findTypes(node.right)\n      if (!right) return null\n\n      return new Set([...left, ...right])\n    }\n\n    // e.g. `_type == 'a' && isActive`\n    // with And nodes, we can determine the types as long as we can determine\n    // the types for one side. We can't determine the types if both are `null`.\n    case 'And': {\n      const left = findTypes(node.left)\n      const right = findTypes(node.right)\n\n      if (!left && !right) return null\n      return new Set([...(left || []), ...(right || [])])\n    }\n\n    default: {\n      return null\n    }\n  }\n}\n\nexport function findStaticTypesInFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] | null {\n  try {\n    const types = findTypes(parse(filter, {params}))\n    if (!types) return null\n\n    return Array.from(types).sort()\n  } catch {\n    // if we couldn't parse the filter, just return `null`\n    return null\n  }\n}\n","import {type SchemaType, type SortOrderingItem} from '@sanity/types'\n\nconst IMPLICIT_SCHEMA_TYPE_FIELDS = ['_id', '_type', '_createdAt', '_updatedAt', '_rev']\n\n// Takes a path array and a schema type and builds a GROQ join every time it enters a reference field\nfunction joinReferences(schemaType: SchemaType, path: string[], strict: boolean = false): string {\n  const [head, ...tail] = path\n\n  if (!('fields' in schemaType)) {\n    return ''\n  }\n\n  const schemaField = schemaType.fields.find((field) => field.name === head)\n  if (!schemaField) {\n    if (!IMPLICIT_SCHEMA_TYPE_FIELDS.includes(head)) {\n      const errorMessage = `The current ordering config targeted the nonexistent field \"${head}\" on schema type \"${schemaType.name}\". It should be one of ${schemaType.fields.map((field) => field.name).join(', ')}`\n      if (strict) {\n        throw new Error(errorMessage)\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(errorMessage)\n      }\n    }\n    return ''\n  }\n\n  if ('to' in schemaField.type && schemaField.type.name === 'reference') {\n    const refTypes = schemaField.type.to\n    return `${head}->{${refTypes.map((refType) => joinReferences(refType, tail)).join(',')}}`\n  }\n\n  const tailFields = tail.length > 0 && joinReferences(schemaField.type, tail)\n  const tailWrapper = tailFields ? `{${tailFields}}` : ''\n  return tail.length > 0 ? `${head}${tailWrapper}` : head\n}\n\nexport function getExtendedProjection(\n  schemaType: SchemaType,\n  orderBy: SortOrderingItem[],\n  strict: boolean = false,\n): string {\n  return orderBy\n    .map((ordering) => joinReferences(schemaType, ordering.field.split('.'), strict))\n    .join(', ')\n}\n","import {type SanityClient} from '@sanity/client'\nimport {\n  asyncScheduler,\n  defer,\n  map,\n  merge,\n  mergeMap,\n  type Observable,\n  of,\n  partition,\n  share,\n  take,\n  throttleTime,\n  throwError,\n  timer,\n} from 'rxjs'\nimport {exhaustMapWithTrailing} from 'rxjs-exhaustmap-with-trailing'\nimport {\n  createSearch,\n  createSWR,\n  getSearchableTypes,\n  type SanityDocumentLike,\n  type Schema,\n  type SearchStrategy,\n} from 'sanity'\n\nimport {getExtendedProjection} from '../../structureBuilder/util/getExtendedProjection'\nimport {type SortOrder} from './types'\n\ninterface ListenQueryOptions {\n  client: SanityClient\n  filter: string\n  limit: number\n  params: Record<string, unknown>\n  schema: Schema\n  searchQuery: string\n  sort: SortOrder\n  staticTypeNames?: string[] | null\n  maxFieldDepth?: number\n  searchStrategy?: SearchStrategy\n}\n\nexport interface SearchQueryResult {\n  fromCache: boolean\n  documents: SanityDocumentLike[]\n}\n\nconst swr = createSWR<SanityDocumentLike[]>({maxSize: 100})\n\nexport function listenSearchQuery(options: ListenQueryOptions): Observable<SearchQueryResult> {\n  const {\n    client,\n    schema,\n    sort,\n    limit,\n    params,\n    filter,\n    searchQuery,\n    staticTypeNames,\n    maxFieldDepth,\n    searchStrategy,\n  } = options\n  const sortBy = sort.by\n  const extendedProjection = sort?.extendedProjection\n\n  // Listen for changes with the given filter and params, and whenever a change occurs, we want to\n  // re-fetch the documents that match the search query (see below).\n  // We use a separate listener since the search query is too large to use in a listen query.\n  const events$ = defer(() => {\n    return client.listen(`*[${filter}]`, params, {\n      events: ['welcome', 'mutation', 'reconnect'],\n      includeResult: false,\n      visibility: 'query',\n    })\n  }).pipe(\n    mergeMap((ev, i) => {\n      const isFirst = i === 0\n      if (isFirst && ev.type !== 'welcome') {\n        // If the first event is not welcome, it is most likely a reconnect and\n        // if it's not a reconnect something is very wrong and we should throw.\n        return throwError(\n          () =>\n            new Error(\n              ev.type === 'reconnect'\n                ? 'Could not establish EventSource connection'\n                : `Received unexpected type of first event \"${ev.type}\"`,\n            ),\n        )\n      }\n      return of(ev)\n    }),\n    share(),\n  )\n\n  const [welcome$, mutationAndReconnect$] = partition(events$, (ev) => ev.type === 'welcome')\n\n  const swrKey = JSON.stringify({filter, limit, params, searchQuery, sort, staticTypeNames})\n\n  return merge(\n    welcome$.pipe(take(1)),\n    mutationAndReconnect$.pipe(throttleTime(1000, asyncScheduler, {leading: true, trailing: true})),\n  ).pipe(\n    exhaustMapWithTrailing((event) => {\n      // Get the types names to use for searching.\n      // If we have a static list of types, we can skip fetching the types and use the static list.\n      const typeNames$ = staticTypeNames\n        ? of(staticTypeNames)\n        : client.observable.fetch(`array::unique(*[${filter}][]._type)`, params)\n\n      // Use the type names to create a search query and fetch the documents that match the query.\n      return typeNames$.pipe(\n        mergeMap((typeNames: string[]) => {\n          const types = getSearchableTypes(schema, staticTypeNames || []).filter((type) => {\n            if (typeNames.includes(type.name)) {\n              // make a call to getExtendedProjection in strict mode to verify that all fields are\n              // known. This method will throw an exception if there are any unknown fields specified\n              // in the sort by list\n              getExtendedProjection(type, sort.by, true)\n              return true\n            }\n            return false\n          })\n\n          const search = createSearch(types, client, {\n            filter,\n            params,\n            strategy: searchStrategy,\n            maxDepth: maxFieldDepth,\n          })\n\n          const doFetch = () => {\n            const searchTerms = {\n              query: searchQuery || '',\n              types,\n            }\n\n            const searchOptions = {\n              __unstable_extendedProjection: extendedProjection,\n              comments: [`findability-source: ${searchQuery ? 'list-query' : 'list'}`],\n              limit,\n              skipSortByScore: true,\n              sort: sortBy,\n            }\n\n            return search(searchTerms, searchOptions).pipe(\n              map((result) =>\n                // eslint-disable-next-line max-nested-callbacks\n                result.hits.map(({hit}) => hit),\n              ),\n            )\n          }\n\n          if (event.type === 'mutation' && event.visibility !== 'query') {\n            // Even though the listener request specifies visibility=query, the events are not guaranteed to be delivered with visibility=query\n            // If the event we are responding to arrives with visibility != query, we add a little delay to allow for the updated document to be available for queries\n            // See https://www.sanity.io/docs/listening#visibility-c4786e55c3ff\n            return timer(1200).pipe(mergeMap(doFetch))\n          }\n          return doFetch()\n        }),\n      )\n    }),\n    swr(swrKey),\n    map(({fromCache, value}) => ({fromCache, documents: value})),\n  )\n}\n","import {observableCallback} from 'observable-callback'\nimport {useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {concat, fromEvent, merge, of} from 'rxjs'\nimport {\n  catchError,\n  filter,\n  map,\n  mergeMap,\n  scan,\n  share,\n  shareReplay,\n  take,\n  takeUntil,\n  withLatestFrom,\n} from 'rxjs/operators'\nimport {\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  useClient,\n  useSchema,\n  useSearchMaxFieldDepth,\n  useWorkspace,\n} from 'sanity'\n\nimport {DEFAULT_ORDERING, FULL_LIST_LIMIT, PARTIAL_PAGE_LIMIT} from './constants'\nimport {findStaticTypesInFilter, removePublishedWithDrafts} from './helpers'\nimport {listenSearchQuery} from './listenSearchQuery'\nimport {type DocumentListPaneItem, type SortOrder} from './types'\n\ninterface UseDocumentListOpts {\n  apiVersion?: string\n  filter: string\n  params: Record<string, unknown>\n  searchQuery: string | null\n  sortOrder?: SortOrder\n}\n\ninterface DocumentListState {\n  error: {message: string} | null\n  isLoadingFullList: boolean\n  isLoading: boolean\n  fromCache?: boolean\n  items: DocumentListPaneItem[]\n}\n\nconst INITIAL_QUERY_STATE: DocumentListState = {\n  error: null,\n  isLoading: true,\n  isLoadingFullList: false,\n  fromCache: false,\n  items: [],\n}\n\ninterface UseDocumentListHookValue extends DocumentListState {\n  onRetry: () => void\n  onLoadFullList: () => void\n}\n\n/**\n * @internal\n */\nexport function useDocumentList(opts: UseDocumentListOpts): UseDocumentListHookValue {\n  const {filter: searchFilter, params: paramsProp, sortOrder, searchQuery, apiVersion} = opts\n  const client = useClient({\n    ...DEFAULT_STUDIO_CLIENT_OPTIONS,\n    apiVersion: apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n  })\n  const {strategy: searchStrategy} = useWorkspace().search\n  const schema = useSchema()\n  const maxFieldDepth = useSearchMaxFieldDepth()\n\n  // Get the type name from the filter, if it is a simple type filter.\n  const typeNameFromFilter = useMemo(\n    () => findStaticTypesInFilter(searchFilter, paramsProp),\n    [searchFilter, paramsProp],\n  )\n\n  const [onRetry$, onRetry] = useMemo(() => observableCallback(), [])\n  const [onFetchFullList$, onLoadFullList] = useMemo(() => observableCallback(), [])\n\n  const queryResults$ = useMemo(() => {\n    const listenSearchQueryArgs = {\n      client,\n      filter: searchFilter,\n      limit: PARTIAL_PAGE_LIMIT,\n      params: paramsProp,\n      schema,\n      searchQuery: searchQuery || '',\n      sort: sortOrder || DEFAULT_ORDERING,\n      staticTypeNames: typeNameFromFilter,\n      maxFieldDepth,\n      searchStrategy,\n    }\n\n    const partialList$ = listenSearchQuery(listenSearchQueryArgs).pipe(\n      shareReplay({refCount: true, bufferSize: 1}),\n    )\n\n    // we want to fetch the full list if the last result of the partial list is at the limit\n    const fullList$ = onFetchFullList$.pipe(\n      withLatestFrom(partialList$),\n      filter(([, result]) => result?.documents.length === PARTIAL_PAGE_LIMIT),\n      // we want to set up the full list listener only once\n      take(1),\n      mergeMap(() =>\n        concat(\n          of({type: 'loadFullList' as const}),\n          listenSearchQuery({...listenSearchQueryArgs, limit: FULL_LIST_LIMIT}).pipe(\n            map((result) => ({type: 'result' as const, result})),\n          ),\n        ),\n      ),\n      share(),\n    )\n\n    // The combined search results from both partial page and full list\n    return merge(\n      partialList$.pipe(\n        map((result) => ({\n          type: 'result' as const,\n          result,\n        })),\n        // when the full list listener kicks off, we want to stop the partial list listener\n        takeUntil(fullList$),\n      ),\n      fullList$,\n    ).pipe(\n      catchError((err: unknown, caught$) => {\n        return concat(\n          of({type: 'error' as const, error: safeError(err)}),\n          merge(fromEvent(window, 'online'), onRetry$).pipe(\n            take(1),\n            mergeMap(() => caught$),\n          ),\n        )\n      }),\n      scan((prev, event) => {\n        if (event.type === 'error') {\n          return {\n            ...prev,\n            error: event.error,\n          }\n        }\n        if (event.type === 'result') {\n          return {\n            ...prev,\n            error: null,\n            fromCache: event.result.fromCache,\n            isLoading: false,\n            items: removePublishedWithDrafts(event.result.documents),\n            isLoadingFullList: false,\n          }\n        }\n        if (event.type === 'loadFullList') {\n          return {\n            ...prev,\n            error: null,\n            isLoadingFullList: true,\n          }\n        }\n        throw new Error('Unexpected')\n      }, INITIAL_QUERY_STATE),\n    )\n  }, [\n    client,\n    searchFilter,\n    paramsProp,\n    schema,\n    searchQuery,\n    sortOrder,\n    typeNameFromFilter,\n    maxFieldDepth,\n    searchStrategy,\n    onFetchFullList$,\n    onRetry$,\n  ])\n\n  const {error, items, isLoading, fromCache, isLoadingFullList} = useObservable(\n    queryResults$,\n    INITIAL_QUERY_STATE,\n  )\n\n  return {\n    error,\n    onRetry,\n    isLoading,\n    items,\n    fromCache,\n    onLoadFullList,\n    isLoadingFullList,\n  }\n}\n\n// todo: candidate for re-use\nconst nonErrorThrownWarning = `[WARNING: This was thrown as a non-error. Only Error instances should be thrown]`\nfunction safeError(thrown: unknown): Error {\n  if (thrown instanceof Error) {\n    return thrown\n  }\n  if (typeof thrown === 'object' && thrown !== null) {\n    if ('message' in thrown && typeof thrown.message === 'string') {\n      return new Error(`${thrown.message} ${nonErrorThrownWarning}`)\n    }\n    return new Error(`${String(thrown)} ${nonErrorThrownWarning}`)\n  }\n  return new Error(`${String(thrown)} ${nonErrorThrownWarning}`)\n}\n","import {SearchIcon, SpinnerIcon} from '@sanity/icons'\nimport {Box, TextInput} from '@sanity/ui'\nimport {memo, useCallback, useEffect, useMemo, useState} from 'react'\nimport {useObservableEvent} from 'react-rx'\nimport {debounce, map, type Observable, of, tap, timer} from 'rxjs'\nimport {\n  type GeneralPreviewLayoutKey,\n  useI18nText,\n  useSchema,\n  useTranslation,\n  useUnique,\n} from 'sanity'\nimport {keyframes, styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {EMPTY_RECORD, FULL_LIST_LIMIT} from './constants'\nimport {DocumentListPaneContent} from './DocumentListPaneContent'\nimport {applyOrderingFunctions, findStaticTypesInFilter} from './helpers'\nimport {useShallowUnique} from './PaneContainer'\nimport {type LoadingVariant, type SortOrder} from './types'\nimport {useDocumentList} from './useDocumentList'\n\n/**\n * @internal\n */\nexport type DocumentListPaneProps = BaseStructureToolPaneProps<'documentList'> & {\n  sortOrder?: SortOrder\n  layout?: Exclude<GeneralPreviewLayoutKey, 'sheetList'>\n}\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`\n\nconst fadeIn = keyframes`\n  0% {\n    opacity: 0;\n  }\n  50% {\n    opacity: 0.1;\n  }\n  100% {\n    opacity: 0.4;\n  }\n`\n\nconst AnimatedSpinnerIcon = styled(SpinnerIcon)`\n  animation: ${rotate} 500ms linear infinite;\n`\n\nconst SubtleSpinnerIcon = styled(SpinnerIcon)`\n  animation: ${rotate} 1500ms linear infinite;\n  opacity: 0.4;\n`\n\nconst DelayedSubtleSpinnerIcon = styled(SpinnerIcon)`\n  animation:\n    ${rotate} 1500ms linear infinite,\n    ${fadeIn} 1000ms linear;\n  opacity: 0.4;\n`\n\n/**\n * @internal\n */\n\nexport const DocumentListPane = memo(function DocumentListPane(props: DocumentListPaneProps) {\n  const {childItemId, isActive, pane, paneKey, sortOrder: sortOrderRaw, layout} = props\n  const schema = useSchema()\n\n  const {displayOptions, options} = pane\n  const {apiVersion, filter} = options\n  const params = useShallowUnique(options.params || EMPTY_RECORD)\n  const typeName = useMemo(() => {\n    const staticTypes = findStaticTypesInFilter(filter, params)\n    if (staticTypes?.length === 1) return staticTypes[0]\n    return null\n  }, [filter, params])\n\n  const showIcons = displayOptions?.showIcons !== false\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {title} = useI18nText(pane)\n\n  const [searchQuery, setSearchQuery] = useState<string>('')\n  const [searchInputValue, setSearchInputValue] = useState<string>('')\n  const [searchInputElement, setSearchInputElement] = useState<HTMLInputElement | null>(null)\n\n  const sortWithOrderingFn =\n    typeName && sortOrderRaw\n      ? applyOrderingFunctions(sortOrderRaw, schema.get(typeName) as any)\n      : sortOrderRaw\n\n  const sortOrder = useUnique(sortWithOrderingFn)\n\n  const {error, isLoadingFullList, isLoading, items, fromCache, onLoadFullList, onRetry} =\n    useDocumentList({\n      apiVersion,\n      filter,\n      params,\n      searchQuery: searchQuery?.trim(),\n      sortOrder,\n    })\n\n  const handleQueryChange = useObservableEvent(\n    (event$: Observable<React.ChangeEvent<HTMLInputElement>>) => {\n      return event$.pipe(\n        map((event) => event.target.value),\n        tap(setSearchInputValue),\n        debounce((value) => (value === '' ? of('') : timer(300))),\n        tap(setSearchQuery),\n      )\n    },\n  )\n\n  const handleClearSearch = useCallback(() => {\n    setSearchQuery('')\n    setSearchInputValue('')\n  }, [])\n\n  const handleSearchKeyDown = useCallback(\n    (event: React.KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === 'Escape') {\n        handleClearSearch()\n      }\n    },\n    [handleClearSearch],\n  )\n\n  const [enableSearchSpinner, setEnableSearchSpinner] = useState<string | void>()\n\n  useEffect(() => {\n    if (!enableSearchSpinner && !isLoading) {\n      setEnableSearchSpinner(paneKey)\n    }\n  }, [enableSearchSpinner, isLoading, paneKey])\n\n  useEffect(() => {\n    // Clear search field and disable search spinner\n    // when switching between panes (i.e. when paneKey changes).\n    handleClearSearch()\n    setEnableSearchSpinner()\n  }, [paneKey, handleClearSearch])\n\n  const loadingVariant: LoadingVariant = useMemo(() => {\n    if (isLoading && enableSearchSpinner === paneKey) {\n      return 'spinner'\n    }\n    if (fromCache) {\n      return 'subtle'\n    }\n\n    return 'initial'\n  }, [enableSearchSpinner, fromCache, isLoading, paneKey])\n\n  const textInputIcon = useMemo(() => {\n    if (loadingVariant === 'spinner') {\n      return AnimatedSpinnerIcon\n    }\n    if (searchInputValue && loadingVariant === 'subtle') {\n      return SubtleSpinnerIcon\n    }\n    return SearchIcon\n  }, [loadingVariant, searchInputValue])\n\n  return (\n    <>\n      <Box paddingX={3} paddingBottom={3}>\n        <TextInput\n          aria-label={t('panes.document-list-pane.search-input.aria-label')}\n          autoComplete=\"off\"\n          border={false}\n          clearButton={Boolean(searchQuery)}\n          disabled={Boolean(error)}\n          fontSize={[2, 2, 1]}\n          icon={textInputIcon}\n          iconRight={\n            loadingVariant === 'subtle' && !searchInputValue ? DelayedSubtleSpinnerIcon : null\n          }\n          onChange={handleQueryChange}\n          onClear={handleClearSearch}\n          onKeyDown={handleSearchKeyDown}\n          padding={2}\n          placeholder={t('panes.document-list-pane.search-input.placeholder')}\n          radius={2}\n          ref={setSearchInputElement}\n          spellCheck={false}\n          value={searchInputValue}\n        />\n      </Box>\n      <DocumentListPaneContent\n        childItemId={childItemId}\n        error={error}\n        filterIsSimpleTypeConstraint={!!typeName}\n        hasMaxItems={items.length === FULL_LIST_LIMIT}\n        hasSearchQuery={Boolean(searchQuery)}\n        isActive={isActive}\n        isLazyLoading={isLoadingFullList}\n        isLoading={isLoading}\n        items={items}\n        key={paneKey}\n        layout={layout}\n        loadingVariant={loadingVariant}\n        onEndReached={onLoadFullList}\n        onRetry={onRetry}\n        paneTitle={title}\n        searchInputElement={searchInputElement}\n        showIcons={showIcons}\n      />\n    </>\n  )\n})\n","import {ArrowLeftIcon} from '@sanity/icons'\nimport {memo, type ReactNode, useMemo} from 'react'\nimport {type GeneralPreviewLayoutKey, type InitialValueTemplateItem} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../ui-components'\nimport {\n  BackLink,\n  PaneHeader as StructurePaneHeader,\n  PaneHeaderActions,\n  usePane,\n} from '../../components'\nimport {\n  type PaneMenuItem,\n  type PaneMenuItemGroup,\n  type StructureToolPaneActionHandler,\n} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {type SortOrder} from './types'\n\ninterface PaneHeaderProps {\n  contentAfter?: ReactNode\n  index: number\n  initialValueTemplates?: InitialValueTemplateItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  menuItems?: PaneMenuItem[]\n  setLayout: (layout: GeneralPreviewLayoutKey) => void\n  setSortOrder: (sortOrder: SortOrder) => void\n  title: string\n}\n\nexport const PaneHeader = memo(\n  ({\n    contentAfter,\n    index,\n    initialValueTemplates = [],\n    menuItemGroups = [],\n    menuItems = [],\n    setLayout,\n    setSortOrder,\n    title,\n  }: PaneHeaderProps) => {\n    const {features} = useStructureTool()\n    const {collapsed, isLast} = usePane()\n    // Prevent focus if this is the last (non-collapsed) pane.\n    const tabIndex = isLast && !collapsed ? -1 : 0\n\n    const actionHandlers = useMemo((): Record<string, StructureToolPaneActionHandler> => {\n      return {\n        setLayout: ({layout: value}: {layout: GeneralPreviewLayoutKey}) => {\n          setLayout(value)\n        },\n        setSortOrder: (sort: SortOrder) => {\n          setSortOrder(sort)\n        },\n      }\n    }, [setLayout, setSortOrder])\n\n    return (\n      <TooltipDelayGroupProvider>\n        <StructurePaneHeader\n          actions={\n            <PaneHeaderActions\n              initialValueTemplateItems={initialValueTemplates}\n              actionHandlers={actionHandlers}\n              menuItemGroups={menuItemGroups}\n              menuItems={menuItems}\n            />\n          }\n          backButton={\n            features.backButton &&\n            index > 0 && (\n              <Button\n                as={BackLink}\n                data-as=\"a\"\n                icon={ArrowLeftIcon}\n                mode=\"bleed\"\n                tooltipProps={{content: 'Back'}}\n              />\n            )\n          }\n          contentAfter={contentAfter}\n          tabIndex={tabIndex}\n          title={title}\n        />\n      </TooltipDelayGroupProvider>\n    )\n  },\n)\n\nPaneHeader.displayName = 'Memo(PaneHeader)'\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {type SanityDocument} from '@sanity/client'\nimport {Checkbox} from '@sanity/ui'\nimport {type CellContext} from '@tanstack/react-table'\nimport {type MouseEvent, useCallback} from 'react'\n\nexport function DocumentSheetListSelect(props: CellContext<SanityDocument, unknown>) {\n  const {row, table} = props\n\n  const {selectedAnchor, setSelectedAnchor} = table.options.meta || {}\n\n  const handleOnClick = useCallback(\n    (e: MouseEvent<HTMLInputElement>) => {\n      if (e.shiftKey && selectedAnchor !== null && selectedAnchor !== undefined) {\n        const shiftClickIndex = row.index\n        const lowerIndex = shiftClickIndex < selectedAnchor ? shiftClickIndex : selectedAnchor\n        const upperIndex = shiftClickIndex < selectedAnchor ? selectedAnchor : shiftClickIndex\n\n        const additionalSelectedRows = table\n          .getRowModel()\n          .flatRows.slice(lowerIndex, upperIndex + 1)\n          .map(({id}) => id)\n\n        const currentSelectedRows = table.getSelectedRowModel().rows.map(({id}) => id)\n        table.setRowSelection(() =>\n          [...additionalSelectedRows, ...currentSelectedRows].reduce(\n            (nextSelectedRows, rowId) => ({...nextSelectedRows, [rowId]: true}),\n            {},\n          ),\n        )\n      } else if (setSelectedAnchor) {\n        const isRowCurrentlySelected = row.getIsSelected()\n        if (isRowCurrentlySelected) {\n          // about to unselect so invalidate current anchor\n          setSelectedAnchor(null)\n        } else {\n          // override anchor with new selection index\n          setSelectedAnchor(row.index)\n        }\n\n        row.toggleSelected()\n      }\n    },\n    [selectedAnchor, row, setSelectedAnchor, table],\n  )\n\n  return (\n    <Checkbox\n      style={{paddingLeft: 4}}\n      checked={props.row.getIsSelected()}\n      disabled={!props.row.getCanSelect()}\n      // onChange doesn't have shiftKey in event, but want to control this checkbox\n      // need to define noop onChange to suppress the warning\n      // eslint-disable-next-line react/jsx-no-bind\n      onChange={() => null}\n      onClick={handleOnClick}\n    />\n  )\n}\n","import {type SanityDocument} from '@sanity/types'\nimport {type Table} from '@tanstack/react-table'\nimport {type ReactNode, useCallback, useContext, useEffect, useMemo, useState} from 'react'\nimport {DocumentSheetListContext} from 'sanity/_singletons'\n\ninterface DocumentSheetListProviderProps {\n  children?: ReactNode\n  table: Table<SanityDocument>\n}\n\ntype SelectedCellDetails = {\n  colId: string\n  rowIndex: number\n  state: 'focused' | 'selected'\n} | null\n\n/** @internal */\nexport interface DocumentSheetListContextValue {\n  focusAnchorCell: () => void\n  resetFocusSelection: () => void\n  setSelectedAnchorCell: (colId: string, rowIndex: number) => void\n  getStateByCellId: (\n    colId: string,\n    rowIndex: number,\n  ) => 'focused' | 'selectedAnchor' | 'selectedRange' | null\n  submitFocusedCell: () => void\n}\n\n/** @internal */\nexport const useDocumentSheetListContext = (): DocumentSheetListContextValue => {\n  const context = useContext(DocumentSheetListContext)\n\n  if (context === undefined) {\n    throw new Error('useDocumentSheetListContext must be used within an DocumentSheetListProvider')\n  }\n  return context\n}\n\n/** @internal */\nexport function DocumentSheetListProvider({\n  children,\n  table,\n}: DocumentSheetListProviderProps): ReactNode {\n  const [selectedAnchorCellDetails, setSelectedAnchorCellDetails] =\n    useState<SelectedCellDetails>(null)\n  const [selectedRangeCellIndexes, setSelectedRangeCellIndexes] = useState<number[]>([])\n\n  const clearAndSetFocusSelection = useCallback(\n    (nextAnchorDetails: SelectedCellDetails = null) => {\n      if (\n        selectedAnchorCellDetails?.state === 'focused' &&\n        document.activeElement instanceof HTMLElement\n      ) {\n        document.activeElement.blur()\n      }\n\n      setSelectedAnchorCellDetails(nextAnchorDetails)\n      setSelectedRangeCellIndexes([])\n    },\n    [selectedAnchorCellDetails],\n  )\n\n  const resetFocusSelection = useCallback(\n    () => clearAndSetFocusSelection(),\n    [clearAndSetFocusSelection],\n  )\n\n  const changeSelectionColumn = useCallback(\n    (direction: 'left' | 'right') => {\n      if (!selectedAnchorCellDetails) return\n\n      const visibleColumns = table.getVisibleLeafColumns()\n      const columnIndexAfterMove =\n        visibleColumns.findIndex((col) => col.id === selectedAnchorCellDetails.colId) +\n        (direction === 'left' ? -1 : 1)\n\n      if (columnIndexAfterMove < 0 || columnIndexAfterMove >= visibleColumns.length) return\n\n      clearAndSetFocusSelection({\n        colId: visibleColumns[columnIndexAfterMove].id,\n        rowIndex: selectedAnchorCellDetails.rowIndex,\n        state: 'selected',\n      })\n    },\n    [clearAndSetFocusSelection, selectedAnchorCellDetails, table],\n  )\n\n  const changeSelectionRange = useCallback(\n    (direction: 'up' | 'down') => {\n      if (!selectedAnchorCellDetails) return\n\n      setSelectedRangeCellIndexes((previousSelection) => {\n        const {rowIndex: anchorIndex} = selectedAnchorCellDetails\n        const getNextIndex = (startingIndex: number) =>\n          startingIndex + (direction === 'down' ? 1 : -1)\n        // if no cells are selected, select the cell in the direction\n        if (!previousSelection.length) {\n          const firstSelectedIndex = getNextIndex(anchorIndex)\n          if (firstSelectedIndex < 0) return []\n          return [firstSelectedIndex]\n        }\n        const lastIndexSelected = previousSelection[previousSelection.length - 1]\n        const nextIndex = getNextIndex(lastIndexSelected)\n\n        // if the cell in the direction is out of bounds, return the previous selection\n        if (nextIndex < 0) return previousSelection\n\n        // if the cell in the direction is the same as the focused cell, deselect all cells\n        if (nextIndex === anchorIndex) return []\n\n        // if the cell in the direction is already selected, deselect the last selected cell\n        if (previousSelection.includes(nextIndex)) {\n          return previousSelection.slice(0, -1)\n        }\n\n        return [...previousSelection, nextIndex]\n      })\n    },\n    [selectedAnchorCellDetails],\n  )\n\n  const setSelectedAnchorCell = useCallback(\n    (colId: string, rowIndex: number) => {\n      clearAndSetFocusSelection({colId, rowIndex, state: 'selected'})\n    },\n    [clearAndSetFocusSelection],\n  )\n\n  const handleEscapePress = useCallback(() => {\n    if (!selectedAnchorCellDetails) return\n    if (selectedRangeCellIndexes.length) {\n      // only clear selected range if it exists\n      setSelectedRangeCellIndexes([])\n    } else {\n      const nextAnchorCellDetails: SelectedCellDetails =\n        selectedAnchorCellDetails.state === 'selected'\n          ? null\n          : {\n              ...selectedAnchorCellDetails,\n              state: 'selected',\n            }\n      clearAndSetFocusSelection(nextAnchorCellDetails)\n    }\n  }, [clearAndSetFocusSelection, selectedAnchorCellDetails, selectedRangeCellIndexes.length])\n\n  const handleUpDownKey = useCallback(\n    (isShiftKey: boolean, key: string) => {\n      if (!selectedAnchorCellDetails) return\n\n      const direction = key === 'ArrowDown' ? 'down' : 'up'\n      const offset = direction === 'down' ? 1 : -1\n\n      if (isShiftKey) {\n        changeSelectionRange(direction)\n      } else {\n        const newSelectedCellRowIndex = selectedAnchorCellDetails.rowIndex + offset\n        if (newSelectedCellRowIndex < 0) return\n\n        setSelectedAnchorCell(selectedAnchorCellDetails.colId, newSelectedCellRowIndex)\n      }\n    },\n    [changeSelectionRange, selectedAnchorCellDetails, setSelectedAnchorCell],\n  )\n\n  const handleAnchorKeydown = useCallback(\n    (event: KeyboardEvent) => {\n      if (!selectedAnchorCellDetails) return\n\n      const {key, shiftKey} = event\n\n      switch (key) {\n        case 'Shift':\n          break // shift allow should do nothing\n\n        case 'Escape':\n          handleEscapePress()\n          break\n\n        case 'ArrowDown':\n        case 'ArrowUp':\n          event.preventDefault()\n          handleUpDownKey(shiftKey, key)\n          break\n\n        case 'ArrowLeft':\n        case 'ArrowRight':\n          // when cell is focused, arrows should have default behavior\n          // only prevent default when cell is selected\n          if (selectedAnchorCellDetails.state === 'selected') {\n            event.preventDefault()\n            changeSelectionColumn(key === 'ArrowLeft' ? 'left' : 'right')\n          }\n          break\n\n        default:\n          break\n      }\n    },\n    [selectedAnchorCellDetails, handleEscapePress, handleUpDownKey, changeSelectionColumn],\n  )\n\n  const handleAnchorClick = useCallback(\n    (event: MouseEvent) => {\n      if (!selectedAnchorCellDetails) return\n      const isClickInAnchorCell = document\n        .getElementById(\n          `cell-${selectedAnchorCellDetails.colId}-${selectedAnchorCellDetails.rowIndex}`,\n        )\n        ?.contains(event.target as Node)\n\n      if (!isClickInAnchorCell) resetFocusSelection()\n    },\n    [resetFocusSelection, selectedAnchorCellDetails],\n  )\n\n  useEffect(() => {\n    if (selectedAnchorCellDetails) {\n      document.addEventListener('keydown', handleAnchorKeydown)\n      document.addEventListener('click', handleAnchorClick)\n    }\n\n    return () => {\n      if (selectedAnchorCellDetails) {\n        document.removeEventListener('keydown', handleAnchorKeydown)\n        document.removeEventListener('click', handleAnchorClick)\n      }\n    }\n  }, [handleAnchorClick, handleAnchorKeydown, selectedAnchorCellDetails])\n\n  const focusAnchorCell = useCallback(\n    () =>\n      setSelectedAnchorCellDetails((anchorCellDetails) => {\n        if (!anchorCellDetails) return null\n\n        return {...anchorCellDetails, state: 'focused'}\n      }),\n    [],\n  )\n\n  const getStateByCellId = useCallback(\n    (colId: string, rowIndex: number) => {\n      if (selectedAnchorCellDetails?.colId !== colId) return null\n\n      if (selectedAnchorCellDetails.rowIndex === rowIndex)\n        return selectedAnchorCellDetails.state === 'focused' ? 'focused' : 'selectedAnchor'\n\n      if (selectedRangeCellIndexes.includes(rowIndex)) return 'selectedRange'\n\n      return null\n    },\n    [selectedAnchorCellDetails, selectedRangeCellIndexes],\n  )\n\n  const submitFocusedCell = useCallback(() => {\n    if (!selectedAnchorCellDetails) return\n\n    clearAndSetFocusSelection({\n      colId: selectedAnchorCellDetails.colId,\n      rowIndex: selectedAnchorCellDetails.rowIndex + 1,\n      state: 'selected',\n    })\n  }, [clearAndSetFocusSelection, selectedAnchorCellDetails])\n\n  const value = useMemo<DocumentSheetListContextValue>(\n    () => ({\n      focusAnchorCell,\n      resetFocusSelection,\n      setSelectedAnchorCell,\n      getStateByCellId,\n      submitFocusedCell,\n    }),\n    [\n      focusAnchorCell,\n      resetFocusSelection,\n      setSelectedAnchorCell,\n      getStateByCellId,\n      submitFocusedCell,\n    ],\n  )\n\n  return (\n    <DocumentSheetListContext.Provider value={value}>{children}</DocumentSheetListContext.Provider>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\n/* eslint-disable i18next/no-literal-string */\nimport {type ObjectFieldType} from '@sanity/types'\nimport {Select, TextInput} from '@sanity/ui'\nimport {type Cell, type CellContext, flexRender} from '@tanstack/react-table'\nimport {type MouseEventHandler, useCallback, useEffect, useRef, useState} from 'react'\nimport {type SanityDocument} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {useDocumentSheetListContext} from './DocumentSheetListProvider'\n\nconst DataCell = styled.td<{width: number}>`\n  display: flex;\n  overflow: hidden;\n  box-sizing: border-box;\n  width: ${({width}) => width}px;\n  border-top: 1px solid var(--card-border-color);\n  background-color: var(--card-bg-color);\n`\n\nconst PinnedDataCell = styled(DataCell)`\n  position: sticky;\n  z-index: 2;\n`\n\ninterface SheetListCellInnerProps extends CellContext<SanityDocument, unknown> {\n  fieldType: ObjectFieldType\n}\n\ntype CellInputElement = HTMLInputElement | HTMLSelectElement\ntype InputRef = CellInputElement | null\n\n/** @internal */\nexport function SheetListCellInner(props: SheetListCellInnerProps) {\n  const {getValue, column, row, fieldType} = props\n  const cellId = `cell-${column.id}-${row.index}`\n  const [renderValue, setRenderValue] = useState<string>(getValue() as string)\n  const [isDirty, setIsDirty] = useState(false)\n  const inputRef = useRef<InputRef>(null)\n  const {\n    focusAnchorCell,\n    resetFocusSelection,\n    setSelectedAnchorCell,\n    getStateByCellId,\n    submitFocusedCell,\n  } = useDocumentSheetListContext()\n  const cellState = getStateByCellId(column.id, row.index)\n\n  const handleOnFocus = useCallback(() => {\n    // reselect in cases where focus achieved without initial mousedown\n    setSelectedAnchorCell(column.id, row.index)\n    focusAnchorCell()\n  }, [column.id, focusAnchorCell, row.index, setSelectedAnchorCell])\n  const {patchDocument} = props.table.options.meta || {}\n\n  const handleProgrammaticFocus = () => {\n    inputRef.current?.focus()\n    if (inputRef.current instanceof HTMLInputElement) {\n      inputRef.current.select()\n    }\n  }\n\n  const handleOnMouseDown: MouseEventHandler<CellInputElement> = (event) => {\n    if (event.detail === 2) {\n      handleProgrammaticFocus()\n    } else {\n      event.preventDefault()\n      setSelectedAnchorCell(column.id, row.index)\n    }\n  }\n\n  const handleOnEnterDown = useCallback(\n    (event: KeyboardEvent) => {\n      const {key} = event\n      if (key === 'Enter') {\n        if (cellState === 'selectedAnchor') handleProgrammaticFocus()\n        if (cellState === 'focused') submitFocusedCell()\n      }\n    },\n    [cellState, submitFocusedCell],\n  )\n\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setIsDirty(true)\n    setRenderValue(event.target.value)\n  }\n\n  const handleOnBlur = () => {\n    if (isDirty) {\n      patchDocument?.(row.id, column.id, renderValue)\n      setIsDirty(false)\n    }\n    resetFocusSelection()\n  }\n\n  const handlePaste = useCallback(\n    (event: ClipboardEvent) => {\n      const clipboardData = event.clipboardData?.getData('Text')\n\n      if (typeof clipboardData === 'string' || typeof clipboardData === 'number') {\n        setRenderValue(clipboardData)\n        // patch immediately when pasting\n        patchDocument?.(row.id, column.id, clipboardData)\n      }\n    },\n    [column.id, patchDocument, row.id],\n  )\n\n  const handleCopy = useCallback(() => {\n    navigator.clipboard.writeText(renderValue.toString())\n  }, [renderValue])\n\n  useEffect(() => {\n    if (cellState === 'selectedAnchor' || cellState === 'focused')\n      // only listen for enter key when cell is focused or anchor\n      document.addEventListener('keydown', handleOnEnterDown)\n    if (cellState === 'selectedAnchor' || cellState === 'selectedRange')\n      // if cell is selected, paste events should be handled\n      document.addEventListener('paste', handlePaste)\n\n    if (cellState === 'selectedAnchor')\n      // only allow copying when cell is selected anchor\n      document.addEventListener('copy', handleCopy)\n\n    return () => {\n      if (cellState === 'selectedAnchor' || cellState === 'focused')\n        document.removeEventListener('keydown', handleOnEnterDown)\n      if (cellState === 'selectedAnchor' || cellState === 'selectedRange')\n        document.removeEventListener('paste', handlePaste)\n      if (cellState === 'selectedAnchor') document.removeEventListener('copy', handleCopy)\n    }\n  }, [\n    cellId,\n    cellState,\n    column.id,\n    getStateByCellId,\n    handleCopy,\n    handleOnEnterDown,\n    handlePaste,\n    row.index,\n  ])\n\n  const getBorderStyle = () => {\n    if (cellState === 'focused') return '2px solid blue'\n    if (cellState === 'selectedRange') return '1px solid green'\n    if (cellState === 'selectedAnchor') return '1px solid blue'\n\n    return '1px solid transparent'\n  }\n\n  const inputProps = {\n    'onFocus': handleOnFocus,\n    'onBlur': handleOnBlur,\n    'onMouseDown': handleOnMouseDown,\n    'aria-selected': !!cellState,\n    'data-testid': cellId,\n    'id': cellId,\n    'ref': (ref: InputRef) => (inputRef.current = ref),\n  }\n\n  if (fieldType.name === 'boolean') {\n    return (\n      <Select\n        {...inputProps}\n        onChange={() => null}\n        radius={0}\n        style={{\n          boxShadow: 'none',\n          border: getBorderStyle(),\n          padding: 0,\n        }}\n        value={JSON.stringify(renderValue)}\n      >\n        <option value=\"True\">True</option>\n        <option value=\"False\">False</option>\n      </Select>\n    )\n  }\n\n  return (\n    <TextInput\n      {...inputProps}\n      size={0}\n      radius={0}\n      border={false}\n      style={{\n        border: getBorderStyle(),\n        padding: '22px 16px',\n      }}\n      value={\n        typeof renderValue === 'string' || typeof renderValue === 'number'\n          ? renderValue\n          : JSON.stringify(renderValue)\n      }\n      onChange={handleOnChange}\n    />\n  )\n}\n\n/** @internal */\nexport function SheetListCell(cell: Cell<SanityDocument, unknown>) {\n  const isPinned = cell.column.getIsPinned()\n  const Cell = isPinned ? PinnedDataCell : DataCell\n  const borderWidth = isPinned && cell.column.getIsLastColumn('left') ? 2 : 1\n\n  return (\n    <Cell\n      key={cell.row.original._id + cell.id}\n      style={{\n        left: cell.column.getStart('left') ?? undefined,\n        borderRight: `${borderWidth}px solid var(--card-border-color)`,\n      }}\n      width={cell.column.getSize()}\n    >\n      {flexRender(cell.column.columnDef.cell, cell.getContext?.())}\n    </Cell>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {isObjectSchemaType, type ObjectSchemaType} from '@sanity/types'\nimport {Box, Checkbox, Flex, Text} from '@sanity/ui'\nimport {\n  type AccessorKeyColumnDef,\n  createColumnHelper,\n  type GroupColumnDef,\n  type VisibilityState,\n} from '@tanstack/react-table'\nimport {useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {\n  type DocumentPreviewStore,\n  DocumentStatusIndicator,\n  getPreviewStateObservable,\n  type SanityDocument,\n  type SchemaType,\n  useDocumentPreviewStore,\n} from 'sanity'\n\nimport {DocumentSheetListSelect} from './DocumentSheetListSelect'\nimport {SheetListCellInner} from './SheetListCell'\n\nexport const VISIBLE_COLUMN_LIMIT = 5\n\nconst PreviewCell = (props: {\n  documentPreviewStore: DocumentPreviewStore\n  schemaType: SchemaType\n  row: {\n    original: SanityDocument\n  }\n}) => {\n  const {documentPreviewStore, row, schemaType} = props\n  const title = 'Document title'\n  const previewStateObservable = useMemo(\n    () => getPreviewStateObservable(documentPreviewStore, schemaType, row.original._id, title),\n    [documentPreviewStore, row.original._id, schemaType],\n  )\n  const {draft, published, isLoading} = useObservable(previewStateObservable, {\n    draft: null,\n    isLoading: true,\n    published: null,\n  })\n  if (isLoading) {\n    return (\n      <Text size={1} muted>\n        Loading...\n      </Text>\n    )\n  }\n  const displayValue = (draft?.title ?? published?.title ?? 'Untitled') as string\n  return (\n    <Flex align=\"center\" gap={3}>\n      <DocumentStatusIndicator draft={draft} published={published} />\n      <Text size={1}>{displayValue}</Text>\n    </Flex>\n  )\n}\n\nconst columnHelper = createColumnHelper<SanityDocument>()\nconst SUPPORTED_FIELDS = ['string', 'number', 'boolean']\n\ntype Columns = (\n  | AccessorKeyColumnDef<SanityDocument, unknown>\n  | GroupColumnDef<SanityDocument, unknown>\n)[]\n\nconst getColsFromSchemaType = (schemaType: ObjectSchemaType, parentalField?: string): Columns => {\n  return schemaType.fields.reduce<Columns>((tableColumns: Columns, field) => {\n    const {type, name} = field\n    if (SUPPORTED_FIELDS.includes(type.name)) {\n      const nextCol = columnHelper.accessor(\n        // accessor must use dot notation for internal tanstack method of reading cell data\n        parentalField ? `${parentalField}.${field.name}` : field.name,\n        {\n          id: parentalField ? `${parentalField}_${field.name}` : field.name,\n          header: field.type.title,\n          enableHiding: true,\n          cell: (info) => <SheetListCellInner {...info} fieldType={type} />,\n        },\n      )\n\n      return [...tableColumns, nextCol]\n    }\n\n    // if first layer nested object\n    if (type.name === 'object' && isObjectSchemaType(type) && !parentalField) {\n      return [\n        ...tableColumns,\n        columnHelper.group({header: name, columns: getColsFromSchemaType(type, field.name)}),\n      ]\n    }\n\n    return tableColumns\n  }, [])\n}\n\n// Type guard function to check if a column is of type GroupColumnDef\nfunction isAccessorKeyColumnDef(\n  column: Columns[number],\n): column is AccessorKeyColumnDef<SanityDocument, unknown> {\n  return 'accessorKey' in column\n}\nfunction isGroupColumnDef(\n  column: AccessorKeyColumnDef<SanityDocument, unknown> | GroupColumnDef<SanityDocument, unknown>,\n): column is GroupColumnDef<SanityDocument, unknown> {\n  return 'columns' in column\n}\n\nconst flatColumns = (cols: Columns): AccessorKeyColumnDef<SanityDocument, unknown>[] => {\n  return cols.flatMap((col) => {\n    if (isAccessorKeyColumnDef(col)) {\n      return col\n    }\n    if (isGroupColumnDef(col)) {\n      return col.columns ? flatColumns(col.columns) : []\n    }\n    return []\n  })\n}\n\nexport function useDocumentSheetColumns(documentSchemaType?: ObjectSchemaType) {\n  const documentPreviewStore = useDocumentPreviewStore()\n\n  const columns: Columns = useMemo(() => {\n    if (!documentSchemaType) {\n      return []\n    }\n    return [\n      columnHelper.display({\n        id: 'selected',\n        enableHiding: false,\n        header: (info) => (\n          <Box>\n            <Checkbox\n              style={{paddingLeft: 4}}\n              indeterminate={info.table.getIsSomeRowsSelected()}\n              onChange={info.table.getToggleAllPageRowsSelectedHandler()}\n            />\n            {/* eslint-disable-next-line i18next/no-literal-string */}\n            {info.table.getSelectedRowModel().rows.length} selected\n          </Box>\n        ),\n        cell: DocumentSheetListSelect,\n      }),\n      columnHelper.accessor('Preview', {\n        enableHiding: false,\n        id: 'Preview',\n        cell: (info) => {\n          return (\n            <PreviewCell\n              {...info}\n              documentPreviewStore={documentPreviewStore}\n              schemaType={documentSchemaType}\n            />\n          )\n        },\n      }),\n      ...getColsFromSchemaType(documentSchemaType),\n    ]\n  }, [documentPreviewStore, documentSchemaType])\n\n  const [initialColumnsVisibility]: [VisibilityState, number] = useMemo(\n    () =>\n      flatColumns(columns).reduce<[VisibilityState, number]>(\n        ([accCols, countAllowedVisible], column) => {\n          if (!column.id) throw new Error('Column must have an id')\n          const visibilityKey = column.id\n\n          // this column is always visible\n          if (!column.enableHiding) {\n            return [{...accCols, [visibilityKey]: true}, countAllowedVisible]\n          }\n\n          // have already reached column visibility limit, hide column by default\n          if (countAllowedVisible === VISIBLE_COLUMN_LIMIT) {\n            return [{...accCols, [visibilityKey]: false}, countAllowedVisible]\n          }\n\n          return [{...accCols, [visibilityKey]: true}, countAllowedVisible + 1]\n        },\n        [{}, 0],\n      ),\n    [columns],\n  )\n\n  return {columns, initialColumnsVisibility}\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {Box, Checkbox, Flex, Menu, Stack, Text} from '@sanity/ui'\nimport {type Column, type Table} from '@tanstack/react-table'\nimport {useCallback} from 'react'\nimport {type SanityDocument, useTranslation} from 'sanity'\n\nimport {Button, MenuButton} from '../../../../ui-components'\nimport {VISIBLE_COLUMN_LIMIT} from './useDocumentSheetColumns'\n\ntype ColumnsControlProps = {\n  table: Table<SanityDocument>\n}\n\nexport function ColumnsControl({table}: ColumnsControlProps) {\n  const {t} = useTranslation()\n  const isVisibleLimitReached =\n    table.getVisibleLeafColumns().filter((col) => col.getCanHide()).length >= VISIBLE_COLUMN_LIMIT\n\n  const setInitialColumns = useCallback(() => {\n    table.resetColumnVisibility()\n  }, [table])\n\n  const handleColumnOnChange = (column: Column<SanityDocument, unknown>) => () => {\n    column.toggleVisibility()\n  }\n\n  const getColumnVisibilityDisabled = (column: Column<SanityDocument, unknown>) => {\n    const isColumnVisible = column.getIsVisible()\n    const isSingleColumnVisible =\n      table.getVisibleLeafColumns().filter((col) => col.getCanHide()).length === 1\n\n    return (isVisibleLimitReached && !isColumnVisible) || (isSingleColumnVisible && isColumnVisible)\n  }\n\n  return (\n    <MenuButton\n      button={<Button mode=\"bleed\" text={t('sheet-list.edit-columns')} />}\n      id=\"columns-control\"\n      menu={\n        <Menu padding={3} paddingTop={4} style={{width: 240}}>\n          <Flex direction=\"column\" height=\"fill\" gap={3}>\n            <Text weight=\"semibold\" size={1}>\n              {t('sheet-list.select-fields')}\n            </Text>\n            <Flex style={{flex: '1 1 auto', maxHeight: 320, overflowY: 'scroll'}}>\n              <Stack>\n                {table\n                  .getAllLeafColumns()\n                  .filter((column) => column.getCanHide())\n                  .map((column) => (\n                    <Flex key={column.id} marginY={2} align=\"center\">\n                      <Checkbox\n                        readOnly={getColumnVisibilityDisabled(column)}\n                        checked={column.getIsVisible()}\n                        onChange={handleColumnOnChange(column)}\n                        id={`col-visibility-${column.id}`}\n                        style={{display: 'block'}}\n                      />\n                      <Box flex={1} paddingLeft={3}>\n                        <Text size={1}>\n                          <label htmlFor={`col-visibility-${column.id}`}>\n                            {column.columnDef.header?.toString()}\n                          </label>\n                        </Text>\n                      </Box>\n                    </Flex>\n                  ))}\n              </Stack>\n            </Flex>\n            <Button\n              width=\"fill\"\n              mode=\"ghost\"\n              text={t('sheet-list.reset-columns')}\n              onClick={setInitialColumns}\n            />\n          </Flex>\n        </Menu>\n      }\n      placement=\"bottom\"\n      popover={{portal: true}}\n    />\n  )\n}\n","import {Flex} from '@sanity/ui'\nimport {Filters, SearchHeader, useSearchState} from 'sanity'\nimport {styled} from 'styled-components'\n\nconst SearchContainer = styled(Flex)`\n  flex-shrink: 0;\n`\n\nexport function DocumentSheetListFilter() {\n  const {\n    state: {filtersVisible},\n  } = useSearchState()\n\n  return (\n    <SearchContainer>\n      <SearchHeader />\n      {filtersVisible && <Filters showTypeFilter={false} />}\n    </SearchContainer>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {CloseIcon, EllipsisHorizontalIcon} from '@sanity/icons'\nimport {type SanityDocument} from '@sanity/types'\nimport {Box, Flex, Menu, Text} from '@sanity/ui'\nimport {flexRender, type Header as HeaderType, type HeaderGroup} from '@tanstack/react-table'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, MenuButton, MenuItem, Tooltip} from '../../../../ui-components'\n\nconst Header = styled.th<{width: number}>`\n  margin: 16px;\n  z-index: 1;\n  padding: 22px 0px;\n  border-top: 1px solid var(--card-border-color);\n  background-color: var(--card-badge-default-bg-color);\n  box-sizing: border-box;\n  text-align: left;\n  width: ${({width}) => width}px;\n  max-width: ${({width}) => width}px;\n`\n\nconst PinnedHeader = styled(Header)`\n  position: sticky;\n  z-index: 2;\n`\n\nconst HoverMenu = styled.div`\n  visibility: hidden;\n\n  ${Header}:hover & {\n    visibility: visible;\n  }\n`\n\ntype DocumentSheetListHeaderProps = {\n  header: HeaderType<SanityDocument, unknown>\n  headerGroup: HeaderGroup<SanityDocument>\n}\n\nexport function DocumentSheetListHeader(props: DocumentSheetListHeaderProps) {\n  const {header, headerGroup} = props\n  const {t} = useTranslation()\n\n  const isPinned = header.column.getIsPinned()\n\n  const headerTitle =\n    headerGroup.depth > 0 && !header.column.parent ? null : (\n      <Text size={1} weight=\"semibold\" textOverflow=\"ellipsis\">\n        {flexRender(header.column.columnDef.header, header.getContext())}\n      </Text>\n    )\n\n  const HeaderTag = isPinned ? PinnedHeader : Header\n\n  const canShowHeaderMenu =\n    header.column.getCanHide() &&\n    (headerGroup.depth === 0 ? !header.column.columns.length : header.column.parent)\n\n  const borderWidth = isPinned && header.column.getIsLastColumn('left') ? 2 : 1\n\n  return (\n    <HeaderTag\n      style={{\n        left: header.column.getStart('left') ?? undefined,\n        borderRight: `${borderWidth}px solid var(--card-border-color)`,\n      }}\n      key={header.id}\n      data-testid={`header-${header.id}`}\n      width={header.getSize()}\n    >\n      <Flex justify=\"space-between\" marginX={2} align=\"baseline\">\n        <Tooltip delay={500} content={headerTitle}>\n          <Box style={{boxSizing: 'border-box'}} marginLeft={3} marginRight={3}>\n            {headerTitle}\n          </Box>\n        </Tooltip>\n        {canShowHeaderMenu && (\n          <HoverMenu>\n            <MenuButton\n              button={\n                <Button\n                  tooltipProps={{content: 'Open field menu'}}\n                  mode=\"bleed\"\n                  icon={EllipsisHorizontalIcon}\n                  data-testid=\"field-menu-button\"\n                />\n              }\n              id=\"field menu\"\n              popover={{placement: 'bottom-end'}}\n              menu={\n                <Menu>\n                  <MenuItem\n                    text={t('sheet-list.hide-field')}\n                    icon={CloseIcon}\n                    onClick={() => header.column.toggleVisibility()}\n                  />\n                </Menu>\n              }\n            />\n          </HoverMenu>\n        )}\n      </Flex>\n    </HeaderTag>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\n/* eslint-disable i18next/no-literal-string */\n/* eslint-disable @sanity/i18n/no-attribute-string-literals */\n/* eslint-disable react/jsx-no-bind */\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  DoubleChevronLeftIcon,\n  DoubleChevronRightIcon,\n} from '@sanity/icons'\nimport {Flex, Text} from '@sanity/ui'\nimport {type Table} from '@tanstack/react-table'\nimport {type SanityDocument} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../../ui-components'\n\nexport function DocumentSheetListPaginator({table}: {table: Table<SanityDocument>}) {\n  return (\n    <TooltipDelayGroupProvider>\n      <Flex gap={3} align={'center'}>\n        <Button\n          onClick={() => table.setPageIndex(0)}\n          disabled={!table.getCanPreviousPage()}\n          icon={DoubleChevronLeftIcon}\n          tooltipProps={{\n            content: 'Go to first page',\n          }}\n        />\n        <Button\n          onClick={() => table.previousPage()}\n          disabled={!table.getCanPreviousPage()}\n          icon={ChevronLeftIcon}\n          tooltipProps={{\n            content: 'Go to previous page',\n          }}\n        />\n        <Text style={{whiteSpace: 'nowrap'}}>\n          {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}\n        </Text>\n\n        <Button\n          onClick={() => table.nextPage()}\n          disabled={!table.getCanNextPage()}\n          icon={ChevronRightIcon}\n          tooltipProps={{\n            content: 'Go to next page',\n          }}\n        />\n        <Button\n          onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n          disabled={!table.getCanNextPage()}\n          icon={DoubleChevronRightIcon}\n          tooltipProps={{\n            content: 'Go to last page',\n          }}\n        />\n        <select\n          value={table.getState().pagination.pageSize}\n          onChange={(e) => {\n            table.setPageSize(Number(e.target.value))\n          }}\n        >\n          {[25, 50, 100].map((pageSize) => (\n            <option key={pageSize} value={pageSize}>\n              {pageSize}\n            </option>\n          ))}\n        </select>\n      </Flex>\n    </TooltipDelayGroupProvider>\n  )\n}\n","import {type ListenEvent, type ListenOptions} from '@sanity/client'\nimport {useCallback, useEffect, useMemo, useReducer, useState} from 'react'\nimport {catchError, of} from 'rxjs'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, getDraftId, type SanityDocument, useClient} from 'sanity'\n\ninterface DocumentDeletedAction {\n  id: string\n  type: 'DOCUMENT_DELETED'\n}\n\ninterface DocumentUpdatedAction {\n  payload: SanityDocument\n  type: 'DOCUMENT_UPDATED'\n}\n\ninterface DocumentsSetAction {\n  documents: SanityDocument[]\n  type: 'DOCUMENTS_SET'\n}\n\ninterface DocumentReceivedAction {\n  payload: SanityDocument\n  type: 'DOCUMENT_RECEIVED'\n}\n\nexport type DocumentsReducerAction =\n  | DocumentDeletedAction\n  | DocumentUpdatedAction\n  | DocumentsSetAction\n  | DocumentReceivedAction\n\nexport interface DocumentsReducerState {\n  documents: Record<string, SanityDocument>\n}\n\nfunction createDocumentsSet(documents: SanityDocument[]) {\n  const documentsById = documents.reduce((acc, doc) => ({...acc, [doc._id]: doc}), {})\n  return documentsById\n}\n\nfunction documentsReducer(\n  state: DocumentsReducerState,\n  action: DocumentsReducerAction,\n): DocumentsReducerState {\n  switch (action.type) {\n    case 'DOCUMENTS_SET': {\n      // Create an object with the documents id as key\n      const documents = createDocumentsSet(action.documents)\n\n      return {\n        ...state,\n        documents: documents,\n      }\n    }\n\n    case 'DOCUMENT_RECEIVED': {\n      const nextDocumentResult = action.payload as SanityDocument\n\n      return {\n        ...state,\n        documents: {\n          ...state.documents,\n          [nextDocumentResult._id]: nextDocumentResult,\n        },\n      }\n    }\n\n    case 'DOCUMENT_DELETED': {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const {[action.id]: _, ...restDocuments} = state.documents\n\n      return {\n        ...state,\n        documents: restDocuments,\n      }\n    }\n\n    case 'DOCUMENT_UPDATED': {\n      const updatedDocument = action.payload\n      const id = updatedDocument._id as string\n      const document = state.documents[id]\n\n      const nextDocument = {\n        // Add existing document data\n        ...document,\n        // Add incoming document data\n        ...updatedDocument,\n      } satisfies SanityDocument\n\n      return {\n        ...state,\n        documents: {\n          ...state.documents,\n          [id]: nextDocument,\n        },\n      }\n    }\n\n    default:\n      return state\n  }\n}\n\nconst LISTEN_OPTIONS: ListenOptions = {\n  events: ['welcome', 'mutation', 'reconnect'],\n  includeResult: true,\n  visibility: 'query',\n}\n\n/**\n * TODO:\n * [] Lazy load more documents, reduce initial fetch.\n * [] Add support for sorting and filtering.\n * []  Make a projection of the query according to the schema. e.g. get only the primitive fields and the _id to reduce the data payload.\n */\nexport function useDocumentSheetListStore({\n  filter,\n  params,\n  apiVersion,\n}: {\n  filter: string\n  params?: Record<string, unknown>\n  apiVersion?: string\n}) {\n  const QUERY = `*[${filter}][0...2000]`\n  const client = useClient({\n    ...DEFAULT_STUDIO_CLIENT_OPTIONS,\n    apiVersion: apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n  })\n  const [state, dispatch] = useReducer(documentsReducer, {\n    documents: {},\n  })\n  const [isLoading, setIsLoading] = useState<boolean>(client !== null)\n  const [error, setError] = useState<Error | null>(null)\n\n  const initialFetch = useCallback(async () => {\n    if (!client) {\n      setIsLoading(false)\n      return\n    }\n    try {\n      const res = await client.fetch(QUERY, params)\n      dispatch({type: 'DOCUMENTS_SET', documents: res})\n      setIsLoading(false)\n    } catch (err) {\n      setError(err)\n    }\n  }, [client, params, QUERY])\n\n  const handleListenerEvent = useCallback(\n    async (event: ListenEvent<Record<string, SanityDocument>>) => {\n      // Fetch all documents on initial connection\n      if (event.type === 'welcome') {\n        setIsLoading(true)\n        await initialFetch()\n        setIsLoading(false)\n      }\n\n      // The reconnect event means that we are trying to reconnect to the realtime listener.\n      // In this case we set loading to true to indicate that we're trying to\n      // reconnect. Once a connection has been established, the welcome event\n      // will be received and we'll fetch all documents again (above).\n      if (event.type === 'reconnect') {\n        setIsLoading(true)\n      }\n\n      // Handle mutations (create, update, delete) from the realtime listener\n      // and update the documents store accordingly\n      if (event.type === 'mutation') {\n        if (event.transition === 'appear') {\n          const nextDocument = event.result as SanityDocument | undefined\n\n          if (nextDocument) {\n            dispatch({\n              type: 'DOCUMENT_RECEIVED',\n              payload: nextDocument,\n            })\n          }\n        }\n\n        if (event.transition === 'disappear') {\n          dispatch({type: 'DOCUMENT_DELETED', id: event.documentId})\n        }\n\n        if (event.transition === 'update') {\n          const updatedDocument = event.result as SanityDocument | undefined\n\n          if (updatedDocument) {\n            dispatch({\n              type: 'DOCUMENT_UPDATED',\n              payload: updatedDocument,\n            })\n          }\n        }\n      }\n    },\n    [initialFetch],\n  )\n\n  const listener$ = useMemo(() => {\n    if (!client) return of()\n\n    const events$ = client.observable.listen(QUERY, params, LISTEN_OPTIONS).pipe(\n      catchError((err) => {\n        setError(err)\n        return of(err)\n      }),\n    )\n\n    return events$\n  }, [client, params, QUERY])\n\n  useEffect(() => {\n    const sub = listener$.subscribe(handleListenerEvent)\n\n    return () => {\n      sub?.unsubscribe()\n    }\n  }, [handleListenerEvent, listener$])\n\n  // Contemplate that we could have drafts and live documents here, merge them.\n  const dataAsArray = useMemo(() => {\n    // Joins the drafts and the live documents\n    const uniques = Object.keys(state.documents).reduce(\n      (acc: {[key: string]: SanityDocument}, key) => {\n        const document = state.documents[key]\n        const isDraft = document._id === getDraftId(document._id)\n        const id = isDraft ? document._id : getDraftId(document._id)\n        // If we already have the document, and this document is not the draft one, it means\n        // the draft hast already been added to the list, so we skip it.\n        if (acc[id] && !isDraft) {\n          return acc\n        }\n        acc[id] = document\n        return acc\n      },\n      {},\n    )\n    return Object.values(uniques)\n  }, [state.documents])\n\n  return {\n    data: dataAsArray,\n    isLoading,\n    error,\n  }\n}\n","import {useMemo} from 'react'\nimport {getPublishedId, useSearchState} from 'sanity'\n\nimport {useDocumentSheetListStore} from './useDocumentSheetListStore'\n\ninterface DocumentSheetListOptions {\n  /** The schemaType.name  */\n  typeName: string\n}\n\nexport function useDocumentSheetList({typeName}: DocumentSheetListOptions) {\n  const {state} = useSearchState()\n\n  const items = useMemo(() => {\n    const map = new Map()\n    state.result.hits.forEach((h) => map.set(getPublishedId(h.hit._id), h.hit))\n    return map\n  }, [state.result.hits])\n\n  // The store is listening to all the documents that match with the _type filter.\n  const {data, isLoading} = useDocumentSheetListStore({\n    filter: `_type == \"${typeName}\"`,\n  })\n\n  // Only return the documents that match with the serverSide filter items.\n  const documents = useMemo(() => {\n    return data.filter((doc) => items.has(getPublishedId(doc._id)))\n  }, [data, items])\n\n  return {data: documents, isLoading}\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {isDocumentSchemaType, type ObjectSchemaType, type SanityDocument} from '@sanity/types'\nimport {Box, Flex, Text} from '@sanity/ui'\nimport {\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  type Row,\n  useReactTable,\n} from '@tanstack/react-table'\nimport {useCallback, useEffect, useState} from 'react'\nimport {SearchProvider, useSchema, useSearchState} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {type BaseStructureToolPaneProps} from '../../types'\nimport {ColumnsControl} from './ColumnsControl'\nimport {DocumentSheetListFilter} from './DocumentSheetListFilter'\nimport {DocumentSheetListHeader} from './DocumentSheetListHeader'\nimport {DocumentSheetListPaginator} from './DocumentSheetListPaginator'\nimport {DocumentSheetListProvider} from './DocumentSheetListProvider'\nimport {SheetListCell} from './SheetListCell'\nimport {useDocumentSheetColumns} from './useDocumentSheetColumns'\nimport {useDocumentSheetList} from './useDocumentSheetList'\n\ntype DocumentSheetListPaneProps = BaseStructureToolPaneProps<'documentList'>\n\nconst PaneContainer = styled(Flex)`\n  height: 100%;\n`\nconst TableContainer = styled.div`\n  overflow: auto; //our scrollable table container\n  position: relative; //needed for sticky header\n`\nconst Table = styled.table`\n  border-collapse: separate;\n  border-spacing: 0;\n  font-family: arial, sans-serif;\n  white-space: nowrap;\n  width: 100%;\n  border: 1px solid lightgray;\n\n  thead {\n    display: grid;\n    position: sticky;\n    top: 0;\n    z-index: 10;\n  }\n  tr {\n    padding: 0;\n  }\n  tr:last-child {\n    border-bottom: none;\n  }\n`\n\nfunction DocumentSheetListPaneInner({\n  documentSchemaType,\n}: DocumentSheetListPaneProps & {documentSchemaType: ObjectSchemaType}) {\n  const {dispatch, state} = useSearchState()\n  const {columns, initialColumnsVisibility} = useDocumentSheetColumns(documentSchemaType)\n  const {data} = useDocumentSheetList({\n    typeName: documentSchemaType.name,\n  })\n  const [selectedAnchor, setSelectedAnchor] = useState<number | null>(null)\n\n  const totalRows = state.result.hits.length\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    // Avoids resetting the page index when the data changes, e.g. a mutation is received\n    autoResetPageIndex: false,\n    initialState: {\n      columnPinning: {left: ['selected', 'Preview']},\n      pagination: {pageSize: 25},\n      columnVisibility: initialColumnsVisibility,\n    },\n    getRowId: (row) => row._id,\n    meta: {\n      selectedAnchor,\n      setSelectedAnchor,\n      patchDocument: (documentId, fieldId, value) => null,\n    },\n  })\n\n  const {rows} = table.getRowModel()\n\n  useEffect(() => {\n    dispatch({type: 'TERMS_TYPE_ADD', schemaType: documentSchemaType})\n    return () => {\n      dispatch({type: 'TERMS_TYPE_REMOVE', schemaType: documentSchemaType})\n    }\n  }, [documentSchemaType, dispatch])\n\n  const renderRow = useCallback((row: Row<SanityDocument>) => {\n    return (\n      <Box\n        as=\"tr\"\n        key={row.original._id + row.id}\n        paddingY={2}\n        style={{display: 'flex', width: '100%'}}\n      >\n        {row.getVisibleCells().map((cell) => (\n          <SheetListCell {...cell} key={row.original._id + cell.id} />\n        ))}\n      </Box>\n    )\n  }, [])\n\n  const rowsCount = `Total: ${totalRows} rows, showing ${rows.length} rows`\n  return (\n    <PaneContainer direction=\"column\" paddingX={3} data-testid=\"document-sheet-list-pane\">\n      <Flex direction=\"row\" align=\"center\" paddingY={3} paddingX={1} justify=\"space-between\">\n        <Flex direction=\"row\" align=\"center\">\n          <DocumentSheetListFilter />\n          <Text size={0} muted>\n            {rowsCount}\n          </Text>\n        </Flex>\n        <ColumnsControl table={table} />\n      </Flex>\n      <TableContainer>\n        <DocumentSheetListProvider table={table}>\n          <Table>\n            <thead>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <Box as=\"tr\" key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => (\n                    <DocumentSheetListHeader\n                      key={header.id}\n                      header={header}\n                      headerGroup={headerGroup}\n                    />\n                  ))}\n                </Box>\n              ))}\n            </thead>\n            <tbody>{table.getRowModel().rows.map(renderRow)}</tbody>\n          </Table>\n        </DocumentSheetListProvider>\n      </TableContainer>\n      <Flex justify={'flex-end'} padding={3} gap={4} paddingY={5}>\n        <DocumentSheetListPaginator table={table} />\n      </Flex>\n    </PaneContainer>\n  )\n}\n\nexport function DocumentSheetListPane(props: DocumentSheetListPaneProps) {\n  const schema = useSchema()\n  const typeName = props.pane.schemaTypeName\n\n  const schemaType = schema.get(typeName)\n  if (!schemaType || !isDocumentSchemaType(schemaType)) {\n    throw new Error(`Schema type \"${typeName}\" not found or not a document schema`)\n  }\n  return (\n    <SearchProvider>\n      <DocumentSheetListPaneInner {...props} documentSchemaType={schemaType} />\n    </SearchProvider>\n  )\n}\n","import {Card, Code} from '@sanity/ui'\nimport {isEqual} from 'lodash'\nimport {memo, useMemo, useRef} from 'react'\nimport {\n  EMPTY_ARRAY,\n  type GeneralDocumentListLayoutKey,\n  SourceProvider,\n  useI18nText,\n  useSource,\n} from 'sanity'\nimport shallowEquals from 'shallow-equals'\n\nimport {Pane} from '../../components/pane'\nimport {_DEBUG} from '../../constants'\nimport {type PaneMenuItem} from '../../types'\nimport {useStructureToolSetting} from '../../useStructureToolSetting'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {DEFAULT_ORDERING, EMPTY_RECORD} from './constants'\nimport {DocumentListPane} from './DocumentListPane'\nimport {findStaticTypesInFilter} from './helpers'\nimport {PaneHeader} from './PaneHeader'\nimport {DocumentSheetListPane} from './sheetList/DocumentSheetListPane'\nimport {type SortOrder} from './types'\n\nconst addSelectedStateToMenuItems = (options: {\n  menuItems?: PaneMenuItem[]\n  sortOrderRaw?: SortOrder\n  layout?: GeneralDocumentListLayoutKey\n}) => {\n  const {menuItems, sortOrderRaw, layout} = options\n\n  return menuItems?.map((item) => {\n    if (item.params?.layout) {\n      return {\n        ...item,\n        selected: layout === item.params?.layout,\n      }\n    }\n\n    if (item?.params?.by) {\n      return {\n        ...item,\n        selected: isEqual(sortOrderRaw?.by, item?.params?.by || EMPTY_ARRAY),\n      }\n    }\n\n    return {...item, selected: false}\n  })\n}\n\nexport function useShallowUnique<ValueType>(value: ValueType): ValueType {\n  const valueRef = useRef<ValueType>(value)\n  if (!shallowEquals(valueRef.current, value)) {\n    valueRef.current = value\n  }\n  return valueRef.current\n}\n\n/**\n * @internal\n */\nexport const PaneContainer = memo(function PaneContainer(\n  props: BaseStructureToolPaneProps<'documentList'>,\n) {\n  const {index, isSelected, pane, paneKey} = props\n  const {name: parentSourceName} = useSource()\n\n  const {\n    defaultLayout = 'default',\n    initialValueTemplates = EMPTY_ARRAY,\n    menuItemGroups,\n    menuItems,\n    options,\n  } = pane\n  const {defaultOrdering = EMPTY_ARRAY, filter} = options\n  const params = useShallowUnique(options.params || EMPTY_RECORD)\n  const sourceName = pane.source\n  const typeName = useMemo(() => {\n    const staticTypes = findStaticTypesInFilter(filter, params)\n    if (staticTypes?.length === 1) return staticTypes[0]\n    return null\n  }, [filter, params])\n\n  const [layout, setLayout] = useStructureToolSetting<GeneralDocumentListLayoutKey>(\n    'layout',\n    typeName ?? pane.id, //pane.id for anything that is not documentTypeList\n    defaultLayout,\n  )\n\n  const {title} = useI18nText(pane)\n\n  // Ensure that we use the defaultOrdering value from structure builder if any as the default\n  const defaultSortOrder = useMemo(() => {\n    return defaultOrdering?.length > 0 ? {by: defaultOrdering} : DEFAULT_ORDERING\n  }, [defaultOrdering])\n\n  const [sortOrderRaw, setSortOrder] = useStructureToolSetting<SortOrder>(\n    'sort-order',\n    typeName ?? pane.id, //pane.id for anything that is not documentTypeList\n    defaultSortOrder,\n  )\n\n  const menuItemsWithSelectedState = useMemo(\n    () =>\n      addSelectedStateToMenuItems({\n        menuItems,\n        sortOrderRaw,\n        layout,\n      }),\n    [layout, menuItems, sortOrderRaw],\n  )\n\n  const isSheetListLayout = layout === 'sheetList'\n  const paneLayout = isSheetListLayout ? (\n    <DocumentSheetListPane {...props} key={props.pane.id} />\n  ) : (\n    <DocumentListPane {...props} sortOrder={sortOrderRaw} layout={layout} />\n  )\n\n  return (\n    <SourceProvider name={sourceName || parentSourceName}>\n      <Pane\n        data-ui=\"DocumentListPane\"\n        id={paneKey}\n        minWidth={320}\n        {...(isSheetListLayout ? {} : {currentMaxWidth: 350, maxWidth: 640})}\n        selected={isSelected}\n      >\n        {_DEBUG && (\n          <Card padding={4} tone=\"transparent\">\n            <Code>{pane.source || '(none)'}</Code>\n          </Card>\n        )}\n\n        <PaneHeader\n          index={index}\n          initialValueTemplates={initialValueTemplates}\n          menuItemGroups={menuItemGroups}\n          menuItems={menuItemsWithSelectedState}\n          setLayout={setLayout}\n          setSortOrder={setSortOrder}\n          title={title}\n        />\n        {paneLayout}\n      </Pane>\n    </SourceProvider>\n  )\n})\n","import {type SerializePath} from './StructureNodes'\n\n/** @internal */\nexport class SerializeError extends Error {\n  public readonly path: SerializePath\n  public helpId?: HELP_URL\n\n  constructor(\n    message: string,\n    parentPath: SerializePath,\n    pathSegment: string | number | undefined,\n    hint?: string,\n  ) {\n    super(message)\n    this.name = 'SerializeError'\n    const segment = typeof pathSegment === 'undefined' ? '<unknown>' : `${pathSegment}`\n    this.path = (parentPath || []).concat(hint ? `${segment} (${hint})` : segment)\n  }\n\n  withHelpUrl(id: HELP_URL): SerializeError {\n    this.helpId = id\n    return this\n  }\n}\n\n/** @internal */\nexport enum HELP_URL {\n  ID_REQUIRED = 'structure-node-id-required',\n  TITLE_REQUIRED = 'structure-title-required',\n  FILTER_REQUIRED = 'structure-filter-required',\n  INVALID_LIST_ITEM = 'structure-invalid-list-item',\n  COMPONENT_REQUIRED = 'structure-view-component-required',\n  DOCUMENT_ID_REQUIRED = 'structure-document-id-required',\n  DOCUMENT_TYPE_REQUIRED = 'structure-document-type-required',\n  SCHEMA_TYPE_REQUIRED = 'structure-schema-type-required',\n  SCHEMA_TYPE_NOT_FOUND = 'structure-schema-type-not-found',\n  LIST_ITEMS_MUST_BE_ARRAY = 'structure-list-items-must-be-array',\n  QUERY_PROVIDED_FOR_FILTER = 'structure-query-provided-for-filter',\n  ACTION_OR_INTENT_REQUIRED = 'structure-action-or-intent-required',\n  LIST_ITEM_IDS_MUST_BE_UNIQUE = 'structure-list-item-ids-must-be-unique',\n  ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE = 'structure-action-and-intent-mutually-exclusive',\n  API_VERSION_REQUIRED_FOR_CUSTOM_FILTER = 'structure-api-version-required-for-custom-filter',\n}\n","import {type SortOrdering} from '@sanity/types'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport const ORDER_BY_UPDATED_AT: SortOrdering = {\n  title: 'Last edited',\n  i18n: {\n    title: {\n      key: 'menu-items.sort-by.last-edited',\n      ns: structureLocaleNamespace,\n    },\n  },\n  name: 'lastEditedDesc',\n  by: [{field: '_updatedAt', direction: 'desc'}],\n}\n\nexport const ORDER_BY_CREATED_AT: SortOrdering = {\n  title: 'Created',\n  i18n: {\n    title: {\n      key: 'menu-items.sort-by.created',\n      ns: structureLocaleNamespace,\n    },\n  },\n  name: 'lastCreatedDesc',\n  by: [{field: '_createdAt', direction: 'desc'}],\n}\n\nexport const DEFAULT_SELECTED_ORDERING_OPTION = ORDER_BY_UPDATED_AT\n\nexport const DEFAULT_ORDERING_OPTIONS: SortOrdering[] = [\n  ORDER_BY_UPDATED_AT, // _updatedAt\n  ORDER_BY_CREATED_AT, // _createdAt\n]\n","import {SortIcon} from '@sanity/icons'\nimport {type SchemaType, type SortOrdering, type SortOrderingItem} from '@sanity/types'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type Intent} from './Intent'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {DEFAULT_ORDERING_OPTIONS} from './Sort'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {getExtendedProjection} from './util/getExtendedProjection'\n\n/** @internal */\nexport function maybeSerializeMenuItem(\n  item: MenuItem | MenuItemBuilder,\n  index: number,\n  path: SerializePath,\n): MenuItem {\n  return item instanceof MenuItemBuilder ? item.serialize({path, index}) : item\n}\n\n/**\n * Menu item action type\n * @public */\nexport type MenuItemActionType =\n  | string\n  | ((params: Record<string, string> | undefined, scope?: any) => void)\n\n/**\n * Menu items parameters\n *\n * @public */\nexport type MenuItemParamsType = Record<string, string | unknown | undefined>\n\n/**\n * Interface for menu items\n *\n * @public */\nexport interface MenuItem {\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /**\n   * Menu Item title. Note that the `i18n` configuration will take\n   * precedence and this title is left here as a fallback if no i18n key is\n   * provided and compatibility with older plugins\n   */\n  title: string\n  /** Menu Item action */\n  action?: MenuItemActionType\n  /** Menu Item intent */\n  intent?: Intent\n  /** Menu Item group */\n  group?: string\n  // TODO: align these with TemplateItem['icon']\n  /** Menu Item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** Menu Item parameters. See {@link MenuItemParamsType} */\n  params?: MenuItemParamsType\n  /** Determine if it will show the MenuItem as action */\n  showAsAction?: boolean\n}\n\n/**\n * Partial menu items\n * @public\n */\nexport type PartialMenuItem = Partial<MenuItem>\n\n/**\n * Class for building menu items.\n *\n * @public */\nexport class MenuItemBuilder implements Serializable<MenuItem> {\n  /** menu item option object. See {@link PartialMenuItem} */\n  protected spec: PartialMenuItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: MenuItem,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set menu item action\n   * @param action - menu item action. See {@link MenuItemActionType}\n   * @returns menu item builder based on action provided. See {@link MenuItemBuilder}\n   */\n  action(action: MenuItemActionType): MenuItemBuilder {\n    return this.clone({action})\n  }\n\n  /**\n   * Get menu item action\n   * @returns menu item builder action. See {@link PartialMenuItem}\n   */\n  getAction(): PartialMenuItem['action'] {\n    return this.spec.action\n  }\n\n  /**\n   * Set menu item intent\n   * @param intent - menu item intent. See {@link Intent}\n   * @returns menu item builder based on intent provided. See {@link MenuItemBuilder}\n   */\n  intent(intent: Intent): MenuItemBuilder {\n    return this.clone({intent})\n  }\n\n  /**\n   * Get menu item intent\n   * @returns menu item intent. See {@link PartialMenuItem}\n   */\n  getIntent(): PartialMenuItem['intent'] {\n    return this.spec.intent\n  }\n\n  /**\n   * Set menu item title\n   * @param title - menu item title\n   * @returns menu item builder based on title provided. See {@link MenuItemBuilder}\n   */\n  title(title: string): MenuItemBuilder {\n    return this.clone({title})\n  }\n\n  /**\n   * Get menu item title. Note that the `i18n` configuration will take\n   * precedence and this title is left here for compatibility.\n   * @returns menu item title\n   */\n  getTitle(): string | undefined {\n    return this.spec.title\n  }\n\n  /**\n   * Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - object with i18n key and related namespace\n   * @returns menu item builder based on i18n config provided. See {@link MenuItemBuilder}\n   */\n  i18n(i18n: I18nTextRecord<'title'>): MenuItemBuilder {\n    return this.clone({i18n})\n  }\n\n  /**\n   * Get the i18n key and namespace used to populate the localized title.\n   * @returns the i18n key and namespace used to populate the localized title.\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /**\n   * Set menu item group\n   * @param group - menu item group\n   * @returns menu item builder based on group provided. See {@link MenuItemBuilder}\n   */\n  group(group: string): MenuItemBuilder {\n    return this.clone({group})\n  }\n\n  /**\n   * Get menu item group\n   * @returns menu item group. See {@link PartialMenuItem}\n   */\n  getGroup(): PartialMenuItem['group'] {\n    return this.spec.group\n  }\n\n  /**\n   * Set menu item icon\n   * @param icon - menu item icon\n   * @returns menu item builder based on icon provided. See {@link MenuItemBuilder}\n   */\n  icon(icon: React.ComponentType | React.ReactNode): MenuItemBuilder {\n    return this.clone({icon})\n  }\n\n  /**\n   * Get menu item icon\n   * @returns menu item icon. See {@link PartialMenuItem}\n   */\n  getIcon(): PartialMenuItem['icon'] {\n    return this.spec.icon\n  }\n\n  /**\n   * Set menu item parameters\n   * @param params - menu item parameters. See {@link MenuItemParamsType}\n   * @returns menu item builder based on parameters provided. See {@link MenuItemBuilder}\n   */\n  params(params: MenuItemParamsType): MenuItemBuilder {\n    return this.clone({params})\n  }\n\n  /**\n   * Get meny item parameters\n   * @returns menu item parameters. See {@link PartialMenuItem}\n   */\n  getParams(): PartialMenuItem['params'] {\n    return this.spec.params\n  }\n\n  /**\n   * Set menu item to show as action\n   * @param showAsAction - determine if menu item should show as action\n   * @returns menu item builder based on if it should show as action. See {@link MenuItemBuilder}\n   */\n  showAsAction(showAsAction = true): MenuItemBuilder {\n    return this.clone({showAsAction: Boolean(showAsAction)})\n  }\n\n  /**\n   * Check if menu item should show as action\n   * @returns true if menu item should show as action, false if not. See {@link PartialMenuItem}\n   */\n  getShowAsAction(): PartialMenuItem['showAsAction'] {\n    return this.spec.showAsAction\n  }\n\n  /** Serialize menu item builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns menu item node based on path provided in options. See {@link MenuItem}\n   */\n  serialize(options: SerializeOptions = {path: []}): MenuItem {\n    const {title, action, intent} = this.spec\n    if (!title) {\n      const hint = typeof action === 'string' ? `action: \"${action}\"` : undefined\n      throw new SerializeError(\n        '`title` is required for menu item',\n        options.path,\n        options.index,\n        hint,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    if (!action && !intent) {\n      throw new SerializeError(\n        `\\`action\\` or \\`intent\\` required for menu item with title ${this.spec.title}`,\n        options.path,\n        options.index,\n        `\"${title}\"`,\n      ).withHelpUrl(HELP_URL.ACTION_OR_INTENT_REQUIRED)\n    }\n\n    if (intent && action) {\n      throw new SerializeError(\n        'cannot set both `action` AND `intent`',\n        options.path,\n        options.index,\n        `\"${title}\"`,\n      ).withHelpUrl(HELP_URL.ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE)\n    }\n\n    return {...this.spec, title}\n  }\n\n  /** Clone menu item builder\n   * @param withSpec - menu item options. See {@link PartialMenuItem}\n   * @returns menu item builder based on context and spec provided. See {@link MenuItemBuilder}\n   */\n  clone(withSpec?: PartialMenuItem): MenuItemBuilder {\n    const builder = new MenuItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n\n/** @internal */\nexport interface SortMenuItem extends MenuItem {\n  params: {\n    by: SortOrderingItem[]\n  }\n}\n\n/** @internal */\nexport function getOrderingMenuItem(\n  context: StructureContext,\n  {by, title, i18n}: SortOrdering,\n  extendedProjection?: string,\n): MenuItemBuilder {\n  let builder = new MenuItemBuilder(context)\n    .group('sorting')\n    .title(\n      context.i18n.t('default-menu-item.fallback-title', {\n        // note this lives in the `studio` bundle because that one is loaded by default\n        ns: 'studio',\n        replace: {title}, // replaces the `{{title}}` option\n      }),\n    ) // fallback title\n    .icon(SortIcon)\n    .action('setSortOrder')\n    .params({by, extendedProjection})\n\n  if (i18n) {\n    builder = builder.i18n(i18n)\n  }\n\n  return builder\n}\n\n/** @internal */\nexport function getOrderingMenuItemsForSchemaType(\n  context: StructureContext,\n  typeName: SchemaType | string,\n): MenuItemBuilder[] {\n  const {schema} = context\n  const type = typeof typeName === 'string' ? schema.get(typeName) : typeName\n  if (!type || !('orderings' in type)) {\n    return []\n  }\n\n  return (\n    type.orderings ? type.orderings.concat(DEFAULT_ORDERING_OPTIONS) : DEFAULT_ORDERING_OPTIONS\n  ).map((ordering: SortOrdering) =>\n    getOrderingMenuItem(context, ordering, getExtendedProjection(type, ordering.by)),\n  )\n}\n","import {type I18nTextRecord} from 'sanity'\n\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/** @internal */\nexport function maybeSerializeMenuItemGroup(\n  item: MenuItemGroup | MenuItemGroupBuilder,\n  index: number,\n  path: SerializePath,\n): MenuItemGroup {\n  return item instanceof MenuItemGroupBuilder ? item.serialize({path, index}) : item\n}\n\n/**\n * Interface for menu item groups\n * @public\n */\nexport interface MenuItemGroup {\n  /** Menu group Id */\n  id: string\n  /** Menu group title */\n  title: string\n  i18n?: I18nTextRecord<'title'>\n}\n\n/**\n * Class for building menu item groups.\n *\n * @public\n */\nexport class MenuItemGroupBuilder implements Serializable<MenuItemGroup> {\n  /** Menu item group ID */\n  protected _id: string\n  /** Menu item group title */\n  protected _title: string\n\n  protected _i18n?: I18nTextRecord<'title'>\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: MenuItemGroup,\n  ) {\n    this._id = spec ? spec.id : ''\n    this._title = spec ? spec.title : ''\n    this._i18n = spec ? spec.i18n : undefined\n  }\n\n  /**\n   * Set menu item group ID\n   * @param id - menu item group ID\n   * @returns menu item group builder based on ID provided. See {@link MenuItemGroupBuilder}\n   */\n  id(id: string): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {id, title: this._title, i18n: this._i18n})\n  }\n\n  /**\n   * Get menu item group ID\n   * @returns menu item group ID\n   */\n  getId(): string {\n    return this._id\n  }\n\n  /**\n   * Set menu item group title\n   * @param title - menu item group title\n   * @returns menu item group builder based on title provided. See {@link MenuItemGroupBuilder}\n   */\n  title(title: string): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {title, id: this._id, i18n: this._i18n})\n  }\n\n  /**\n   * Get menu item group title\n   * @returns menu item group title\n   */\n  getTitle(): string {\n    return this._title\n  }\n\n  /**\n   * Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - object with i18n key and related namespace\n   * @returns menu item group builder based on i18n info provided. See {@link MenuItemGroupBuilder}\n   */\n  i18n(i18n: I18nTextRecord<'title'>): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {i18n, id: this._id, title: this._title})\n  }\n\n  /**\n   * Get the i18n key and namespace used to populate the localized title.\n   * @returns the i18n key and namespace used to populate the localized title.\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this._i18n\n  }\n\n  /**\n   * Serialize menu item group builder\n   * @param options - serialization options (path). See {@link SerializeOptions}\n   * @returns menu item group based on path provided in options. See {@link MenuItemGroup}\n   */\n  serialize(options: SerializeOptions = {path: []}): MenuItemGroup {\n    const {_id, _title, _i18n} = this\n    if (!_id) {\n      throw new SerializeError(\n        '`id` is required for a menu item group',\n        options.path,\n        options.index,\n        _title,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!_title) {\n      throw new SerializeError(\n        '`title` is required for a menu item group',\n        options.path,\n        _id,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    return {\n      id: _id,\n      title: _title,\n      i18n: _i18n,\n    }\n  }\n}\n","import {SerializeError} from '../SerializeError'\nimport {type SerializePath} from '../StructureNodes'\n\nexport const disallowedPattern = /([^A-Za-z0-9-_.])/\n\nexport function validateId(\n  id: string,\n  parentPath: SerializePath,\n  pathSegment: string | number | undefined,\n): string {\n  if (typeof id !== 'string') {\n    throw new SerializeError(\n      `Structure node id must be of type string, got ${typeof id}`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  const [disallowedChar] = id.match(disallowedPattern) || []\n  if (disallowedChar) {\n    throw new SerializeError(\n      `Structure node id cannot contain character \"${disallowedChar}\"`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  if (id.startsWith('__edit__')) {\n    throw new SerializeError(\n      `Structure node id cannot start with __edit__`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  return id\n}\n","import {camelCase} from 'lodash'\nimport getSlug from 'speakingurl'\n\nimport {disallowedPattern} from './validateId'\n\nexport function getStructureNodeId(title: string, id?: string): string {\n  if (id) {\n    return id\n  }\n\n  const camelCased = camelCase(title)\n\n  return disallowedPattern.test(camelCased) ? camelCase(getSlug(title)) : camelCased\n}\n","import {type I18nTextRecord} from 'sanity'\n\nimport {type IntentChecker} from './Intent'\nimport {maybeSerializeMenuItem, type MenuItem, type MenuItemBuilder} from './MenuItem'\nimport {\n  maybeSerializeMenuItemGroup,\n  type MenuItemGroup,\n  type MenuItemGroupBuilder,\n} from './MenuItemGroup'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type Serializable,\n  type SerializeOptions,\n  type StructureNode,\n} from './StructureNodes'\nimport {type UserComponent} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\n/**\n * Interface for component\n *\n * @public\n */\n// TODO: rename to `StructureComponent` since it clashes with React?\nexport interface Component extends StructureNode {\n  /** Component of type {@link UserComponent} */\n  component: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component menu items, array of type {@link MenuItem} */\n  menuItems: MenuItem[]\n  /** Component menu item group, array of type {@link MenuItemGroup} */\n  menuItemGroups: MenuItemGroup[]\n  /** Component options */\n  options: {[key: string]: unknown}\n  canHandleIntent?: IntentChecker\n}\n\n/**\n * Interface for component input\n *\n * @public\n */\nexport interface ComponentInput extends StructureNode {\n  /** Component of type {@link UserComponent} */\n  component: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component options */\n  options?: {[key: string]: unknown}\n  /** Component menu items. See {@link MenuItem} and {@link MenuItemBuilder}  */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Component menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n}\n\n/**\n * Interface for buildable component\n *\n * @public\n */\nexport interface BuildableComponent extends Partial<StructureNode> {\n  /** Component of type {@link UserComponent} */\n  component?: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component options */\n  options?: {[key: string]: unknown}\n  /** Component menu items. See {@link MenuItem} and {@link MenuItemBuilder}  */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Component menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n  canHandleIntent?: IntentChecker\n}\n\n/**\n * Class for building components\n *\n * @public\n */\nexport class ComponentBuilder implements Serializable<Component> {\n  /** component builder option object */\n  protected spec: BuildableComponent\n\n  constructor(spec?: ComponentInput) {\n    this.spec = {options: {}, ...(spec ? spec : {})}\n  }\n\n  /** Set Component ID\n   * @param id - component ID\n   * @returns component builder based on ID provided\n   */\n  id(id: string): ComponentBuilder {\n    return this.clone({id})\n  }\n\n  /** Get ID\n   * @returns ID\n   */\n  getId(): BuildableComponent['id'] {\n    return this.spec.id\n  }\n\n  /** Set Component title\n   * @param title - component title\n   * @returns component builder based on title provided (and ID)\n   */\n  title(title: string): ComponentBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get Component title\n   * @returns title\n   */\n  getTitle(): BuildableComponent['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ComponentBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /** Set Component child\n   * @param child - child component\n   * @returns component builder based on child component provided\n   */\n  child(child: Child): ComponentBuilder {\n    return this.clone({child})\n  }\n\n  /** Get Component child\n   * @returns child component\n   */\n  getChild(): BuildableComponent['child'] {\n    return this.spec.child\n  }\n\n  /** Set component\n   * @param component - user built component\n   * @returns component builder based on component provided\n   */\n  component(component: UserComponent): ComponentBuilder {\n    return this.clone({component})\n  }\n\n  /** Get Component\n   * @returns component\n   */\n  getComponent(): BuildableComponent['component'] {\n    return this.spec.component\n  }\n\n  /** Set Component options\n   * @param options - component options\n   * @returns component builder based on options provided\n   */\n  options(options: {[key: string]: unknown}): ComponentBuilder {\n    return this.clone({options})\n  }\n\n  /** Get Component options\n   * @returns component options\n   */\n  getOptions(): NonNullable<BuildableComponent['options']> {\n    return this.spec.options || {}\n  }\n\n  /** Set Component menu items\n   * @param menuItems - component menu items\n   * @returns component builder based on menuItems provided\n   */\n  menuItems(menuItems: (MenuItem | MenuItemBuilder)[]): ComponentBuilder {\n    return this.clone({menuItems})\n  }\n\n  /** Get Component menu items\n   * @returns menu items\n   */\n  getMenuItems(): BuildableComponent['menuItems'] {\n    return this.spec.menuItems\n  }\n\n  /** Set Component menu item groups\n   * @param menuItemGroups - component menu item groups\n   * @returns component builder based on menuItemGroups provided\n   */\n  menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ComponentBuilder {\n    return this.clone({menuItemGroups})\n  }\n\n  /** Get Component menu item groups\n   * @returns menu item groups\n   */\n  getMenuItemGroups(): BuildableComponent['menuItemGroups'] {\n    return this.spec.menuItemGroups\n  }\n\n  canHandleIntent(canHandleIntent: IntentChecker): ComponentBuilder {\n    return this.clone({canHandleIntent})\n  }\n\n  /** Serialize component\n   * @param options - serialization options\n   * @returns component object based on path provided in options\n   *\n   */\n  serialize(options: SerializeOptions = {path: []}): Component {\n    const {id, title, child, options: componentOptions, component} = this.spec\n    if (!id) {\n      throw new SerializeError(\n        '`id` is required for `component` structure item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!component) {\n      throw new SerializeError(\n        '`component` is required for `component` structure item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    return {\n      id: validateId(id, options.path, options.index),\n      title,\n      type: 'component',\n      child,\n      component,\n      canHandleIntent: this.spec.canHandleIntent,\n      options: componentOptions || {},\n      menuItems: (this.spec.menuItems || []).map((item, i) =>\n        maybeSerializeMenuItem(item, i, options.path),\n      ),\n      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) =>\n        maybeSerializeMenuItemGroup(item, i, options.path),\n      ),\n    }\n  }\n\n  /** Clone component builder (allows for options overriding)\n   * @param withSpec - component builder options\n   * @returns cloned builder\n   */\n  clone(withSpec?: BuildableComponent): ComponentBuilder {\n    const builder = new ComponentBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SanityClient} from '@sanity/client'\nimport {\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  getDraftId,\n  getPublishedId,\n  type SourceClientOptions,\n} from 'sanity'\n\nexport async function resolveTypeForDocument(\n  getClient: (options: SourceClientOptions) => SanityClient,\n  id: string,\n): Promise<string | undefined> {\n  const query = '*[_id in [$documentId, $draftId]]._type'\n  const documentId = getPublishedId(id)\n  const draftId = getDraftId(id)\n\n  const types = await getClient(DEFAULT_STUDIO_CLIENT_OPTIONS).fetch(\n    query,\n    {documentId, draftId},\n    {tag: 'structure.resolve-type'},\n  )\n\n  return types[0]\n}\n","import {kebabCase} from 'lodash'\n\nimport {HELP_URL, SerializeError} from '../SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from '../StructureNodes'\nimport {type View} from '../types'\nimport {validateId} from '../util/validateId'\nimport {type ComponentViewBuilder} from './ComponentView'\nimport {type FormViewBuilder} from './FormView'\n\n/**\n * Interface for base view\n *\n * @public */\nexport interface BaseView {\n  /** View id */\n  id: string\n  /** View Title */\n  title: string\n  /** View Icon */\n  icon?: React.ComponentType | React.ReactNode\n}\n\n/**\n * Class for building generic views.\n *\n * @public\n */\nexport abstract class GenericViewBuilder<TView extends Partial<BaseView>, ConcreteImpl>\n  implements Serializable<BaseView>\n{\n  /** Generic view option object */\n  protected spec: TView = {} as TView\n\n  /** Set generic view ID\n   * @param id - generic view ID\n   * @returns generic view builder based on ID provided.\n   */\n  id(id: string): ConcreteImpl {\n    return this.clone({id})\n  }\n  /** Get generic view ID\n   * @returns generic view ID\n   */\n  getId(): TView['id'] {\n    return this.spec.id\n  }\n\n  /** Set generic view title\n   * @param title - generic view title\n   * @returns generic view builder based on title provided and (if provided) its ID.\n   */\n  title(title: string): ConcreteImpl {\n    return this.clone({title, id: this.spec.id || kebabCase(title)})\n  }\n\n  /** Get generic view title\n   * @returns generic view title\n   */\n  getTitle(): TView['title'] {\n    return this.spec.title\n  }\n\n  /** Set generic view icon\n   * @param icon - generic view icon\n   * @returns generic view builder based on icon provided.\n   */\n  icon(icon: React.ComponentType | React.ReactNode): ConcreteImpl {\n    return this.clone({icon})\n  }\n\n  /** Get generic view icon\n   * @returns generic view icon\n   */\n  getIcon(): TView['icon'] {\n    return this.spec.icon\n  }\n\n  /** Serialize generic view\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns generic view object based on path provided in options. See {@link BaseView}\n   */\n  serialize(options: SerializeOptions = {path: []}): BaseView {\n    const {id, title, icon} = this.spec\n    if (!id) {\n      throw new SerializeError(\n        '`id` is required for view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!title) {\n      throw new SerializeError(\n        '`title` is required for view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    return {\n      id: validateId(id, options.path, options.index),\n      title,\n      icon,\n    }\n  }\n\n  /** Clone generic view builder (allows for options overriding)\n   * @param withSpec - Partial generic view builder options. See {@link BaseView}\n   * @returns Generic view builder.\n   */\n  abstract clone(withSpec?: Partial<BaseView>): ConcreteImpl\n}\n\nfunction isSerializable(view: BaseView | Serializable<BaseView>): view is Serializable<BaseView> {\n  return typeof (view as Serializable<BaseView>).serialize === 'function'\n}\n\n/** @internal */\nexport function maybeSerializeView(\n  item: View | Serializable<View>,\n  index: number,\n  path: SerializePath,\n): View {\n  return isSerializable(item) ? item.serialize({path, index}) : item\n}\n\n/**\n * View builder. See {@link ComponentViewBuilder} and {@link FormViewBuilder}\n *\n * @public\n */\nexport type ViewBuilder = ComponentViewBuilder | FormViewBuilder\n","import {isRecord} from 'sanity'\n\nimport {HELP_URL, SerializeError} from '../SerializeError'\nimport {type SerializeOptions} from '../StructureNodes'\nimport {type UserViewComponent} from '../types'\nimport {type BaseView, GenericViewBuilder} from './View'\n\n/**\n * Interface for component views.\n *\n * @public */\nexport interface ComponentView<TOptions = Record<string, any>> extends BaseView {\n  type: 'component'\n  /** Component view components. See {@link UserViewComponent} */\n  component: UserViewComponent\n  /** Component view options */\n  options: TOptions\n}\n\nconst isComponentSpec = (spec: unknown): spec is ComponentView =>\n  isRecord(spec) && spec.type === 'component'\n\n/**\n * Class for building a component view.\n *\n * @public */\nexport class ComponentViewBuilder extends GenericViewBuilder<\n  Partial<ComponentView>,\n  ComponentViewBuilder\n> {\n  /** Partial Component view option object. See {@link ComponentView} */\n  protected spec: Partial<ComponentView>\n\n  constructor(\n    /**\n     * Component view component or spec\n     * @param componentOrSpec - user view component or partial component view. See {@link UserViewComponent} and {@link ComponentView}\n     */\n    componentOrSpec?: UserViewComponent | Partial<ComponentView>,\n  ) {\n    const spec = isComponentSpec(componentOrSpec) ? {...componentOrSpec} : {options: {}}\n\n    super()\n    this.spec = spec\n\n    const userComponent =\n      typeof componentOrSpec === 'function' ? componentOrSpec : this.spec.component\n\n    if (userComponent) {\n      // Because we're cloning, this'll return a new instance, so grab the spec from it\n      this.spec = this.component(userComponent).spec\n    }\n  }\n\n  /** Set view Component\n   * @param component - component view component. See {@link UserViewComponent}\n   * @returns component view builder based on component view provided. See {@link ComponentViewBuilder}\n   */\n  component(component: UserViewComponent): ComponentViewBuilder {\n    return this.clone({component})\n  }\n\n  /** Get view Component\n   * @returns Partial component view. See {@link ComponentView}\n   */\n  getComponent(): Partial<ComponentView>['component'] {\n    return this.spec.component\n  }\n\n  /** Set view Component options\n   * @param options - component view options\n   * @returns component view builder based on options provided. See {@link ComponentViewBuilder}\n   */\n  options(options: {[key: string]: any}): ComponentViewBuilder {\n    return this.clone({options})\n  }\n\n  /** Get view Component options\n   * @returns component view options. See {@link ComponentView}\n   */\n  getOptions(): ComponentView['options'] {\n    return this.spec.options || {}\n  }\n\n  /** Serialize view Component\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns component view based on path provided in options. See {@link ComponentView}\n   *\n   */\n  serialize(options: SerializeOptions = {path: []}): ComponentView {\n    const base = super.serialize(options)\n\n    const component = this.spec.component\n    if (typeof component !== 'function') {\n      throw new SerializeError(\n        '`component` is required and must be a function for `component()` view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.COMPONENT_REQUIRED)\n    }\n\n    return {\n      ...base,\n      component,\n      options: this.spec.options || {},\n      type: 'component',\n    }\n  }\n\n  /** Clone Component view builder (allows for options overriding)\n   * @param withSpec - partial for component view option. See {@link ComponentView}\n   * @returns component view builder. See {@link ComponentViewBuilder}\n   */\n  clone(withSpec?: Partial<ComponentView>): ComponentViewBuilder {\n    const builder = new ComponentViewBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SerializeOptions} from '../StructureNodes'\nimport {type BaseView, GenericViewBuilder} from './View'\n\n/**\n * Interface for form views.\n *\n * @public */\nexport interface FormView extends BaseView {\n  type: 'form'\n}\n\n/**\n * Class for building a form view.\n *\n * @public */\nexport class FormViewBuilder extends GenericViewBuilder<Partial<BaseView>, FormViewBuilder> {\n  /** Document list options. See {@link FormView} */\n  protected spec: Partial<FormView>\n\n  constructor(spec?: Partial<FormView>) {\n    super()\n    this.spec = {id: 'editor', title: 'Editor', ...(spec ? spec : {})}\n  }\n\n  /**\n   * Serialize Form view builder\n   * @param options - Serialize options. See {@link SerializeOptions}\n   * @returns form view builder based on path provided in options. See {@link FormView}\n   */\n  serialize(options: SerializeOptions = {path: []}): FormView {\n    return {\n      ...super.serialize(options),\n      type: 'form',\n    }\n  }\n\n  /**\n   * Clone Form view builder (allows for options overriding)\n   * @param withSpec - Partial form view builder options. See {@link FormView}\n   * @returns form view builder. See {@link FormViewBuilder}\n   */\n  clone(withSpec?: Partial<FormView>): FormViewBuilder {\n    const builder = new FormViewBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type UserViewComponent} from '../types'\nimport {type ComponentView, ComponentViewBuilder} from './ComponentView'\nimport {type FormView, FormViewBuilder} from './FormView'\n\nexport * from './ComponentView'\nexport * from './FormView'\nexport * from './View'\n\n/** @internal */\nexport const form = (spec?: Partial<FormView>): FormViewBuilder => new FormViewBuilder(spec)\n\n/** @internal */\nexport const component = (\n  componentOrSpec?: UserViewComponent | Partial<ComponentView>,\n): ComponentViewBuilder => new ComponentViewBuilder(componentOrSpec)\n","import {type SchemaType} from '@sanity/types'\nimport {uniq} from 'lodash'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type ChildResolver} from './ChildResolver'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type DocumentNode,\n  type EditorNode,\n  type Serializable,\n  type SerializeOptions,\n} from './StructureNodes'\nimport {type StructureContext, type View} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {resolveTypeForDocument} from './util/resolveTypeForDocument'\nimport {validateId} from './util/validateId'\nimport {form} from './views'\nimport {maybeSerializeView, type ViewBuilder} from './views/View'\n\nconst createDocumentChildResolver =\n  ({resolveDocumentNode, getClient}: StructureContext): ChildResolver =>\n  async (itemId, {params, path}) => {\n    let type = params.type\n\n    const parentPath = path.slice(0, path.length - 1)\n    const currentSegment = path[path.length - 1]\n\n    if (!type) {\n      type = await resolveTypeForDocument(getClient, itemId)\n    }\n\n    if (!type) {\n      throw new SerializeError(\n        `Failed to resolve document, and no type provided in parameters.`,\n        parentPath,\n        currentSegment,\n      )\n    }\n\n    return resolveDocumentNode({documentId: itemId, schemaType: type})\n  }\n\n/**\n * Interface for options of Partial Documents. See {@link PartialDocumentNode}\n *\n * @public */\nexport interface DocumentOptions {\n  /** Document Id */\n  id: string\n  /** Document Type */\n  type: string\n  /** Document Template */\n  template?: string\n  /** Template parameters */\n  templateParameters?: Record<string, unknown>\n}\n\n/**\n * Interface for partial document (focused on the document pane)\n *\n * @public */\nexport interface PartialDocumentNode {\n  /** Document Id */\n  id?: string\n  /** Document title */\n  title?: string\n  /** I18n key and namespace used to populate the localized title */\n  i18n?: I18nTextRecord<'title'>\n  /** Document children of type {@link Child} */\n  child?: Child\n  /**\n   * Views for the document pane. See {@link ViewBuilder} and {@link View}\n   */\n  views?: (View | ViewBuilder)[]\n  /**\n   * Document options. See {@link DocumentOptions}\n   */\n  options?: Partial<DocumentOptions>\n}\n\n/**\n * A `DocumentBuilder` is used to build a document node.\n *\n * @public */\nexport class DocumentBuilder implements Serializable<DocumentNode> {\n  /** Component builder option object See {@link PartialDocumentNode} */\n  protected spec: PartialDocumentNode\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: PartialDocumentNode,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /** Set Document Builder ID\n   * @param id - document builder ID\n   * @returns document builder based on ID provided. See {@link DocumentBuilder}\n   */\n  id(id: string): DocumentBuilder {\n    return this.clone({id})\n  }\n\n  /** Get Document Builder ID\n   * @returns document ID. See {@link PartialDocumentNode}\n   */\n  getId(): PartialDocumentNode['id'] {\n    return this.spec.id\n  }\n\n  /** Set Document title\n   * @param title - document title\n   * @returns document builder based on title provided (and ID). See {@link DocumentBuilder}\n   */\n  title(title: string): DocumentBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get Document title\n   * @returns document title. See {@link PartialDocumentNode}\n   */\n  getTitle(): PartialDocumentNode['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): DocumentBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /** Set Document child\n   * @param child - document child\n   * @returns document builder based on child provided. See {@link DocumentBuilder}\n   */\n  child(child: Child): DocumentBuilder {\n    return this.clone({child})\n  }\n\n  /** Get Document child\n   * @returns document child. See {@link PartialDocumentNode}\n   */\n  getChild(): PartialDocumentNode['child'] {\n    return this.spec.child\n  }\n\n  /** Set Document ID\n   * @param documentId - document ID\n   * @returns document builder with document based on ID provided. See {@link DocumentBuilder}\n   */\n  documentId(documentId: string): DocumentBuilder {\n    // Let's try to be a bit helpful and assign an ID from document ID if none is specified\n    const paneId = this.spec.id || documentId\n    return this.clone({\n      id: paneId,\n      options: {\n        ...(this.spec.options || {}),\n        id: documentId,\n      },\n    })\n  }\n\n  /** Get Document ID\n   * @returns document ID. See {@link DocumentOptions}\n   */\n  getDocumentId(): Partial<DocumentOptions>['id'] {\n    return this.spec.options?.id\n  }\n\n  /** Set Document Type\n   * @param documentType - document type\n   * @returns document builder with document based on type provided. See {@link DocumentBuilder}\n   */\n  schemaType(documentType: SchemaType | string): DocumentBuilder {\n    return this.clone({\n      options: {\n        ...(this.spec.options || {}),\n        type: typeof documentType === 'string' ? documentType : documentType.name,\n      },\n    })\n  }\n\n  /** Get Document Type\n   * @returns document type. See {@link DocumentOptions}\n   */\n  getSchemaType(): Partial<DocumentOptions>['type'] {\n    return this.spec.options?.type\n  }\n\n  /** Set Document Template\n   * @param templateId - document template ID\n   * @param parameters - document template parameters\n   * @returns document builder with document based on template provided. See {@link DocumentBuilder}\n   */\n  initialValueTemplate(templateId: string, parameters?: Record<string, unknown>): DocumentBuilder {\n    return this.clone({\n      options: {\n        ...(this.spec.options || {}),\n        template: templateId,\n        templateParameters: parameters,\n      },\n    })\n  }\n\n  /** Get Document Template\n   * @returns document template. See {@link DocumentOptions}\n   */\n  getInitialValueTemplate(): Partial<DocumentOptions>['template'] {\n    return this.spec.options?.template\n  }\n\n  /** Get Document's initial value Template parameters\n   * @returns document template parameters. See {@link DocumentOptions}\n   */\n  getInitialValueTemplateParameters(): Partial<DocumentOptions>['templateParameters'] {\n    return this.spec.options?.templateParameters\n  }\n\n  /** Set Document views\n   * @param views - document views. See {@link ViewBuilder} and {@link View}\n   * @returns document builder with document based on views provided. See {@link DocumentBuilder}\n   */\n  views(views: (View | ViewBuilder)[]): DocumentBuilder {\n    return this.clone({views})\n  }\n\n  /** Get Document views\n   * @returns document views. See {@link ViewBuilder} and {@link View}\n   */\n  getViews(): (View | ViewBuilder)[] {\n    return this.spec.views || []\n  }\n\n  /** Serialize Document builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document node based on path, index and hint provided in options. See {@link DocumentNode}\n   */\n  serialize({path = [], index, hint}: SerializeOptions = {path: []}): DocumentNode {\n    const urlId = path[index || path.length - 1]\n\n    // Try to grab document ID / editor ID from URL if not defined\n    const id = this.spec.id || (urlId && `${urlId}`) || ''\n    const options: Partial<DocumentOptions> = {\n      id,\n      type: undefined,\n      template: undefined,\n      templateParameters: undefined,\n      ...this.spec.options,\n    }\n\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for document nodes',\n        path,\n        index,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!options || !options.id) {\n      throw new SerializeError(\n        'document id (`id`) is required for document nodes',\n        path,\n        id,\n        hint,\n      ).withHelpUrl(HELP_URL.DOCUMENT_ID_REQUIRED)\n    }\n\n    if (!options || !options.type) {\n      throw new SerializeError(\n        'document type (`schemaType`) is required for document nodes',\n        path,\n        id,\n        hint,\n      )\n    }\n\n    const views = (this.spec.views && this.spec.views.length > 0 ? this.spec.views : [form()]).map(\n      (item, i) => maybeSerializeView(item, i, path),\n    )\n\n    const viewIds = views.map((view) => view.id)\n    const dupes = uniq(viewIds.filter((viewId, i) => viewIds.includes(viewId, i + 1)))\n    if (dupes.length > 0) {\n      throw new SerializeError(\n        `document node has views with duplicate IDs: ${dupes.join(',  ')}`,\n        path,\n        id,\n        hint,\n      )\n    }\n\n    return {\n      ...this.spec,\n      child: this.spec.child || createDocumentChildResolver(this._context),\n      id: validateId(id, path, index),\n      type: 'document',\n      options: getDocumentOptions(options),\n      views,\n    }\n  }\n\n  /** Clone Document builder\n   * @param withSpec - partial document node specification used to extend the cloned builder. See {@link PartialDocumentNode}\n   * @returns document builder based on context and spec provided. See {@link DocumentBuilder}\n   */\n  clone(withSpec: PartialDocumentNode = {}): DocumentBuilder {\n    const builder = new DocumentBuilder(this._context)\n    const options = {...(this.spec.options || {}), ...(withSpec.options || {})}\n    builder.spec = {...this.spec, ...withSpec, options}\n    return builder\n  }\n}\n\nfunction getDocumentOptions(spec: Partial<DocumentOptions>): DocumentOptions {\n  const opts: DocumentOptions = {\n    id: spec.id || '',\n    type: spec.type || '*',\n  }\n\n  if (spec.template) {\n    opts.template = spec.template\n  }\n\n  if (spec.templateParameters) {\n    opts.templateParameters = spec.templateParameters\n  }\n\n  return opts\n}\n\n/** @internal */\nexport function documentFromEditor(context: StructureContext, spec?: EditorNode): DocumentBuilder {\n  let doc = spec?.type\n    ? // Use user-defined document fragment as base if possible\n      context.resolveDocumentNode({schemaType: spec.type})\n    : // Fall back to plain old document builder\n      new DocumentBuilder(context)\n\n  if (!spec) return doc\n\n  const {id, type, template, templateParameters} = spec.options\n  doc = doc.id(spec.id).documentId(id)\n\n  if (type) {\n    doc = doc.schemaType(type)\n  }\n  if (template) {\n    doc = doc.initialValueTemplate(template, templateParameters)\n  }\n  if (spec.child) {\n    doc = doc.child(spec.child)\n  }\n\n  return doc\n}\n\n/** @internal */\nexport function documentFromEditorWithInitialValue(\n  {resolveDocumentNode, templates}: StructureContext,\n  templateId: string,\n  parameters?: Record<string, unknown>,\n): DocumentBuilder {\n  const template = templates.find((t) => t.id === templateId)\n\n  if (!template) {\n    throw new Error(`Template with ID \"${templateId}\" not defined`)\n  }\n\n  return resolveDocumentNode({schemaType: template.schemaType}).initialValueTemplate(\n    templateId,\n    parameters,\n  )\n}\n","import {AddIcon} from '@sanity/icons'\nimport {type InitialValueTemplateItem} from 'sanity'\n\nimport {type BaseIntentParams, type IntentParams} from './Intent'\nimport {type MenuItem, MenuItemBuilder} from './MenuItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * A `InitialValueTemplateItemBuilder` is used to build a document node with an initial value set.\n *\n * @public\n */\nexport class InitialValueTemplateItemBuilder implements Serializable<InitialValueTemplateItem> {\n  /** Initial Value template item option object. See {@link InitialValueTemplateItem} */\n  protected spec: Partial<InitialValueTemplateItem>\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: Partial<InitialValueTemplateItem>,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /** Set initial value template item builder ID\n   * @param id - initial value template item ID\n   * @returns initial value template item based on ID provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  id(id: string): InitialValueTemplateItemBuilder {\n    return this.clone({id})\n  }\n\n  /** Get initial value template item builder ID\n   * @returns initial value template item ID. See {@link InitialValueTemplateItem}\n   */\n  getId(): Partial<InitialValueTemplateItem>['id'] {\n    return this.spec.id\n  }\n\n  /** Set initial value template item title\n   * @param title - initial value template item title\n   * @returns initial value template item based on title provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  title(title: string): InitialValueTemplateItemBuilder {\n    return this.clone({title})\n  }\n\n  /** Get initial value template item title\n   * @returns initial value template item title. See {@link InitialValueTemplateItem}\n   */\n  getTitle(): Partial<InitialValueTemplateItem>['title'] {\n    return this.spec.title\n  }\n\n  /** Set initial value template item description\n   * @param description - initial value template item description\n   * @returns initial value template item builder based on description provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  description(description: string): InitialValueTemplateItemBuilder {\n    return this.clone({description})\n  }\n\n  /** Get initial value template item description\n   * @returns initial value template item description. See {@link InitialValueTemplateItem}\n   */\n  getDescription(): Partial<InitialValueTemplateItem>['description'] {\n    return this.spec.description\n  }\n\n  /** Set initial value template ID\n   * @param templateId - initial value template item template ID\n   * @returns initial value template item based builder on template ID provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  templateId(templateId: string): InitialValueTemplateItemBuilder {\n    // Let's try to be a bit helpful and assign an ID from template ID if none is specified\n    const paneId = this.spec.id || templateId\n    return this.clone({\n      id: paneId,\n      templateId,\n    })\n  }\n\n  /** Get initial value template item template ID\n   * @returns initial value template item ID. See {@link InitialValueTemplateItem}\n   */\n  getTemplateId(): Partial<InitialValueTemplateItem>['templateId'] {\n    return this.spec.templateId\n  }\n\n  /** Get initial value template item template parameters\n   * @param parameters - initial value template item parameters\n   * @returns initial value template item builder based on parameters provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  parameters(parameters: {[key: string]: any}): InitialValueTemplateItemBuilder {\n    return this.clone({parameters})\n  }\n\n  /** Get initial value template item template parameters\n   * @returns initial value template item parameters. See {@link InitialValueTemplateItem}\n   */\n  getParameters(): Partial<InitialValueTemplateItem>['parameters'] {\n    return this.spec.parameters\n  }\n\n  /** Serialize initial value template item\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns initial value template item object based on the path, index and hint provided in options. See {@link InitialValueTemplateItem}\n   */\n  serialize({path = [], index, hint}: SerializeOptions = {path: []}): InitialValueTemplateItem {\n    const {spec, _context} = this\n    const {templates} = _context\n\n    if (typeof spec.id !== 'string' || !spec.id) {\n      throw new SerializeError(\n        '`id` is required for initial value template item nodes',\n        path,\n        index,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!spec.templateId) {\n      throw new SerializeError(\n        'template id (`templateId`) is required for initial value template item nodes',\n        path,\n        spec.id,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    const template = templates.find((t) => t.id === spec.templateId)\n\n    if (!template) {\n      throw new SerializeError(\n        'template id (`templateId`) is required for initial value template item nodes',\n        path,\n        spec.id,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    return {\n      id: spec.id,\n      templateId: spec.id,\n      schemaType: template.schemaType,\n      type: 'initialValueTemplateItem',\n      description: spec.description || template.description,\n      title: spec.title || template.title,\n      subtitle: spec.subtitle,\n      icon: spec.icon || template.icon,\n      initialDocumentId: spec.initialDocumentId,\n      parameters: spec.parameters,\n    }\n  }\n\n  /** Clone generic view builder (allows for options overriding)\n   * @param withSpec - initial value template item builder options. See {@link InitialValueTemplateItemBuilder}\n   * @returns initial value template item builder based on the context and options provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  clone(withSpec: Partial<InitialValueTemplateItem> = {}): InitialValueTemplateItemBuilder {\n    const builder = new InitialValueTemplateItemBuilder(this._context)\n    builder.spec = {...this.spec, ...withSpec}\n    return builder\n  }\n}\n\n/** @internal */\nexport function defaultInitialValueTemplateItems(\n  context: StructureContext,\n): InitialValueTemplateItemBuilder[] {\n  const {schema, getStructureBuilder, templates} = context\n\n  // Sort templates by their schema type, in order or definition\n  const typeNames = schema.getTypeNames()\n  const ordered = templates\n    // Don't list templates that require parameters\n    // TODO: this should use the new-document template items instead maybe?\n    .filter((tpl) => !tpl.parameters?.length)\n    .sort((a, b) => typeNames.indexOf(a.schemaType) - typeNames.indexOf(b.schemaType))\n\n  // Create actual template items out of the templates\n  return ordered.map((tpl) => getStructureBuilder().initialValueTemplateItem(tpl.id))\n}\n\n/** @internal */\nexport function maybeSerializeInitialValueTemplateItem(\n  item: InitialValueTemplateItem | InitialValueTemplateItemBuilder,\n  index: number,\n  path: SerializePath,\n): InitialValueTemplateItem {\n  return item instanceof InitialValueTemplateItemBuilder ? item.serialize({path, index}) : item\n}\n\n/** @internal */\nexport function menuItemsFromInitialValueTemplateItems(\n  context: StructureContext,\n  templateItems: InitialValueTemplateItem[],\n): MenuItem[] {\n  const {schema, templates} = context\n  return templateItems.map((item) => {\n    const template = templates.find((t) => t.id === item.templateId)\n    const title = item.title || template?.title || 'Create'\n\n    const params: BaseIntentParams = {}\n    if (template && template.schemaType) {\n      params.type = template.schemaType\n    }\n\n    if (item.templateId) {\n      params.template = item.templateId\n    }\n\n    const intentParams: IntentParams = item.parameters ? [params, item.parameters] : params\n    const schemaType = template && schema.get(template.schemaType)\n\n    const i18n = item.i18n || template?.i18n\n\n    let builder = new MenuItemBuilder(context)\n      .title(title)\n      .icon((template && template.icon) || schemaType?.icon || AddIcon)\n      .intent({type: 'create', params: intentParams})\n\n    if (i18n) {\n      builder = builder.i18n(i18n)\n    }\n\n    return builder.serialize()\n  })\n}\n","import {getTypeNamesFromFilter, type PartialDocumentList} from './DocumentList'\nimport {type StructureNode} from './StructureNodes'\n\n/**\n * Intent parameters (json)\n *\n * @public\n */\nexport type IntentJsonParams = {[key: string]: any}\n\n/**\n * Base intent parameters\n *\n * @public\n * @todo dedupe with core\n */\nexport interface BaseIntentParams {\n  /**\n   * Document schema type name to create/edit.\n   * Required for `create` intents, optional for `edit` (but encouraged, safer and faster)\n   */\n  type?: string\n\n  /**\n   * ID of the document to create/edit.\n   * Required for `edit` intents, optional for `create`.\n   */\n  id?: string\n\n  /**\n   * Name (ID) of initial value template to use for `create` intent. Optional.\n   */\n  template?: string\n\n  /**\n   * Experimental field path\n   *\n   * @beta\n   * @experimental\n   * @hidden\n   */\n  path?: string\n\n  /**\n   * Optional \"mode\" to use for edit intent.\n   * Known modes are `structure` and `presentation`.\n   */\n  mode?: string\n\n  /**\n   * Arbitrary/custom parameters are generally discouraged - try to keep them to a minimum,\n   * or use `payload` (arbitrary JSON-serializable object) instead.\n   */\n  [key: string]: string | undefined\n}\n\n/** @internal */\nexport const DEFAULT_INTENT_HANDLER = Symbol('Document type list canHandleIntent')\n\n/**\n * Intent parameters\n * See {@link router.BaseIntentParams} and {@link router.IntentJsonParams}\n *\n * @public\n */\nexport type IntentParams = BaseIntentParams | [BaseIntentParams, IntentJsonParams]\n\n/**\n * Interface for intents\n * @public */\n// TODO: intents should be unified somewhere\nexport interface Intent {\n  /** Intent type */\n  type: string\n  /** Intent parameters. See {@link IntentParams}\n   */\n  params?: IntentParams\n}\n\n/**\n * Interface for intent checker\n *\n * @public\n */\nexport interface IntentChecker {\n  (\n    /** Intent name */\n    intentName: string,\n    /** Intent checker parameter */\n    params: {[key: string]: any},\n    /** Structure context. See {@link StructureNode} */\n    context: {pane: StructureNode; index: number},\n  ): boolean\n  /** intent checker identify */\n  identity?: symbol\n}\n\n/** @internal */\nexport const defaultIntentChecker: IntentChecker = (intentName, params, {pane}): boolean => {\n  const isEdit = intentName === 'edit'\n  const isCreate = intentName === 'create'\n  const typedSpec = pane as PartialDocumentList\n  const paneFilter = typedSpec.options?.filter || ''\n  const paneParams = typedSpec.options?.params || {}\n  const typeNames = typedSpec.schemaTypeName\n    ? [typedSpec.schemaTypeName]\n    : getTypeNamesFromFilter(paneFilter, paneParams)\n\n  const initialValueTemplates = typedSpec.initialValueTemplates || []\n\n  if (isCreate && params.template) {\n    return initialValueTemplates.some((tpl) => tpl.templateId === params.template)\n  }\n\n  return (\n    (isEdit && params.id && typeNames.includes(params.type)) ||\n    (isCreate && typeNames.includes(params.type))\n  )\n}\n\ndefaultIntentChecker.identity = DEFAULT_INTENT_HANDLER\n","export const layoutOptions = ['default', 'card', 'media', 'detail', 'block']\n","import {type I18nTextRecord, type InitialValueTemplateItem, type PreviewLayoutKey} from 'sanity'\n\nimport {\n  type InitialValueTemplateItemBuilder,\n  maybeSerializeInitialValueTemplateItem,\n} from './InitialValueTemplateItem'\nimport {defaultIntentChecker, type IntentChecker} from './Intent'\nimport {layoutOptions} from './Layout'\nimport {maybeSerializeMenuItem, type MenuItem, type MenuItemBuilder} from './MenuItem'\nimport {\n  maybeSerializeMenuItemGroup,\n  type MenuItemGroup,\n  type MenuItemGroupBuilder,\n} from './MenuItemGroup'\nimport {SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type Serializable,\n  type SerializeOptions,\n  type StructureNode,\n} from './StructureNodes'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\nfunction noChildResolver() {\n  return undefined\n}\n\n/** @internal */\nexport const shallowIntentChecker: IntentChecker = (intentName, params, {pane, index}): boolean => {\n  return index <= 1 && defaultIntentChecker(intentName, params, {pane, index})\n}\n\n/**\n * Interface for list display options\n *\n * @public */\nexport interface ListDisplayOptions {\n  /** Check if list display should show icons */\n  showIcons?: boolean\n}\n\n/**\n * Interface for base generic list\n *\n * @public\n */\nexport interface BaseGenericList extends StructureNode {\n  /** List layout key. */\n  defaultLayout?: PreviewLayoutKey\n  /** Can handle intent. See {@link IntentChecker} */\n  canHandleIntent?: IntentChecker\n  /** List display options. See {@link ListDisplayOptions} */\n  displayOptions?: ListDisplayOptions\n  /** List child. See {@link Child} */\n  child: Child\n  /** List initial values array. See {@link InitialValueTemplateItem} and {@link InitialValueTemplateItemBuilder} */\n  initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder)[]\n}\n\n/**\n * Interface for generic list\n *\n * @public\n */\n// \"POJO\"/verbatim-version - end result\nexport interface GenericList extends BaseGenericList {\n  /** List type */\n  type: string\n  /** List menu items array. See {@link MenuItem} */\n  menuItems: MenuItem[]\n  /** List menu item groups array. See {@link MenuItemGroup} */\n  menuItemGroups: MenuItemGroup[]\n}\n\n/**\n * Interface for buildable generic list\n *\n * @public\n */\n// Used internally in builder classes to make everything optional\nexport interface BuildableGenericList extends Partial<BaseGenericList> {\n  /** List menu items array. See {@link MenuItem} and {@link MenuItemBuilder} */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** List menu items groups array. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n}\n\n/**\n * Interface for generic list input\n * Allows builders and only requires things not inferrable\n *\n * @public */\n// Input version, allows builders and only requires things not inferrable\nexport interface GenericListInput extends StructureNode {\n  /** Input id */\n  id: string\n  /** Input title */\n  title: string\n  /** Input menu items groups. See {@link MenuItem} and {@link MenuItemBuilder} */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Input menu items groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n  /** Input initial value array. See {@link InitialValueTemplateItem} and {@link InitialValueTemplateItemBuilder} */\n  initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder)[]\n  /** Input default layout. */\n  defaultLayout?: PreviewLayoutKey\n  /** If input can handle intent. See {@link IntentChecker} */\n  canHandleIntent?: IntentChecker\n  /** Input child of type {@link Child} */\n  child?: Child\n}\n\n/**\n * Class for building generic lists\n *\n * @public\n */\nexport abstract class GenericListBuilder<TList extends BuildableGenericList, ConcreteImpl>\n  implements Serializable<GenericList>\n{\n  /** Check if initial value templates are set */\n  protected initialValueTemplatesSpecified = false\n  /** Generic list option object */\n  protected spec: TList = {} as TList\n\n  /** Set generic list ID\n   * @param id - generic list ID\n   * @returns generic list builder based on ID provided.\n   */\n  id(id: string): ConcreteImpl {\n    return this.clone({id})\n  }\n\n  /** Get generic list ID\n   * @returns generic list ID\n   */\n  getId(): TList['id'] {\n    return this.spec.id\n  }\n\n  /** Set generic list title\n   * @param title - generic list title\n   * @returns generic list builder based on title and ID provided.\n   */\n  title(title: string): ConcreteImpl {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get generic list title\n   * @returns generic list title\n   */\n  getTitle(): TList['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ConcreteImpl {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): TList['i18n'] {\n    return this.spec.i18n\n  }\n\n  /** Set generic list layout\n   * @param defaultLayout - generic list layout key.\n   * @returns generic list builder based on layout provided.\n   */\n  defaultLayout(defaultLayout: PreviewLayoutKey): ConcreteImpl {\n    return this.clone({defaultLayout})\n  }\n\n  /** Get generic list layout\n   * @returns generic list layout\n   */\n  getDefaultLayout(): TList['defaultLayout'] {\n    return this.spec.defaultLayout\n  }\n\n  /** Set generic list menu items\n   * @param menuItems - generic list menu items. See {@link MenuItem} and {@link MenuItemBuilder}\n   * @returns generic list builder based on menu items provided.\n   */\n  menuItems(menuItems: (MenuItem | MenuItemBuilder)[] | undefined): ConcreteImpl {\n    return this.clone({menuItems})\n  }\n\n  /** Get generic list menu items\n   * @returns generic list menu items\n   */\n  getMenuItems(): TList['menuItems'] {\n    return this.spec.menuItems\n  }\n\n  /** Set generic list menu item groups\n   * @param menuItemGroups - generic list menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder}\n   * @returns generic list builder based on menu item groups provided.\n   */\n  menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ConcreteImpl {\n    return this.clone({menuItemGroups})\n  }\n\n  /** Get generic list menu item groups\n   * @returns generic list menu item groups\n   */\n  getMenuItemGroups(): TList['menuItemGroups'] {\n    return this.spec.menuItemGroups\n  }\n\n  /** Set generic list child\n   * @param child - generic list child. See {@link Child}\n   * @returns generic list builder based on child provided (clone).\n   */\n  child(child: Child): ConcreteImpl {\n    return this.clone({child})\n  }\n\n  /** Get generic list child\n   * @returns generic list child\n   */\n  getChild(): TList['child'] {\n    return this.spec.child\n  }\n\n  /** Set generic list can handle intent\n   * @param canHandleIntent - generic list intent checker. See {@link IntentChecker}\n   * @returns generic list builder based on can handle intent provided.\n   */\n  canHandleIntent(canHandleIntent?: IntentChecker): ConcreteImpl {\n    return this.clone({canHandleIntent})\n  }\n\n  /** Get generic list can handle intent\n   * @returns generic list can handle intent\n   */\n  getCanHandleIntent(): TList['canHandleIntent'] {\n    return this.spec.canHandleIntent\n  }\n\n  /** Set generic list display options\n   * @param enabled - allow / disallow for showing icons\n   * @returns generic list builder based on display options (showIcons) provided.\n   */\n  showIcons(enabled = true): ConcreteImpl {\n    return this.clone({\n      displayOptions: {...(this.spec.displayOptions || {}), showIcons: enabled},\n    })\n  }\n\n  /** Get generic list display options\n   * @returns generic list display options (specifically showIcons)\n   */\n  getShowIcons(): boolean | undefined {\n    return this.spec.displayOptions ? this.spec.displayOptions.showIcons : undefined\n  }\n\n  /** Set generic list initial value templates\n   * @param templates - generic list initial value templates. See {@link InitialValueTemplateItemBuilder}\n   * @returns generic list builder based on templates provided.\n   */\n  initialValueTemplates(\n    templates:\n      | InitialValueTemplateItem\n      | InitialValueTemplateItemBuilder\n      | Array<InitialValueTemplateItem | InitialValueTemplateItemBuilder>,\n  ): ConcreteImpl {\n    this.initialValueTemplatesSpecified = true\n    return this.clone({initialValueTemplates: Array.isArray(templates) ? templates : [templates]})\n  }\n\n  /** Get generic list initial value templates\n   * @returns generic list initial value templates\n   */\n  getInitialValueTemplates(): TList['initialValueTemplates'] {\n    return this.spec.initialValueTemplates\n  }\n\n  /** Serialize generic list\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns generic list object based on path provided in options. See {@link GenericList}\n   */\n  serialize(options: SerializeOptions = {path: []}): GenericList {\n    const id = this.spec.id || ''\n    const path = options.path\n\n    const defaultLayout = this.spec.defaultLayout\n    if (defaultLayout && !layoutOptions.includes(defaultLayout)) {\n      throw new SerializeError(\n        `\\`layout\\` must be one of ${layoutOptions.map((item) => `\"${item}\"`).join(', ')}`,\n        path,\n        id || options.index,\n        this.spec.title,\n      )\n    }\n\n    const initialValueTemplates = (this.spec.initialValueTemplates || []).map((item, i) =>\n      maybeSerializeInitialValueTemplateItem(item, i, path),\n    )\n\n    return {\n      id: validateId(id, options.path, id || options.index),\n      title: this.spec.title,\n      i18n: this.spec.i18n,\n      type: 'genericList',\n      defaultLayout,\n      child: this.spec.child || noChildResolver,\n      canHandleIntent: this.spec.canHandleIntent || shallowIntentChecker,\n      displayOptions: this.spec.displayOptions,\n      initialValueTemplates,\n      menuItems: (this.spec.menuItems || []).map((item, i) =>\n        maybeSerializeMenuItem(item, i, path),\n      ),\n      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) =>\n        maybeSerializeMenuItemGroup(item, i, path),\n      ),\n    }\n  }\n\n  /** Clone generic list builder (allows for options overriding)\n   * @param _withSpec - generic list options.\n   * @returns generic list builder.\n   */\n  abstract clone(_withSpec?: object): ConcreteImpl\n}\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {AddIcon} from '@sanity/icons'\nimport {type SchemaType, type SortOrderingItem} from '@sanity/types'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, type InitialValueTemplateItem} from 'sanity'\n\nimport {type ChildResolver, type ChildResolverOptions, type ItemChild} from './ChildResolver'\nimport {DocumentBuilder} from './Document'\nimport {\n  type BuildableGenericList,\n  type GenericList,\n  GenericListBuilder,\n  type GenericListInput,\n} from './GenericList'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Child, type SerializeOptions} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {resolveTypeForDocument} from './util/resolveTypeForDocument'\n\nconst validateFilter = (spec: PartialDocumentList, options: SerializeOptions) => {\n  const filter = spec.options?.filter.trim() || ''\n\n  if (['*', '{'].includes(filter[0])) {\n    throw new SerializeError(\n      `\\`filter\\` cannot start with \\`${filter[0]}\\` - looks like you are providing a query, not a filter`,\n      options.path,\n      spec.id,\n      spec.title,\n    ).withHelpUrl(HELP_URL.QUERY_PROVIDED_FOR_FILTER)\n  }\n\n  return filter\n}\n\nconst createDocumentChildResolverForItem =\n  (context: StructureContext): ChildResolver =>\n  (itemId: string, options: ChildResolverOptions): ItemChild | Promise<ItemChild> | undefined => {\n    const parentItem = options.parent as DocumentList\n    const template = options.params?.template\n      ? context.templates.find((tpl) => tpl.id === options.params.template)\n      : undefined\n    const type = template\n      ? template.schemaType\n      : parentItem.schemaTypeName || resolveTypeForDocument(context.getClient, itemId)\n\n    return Promise.resolve(type).then((schemaType) =>\n      schemaType\n        ? context.resolveDocumentNode({schemaType, documentId: itemId})\n        : new DocumentBuilder(context).id('editor').documentId(itemId).schemaType(''),\n    )\n  }\n\n/**\n * Partial document list\n *\n * @public\n */\nexport interface PartialDocumentList extends BuildableGenericList {\n  /** Document list options. See {@link DocumentListOptions} */\n  options?: DocumentListOptions\n  /** Schema type name */\n  schemaTypeName?: string\n}\n\n/**\n * Interface for document list input\n *\n * @public\n */\nexport interface DocumentListInput extends GenericListInput {\n  /** Document list options. See {@link DocumentListOptions} */\n  options: DocumentListOptions\n}\n\n/**\n * Interface for document list\n *\n * @public\n */\nexport interface DocumentList extends GenericList {\n  type: 'documentList'\n  /** Document list options. See {@link DocumentListOptions} */\n  options: DocumentListOptions\n  /** Document list child. See {@link Child} */\n  child: Child\n  /** Document schema type name */\n  schemaTypeName?: string\n}\n\n/**\n * Interface for document List options\n *\n * @public\n */\nexport interface DocumentListOptions {\n  /** Document list filter */\n  filter: string\n  /** Document list parameters */\n  params?: Record<string, unknown>\n  /** Document list API version */\n  apiVersion?: string\n  /** Document list API default ordering array. */\n  defaultOrdering?: SortOrderingItem[]\n}\n\n/**\n * Class for building document list\n *\n * @public\n */\nexport class DocumentListBuilder extends GenericListBuilder<\n  PartialDocumentList,\n  DocumentListBuilder\n> {\n  /** Document list options. See {@link PartialDocumentList} */\n  protected spec: PartialDocumentList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListInput,\n  ) {\n    super()\n    this.spec = spec || {}\n    this.initialValueTemplatesSpecified = Boolean(spec?.initialValueTemplates)\n  }\n\n  /** Set API version\n   * @param apiVersion - API version\n   * @returns document list builder based on the options and API version provided. See {@link DocumentListBuilder}\n   */\n  apiVersion(apiVersion: string): DocumentListBuilder {\n    return this.clone({options: {...(this.spec.options || {filter: ''}), apiVersion}})\n  }\n\n  /** Get API version\n   * @returns API version\n   */\n  getApiVersion(): string | undefined {\n    return this.spec.options?.apiVersion\n  }\n\n  /** Set Document list filter\n   * @param filter - GROQ-filter used to determine which documents to display. Do not support joins, since they operate on individual documents, and will ignore order-clauses and projections. See {@link https://www.sanity.io/docs/realtime-updates}\n   * @returns document list builder based on the options and filter provided. See {@link DocumentListBuilder}\n   */\n  filter(filter: string): DocumentListBuilder {\n    return this.clone({options: {...(this.spec.options || {}), filter}})\n  }\n\n  /** Get Document list filter\n   * @returns filter\n   */\n  getFilter(): string | undefined {\n    return this.spec.options?.filter\n  }\n\n  /** Set Document list schema type name\n   * @param type - schema type name.\n   * @returns document list builder based on the schema type name provided. See {@link DocumentListBuilder}\n   */\n  schemaType(type: SchemaType | string): DocumentListBuilder {\n    const schemaTypeName = typeof type === 'string' ? type : type.name\n    return this.clone({schemaTypeName})\n  }\n\n  /** Get Document list schema type name\n   * @returns schema type name\n   */\n  getSchemaType(): string | undefined {\n    return this.spec.schemaTypeName\n  }\n\n  /** Set Document list options' parameters\n   * @param params - parameters\n   * @returns document list builder based on the options provided. See {@link DocumentListBuilder}\n   */\n  params(params: Record<string, unknown>): DocumentListBuilder {\n    return this.clone({\n      options: {...(this.spec.options || {filter: ''}), params},\n    })\n  }\n\n  /** Get Document list options' parameters\n   * @returns options\n   */\n  getParams(): Record<string, unknown> | undefined {\n    return this.spec.options?.params\n  }\n\n  /** Set Document list default ordering\n   * @param ordering - default sort ordering array. See {@link SortOrderingItem}\n   * @returns document list builder based on ordering provided. See {@link DocumentListBuilder}\n   */\n  defaultOrdering(ordering: SortOrderingItem[]): DocumentListBuilder {\n    if (!Array.isArray(ordering)) {\n      throw new Error('`defaultOrdering` must be an array of order clauses')\n    }\n\n    return this.clone({\n      options: {...(this.spec.options || {filter: ''}), defaultOrdering: ordering},\n    })\n  }\n\n  /** Get Document list default ordering\n   * @returns default ordering. See {@link SortOrderingItem}\n   */\n  getDefaultOrdering(): SortOrderingItem[] | undefined {\n    return this.spec.options?.defaultOrdering\n  }\n\n  /** Serialize Document list\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document list object based on path provided in options. See {@link DocumentList}\n   */\n  serialize(options: SerializeOptions = {path: []}): DocumentList {\n    if (typeof this.spec.id !== 'string' || !this.spec.id) {\n      throw new SerializeError(\n        '`id` is required for document lists',\n        options.path,\n        options.index,\n        this.spec.title,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!this.spec.options || !this.spec.options.filter) {\n      throw new SerializeError(\n        '`filter` is required for document lists',\n        options.path,\n        this.spec.id,\n        this.spec.title,\n      ).withHelpUrl(HELP_URL.FILTER_REQUIRED)\n    }\n\n    const hasSimpleFilter = this.spec.options?.filter === '_type == $type'\n    if (!hasSimpleFilter && this.spec.options.filter && !this.spec.options.apiVersion) {\n      console.warn(\n        `No apiVersion specified for document type list with custom filter: \\`${this.spec.options.filter}\\`. This will be required in the future. See %s for more info.`,\n        generateHelpUrl(HELP_URL.API_VERSION_REQUIRED_FOR_CUSTOM_FILTER),\n      )\n    }\n    return {\n      ...super.serialize(options),\n      type: 'documentList',\n      schemaTypeName: this.spec.schemaTypeName,\n      child: this.spec.child || createDocumentChildResolverForItem(this._context),\n      options: {\n        ...this.spec.options,\n        // @todo: make specifying .apiVersion required when using custom (non-simple) filters in v4\n        apiVersion: this.spec.options.apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n        filter: validateFilter(this.spec, options),\n      },\n    }\n  }\n\n  /** Clone Document list builder (allows for options overriding)\n   * @param withSpec - override document list spec. See {@link PartialDocumentList}\n   * @returns document list builder. See {@link DocumentListBuilder}\n   */\n  clone(withSpec?: PartialDocumentList): DocumentListBuilder {\n    const builder = new DocumentListBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n\n    if (!this.initialValueTemplatesSpecified) {\n      builder.spec.initialValueTemplates = inferInitialValueTemplates(this._context, builder.spec)\n    }\n\n    if (!builder.spec.schemaTypeName) {\n      builder.spec.schemaTypeName = inferTypeName(builder.spec)\n    }\n\n    return builder\n  }\n\n  /** Get Document list spec\n   * @returns document list spec. See {@link PartialDocumentList}\n   */\n  getSpec(): PartialDocumentList {\n    return this.spec\n  }\n}\n\nfunction inferInitialValueTemplates(\n  context: StructureContext,\n  spec: PartialDocumentList,\n): InitialValueTemplateItem[] | undefined {\n  const {document} = context\n  const {schemaTypeName, options} = spec\n  const {filter, params} = options || {filter: '', params: {}}\n  const typeNames = schemaTypeName\n    ? [schemaTypeName]\n    : Array.from(new Set(getTypeNamesFromFilter(filter, params)))\n\n  if (typeNames.length === 0) {\n    return undefined\n  }\n\n  return typeNames\n    .flatMap((schemaType) =>\n      document.resolveNewDocumentOptions({\n        type: 'structure',\n        schemaType,\n      }),\n    )\n    .map((option) => ({...option, icon: AddIcon}))\n}\n\nfunction inferTypeName(spec: PartialDocumentList): string | undefined {\n  const {options} = spec\n  const {filter, params} = options || {filter: '', params: {}}\n  const typeNames = getTypeNamesFromFilter(filter, params)\n  return typeNames.length === 1 ? typeNames[0] : undefined\n}\n\n/** @internal */\nexport function getTypeNamesFromFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  let typeNames = getTypeNamesFromEqualityFilter(filter, params)\n\n  if (typeNames.length === 0) {\n    typeNames = getTypeNamesFromInTypesFilter(filter, params)\n  }\n\n  return typeNames\n}\n\n// From _type == \"movie\" || _type == $otherType\nfunction getTypeNamesFromEqualityFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  const pattern =\n    /\\b_type\\s*==\\s*(['\"].*?['\"]|\\$.*?(?:\\s|$))|\\B(['\"].*?['\"]|\\$.*?(?:\\s|$))\\s*==\\s*_type/g\n  const matches: string[] = []\n  let match\n  while ((match = pattern.exec(filter)) !== null) {\n    matches.push(match[1] || match[2])\n  }\n\n  return matches\n    .map((candidate) => {\n      const typeName = candidate[0] === '$' ? params[candidate.slice(1)] : candidate\n      const normalized = ((typeName as string) || '').trim().replace(/^[\"']|[\"']$/g, '')\n      return normalized\n    })\n    .filter(Boolean)\n}\n\n// From _type in [\"dog\", \"cat\", $otherSpecies]\nfunction getTypeNamesFromInTypesFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  const pattern = /\\b_type\\s+in\\s+\\[(.*?)\\]/\n  const matches = filter.match(pattern)\n  if (!matches) {\n    return []\n  }\n\n  return matches[1]\n    .split(/,\\s*/)\n    .map((match) => match.trim().replace(/^[\"']+|[\"']+$/g, ''))\n    .map((item) => (item[0] === '$' ? params[item.slice(1)] : item))\n    .filter(Boolean) as string[]\n}\n","import {find} from 'lodash'\nimport {isRecord} from 'sanity'\n\nimport {type ChildResolver, type ChildResolverOptions} from './ChildResolver'\nimport {isDocumentListItem} from './DocumentListItem'\nimport {\n  type BuildableGenericList,\n  type GenericList,\n  GenericListBuilder,\n  type GenericListInput,\n  shallowIntentChecker,\n} from './GenericList'\nimport {type IntentChecker} from './Intent'\nimport {type ListItem, ListItemBuilder} from './ListItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Divider, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\nconst getArgType = (thing: ListItem) => {\n  if (thing instanceof ListBuilder) {\n    return 'ListBuilder'\n  }\n\n  if (isPromise<ListItem>(thing)) {\n    return 'Promise'\n  }\n\n  return Array.isArray(thing) ? 'array' : typeof thing\n}\n\nconst isListItem = (item: ListItem | Divider): item is ListItem => {\n  return item.type === 'listItem'\n}\n\nconst defaultCanHandleIntent: IntentChecker = (intentName: string, params, context) => {\n  const pane = context.pane as List\n  const items = pane.items || []\n  return (\n    items\n      .filter(isDocumentListItem)\n      .some((item) => item.schemaType.name === params.type && item._id === params.id) ||\n    shallowIntentChecker(intentName, params, context)\n  )\n}\n\nconst resolveChildForItem: ChildResolver = (itemId: string, options: ChildResolverOptions) => {\n  const parentItem = options.parent as List\n  const items = parentItem.items.filter(isListItem)\n  const target = (items.find((item) => item.id === itemId) || {child: undefined}).child\n\n  if (!target || typeof target !== 'function') {\n    return target\n  }\n\n  return typeof target === 'function' ? target(itemId, options) : target\n}\n\nfunction maybeSerializeListItem(\n  item: ListItem | ListItemBuilder | Divider,\n  index: number,\n  path: SerializePath,\n): ListItem | Divider {\n  if (item instanceof ListItemBuilder) {\n    return item.serialize({path, index})\n  }\n\n  const listItem = item as ListItem\n  if (listItem && listItem.type === 'divider') {\n    return item as Divider\n  }\n\n  if (!listItem || listItem.type !== 'listItem') {\n    const gotWhat = (listItem && listItem.type) || getArgType(listItem)\n    const helpText = gotWhat === 'array' ? ' - did you forget to spread (...moreItems)?' : ''\n    throw new SerializeError(\n      `List items must be of type \"listItem\", got \"${gotWhat}\"${helpText}`,\n      path,\n      index,\n    ).withHelpUrl(HELP_URL.INVALID_LIST_ITEM)\n  }\n\n  return item\n}\n\nfunction isPromise<T>(thing: unknown): thing is PromiseLike<T> {\n  return isRecord(thing) && typeof thing.then === 'function'\n}\n\n/**\n * Interface for List\n *\n * @public\n */\nexport interface List extends GenericList {\n  type: 'list'\n  /** List items. See {@link ListItem} and {@link Divider} */\n  items: (ListItem | Divider)[]\n}\n\n/**\n * Interface for list input\n *\n * @public\n */\nexport interface ListInput extends GenericListInput {\n  /** List input items array. See {@link ListItem}, {@link ListItemBuilder} and {@link Divider} */\n  items?: (ListItem | ListItemBuilder | Divider)[]\n}\n\n/**\n * Interface for buildable list\n *\n * @public\n */\nexport interface BuildableList extends BuildableGenericList {\n  /** List items. See {@link ListItem}, {@link ListItemBuilder} and {@link Divider} */\n  items?: (ListItem | ListItemBuilder | Divider)[]\n}\n\n/**\n * A `ListBuilder` is used to build a list of items in the structure tool.\n *\n * @public */\nexport class ListBuilder extends GenericListBuilder<BuildableList, ListBuilder> {\n  /** buildable list option object. See {@link BuildableList} */\n  protected spec: BuildableList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: ListInput,\n  ) {\n    super()\n    this.spec = spec ? spec : {}\n    this.initialValueTemplatesSpecified = Boolean(spec && spec.initialValueTemplates)\n  }\n\n  /**\n   * Set list builder based on items provided\n   * @param items - list items. See {@link ListItemBuilder}, {@link ListItem} and {@link Divider}\n   * @returns list builder based on items provided. See {@link ListBuilder}\n   */\n  items(items: (ListItemBuilder | ListItem | Divider)[]): ListBuilder {\n    return this.clone({items})\n  }\n\n  /** Get list builder items\n   * @returns list items. See {@link BuildableList}\n   */\n  getItems(): BuildableList['items'] {\n    return this.spec.items\n  }\n\n  /** Serialize list builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns list based on path in options. See {@link List}\n   */\n  serialize(options: SerializeOptions = {path: []}): List {\n    const id = this.spec.id\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for lists',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    const items = typeof this.spec.items === 'undefined' ? [] : this.spec.items\n    if (!Array.isArray(items)) {\n      throw new SerializeError(\n        '`items` must be an array of items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.LIST_ITEMS_MUST_BE_ARRAY)\n    }\n\n    const path = (options.path || []).concat(id)\n    const serializedItems = items.map((item, index) => maybeSerializeListItem(item, index, path))\n    const dupes = serializedItems.filter((val, i) => find(serializedItems, {id: val.id}, i + 1))\n\n    if (dupes.length > 0) {\n      const dupeIds = dupes.map((item) => item.id).slice(0, 5)\n      const dupeDesc = dupes.length > 5 ? `${dupeIds.join(', ')}...` : dupeIds.join(', ')\n      throw new SerializeError(\n        `List items with same ID found (${dupeDesc})`,\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.LIST_ITEM_IDS_MUST_BE_UNIQUE)\n    }\n\n    return {\n      ...super.serialize(options),\n      type: 'list',\n      canHandleIntent: this.spec.canHandleIntent || defaultCanHandleIntent,\n      child: this.spec.child || resolveChildForItem,\n      items: serializedItems,\n    }\n  }\n\n  /**\n   * Clone list builder and return new list builder based on context and spec provided\n   * @param withSpec - list options. See {@link BuildableList}\n   * @returns new list builder based on context and spec provided. See {@link ListBuilder}\n   */\n  clone(withSpec?: BuildableList): ListBuilder {\n    const builder = new ListBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SchemaType} from '@sanity/types'\nimport {type Observable} from 'rxjs'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type ChildResolver, type ItemChild} from './ChildResolver'\nimport {ComponentBuilder} from './Component'\nimport {DocumentBuilder} from './Document'\nimport {DocumentListBuilder} from './DocumentList'\nimport {ListBuilder} from './List'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Collection,\n  type CollectionBuilder,\n  type Serializable,\n  type SerializeOptions,\n} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\n/**\n * Unserialized list item child.\n * See {@link Collection}, {@link CollectionBuilder}, {@link ChildResolver} and {@link ItemChild}\n *\n * @public\n */\nexport type UnserializedListItemChild =\n  | Collection\n  | CollectionBuilder\n  | ChildResolver\n  | Observable<ItemChild>\n\n/**\n * Child of List Item\n * See {@link Collection}, {@link ChildResolver}, {@link ItemChild}\n * @public\n */\nexport type ListItemChild = Collection | ChildResolver | Observable<ItemChild> | undefined\n\n/**\n * Interface for serialize list item options\n *\n * @public\n */\nexport interface ListItemSerializeOptions extends SerializeOptions {\n  /** Check if list item title is optional */\n  titleIsOptional?: boolean\n}\n\n/**\n * Interface for ist item display options\n *\n * @public */\nexport interface ListItemDisplayOptions {\n  /** Check if list item display should show icon */\n  showIcon?: boolean\n}\n\n/**\n * interface for list item input\n *\n * @public */\nexport interface ListItemInput {\n  /** List item id */\n  id: string\n  /** List item title */\n  title?: string\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link ListItemChild} */\n  child?: ListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema type. See {@link SchemaType} */\n  schemaType?: SchemaType | string\n}\n\n/**\n * Interface for List Item\n *\n * @public */\nexport interface ListItem {\n  /** List item id */\n  id: string\n  /** List item type */\n  type: string\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /** List item title. Note that the `i18n` key and namespace will take precedence. */\n  title?: string\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link ListItemChild} */\n  child?: ListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema type. See {@link SchemaType} */\n  schemaType?: SchemaType\n}\n\n/**\n * Interface for unserialized list items.\n *\n * @public\n */\nexport interface UnserializedListItem {\n  /** List item ID */\n  id: string\n  /** List item title */\n  title: string\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link UnserializedListItemChild} */\n  child?: UnserializedListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema. See {@link SchemaType} */\n  schemaType?: SchemaType | string\n}\n\n/**\n * Partial list item. See {@link UnserializedListItem}\n *\n * @public */\nexport type PartialListItem = Partial<UnserializedListItem>\n\n/**\n * Class for building list items\n *\n * @public */\nexport class ListItemBuilder implements Serializable<ListItem> {\n  /** List item option object. See {@link PartialListItem} */\n  protected spec: PartialListItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: ListItemInput,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set list item ID\n   * @returns list item builder based on ID provided. See {@link ListItemBuilder}\n   */\n  id(id: string): ListItemBuilder {\n    return this.clone({id})\n  }\n\n  /**\n   * Get list item ID\n   * @returns list item ID. See {@link PartialListItem}\n   */\n  getId(): PartialListItem['id'] {\n    return this.spec.id\n  }\n\n  /**\n   * Set list item title\n   * @returns list item builder based on title provided. See {@link ListItemBuilder}\n   */\n  title(title: string): ListItemBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /**\n   * Get list item title\n   * @returns list item title. See {@link PartialListItem}\n   */\n  getTitle(): PartialListItem['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ListItemBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /**\n   * Set list item icon\n   * @returns list item builder based on icon provided. See {@link ListItemBuilder}\n   */\n  icon(icon: React.ComponentType | React.ReactNode): ListItemBuilder {\n    return this.clone({icon})\n  }\n\n  /**\n   * Set if list item should show icon\n   * @returns list item builder based on showIcon provided. See {@link ListItemBuilder}\n   */\n  showIcon(enabled = true): ListItemBuilder {\n    return this.clone({\n      displayOptions: {...(this.spec.displayOptions || {}), showIcon: enabled},\n    })\n  }\n\n  /**\n   * Check if list item should show icon\n   * @returns true if it should show the icon, false if not, undefined if not set\n   */\n  getShowIcon(): boolean | undefined {\n    return this.spec.displayOptions ? this.spec.displayOptions.showIcon : undefined\n  }\n\n  /**\n   *Get list item icon\n   * @returns list item icon. See {@link PartialListItem}\n   */\n  getIcon(): PartialListItem['icon'] {\n    return this.spec.icon\n  }\n\n  /**\n   * Set list item child\n   * @param child - list item child. See {@link UnserializedListItemChild}\n   * @returns list item builder based on child provided. See {@link ListItemBuilder}\n   */\n  child(child: UnserializedListItemChild): ListItemBuilder {\n    return this.clone({child})\n  }\n\n  /**\n   * Get list item child\n   * @returns list item child. See {@link PartialListItem}\n   */\n  getChild(): PartialListItem['child'] {\n    return this.spec.child\n  }\n\n  /**\n   * Set list item schema type\n   * @param schemaType - list item schema type. See {@link SchemaType}\n   * @returns list item builder based on schema type provided. See {@link ListItemBuilder}\n   */\n  schemaType(schemaType: SchemaType | string): ListItemBuilder {\n    return this.clone({schemaType})\n  }\n\n  /**\n   * Get list item schema type\n   * @returns list item schema type. See {@link PartialListItem}\n   */\n  getSchemaType(): PartialListItem['schemaType'] {\n    const schemaType = this.spec.schemaType\n\n    if (typeof schemaType === 'string') {\n      return this._context.schema.get(schemaType)\n    }\n\n    return this.spec.schemaType\n  }\n\n  /** Serialize list item builder\n   * @param options - serialization options. See {@link ListItemSerializeOptions}\n   * @returns list item node based on path provided in options. See {@link ListItem}\n   */\n  serialize(options: ListItemSerializeOptions = {path: []}): ListItem {\n    const {id, title, child} = this.spec\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for list items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!options.titleIsOptional && (typeof title !== 'string' || !title)) {\n      throw new SerializeError('`title` is required for list items', options.path, id).withHelpUrl(\n        HELP_URL.TITLE_REQUIRED,\n      )\n    }\n\n    let schemaType = this.spec.schemaType\n    if (typeof schemaType === 'string') {\n      const type = this._context.schema.get(schemaType)\n      if (!type) {\n        throw new SerializeError(\n          `Could not find type \"${schemaType}\" in schema`,\n          options.path,\n          id,\n        ).withHelpUrl(HELP_URL.SCHEMA_TYPE_NOT_FOUND)\n      }\n\n      schemaType = type\n    }\n\n    const serializeOptions = {path: options.path.concat(id), hint: 'child'}\n    let listChild =\n      child instanceof ComponentBuilder ||\n      child instanceof DocumentListBuilder ||\n      child instanceof DocumentBuilder ||\n      child instanceof ListBuilder\n        ? child.serialize(serializeOptions)\n        : child\n\n    // In the case of a function, create a bound version that will pass the correct serialize\n    // context, so we may lazily resolve it at some point in the future without losing context\n    if (typeof listChild === 'function') {\n      const originalChild = listChild\n      listChild = (itemId, childOptions) => {\n        return originalChild(itemId, {...childOptions, serializeOptions})\n      }\n    }\n\n    return {\n      ...this.spec,\n      id: validateId(id, options.path, options.index),\n      schemaType,\n      child: listChild,\n      title,\n      type: 'listItem',\n    }\n  }\n\n  /** Clone list item builder\n   * @param withSpec - partial list item options. See {@link PartialListItem}\n   * @returns list item builder based on context and spec provided. See {@link ListItemBuilder}\n   */\n  clone(withSpec?: PartialListItem): ListItemBuilder {\n    const builder = new ListItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SchemaType} from '@sanity/types'\nimport {isRecord} from 'sanity'\n\nimport {DocumentBuilder} from './Document'\nimport {\n  type ListItem,\n  ListItemBuilder,\n  type ListItemInput,\n  type UnserializedListItem,\n} from './ListItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type SerializeOptions} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * Interface for document list item input\n *\n * @public\n */\nexport interface DocumentListItemInput extends ListItemInput {\n  /** Document list item input schema type. See {@link SchemaType} */\n  schemaType: SchemaType | string\n}\n\n/**\n * Interface for document list item\n *\n * @public\n */\nexport interface DocumentListItem extends ListItem {\n  /** Document schema type. See {@link SchemaType} */\n  schemaType: SchemaType\n  /** Document ID */\n  _id: string\n}\n\n/**\n * Partial document list item\n *\n * @public\n */\nexport type PartialDocumentListItem = Partial<UnserializedListItem>\n\nconst createDefaultChildResolver =\n  (context: StructureContext, spec: PartialDocumentListItem) => (documentId: string) => {\n    const schemaType =\n      spec.schemaType &&\n      (typeof spec.schemaType === 'string' ? spec.schemaType : spec.schemaType.name)\n\n    return schemaType\n      ? context.resolveDocumentNode({schemaType, documentId})\n      : new DocumentBuilder(context).id('documentEditor').documentId(documentId)\n  }\n\n/**\n * Class for building a document list item\n *\n * @public\n */\nexport class DocumentListItemBuilder extends ListItemBuilder {\n  /** Document list options. See {@link PartialDocumentListItem} */\n  protected spec: PartialDocumentListItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListItemInput,\n  ) {\n    super(_context, spec)\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Serialize document list item\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document list item object based on path provided in options. See {@link DocumentListItem}\n   */\n  serialize(options: SerializeOptions = {path: []}): DocumentListItem {\n    const spec = super.serialize({...options, titleIsOptional: true})\n\n    if (!spec.schemaType) {\n      throw new SerializeError(\n        '`schemaType` is required for document list items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.SCHEMA_TYPE_REQUIRED)\n    }\n\n    const child = spec.child || createDefaultChildResolver(this._context, spec)\n    return {...spec, child, schemaType: spec.schemaType, _id: spec.id}\n  }\n\n  /** Clone Document list item builder (allows for options overriding)\n   * @param withSpec - Document list item builder options. See {@link PartialDocumentListItem}\n   * @returns document list item builder. See {@link DocumentListItemBuilder}\n   */\n  clone(withSpec?: PartialDocumentListItem): DocumentListItemBuilder {\n    const builder = new DocumentListItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n\n/** @internal */\nexport function isDocumentListItem(item: unknown): item is DocumentListItem {\n  return isRecord(item) && typeof item.schemaType !== 'undefined' && typeof item._id === 'string'\n}\n","import {type SchemaType} from '@sanity/types'\n\nimport {DocumentListBuilder, type DocumentListInput, type PartialDocumentList} from './DocumentList'\nimport {type GenericListInput} from './GenericList'\nimport {DEFAULT_INTENT_HANDLER} from './Intent'\nimport {type Child} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * Interface for document type list input\n *\n * @public\n */\nexport interface DocumentTypeListInput extends Partial<GenericListInput> {\n  /** Document type list input schema type. See {@link SchemaType} */\n  schemaType: SchemaType | string\n}\n\n/**\n * Class for building a document type list\n *\n * @public\n */\nexport class DocumentTypeListBuilder extends DocumentListBuilder {\n  /** Document list options. See {@link PartialDocumentList} */\n  protected spec: PartialDocumentList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListInput,\n  ) {\n    super(_context)\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set Document type list child\n   * @param child - Child component. See {@link Child}\n   * @returns document type list builder based on child component provided without default intent handler. See {@link DocumentTypeListBuilder}\n   */\n  child(child: Child): DocumentTypeListBuilder {\n    return this.cloneWithoutDefaultIntentHandler({child})\n  }\n\n  /** Clone Document type list builder (allows for options overriding)\n   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}\n   * @returns document type list builder. See {@link DocumentTypeListBuilder}\n   */\n  clone(withSpec?: PartialDocumentList): DocumentTypeListBuilder {\n    const parent = super.clone(withSpec)\n    const builder = new DocumentTypeListBuilder(this._context)\n    builder.spec = {...this.spec, ...parent.getSpec(), ...(withSpec || {})}\n    return builder\n  }\n\n  /** Clone Document type list builder (allows for options overriding) and remove default intent handler\n   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}\n   * @returns document type list builder without default intent handler. See {@link DocumentTypeListBuilder}\n   */\n  cloneWithoutDefaultIntentHandler(withSpec?: PartialDocumentList): DocumentTypeListBuilder {\n    const parent = super.clone(withSpec)\n    const builder = new DocumentTypeListBuilder(this._context)\n    const canHandleIntent = this.spec.canHandleIntent\n    const shouldOverride = canHandleIntent && canHandleIntent.identity === DEFAULT_INTENT_HANDLER\n    const override = shouldOverride ? {canHandleIntent: undefined} : {}\n    builder.spec = {\n      ...parent.getSpec(),\n      ...this.spec,\n      ...(withSpec || {}),\n      ...override,\n    }\n    return builder\n  }\n}\n","import {StackCompactIcon, StackIcon} from '@sanity/icons'\nimport {type SchemaType} from '@sanity/types'\nimport {startCase} from 'lodash'\n\nimport {structureLocaleNamespace} from '../i18n'\nimport {type DocumentListBuilder} from './DocumentList'\nimport {DocumentTypeListBuilder, type DocumentTypeListInput} from './DocumentTypeList'\nimport {defaultIntentChecker} from './Intent'\nimport {type List} from './List'\nimport {type ListItem, ListItemBuilder} from './ListItem'\nimport {getOrderingMenuItemsForSchemaType, MenuItemBuilder} from './MenuItem'\nimport {DEFAULT_SELECTED_ORDERING_OPTION} from './Sort'\nimport {type Collection} from './StructureNodes'\nimport {type StructureContext} from './types'\n\nconst BUNDLED_DOC_TYPES = ['sanity.imageAsset', 'sanity.fileAsset']\n\nfunction isBundledDocType(typeName: string) {\n  return BUNDLED_DOC_TYPES.includes(typeName)\n}\n\nfunction isDocumentType(schemaType: SchemaType) {\n  return schemaType.type?.name === 'document'\n}\n\nfunction isList(collection: Collection): collection is List {\n  return collection.type === 'list'\n}\n\nexport function getDocumentTypes({schema}: StructureContext): string[] {\n  return schema\n    .getTypeNames()\n    .filter((n) => {\n      const schemaType = schema.get(n)\n      return schemaType && isDocumentType(schemaType)\n    })\n    .filter((n) => !isBundledDocType(n))\n}\n\nexport function getDocumentTypeListItems(context: StructureContext): ListItemBuilder[] {\n  const types = getDocumentTypes(context)\n  return types.map((typeName) => getDocumentTypeListItem(context, typeName))\n}\n\nexport function getDocumentTypeListItem(\n  context: StructureContext,\n  typeName: string,\n): ListItemBuilder {\n  const {schema} = context\n\n  const type = schema.get(typeName)\n  if (!type) {\n    throw new Error(`Schema type with name \"${typeName}\" not found`)\n  }\n\n  const title = type.title || startCase(typeName)\n\n  return new ListItemBuilder(context)\n    .id(typeName)\n    .title(title)\n    .schemaType(type)\n    .child((id, childContext) => {\n      const parent = childContext.parent as Collection\n      const parentItem = isList(parent)\n        ? (parent.items.find((item) => item.id === id) as ListItem)\n        : null\n\n      let list = getDocumentTypeList(context, typeName)\n      if (parentItem && parentItem.title) {\n        list = list.title(parentItem.title)\n      }\n\n      return list\n    })\n}\n\nexport function getDocumentTypeList(\n  context: StructureContext,\n  typeNameOrSpec: string | DocumentTypeListInput,\n): DocumentListBuilder {\n  const {schema, resolveDocumentNode} = context\n\n  const schemaType = typeof typeNameOrSpec === 'string' ? typeNameOrSpec : typeNameOrSpec.schemaType\n  const typeName = typeof schemaType === 'string' ? schemaType : schemaType.name\n  const spec: DocumentTypeListInput =\n    typeof typeNameOrSpec === 'string' ? {schemaType} : typeNameOrSpec\n\n  const type = schema.get(typeName)\n  if (!type) {\n    throw new Error(`Schema type with name \"${typeName}\" not found`)\n  }\n\n  const title = type.title || startCase(typeName)\n\n  return new DocumentTypeListBuilder(context)\n    .id(spec.id || typeName)\n    .title(spec.title || title)\n    .filter('_type == $type')\n    .params({type: typeName})\n    .schemaType(type)\n    .defaultOrdering(DEFAULT_SELECTED_ORDERING_OPTION.by)\n    .menuItemGroups(\n      spec.menuItemGroups || [\n        {\n          id: 'sorting',\n          title: 'Sort',\n          i18n: {title: {key: 'menu-item-groups.actions-group', ns: structureLocaleNamespace}},\n        },\n        {\n          id: 'layout',\n          title: 'Layout',\n          i18n: {title: {key: 'menu-item-groups.layout-group', ns: structureLocaleNamespace}},\n        },\n        {\n          id: 'actions',\n          title: 'Actions',\n          i18n: {title: {key: 'menu-item-groups.sorting-group', ns: structureLocaleNamespace}},\n        },\n      ],\n    )\n    .child(\n      spec.child ||\n        ((documentId: string) => resolveDocumentNode({schemaType: typeName, documentId})),\n    )\n    .canHandleIntent(spec.canHandleIntent || defaultIntentChecker)\n    .menuItems(\n      spec.menuItems || [\n        // Create new (from action button) will be added in serialization step of GenericList\n\n        // Sort by <Y>\n        ...getOrderingMenuItemsForSchemaType(context, type),\n\n        // Display as <Z>\n        new MenuItemBuilder(context)\n          .group('layout')\n          .i18n({title: {key: 'menu-items.layout.compact-view', ns: structureLocaleNamespace}})\n          .title('Compact view') // fallback title\n          .icon(StackCompactIcon)\n          .action('setLayout')\n          .params({layout: 'default'}),\n\n        new MenuItemBuilder(context)\n          .group('layout')\n          .i18n({title: {key: 'menu-items.layout.detailed-view', ns: structureLocaleNamespace}})\n          .title('Detailed view') // fallback title\n          .icon(StackIcon)\n          .action('setLayout')\n          .params({layout: 'detail'}),\n\n        // Create new (from menu) will be added in serialization step of GenericList\n      ],\n    )\n}\n","import {type SchemaType} from '@sanity/types'\nimport {uniqueId} from 'lodash'\nimport {isValidElementType} from 'react-is'\nimport {getConfigContextFromSource, getPublishedId, type Source} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\nimport {ComponentBuilder, type ComponentInput} from './Component'\nimport {DocumentBuilder, documentFromEditor, documentFromEditorWithInitialValue} from './Document'\nimport {DocumentListBuilder} from './DocumentList'\nimport {DocumentListItemBuilder} from './DocumentListItem'\nimport {\n  getDocumentTypeList,\n  getDocumentTypeListItem,\n  getDocumentTypeListItems,\n} from './documentTypeListItems'\nimport {\n  defaultInitialValueTemplateItems,\n  InitialValueTemplateItemBuilder,\n  menuItemsFromInitialValueTemplateItems,\n} from './InitialValueTemplateItem'\nimport {ListBuilder} from './List'\nimport {ListItemBuilder} from './ListItem'\nimport {getOrderingMenuItem, getOrderingMenuItemsForSchemaType, MenuItemBuilder} from './MenuItem'\nimport {MenuItemGroupBuilder} from './MenuItemGroup'\nimport {type Divider} from './StructureNodes'\nimport {\n  type DefaultDocumentNodeResolver,\n  type StructureBuilder,\n  type StructureContext,\n  type UserComponent,\n} from './types'\nimport * as views from './views'\n\n/** @internal */\nexport interface StructureBuilderOptions {\n  source: Source\n  defaultDocumentNode?: DefaultDocumentNodeResolver\n}\n\nfunction hasIcon(schemaType?: SchemaType | string): boolean {\n  if (!schemaType || typeof schemaType === 'string') {\n    return false\n  }\n\n  return Boolean(schemaType.icon)\n}\n\nfunction getDefaultStructure(context: StructureContext): ListBuilder {\n  const items = getDocumentTypeListItems(context)\n  return new ListBuilder(context)\n    .id('__root__')\n    .title('Content')\n    .i18n({title: {key: 'default-definition.content-title', ns: structureLocaleNamespace}})\n    .items(items)\n    .showIcons(items.some((item) => hasIcon(item.getSchemaType())))\n}\n\n/** @internal */\nexport function createStructureBuilder({\n  defaultDocumentNode,\n  source,\n}: StructureBuilderOptions): StructureBuilder {\n  const configContext = getConfigContextFromSource(source)\n  const context: StructureContext = {\n    ...source,\n    getStructureBuilder: () => structureBuilder,\n    resolveDocumentNode: (options) => {\n      let builder =\n        defaultDocumentNode?.(structureBuilder, {...options, ...configContext}) ||\n        new DocumentBuilder(context)\n\n      if (!builder.getId()) {\n        builder = builder.id('documentEditor')\n      }\n\n      if (options.documentId) {\n        builder = builder.documentId(getPublishedId(options.documentId))\n      }\n\n      return builder.schemaType(options.schemaType)\n    },\n  }\n\n  const structureBuilder: StructureBuilder = {\n    defaults: () => getDefaultStructure(context),\n    documentTypeList: (...args) => getDocumentTypeList(context, ...args),\n    documentTypeListItem: (...args) => getDocumentTypeListItem(context, ...args),\n    documentTypeListItems: (...args) => getDocumentTypeListItems(context, ...args),\n    document: (...args) => new DocumentBuilder(context, ...args),\n    documentWithInitialValueTemplate: (...args) =>\n      documentFromEditorWithInitialValue(context, ...args),\n    defaultDocument: context.resolveDocumentNode,\n\n    list: (...args) => new ListBuilder(context, ...args),\n    listItem: (...args) => new ListItemBuilder(context, ...args),\n\n    menuItem: (...args) => new MenuItemBuilder(context, ...args),\n    menuItemGroup: (...args) => new MenuItemGroupBuilder(context, ...args),\n    menuItemsFromInitialValueTemplateItems: (...args) =>\n      menuItemsFromInitialValueTemplateItems(context, ...args),\n\n    documentList: (...args) => new DocumentListBuilder(context, ...args),\n    documentListItem: (...args) => new DocumentListItemBuilder(context, ...args),\n\n    orderingMenuItem: (...args) => getOrderingMenuItem(context, ...args),\n    orderingMenuItemsForType: (...args) => getOrderingMenuItemsForSchemaType(context, ...args),\n\n    editor: (...args) => documentFromEditor(context, ...args),\n\n    defaultInitialValueTemplateItems: (...args) =>\n      defaultInitialValueTemplateItems(context, ...args),\n\n    initialValueTemplateItem: (\n      templateId: string,\n      parameters?: Record<string, unknown>,\n    ): InitialValueTemplateItemBuilder =>\n      new InitialValueTemplateItemBuilder(context, {\n        id: templateId,\n        parameters,\n        templateId,\n      }),\n\n    component: (spec?: ComponentInput | UserComponent) => {\n      return isValidElementType(spec)\n        ? new ComponentBuilder().component(spec as UserComponent)\n        : new ComponentBuilder(spec as ComponentInput)\n    },\n\n    divider: (): Divider => ({id: uniqueId('__divider__'), type: 'divider'}),\n\n    view: views,\n    context,\n  }\n\n  return structureBuilder\n}\n","import {type DocumentBadgeComponent} from 'sanity'\n\n/** @internal */\nexport const LiveEditBadge: DocumentBadgeComponent = (props) => {\n  const {liveEdit} = props\n\n  if (liveEdit) {\n    return {\n      label: 'Live',\n      color: 'danger',\n    }\n  }\n\n  return null\n}\nLiveEditBadge.displayName = 'LiveEditBadge'\n","import {uuid} from '@sanity/uuid'\n\nimport {EMPTY_PARAMS, type LOADING_PANE} from './constants'\nimport {type PaneNode, type RouterPanes} from './types'\n\nconst state: {\n  activePanes: Array<PaneNode | typeof LOADING_PANE>\n} = {activePanes: []}\n\nexport function setActivePanes(panes: Array<PaneNode | typeof LOADING_PANE>): void {\n  state.activePanes = panes\n}\n\n/**\n * This function looks at the _active panes_ to resolve an intent. this type of\n * intent resolution is faster and does not cause the panes to reset\n *\n * @internal\n */\nexport function getIntentState(\n  intent: string,\n  params: Record<string, string>,\n  routerState: {panes?: RouterPanes} | undefined,\n  payload: unknown,\n): {panes: RouterPanes} | {intent: string; params: Record<string, string>; payload: unknown} {\n  const panes = routerState?.panes || []\n  const activePanes = state.activePanes || []\n  const editDocumentId = params.id || uuid()\n  const isTemplate = intent === 'create' && params.template\n\n  // Loop through open panes and see if any of them can handle the intent\n  for (let i = activePanes.length - 1; i >= 0; i--) {\n    const pane = activePanes[i]\n\n    if (typeof pane !== 'object') continue\n\n    // NOTE: if you update this logic, please also update the similar handler in\n    // `resolveIntent.ts`\n    if (\n      pane.canHandleIntent?.(intent, params, {\n        pane,\n        index: i,\n      }) ||\n      // see `resolveIntent.ts` for more info\n      (pane.type === 'documentList' &&\n        pane.schemaTypeName === params.type &&\n        pane.options.filter === '_type == $type')\n    ) {\n      const paneParams = isTemplate ? {template: params.template} : EMPTY_PARAMS\n\n      return {\n        panes: panes\n          .slice(0, i)\n          .concat([[{id: editDocumentId, params: paneParams, payload}]]) as RouterPanes,\n      }\n    }\n  }\n\n  return {intent: intent, params, payload}\n}\n","import {\n  AddIcon,\n  CloseIcon,\n  EditIcon,\n  type IconComponent,\n  PublishIcon,\n  TrashIcon,\n  UnpublishIcon,\n} from '@sanity/icons'\n\nexport const TIMELINE_ICON_COMPONENTS: {[key: string]: IconComponent | undefined} = {\n  create: AddIcon,\n  delete: TrashIcon,\n  discardDraft: CloseIcon,\n  initial: AddIcon,\n  editDraft: EditIcon,\n  editLive: EditIcon,\n  publish: PublishIcon,\n  unpublish: UnpublishIcon,\n}\n","import {type IconComponent} from '@sanity/icons'\nimport {type ChunkType} from 'sanity'\n\nimport {TIMELINE_ICON_COMPONENTS} from './constants'\n\nexport function getTimelineEventIconComponent(type: ChunkType): IconComponent | undefined {\n  return TIMELINE_ICON_COMPONENTS[type]\n}\n","import {ChevronLeftIcon} from '@sanity/icons'\nimport {type MouseEvent, useCallback} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {TIMELINE_LIST_WRAPPER_ID} from './timeline'\n\n/**\n * This is a hack to force the scrollbar to not appear when the list is expanding,\n * if we don't do this the scrollbar will appear for a brief moment when the list is expanding and then disappear\n * when the list is fully expanded.\n */\nfunction hideScrollbarOnExpand(isExpanded: boolean) {\n  // Do nothing if the list is already expanded\n  if (isExpanded) return\n\n  const listWrapper = document.getElementById(TIMELINE_LIST_WRAPPER_ID)\n\n  if (listWrapper) {\n    const firstChildren = listWrapper.children[0] as HTMLElement\n    const hasScrollbar = firstChildren.scrollHeight > firstChildren.clientHeight\n    if (!hasScrollbar) {\n      //\n      const currentStyle = getComputedStyle(firstChildren).overflowY\n      // Add overflow hidden to the listWrapper to avoid the scrollbar to appear when expanding\n      firstChildren.style.overflowY = 'hidden'\n      setTimeout(() => {\n        // Reset the overflow style after the list is expanded\n        firstChildren.style.overflowY = currentStyle\n      }, 0)\n    }\n  }\n}\n\nconst FlipIcon = styled(ChevronLeftIcon)`\n  transition: transform 200ms;\n  &[data-expanded='true'] {\n    transform: rotate(-90deg);\n  }\n`\n\nexport function ExpandableTimelineItemButton({\n  isExpanded,\n  onExpand,\n}: {\n  isExpanded: boolean\n  onExpand: () => void\n}) {\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleExpandClick = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.stopPropagation()\n      hideScrollbarOnExpand(isExpanded)\n      onExpand()\n    },\n    [onExpand, isExpanded],\n  )\n\n  return (\n    <Button\n      mode=\"bleed\"\n      icon={<FlipIcon data-expanded={isExpanded} />}\n      tooltipProps={{\n        content: isExpanded\n          ? t('timeline-item.menu.action-collapse')\n          : t('timeline-item.menu.action-expand'),\n      }}\n      onClick={handleExpandClick}\n    />\n  )\n}\n","import {Box, Flex, Stack} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\nexport const StackWrapper = styled(Stack)`\n  max-width: 200px;\n`\n\nexport const ListWrapper = styled(Flex)<{$maxHeight: string}>`\n  max-height: ${(props) => props.$maxHeight};\n  min-width: 244px;\n`\n\nexport const Root = styled(Box)<{$visible?: boolean}>(({$visible}) => {\n  return css`\n    opacity: 0;\n    pointer-events: none;\n    transition: opacity 0.2s;\n\n    ${$visible &&\n    css`\n      opacity: 1;\n      pointer-events: auto;\n    `}\n  `\n})\n","import {type ChunkType, type StudioLocaleResourceKeys} from 'sanity'\n\n/**\n * Maps from a chunk type to an i18n key for the operation\n *\n * @internal\n */\nexport const TIMELINE_ITEM_I18N_KEY_MAPPING: Record<ChunkType, StudioLocaleResourceKeys> = {\n  initial: 'timeline.operation.created-initial',\n  create: 'timeline.operation.created',\n  publish: 'timeline.operation.published',\n  editLive: 'timeline.operation.edited-live',\n  editDraft: 'timeline.operation.edited-draft',\n  unpublish: 'timeline.operation.unpublished',\n  discardDraft: 'timeline.operation.draft-discarded',\n  delete: 'timeline.operation.deleted',\n}\n","import {type AvatarSize, AvatarStack} from '@sanity/ui'\nimport {UserAvatar} from 'sanity'\n\ninterface UserAvatarStackProps {\n  maxLength?: number\n  userIds: string[]\n  size?: AvatarSize\n  withTooltip?: boolean\n}\n\nexport function UserAvatarStack({\n  maxLength,\n  userIds,\n  size,\n  withTooltip = true,\n}: UserAvatarStackProps) {\n  return (\n    <AvatarStack maxLength={maxLength} size={size}>\n      {userIds.map((userId) => (\n        <UserAvatar key={userId} user={userId} withTooltip={withTooltip} />\n      ))}\n    </AvatarStack>\n  )\n}\n","import {Box, Card, Flex, Skeleton, Stack, Text} from '@sanity/ui'\n// eslint-disable-next-line camelcase\nimport {getTheme_v2, type ThemeColorAvatarColorKey} from '@sanity/ui/theme'\nimport {createElement, type MouseEvent, useCallback, useMemo} from 'react'\nimport {\n  type ChunkType,\n  type RelativeTimeOptions,\n  useDateTimeFormat,\n  UserAvatar,\n  useRelativeTime,\n  useTranslation,\n  useUser,\n} from 'sanity'\nimport {css, styled} from 'styled-components'\n\nimport {Tooltip} from '../../../../ui-components'\nimport {getTimelineEventIconComponent} from './helpers'\nimport {TIMELINE_ITEM_I18N_KEY_MAPPING} from './timelineI18n'\nimport {UserAvatarStack} from './userAvatarStack'\nimport {type ChunksWithCollapsedDrafts} from './utils'\n\nexport const IconBox = styled(Flex)<{$color: ThemeColorAvatarColorKey}>((props) => {\n  const theme = getTheme_v2(props.theme)\n  const color = props.$color\n\n  return css`\n    --card-icon-color: ${theme.color.avatar[color].fg};\n    background-color: ${theme.color.avatar[color].bg};\n    box-shadow: 0 0 0 1px var(--card-bg-color);\n\n    position: absolute;\n    width: ${theme.avatar.sizes[0].size}px;\n    height: ${theme.avatar.sizes[0].size}px;\n    right: -3px;\n    bottom: -3px;\n    border-radius: 50%;\n  `\n})\n\nconst TIMELINE_ITEM_EVENT_TONE: Record<ChunkType | 'withinSelection', ThemeColorAvatarColorKey> = {\n  initial: 'blue',\n  create: 'blue',\n  publish: 'green',\n  editLive: 'green',\n  editDraft: 'yellow',\n  unpublish: 'orange',\n  discardDraft: 'orange',\n  delete: 'red',\n  withinSelection: 'magenta',\n}\n\nexport interface TimelineItemProps {\n  chunk: ChunksWithCollapsedDrafts\n  isSelected: boolean\n  onSelect: (chunk: ChunksWithCollapsedDrafts) => void\n  collaborators?: Set<string>\n  optionsMenu?: React.ReactNode\n}\n\nconst RELATIVE_TIME_OPTIONS: RelativeTimeOptions = {\n  minimal: true,\n  useTemporalPhrase: true,\n}\n\nconst AvatarSkeleton = styled(Skeleton)((props) => {\n  const theme = getTheme_v2(props.theme)\n  return css`\n    border-radius: 50%;\n    width: ${theme.avatar.sizes[1].size}px;\n    height: ${theme.avatar.sizes[1].size}px;\n  `\n})\n\nconst NameSkeleton = styled(Skeleton)((props) => {\n  const theme = getTheme_v2(props.theme)\n  return css`\n    width: 6ch;\n    height: ${theme.font.text.sizes[0].lineHeight}px;\n  `\n})\n\nconst UserLine = ({userId}: {userId: string}) => {\n  const [user, loading] = useUser(userId)\n\n  return (\n    <Flex align=\"center\" gap={2} key={userId} padding={1}>\n      <Box>{loading || !user ? <AvatarSkeleton animated /> : <UserAvatar user={user} />}</Box>\n      <Box>\n        {loading || !user?.displayName ? (\n          <Text size={1}>\n            <NameSkeleton animated />\n          </Text>\n        ) : (\n          <Text muted size={1}>\n            {user.displayName}\n          </Text>\n        )}\n      </Box>\n    </Flex>\n  )\n}\nconst TooltipContent = ({collaborators}: {collaborators: string[]}) => {\n  const {t} = useTranslation('studio')\n  return (\n    <Stack paddingBottom={1}>\n      <Box padding={1} paddingBottom={2}>\n        <Text size={1} weight=\"medium\">\n          {t('timeline.changes.title')}\n        </Text>\n      </Box>\n      {collaborators.map((userId) => (\n        <UserLine key={userId} userId={userId} />\n      ))}\n    </Stack>\n  )\n}\nexport function TimelineItem({\n  chunk,\n  isSelected,\n  onSelect,\n  collaborators,\n  optionsMenu,\n}: TimelineItemProps) {\n  const {t} = useTranslation('studio')\n  const {type, endTimestamp: timestamp} = chunk\n  const iconComponent = getTimelineEventIconComponent(type)\n  const authorUserIds = Array.from(chunk.authors)\n  const collaboratorsUsersIds = collaborators ? Array.from(collaborators) : []\n  const isSelectable = type !== 'delete'\n  const dateFormat = useDateTimeFormat({dateStyle: 'medium', timeStyle: 'short'})\n  const date = new Date(timestamp)\n\n  const updatedTimeAgo = useRelativeTime(date || '', RELATIVE_TIME_OPTIONS)\n\n  const formattedTimestamp = useMemo(() => {\n    const parsedDate = new Date(timestamp)\n    const formattedDate = dateFormat.format(parsedDate)\n\n    return formattedDate\n  }, [timestamp, dateFormat])\n\n  const handleClick = useCallback(\n    (evt: MouseEvent<HTMLDivElement>) => {\n      evt.preventDefault()\n      evt.stopPropagation()\n\n      if (isSelectable) {\n        onSelect(chunk)\n      }\n    },\n    [onSelect, chunk, isSelectable],\n  )\n\n  return (\n    <Flex align=\"center\" gap={1}>\n      <Card\n        as=\"button\"\n        onClick={handleClick}\n        padding={2}\n        pressed={isSelected}\n        radius={2}\n        data-ui=\"timelineItem\"\n        data-testid=\"timeline-item-button\"\n        data-chunk-id={chunk.id}\n      >\n        <Flex align=\"center\" gap={3}>\n          <div style={{position: 'relative'}}>\n            <UserAvatarStack maxLength={3} userIds={authorUserIds} size={2} />\n            <IconBox align=\"center\" justify=\"center\" $color={TIMELINE_ITEM_EVENT_TONE[type]}>\n              <Text size={0}>{iconComponent && createElement(iconComponent)}</Text>\n            </IconBox>\n          </div>\n          <Stack space={2}>\n            <Text size={1} weight=\"medium\">\n              {t(TIMELINE_ITEM_I18N_KEY_MAPPING[type]) || <code>{type}</code>}\n            </Text>\n\n            <Text as=\"time\" size={1} muted dateTime={timestamp} title={formattedTimestamp}>\n              {updatedTimeAgo}\n            </Text>\n          </Stack>\n\n          {collaboratorsUsersIds.length > 0 && (\n            <Flex flex={1} justify=\"flex-end\" align=\"center\">\n              <Tooltip\n                placement=\"top\"\n                content={<TooltipContent collaborators={collaboratorsUsersIds} />}\n                portal\n              >\n                <Box paddingLeft={2} paddingY={2}>\n                  <UserAvatarStack\n                    maxLength={3}\n                    userIds={collaboratorsUsersIds}\n                    size={0}\n                    withTooltip={false}\n                  />\n                </Box>\n              </Tooltip>\n            </Flex>\n          )}\n        </Flex>\n      </Card>\n      {optionsMenu}\n    </Flex>\n  )\n}\n","import {type Chunk, type ChunkType} from 'sanity'\n\nexport type NonPublishChunk = Omit<Chunk, 'type'> & {\n  type: Exclude<ChunkType, 'publish'>\n  parentId?: string\n}\n\nexport type PublishChunk = Omit<Chunk, 'type'> & {\n  type: 'publish'\n  children: string[]\n  collaborators: Set<string>\n}\n\nexport const isNonPublishChunk = (chunk: Chunk): chunk is NonPublishChunk =>\n  chunk.type !== 'publish'\n\nexport const isPublishChunk = (chunk: Chunk): chunk is PublishChunk => chunk.type === 'publish'\n\n/**\n * searches for the previous publish action in the list of chunks\n * e.g. chunks = [publish, edit, publish, edit, edit] it needs to return the second publish action\n * e.g. chunks = [publish, edit, delete, edit, edit] it returns undefined\n */\n\nfunction getPreviousPublishAction(chunks: Chunk[]) {\n  let previousPublish: PublishChunk | null = null\n  // We need to iterate from the end to the start of the list\n  for (let index = chunks.length - 1; index >= 0; index--) {\n    const chunk = chunks[index]\n    if (isPublishChunk(chunk)) {\n      previousPublish = chunk\n      break\n    }\n    if (chunk.type === 'editDraft') {\n      continue\n    } else break\n  }\n\n  return previousPublish\n}\nexport type ChunksWithCollapsedDrafts = NonPublishChunk | PublishChunk\n\n/**\n * Takes an array of chunks and adds them metadata necessary for the timeline view.\n * for draft chunks, it will add the parentId of the published chunk if this draft action is now published\n * for published, it will add the children array and the collaborators array\n */\nexport function addChunksMetadata(chunks: Chunk[]): ChunksWithCollapsedDrafts[] {\n  const result: ChunksWithCollapsedDrafts[] = []\n\n  for (const chunk of chunks) {\n    if (isPublishChunk(chunk)) {\n      result.push({\n        ...chunk,\n        type: 'publish',\n        children: [],\n        collaborators: new Set(), // Initialize the collaborators array\n      })\n      continue\n    }\n    if (isNonPublishChunk(chunk)) {\n      const previousPublish = getPreviousPublishAction(result)\n      if (chunk.type === 'editDraft' && previousPublish?.type === 'publish') {\n        Array.from(chunk.authors).forEach((id) => {\n          previousPublish.collaborators.add(id)\n        })\n        previousPublish.children.push(chunk.id)\n        result.push({\n          ...chunk,\n          parentId: previousPublish.id,\n        })\n        continue\n      }\n    }\n    if (isNonPublishChunk(chunk)) {\n      result.push(chunk)\n    }\n  }\n\n  return result\n}\n","import {Box, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  type Chunk,\n  CommandList,\n  type CommandListRenderItemCallback,\n  LoadingBlock,\n  useTranslation,\n} from 'sanity'\n\nimport {ExpandableTimelineItemButton} from './expandableTimelineItemButton'\nimport {ListWrapper, Root, StackWrapper} from './timeline.styled'\nimport {TimelineItem} from './timelineItem'\nimport {\n  addChunksMetadata,\n  type ChunksWithCollapsedDrafts,\n  isNonPublishChunk,\n  isPublishChunk,\n} from './utils'\n\ninterface TimelineProps {\n  chunks: Chunk[]\n  hasMoreChunks: boolean | null\n  lastChunk?: Chunk | null\n  onLoadMore: () => void\n  onSelect: (chunk: Chunk) => void\n  /**\n   * The list needs a predefined max height for the scroller to work.\n   */\n  listMaxHeight?: string\n}\n\nexport const TIMELINE_LIST_WRAPPER_ID = 'timeline-list-wrapper'\n\nexport const Timeline = ({\n  chunks,\n  hasMoreChunks,\n  lastChunk: selectedChunk,\n  onLoadMore,\n  onSelect,\n  listMaxHeight = 'calc(100vh - 280px)',\n}: TimelineProps) => {\n  const [mounted, setMounted] = useState(false)\n  const {t} = useTranslation('studio')\n  const selectedChunkId = selectedChunk?.id\n  const chunksWithMetadata = useMemo(() => addChunksMetadata(chunks), [chunks])\n\n  const [expandedParents, setExpandedParents] = useState<Set<string>>(() => {\n    if (selectedChunkId) {\n      // If the selected chunk is a draft, we need to expand its parent\n      const selected = chunksWithMetadata.find((chunk) => chunk.id === selectedChunkId)\n      if (selected && isNonPublishChunk(selected) && selected.parentId) {\n        return new Set([selected.parentId])\n      }\n    }\n    return new Set()\n  })\n\n  useEffect(() => {\n    // This effect ensures that when we reload the timeline with a selected draft, we expand its parent.\n    if (selectedChunkId) {\n      const selected = chunksWithMetadata.find((chunk) => chunk.id === selectedChunkId)\n      if (selected && isNonPublishChunk(selected) && selected.parentId) {\n        const parentId = selected.parentId\n        setExpandedParents((prev) => {\n          if (prev.has(parentId)) return prev\n          const next = new Set(prev)\n          next.add(parentId)\n          return next\n        })\n      }\n    }\n  }, [chunksWithMetadata, selectedChunkId])\n\n  const filteredChunks = useMemo(() => {\n    return chunksWithMetadata.filter((chunk) => {\n      if (isPublishChunk(chunk) || !chunk.parentId) return true\n      // If the chunk has a parent id keep it hidden until the parent is expanded.\n      return expandedParents.has(chunk.parentId)\n    })\n  }, [chunksWithMetadata, expandedParents])\n\n  useEffect(() => {\n    // This effect ensures that we load more chunks if the list is not long enough.\n    // This could happen if a parent chunk has multiple drafts, so you could end with a list of 50 transactions but only\n    // 1 parent chunk, the publish, which squashed all the changes.\n    // In that case, users will see the loading block at the bottom, but nothing will really be happening. Because they haven't reach the end of the list.\n    if (filteredChunks.length < 16 && hasMoreChunks) {\n      onLoadMore()\n    }\n  }, [filteredChunks, hasMoreChunks, onLoadMore])\n\n  const handleExpandParent = useCallback(\n    (parentId: string) => () =>\n      setExpandedParents((prev) => {\n        const next = new Set(prev)\n\n        if (prev.has(parentId)) next.delete(parentId)\n        else next.add(parentId)\n\n        return next\n      }),\n    [],\n  )\n\n  const selectedIndex = useMemo(\n    () =>\n      selectedChunkId ? filteredChunks.findIndex((chunk) => chunk.id === selectedChunkId) : -1,\n    [selectedChunkId, filteredChunks],\n  )\n  const handleSelectChunk = useCallback(\n    (chunk: ChunksWithCollapsedDrafts) => {\n      const timelineChunk = chunks.find((c) => c.id === chunk.id)\n      if (timelineChunk) onSelect(timelineChunk)\n      else {\n        console.error('TimelineItem: chunk not found')\n        onSelect(chunk)\n      }\n    },\n    [chunks, onSelect],\n  )\n\n  const renderItem = useCallback<CommandListRenderItemCallback<(typeof filteredChunks)[number]>>(\n    (chunk, {activeIndex}) => {\n      const isFirst = activeIndex === 0\n\n      return (\n        <Box\n          paddingBottom={1}\n          paddingTop={isFirst ? 1 : 0}\n          paddingRight={1}\n          paddingLeft={isNonPublishChunk(chunk) && chunk.parentId ? 4 : 1}\n        >\n          <TimelineItem\n            chunk={chunk}\n            isSelected={selectedChunkId === chunk.id}\n            onSelect={handleSelectChunk}\n            collaborators={isPublishChunk(chunk) ? chunk.collaborators : undefined}\n            optionsMenu={\n              isPublishChunk(chunk) && chunk.children.length > 0 ? (\n                <ExpandableTimelineItemButton\n                  isExpanded={expandedParents.has(chunk.id)}\n                  onExpand={handleExpandParent(chunk.id)}\n                />\n              ) : null\n            }\n          />\n          {activeIndex === filteredChunks.length - 1 && hasMoreChunks && <LoadingBlock />}\n        </Box>\n      )\n    },\n    [\n      expandedParents,\n      filteredChunks.length,\n      handleExpandParent,\n      handleSelectChunk,\n      hasMoreChunks,\n      selectedChunkId,\n    ],\n  )\n\n  useEffect(() => setMounted(true), [])\n\n  return (\n    <Root\n      /**\n       * We delay initial rendering if `selectedIndex` is present.\n       * This is a _temporary_ workaround to allow the virtual <CommandList>\n       * to scroll to a specific index prior to being displayed.\n       *\n       * Without this, there'll be a noticeable 'flash' where the virtual list\n       * will render with its child items at the top and then scroll into position.\n       */\n      $visible={!selectedIndex || mounted}\n      data-ui=\"timeline\"\n    >\n      {filteredChunks.length === 0 && (\n        <StackWrapper padding={3} space={3}>\n          <Text size={1} weight=\"medium\">\n            {t('timeline.error.no-document-history-title')}\n          </Text>\n          <Text muted size={1}>\n            {t('timeline.error.no-document-history-description')}\n          </Text>\n        </StackWrapper>\n      )}\n\n      {filteredChunks.length > 0 && (\n        <ListWrapper direction=\"column\" $maxHeight={listMaxHeight} id={TIMELINE_LIST_WRAPPER_ID}>\n          <CommandList\n            activeItemDataAttr=\"data-hovered\"\n            ariaLabel={t('timeline.list.aria-label')}\n            autoFocus=\"list\"\n            initialIndex={selectedIndex}\n            initialScrollAlign=\"center\"\n            itemHeight={57}\n            items={filteredChunks}\n            onEndReached={onLoadMore}\n            onEndReachedIndexOffset={20}\n            overscan={5}\n            renderItem={renderItem}\n            wrapAround={false}\n          />\n        </ListWrapper>\n      )}\n    </Root>\n  )\n}\n\nTimeline.displayName = 'Timeline'\n","import {ErrorOutlineIcon} from '@sanity/icons'\nimport {Flex, Stack} from '@sanity/ui'\nimport {TextWithTone, useTranslation} from 'sanity'\n\nexport function TimelineError() {\n  const {t} = useTranslation('studio')\n\n  return (\n    <Flex align=\"flex-start\" gap={3} padding={4}>\n      <TextWithTone tone=\"critical\">\n        <ErrorOutlineIcon />\n      </TextWithTone>\n      <Stack space={4}>\n        <TextWithTone size={1} tone=\"critical\" weight=\"medium\">\n          {t('timeline.error.load-document-changes-title')}\n        </TextWithTone>\n        <TextWithTone size={1} tone=\"critical\">\n          {t('timeline.error.load-document-changes-description')}\n        </TextWithTone>\n      </Stack>\n    </Flex>\n  )\n}\n","import {ChevronDownIcon} from '@sanity/icons'\nimport {\n  Flex,\n  type Placement,\n  PortalProvider,\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useToast,\n} from '@sanity/ui'\nimport {useCallback, useMemo, useState} from 'react'\nimport {type Chunk, useTimelineSelector, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, Popover} from '../../../../ui-components'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {Timeline} from './timeline'\nimport {TimelineError} from './TimelineError'\nimport {TIMELINE_ITEM_I18N_KEY_MAPPING} from './timelineI18n'\n\ninterface TimelineMenuProps {\n  chunk: Chunk | null\n  mode: 'rev' | 'since'\n  placement?: Placement\n}\n\nconst Root = styled(Popover)`\n  overflow: hidden;\n  overflow: clip;\n`\n\nexport const TIMELINE_MENU_PORTAL = 'timeline-menu'\n\nexport function TimelineMenu({chunk, mode, placement}: TimelineMenuProps) {\n  const {setTimelineRange, setTimelineMode, timelineError, ready, timelineStore} = useDocumentPane()\n  const [open, setOpen] = useState(false)\n  const [button, setButton] = useState<HTMLButtonElement | null>(null)\n  const [popoverRef, setPopoverRef] = useState<HTMLElement | null>(null)\n\n  const toast = useToast()\n\n  const chunks = useTimelineSelector(timelineStore, (state) => state.chunks)\n  const loading = useTimelineSelector(timelineStore, (state) => state.isLoading)\n  const hasMoreChunks = useTimelineSelector(timelineStore, (state) => state.hasMoreChunks)\n  const realRevChunk = useTimelineSelector(timelineStore, (state) => state.realRevChunk)\n  const sinceTime = useTimelineSelector(timelineStore, (state) => state.sinceTime)\n\n  const {t} = useTranslation('studio')\n\n  const handleOpen = useCallback(() => {\n    setTimelineMode(mode)\n    setOpen(true)\n  }, [mode, setTimelineMode])\n\n  const handleClose = useCallback(() => {\n    setTimelineMode('closed')\n    setOpen(false)\n  }, [setTimelineMode])\n\n  const handleGlobalKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (open && (event.key === 'Escape' || event.key === 'Tab')) {\n        handleClose()\n        button?.focus()\n      }\n    },\n    [button, handleClose, open],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(open && handleClose, () => [button, popoverRef])\n\n  const selectRev = useCallback(\n    (revChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore.findRangeForRev(revChunk)\n        setTimelineMode('closed')\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineMode, setTimelineRange, t, timelineStore, toast],\n  )\n\n  const selectSince = useCallback(\n    (sinceChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore.findRangeForSince(sinceChunk)\n        setTimelineMode('closed')\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineMode, setTimelineRange, t, timelineStore, toast],\n  )\n\n  const handleLoadMore = useCallback(() => {\n    if (!loading) {\n      timelineStore.loadMore()\n    }\n  }, [loading, timelineStore])\n\n  const content = useMemo(() => {\n    if (timelineError) return <TimelineError />\n\n    if (mode === 'rev') {\n      return (\n        <Timeline\n          chunks={chunks}\n          hasMoreChunks={hasMoreChunks}\n          lastChunk={realRevChunk}\n          onLoadMore={handleLoadMore}\n          onSelect={selectRev}\n        />\n      )\n    }\n\n    const filteredChunks = realRevChunk\n      ? chunks.filter((c) => c.index < realRevChunk.index)\n      : chunks\n    return (\n      <Timeline\n        chunks={filteredChunks}\n        hasMoreChunks={hasMoreChunks}\n        lastChunk={sinceTime}\n        onLoadMore={handleLoadMore}\n        onSelect={selectSince}\n      />\n    )\n  }, [\n    chunks,\n    handleLoadMore,\n    hasMoreChunks,\n    mode,\n    realRevChunk,\n    selectRev,\n    selectSince,\n    sinceTime,\n    timelineError,\n  ])\n\n  const formatParams = {\n    timestamp: {dateStyle: 'medium', timeStyle: 'short'},\n  }\n\n  const revLabel = chunk\n    ? t(TIMELINE_ITEM_I18N_KEY_MAPPING[chunk.type], {\n        context: 'timestamp',\n        timestamp: new Date(chunk?.endTimestamp),\n        formatParams,\n      })\n    : t('timeline.latest-revision')\n\n  const sinceLabel = chunk\n    ? t('timeline.since', {\n        timestamp: new Date(chunk?.endTimestamp),\n        formatParams,\n      })\n    : t('timeline.since-version-missing')\n\n  const buttonLabel = mode === 'rev' ? revLabel : sinceLabel\n\n  return (\n    <PortalProvider __unstable_elements={{[TIMELINE_MENU_PORTAL]: popoverRef}}>\n      <Root\n        data-testid=\"timeline-menu\"\n        constrainSize\n        content={open && content}\n        data-ui=\"versionMenu\"\n        open={open}\n        placement={placement}\n        matchReferenceWidth\n        portal\n        ref={setPopoverRef}\n      >\n        <Flex width={'fill'}>\n          <Button\n            data-testid={open ? 'timeline-menu-close-button' : 'timeline-menu-open-button'}\n            disabled={!ready}\n            mode=\"ghost\"\n            onClick={open ? handleClose : handleOpen}\n            ref={setButton}\n            selected={open}\n            width=\"fill\"\n            tooltipProps={null}\n            justify={'space-between'}\n            style={{\n              maxWidth: '100%',\n            }}\n            iconRight={ChevronDownIcon}\n            text={ready ? buttonLabel : t('timeline.loading-history')}\n          />\n        </Flex>\n      </Root>\n    </PortalProvider>\n  )\n}\n","import {type ObjectDiff} from '@sanity/diff'\nimport {BoundaryElementProvider, Box, Card, Flex, Text} from '@sanity/ui'\nimport {type ReactElement, useMemo, useState} from 'react'\nimport {\n  ChangeFieldWrapper,\n  ChangeList,\n  type DocumentChangeContextInstance,\n  LoadingBlock,\n  NoChanges,\n  type ObjectSchemaType,\n  ScrollContainer,\n  useTimelineSelector,\n  useTranslation,\n} from 'sanity'\nimport {DocumentChangeContext} from 'sanity/_singletons'\nimport {styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {TimelineMenu} from '../../timeline'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nconst Grid = styled(Box)`\n  &:not([hidden]) {\n    display: grid;\n  }\n  grid-template-columns: 48px 1fr;\n  align-items: center;\n  gap: 0.25em;\n`\n\nexport function ChangesInspector({showChanges}: {showChanges: boolean}): ReactElement {\n  const {documentId, schemaType, timelineError, timelineStore, value} = useDocumentPane()\n  const [scrollRef, setScrollRef] = useState<HTMLDivElement | null>(null)\n\n  const rev = useTimelineSelector(timelineStore, (state) => state.revTime)\n  const diff = useTimelineSelector(timelineStore, (state) => state.diff)\n  const onOlderRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n  const selectionState = useTimelineSelector(timelineStore, (state) => state.selectionState)\n  const sinceTime = useTimelineSelector(timelineStore, (state) => state.sinceTime)\n  const loading = selectionState === 'loading'\n  const isComparingCurrent = !onOlderRevision\n\n  // Note that we are using the studio core namespace here, as changes theoretically should\n  // be part of Sanity core (needs to be moved from structure at some point)\n  const {t: structureT} = useTranslation(structureLocaleNamespace)\n\n  const documentContext: DocumentChangeContextInstance = useMemo(\n    () => ({\n      documentId,\n      schemaType,\n      FieldWrapper: ChangeFieldWrapper,\n      rootDiff: diff,\n      isComparingCurrent,\n      value,\n      showFromValue: true,\n    }),\n    [documentId, diff, isComparingCurrent, schemaType, value],\n  )\n\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\" overflow=\"hidden\">\n      <Box padding={3}>\n        <Grid paddingX={2} paddingBottom={2}>\n          <Text size={1} muted>\n            {structureT('changes.from.label')}\n          </Text>\n\n          <TimelineMenu mode=\"since\" chunk={sinceTime} placement=\"bottom-start\" />\n          <Text size={1} muted>\n            {structureT('changes.to.label')}\n          </Text>\n          <TimelineMenu chunk={rev} mode=\"rev\" placement=\"bottom-end\" />\n        </Grid>\n      </Box>\n\n      <Card flex={1} paddingX={2} paddingY={2}>\n        <BoundaryElementProvider element={scrollRef}>\n          <Scroller data-ui=\"Scroller\" ref={setScrollRef}>\n            <Box flex={1} paddingX={3} height=\"fill\">\n              {showChanges && (\n                <Content\n                  diff={diff}\n                  documentContext={documentContext}\n                  error={timelineError}\n                  loading={loading}\n                  schemaType={schemaType}\n                />\n              )}\n            </Box>\n          </Scroller>\n        </BoundaryElementProvider>\n      </Card>\n    </Flex>\n  )\n}\n\nfunction Content({\n  error,\n  diff,\n  documentContext,\n  loading,\n  schemaType,\n}: {\n  error?: Error | null\n  diff: ObjectDiff<any> | null\n  documentContext: DocumentChangeContextInstance\n  loading: boolean\n  schemaType: ObjectSchemaType\n}) {\n  if (error) {\n    return <NoChanges />\n  }\n\n  if (loading) {\n    return <LoadingBlock showText />\n  }\n\n  if (!diff) {\n    return <NoChanges />\n  }\n\n  return (\n    <DocumentChangeContext.Provider value={documentContext}>\n      <ChangeList diff={diff} schemaType={schemaType} />\n    </DocumentChangeContext.Provider>\n  )\n}\n","import {BoundaryElementProvider, Card, Flex, useToast} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {type Chunk, ScrollContainer, useTimelineSelector, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Timeline} from '../../timeline'\nimport {TimelineError} from '../../timeline/TimelineError'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nexport function HistorySelector({showList}: {showList: boolean}) {\n  const {timelineError, setTimelineMode, setTimelineRange, timelineStore} = useDocumentPane()\n  const [scrollRef, setScrollRef] = useState<HTMLDivElement | null>(null)\n  const [listHeight, setListHeight] = useState(0)\n\n  const getScrollerRef = useCallback((el: HTMLDivElement | null) => {\n    /**\n     * Hacky solution, the list height needs to be defined, it cannot be obtained from the parent using a `max-height: 100%`\n     * Because the scroller won't work properly and it won't scroll to the selected element on mount.\n     * To fix this, this component will set the list height to the height of the parent element - 1px, to avoid a double scroll line.\n     */\n    setListHeight(el?.clientHeight ? el.clientHeight - 1 : 0)\n    setScrollRef(el)\n  }, [])\n\n  const chunks = useTimelineSelector(timelineStore, (state) => state.chunks)\n  const realRevChunk = useTimelineSelector(timelineStore, (state) => state.realRevChunk)\n  const hasMoreChunks = useTimelineSelector(timelineStore, (state) => state.hasMoreChunks)\n  const loading = useTimelineSelector(timelineStore, (state) => state.isLoading)\n\n  const {t} = useTranslation('studio')\n  const toast = useToast()\n  const selectRev = useCallback(\n    (revChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore.findRangeForRev(revChunk)\n        setTimelineMode('closed')\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineMode, setTimelineRange, t, timelineStore, toast],\n  )\n\n  const handleLoadMore = useCallback(() => {\n    // If updated, be sure to update the TimeLineMenu component as well\n    if (!loading) {\n      timelineStore.loadMore()\n    }\n  }, [loading, timelineStore])\n\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\">\n      <Card flex={1} padding={2} paddingTop={0}>\n        {timelineError ? (\n          <TimelineError />\n        ) : (\n          <BoundaryElementProvider element={scrollRef}>\n            <Scroller data-ui=\"Scroller\" ref={getScrollerRef}>\n              {listHeight &&\n              // This forces the list to unmount and remount, which is needed to reset the scroll position\n              showList ? (\n                <Timeline\n                  chunks={chunks}\n                  hasMoreChunks={hasMoreChunks}\n                  lastChunk={realRevChunk}\n                  onLoadMore={handleLoadMore}\n                  onSelect={selectRev}\n                  listMaxHeight={`${listHeight}px`}\n                />\n              ) : null}\n            </Scroller>\n          </BoundaryElementProvider>\n        )}\n      </Card>\n    </Flex>\n  )\n}\n","import {CloseIcon} from '@sanity/icons'\nimport {Box, Flex, TabList, TabPanel} from '@sanity/ui'\nimport {type DocumentInspectorProps, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, Tab} from '../../../../../ui-components'\nimport {usePaneRouter} from '../../../../components/paneRouter/usePaneRouter'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {HISTORY_INSPECTOR_NAME} from '../../constants'\nimport {ChangesInspector} from './ChangesInspector'\nimport {HistorySelector} from './HistorySelector'\n\nconst FadeInFlex = styled(Flex)`\n  opacity: 0;\n  transition: opacity 200ms;\n  &[data-ready] {\n    opacity: 1;\n  }\n`\nconst TABS = ['history', 'review'] as const\nconst isValidTab = (tab: string | undefined): tab is (typeof TABS)[number] =>\n  // @ts-expect-error TS doesn't understand the type guard\n  tab && TABS.includes(tab)\n\nexport function ChangesTabs(props: DocumentInspectorProps) {\n  const {params, setParams} = usePaneRouter()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const isReady = params?.inspect === HISTORY_INSPECTOR_NAME\n\n  const paneRouterTab = isValidTab(params?.changesInspectorTab)\n    ? params.changesInspectorTab\n    : TABS[0]\n  const setPaneRouterTab = (tab: (typeof TABS)[number]) =>\n    setParams({\n      ...params,\n      changesInspectorTab: tab,\n    })\n\n  return (\n    <FadeInFlex direction=\"column\" padding={0} height=\"fill\" data-ready={isReady ? '' : undefined}>\n      <Flex align=\"center\" padding={3} gap={2}>\n        <TabList space={1} flex={1}>\n          <Tab\n            aria-controls=\"history-panel\"\n            id=\"history-tab\"\n            label={t('changes.tab.history')}\n            onClick={() => setPaneRouterTab('history')}\n            selected={paneRouterTab === 'history'}\n          />\n          <Tab\n            aria-controls=\"review-changes-panel\"\n            id=\"changes-tab\"\n            label={t('changes.tab.review-changes')}\n            onClick={() => setPaneRouterTab('review')}\n            selected={paneRouterTab === 'review'}\n          />\n        </TabList>\n        <Box flex=\"none\">\n          <Button\n            aria-label={t('changes.action.close-label')}\n            icon={CloseIcon}\n            mode=\"bleed\"\n            onClick={props.onClose}\n            tooltipProps={{content: t('document-inspector.close-button.tooltip')}}\n          />\n        </Box>\n      </Flex>\n\n      <TabPanel\n        aria-labelledby=\"history-tab\"\n        height=\"fill\"\n        hidden={paneRouterTab !== 'history'}\n        id=\"history-panel\"\n      >\n        <HistorySelector showList={paneRouterTab === 'history'} />\n      </TabPanel>\n\n      <TabPanel\n        aria-labelledby=\"review-tab\"\n        hidden={paneRouterTab !== 'review'}\n        id=\"review-panel\"\n        height=\"fill\"\n      >\n        <ChangesInspector showChanges={paneRouterTab === 'review'} />\n      </TabPanel>\n    </FadeInFlex>\n  )\n}\n","import {RestoreIcon} from '@sanity/icons'\nimport {type DocumentInspector, useTranslation} from 'sanity'\n\nimport {useStructureTool} from '../../../../useStructureTool'\nimport {HISTORY_INSPECTOR_NAME} from '../../constants'\nimport {ChangesTabs} from './ChangesTabs'\n\nexport const changesInspector: DocumentInspector = {\n  name: HISTORY_INSPECTOR_NAME,\n  useMenuItem: () => {\n    const {features} = useStructureTool()\n    const {t} = useTranslation()\n\n    return {\n      hidden: !features.reviewChanges,\n      icon: RestoreIcon,\n      title: t('changes.title'),\n    }\n  },\n  component: ChangesTabs,\n  onClose: ({params}) => ({\n    params: {...params, since: undefined, rev: undefined, changesInspectorTab: undefined},\n  }),\n  onOpen: ({params}) => ({params: {...params, since: '@lastPublished'}}),\n}\n","/* eslint-disable no-loop-func */\n\nimport {type Path, type SanityDocument, type SchemaType} from '@sanity/types'\nimport {isArray, isRecord} from 'sanity'\n\nexport function getPathTitles(options: {\n  path: Path\n  schemaType: SchemaType\n  value: Partial<SanityDocument> | null\n}): Array<{name: string; title?: string}> {\n  const {path, schemaType, value} = options\n  const result: Array<{name: string; title?: string}> = []\n\n  let s = schemaType\n  let v: unknown = value\n\n  for (const segment of path) {\n    // field name\n    if (typeof segment === 'string') {\n      if (!isRecord(v) && v !== undefined) {\n        throw new Error(`Parent value is not an object, cannot get path segment: .${segment}`)\n      }\n\n      if (s.jsonType !== 'object') {\n        throw new Error(\n          `Parent type is not an object schema type, cannot get path segment: .${segment}`,\n        )\n      }\n\n      v = v?.[segment]\n\n      const field = s.fields.find((f) => f.name === segment)\n\n      if (!field) {\n        result.push({name: segment})\n        return result\n      }\n\n      s = field.type\n\n      result.push(s)\n\n      continue\n    }\n\n    // array item index\n    if (typeof segment === 'number') {\n      if (!isArray(v) && v !== undefined) {\n        throw new Error(`Parent value is not an array, cannot get path segment: [${segment}]`)\n      }\n\n      if (s.jsonType !== 'array') {\n        throw new Error(\n          `Parent type is not an array schema type, cannot get path segment: [${segment}]`,\n        )\n      }\n\n      v = v?.[segment]\n\n      const itemType = s.of.find((ofType) => {\n        if (typeof v === 'string') {\n          return ofType.jsonType === 'string'\n        }\n\n        if (typeof v === 'number') {\n          return ofType.jsonType === 'number'\n        }\n\n        if (typeof v === 'boolean') {\n          return ofType.jsonType === 'boolean'\n        }\n\n        if (isRecord(v)) {\n          return ofType.name === v?._type\n        }\n\n        return false\n      })\n\n      if (!itemType) {\n        throw new Error(`Item type not found: [${segment}]`)\n      }\n\n      s = itemType\n\n      result.push(s)\n\n      continue\n    }\n\n    // array item key\n    if (isRecord(segment) && segment._key) {\n      if (!isArray(v)) {\n        throw new Error(\n          `Parent value is not an array, cannot get path segment: [_key == ${segment}]`,\n        )\n      }\n\n      if (s.jsonType !== 'array') {\n        throw new Error(\n          `Parent type is not an array schema type, cannot get path segment: .${segment}`,\n        )\n      }\n\n      const values = v ?? []\n\n      v = values.find((i) => isRecord(i) && i._key === segment._key)\n\n      if (!isRecord(v)) {\n        throw new Error(`Array item not found: [_key == ${segment._key}]`)\n      }\n\n      const ofType = s.of.find((i) => isRecord(v) && i.name === v?._type)\n\n      if (!ofType) {\n        throw new Error(`Array item type not found: .${v?._type}`)\n      }\n\n      s = ofType\n\n      result.push(s)\n\n      continue\n    }\n\n    throw new Error(`Invalid path segment: ${JSON.stringify(segment)}`)\n  }\n\n  return result\n}\n","import {\n  ErrorOutlineIcon,\n  type IconComponent,\n  InfoOutlineIcon,\n  WarningOutlineIcon,\n} from '@sanity/icons'\nimport {\n  type ObjectSchemaType,\n  type Path,\n  type SanityDocument,\n  type SchemaType,\n  type ValidationMarker,\n} from '@sanity/types'\nimport {Box, Card, type CardTone, Flex, Stack, Text} from '@sanity/ui'\nimport {createElement, type ErrorInfo, Fragment, useCallback, useMemo, useState} from 'react'\nimport {type DocumentInspectorProps, useTranslation} from 'sanity'\n\nimport {ErrorBoundary} from '../../../../../ui-components'\nimport {DocumentInspectorHeader} from '../../documentInspector'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {getPathTitles} from './getPathTitles'\n\nconst MARKER_ICON: Record<'error' | 'warning' | 'info', IconComponent> = {\n  error: ErrorOutlineIcon,\n  warning: WarningOutlineIcon,\n  info: InfoOutlineIcon,\n}\n\nconst MARKER_TONE: Record<'error' | 'warning' | 'info', CardTone> = {\n  error: 'critical',\n  warning: 'caution',\n  info: 'primary',\n}\n\nexport function ValidationInspector(props: DocumentInspectorProps) {\n  const {onClose} = props\n  const {onFocus, onPathOpen, schemaType, validation, value} = useDocumentPane()\n  const {t} = useTranslation('validation')\n\n  const handleOpen = useCallback(\n    (path: Path) => {\n      onPathOpen(path)\n      onFocus(path)\n    },\n    [onFocus, onPathOpen],\n  )\n\n  return (\n    <Flex direction=\"column\" height=\"fill\" overflow=\"hidden\">\n      <DocumentInspectorHeader\n        as=\"header\"\n        closeButtonLabel={t('panel.close-button-aria-label')}\n        flex=\"none\"\n        onClose={onClose}\n        title={t('panel.title')}\n      />\n\n      <Card flex={1} overflow=\"auto\" padding={3}>\n        {validation.length === 0 && (\n          <Box padding={2}>\n            <Text muted size={1}>\n              {t('panel.no-errors-message')}\n            </Text>\n          </Box>\n        )}\n\n        {validation.length > 0 && (\n          <Stack space={2}>\n            {validation.map((marker, i) => (\n              <ValidationCard\n                // eslint-disable-next-line react/no-array-index-key\n                key={i}\n                marker={marker}\n                onOpen={handleOpen}\n                schemaType={schemaType}\n                value={value}\n              />\n            ))}\n          </Stack>\n        )}\n      </Card>\n    </Flex>\n  )\n}\n\nfunction ValidationCard(props: {\n  marker: ValidationMarker\n  onOpen: (path: Path) => void\n  schemaType: ObjectSchemaType\n  value: Partial<SanityDocument> | null\n}) {\n  const {marker, onOpen, schemaType, value} = props\n  const handleOpen = useCallback(() => onOpen(marker.path), [marker, onOpen])\n  const [errorInfo, setErrorInfo] = useState<{error: Error; info: ErrorInfo} | null>(null)\n\n  return (\n    <ErrorBoundary onCatch={setErrorInfo}>\n      {errorInfo && (\n        <Card padding={3} radius={2} tone=\"critical\">\n          <Text size={1}>{errorInfo.error.message}</Text>\n        </Card>\n      )}\n\n      {!errorInfo && (\n        <Card\n          __unstable_focusRing\n          as=\"button\"\n          onClick={handleOpen}\n          padding={3}\n          radius={2}\n          tone={MARKER_TONE[marker.level]}\n        >\n          <Flex align=\"flex-start\" gap={3}>\n            <Box flex=\"none\">\n              <Text size={1}>{createElement(MARKER_ICON[marker.level])}</Text>\n            </Box>\n\n            <Stack flex={1} space={2}>\n              <DocumentNodePathBreadcrumbs\n                path={marker.path}\n                schemaType={schemaType}\n                value={value}\n              />\n\n              <Text muted size={1}>\n                {marker.message}\n              </Text>\n            </Stack>\n          </Flex>\n        </Card>\n      )}\n    </ErrorBoundary>\n  )\n}\n\nfunction DocumentNodePathBreadcrumbs(props: {\n  path: Path\n  schemaType: SchemaType\n  value: Partial<SanityDocument> | null\n}) {\n  const {path, schemaType, value} = props\n\n  const pathTitles = useMemo(() => {\n    try {\n      return getPathTitles({path, schemaType, value})\n    } catch (e) {\n      console.error(e)\n    }\n    return null\n  }, [path, schemaType, value])\n\n  if (!pathTitles?.length) return null\n\n  return (\n    <Text size={1}>\n      {pathTitles.map((t, i) => (\n        <Fragment key={i}>\n          {i > 0 && <span style={{color: 'var(--card-muted-fg-color)', opacity: 0.5}}> / </span>}\n          <span style={{fontWeight: 500}}>{t.title || t.name}</span>\n        </Fragment>\n      ))}\n    </Text>\n  )\n}\n","import {CheckmarkCircleIcon, ErrorOutlineIcon, WarningOutlineIcon} from '@sanity/icons'\nimport {useMemo} from 'react'\nimport {\n  type DocumentInspector,\n  type DocumentInspectorMenuItem,\n  type DocumentInspectorUseMenuItemProps,\n  type FormNodeValidation,\n  isValidationError,\n  isValidationWarning,\n  useTranslation,\n  useValidationStatus,\n} from 'sanity'\n\nimport {VALIDATION_INSPECTOR_NAME} from '../../constants'\nimport {ValidationInspector} from './ValidationInspector'\n\nfunction useMenuItem(props: DocumentInspectorUseMenuItemProps): DocumentInspectorMenuItem {\n  const {documentId, documentType} = props\n  const {t} = useTranslation('validation')\n  const {validation: validationMarkers} = useValidationStatus(documentId, documentType)\n\n  const validation: FormNodeValidation[] = useMemo(\n    () =>\n      validationMarkers.map((item) => ({\n        level: item.level,\n        message: item.message,\n        path: item.path,\n      })),\n    [validationMarkers],\n  )\n\n  const hasErrors = validation.some(isValidationError)\n  const hasWarnings = validation.some(isValidationWarning)\n\n  const icon = useMemo(() => {\n    if (hasErrors) return ErrorOutlineIcon\n    if (hasWarnings) return WarningOutlineIcon\n    return CheckmarkCircleIcon\n  }, [hasErrors, hasWarnings])\n\n  const tone = useMemo(() => {\n    if (hasErrors) return 'critical'\n    if (hasWarnings) return 'caution'\n    return 'positive'\n  }, [hasErrors, hasWarnings])\n\n  return {\n    hidden: validation.length === 0,\n    icon,\n    title: t('panel.title'),\n    tone,\n    showAsAction: true,\n  }\n}\n\nexport const validationInspector: DocumentInspector = {\n  name: VALIDATION_INSPECTOR_NAME,\n  component: ValidationInspector,\n  useMenuItem,\n}\n","import {omit} from 'lodash'\nimport {decodeJsonParams, encodeJsonParams, route} from 'sanity/router'\n\nimport {type RouterPaneGroup, type RouterPanes, type RouterPaneSibling} from './types'\n\nconst EMPTY_PARAMS = {}\n\n/**\n * @internal\n */\nexport function legacyEditParamsToState(params: string): Record<string, unknown> {\n  try {\n    return JSON.parse(decodeURIComponent(params))\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn('Failed to parse JSON parameters')\n    return {}\n  }\n}\n\nexport function encodePanesSegment(panes: RouterPanes): string {\n  return (panes || [])\n    .map((group) => group.map(encodeChunks).join('|'))\n    .map(encodeURIComponent)\n    .join(';')\n}\n\n/**\n * @internal\n */\nexport function legacyEditParamsToPath(params: Record<string, unknown>): string {\n  return JSON.stringify(params)\n}\n\n// http://localhost:3333/intent/create/template=book-by-author;type=book/eyJhdXRob3JJZCI6Imdycm0ifQ==\n\n/**\n * @internal\n */\nexport function toState(pathSegment: string): RouterPaneGroup[] {\n  return parsePanesSegment(decodeURIComponent(pathSegment))\n}\n\n/**\n * @internal\n */\nexport function toPath(panes: RouterPaneGroup[]): string {\n  return encodePanesSegment(panes)\n}\n\nexport const router = route.create('/', [\n  // \"Asynchronous intent resolving\" route\n  route.intents('/intent'),\n\n  // Legacy fallback route, will be redirected to new format\n  route.create('/edit/:type/:editDocumentId', [\n    route.create({\n      path: '/:params',\n      transform: {params: {toState: legacyEditParamsToState, toPath: legacyEditParamsToPath}},\n    }),\n  ]),\n\n  // The regular path - when the intent can be resolved to a specific pane\n  route.create({\n    path: '/:panes',\n    // Legacy URLs, used to handle redirects\n    children: [route.create('/:action', route.create('/:legacyEditDocumentId'))],\n    transform: {\n      panes: {toState, toPath},\n    },\n  }),\n])\n\n// old: authors;knut,{\"template\":\"diaryEntry\"}\n// new: authors;knut,view=diff,eyJyZXYxIjoiYWJjMTIzIiwicmV2MiI6ImRlZjQ1NiJ9|latest-posts\n\nconst panePattern = /^([.a-z0-9_-]+),?({.*?})?(?:(;|$))/i\nconst isParam = (str: string) => /^[a-z0-9]+=[^=]+/i.test(str)\nconst isPayloadLike = (str: string) => /^[A-Za-z0-9\\-_]+(?:={0,2})$/.test(str)\nconst exclusiveParams = ['view', 'since', 'rev', 'inspect', 'comment']\n\ntype Truthy<T> = T extends false\n  ? never\n  : T extends ''\n    ? never\n    : T extends 0\n      ? never\n      : T extends 0n\n        ? never\n        : T extends null | undefined\n          ? NonNullable<T>\n          : T\nconst isTruthy = Boolean as (t: unknown) => boolean as <T>(t: T) => t is Truthy<T>\n\nfunction parseChunks(chunks: string[], initial: RouterPaneSibling): RouterPaneSibling {\n  const sibling: RouterPaneSibling = {...initial, params: EMPTY_PARAMS, payload: undefined}\n  return chunks.reduce((pane, chunk) => {\n    if (isParam(chunk)) {\n      const key = chunk.slice(0, chunk.indexOf('='))\n      const value = chunk.slice(key.length + 1)\n      pane.params = {...pane.params, [decodeURIComponent(key)]: decodeURIComponent(value)}\n    } else if (isPayloadLike(chunk)) {\n      pane.payload = tryParseBase64Payload(chunk)\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn('Unknown pane segment: %s - skipping', chunk)\n    }\n\n    return pane\n  }, sibling)\n}\n\nfunction encodeChunks(pane: RouterPaneSibling, index: number, group: RouterPaneGroup): string {\n  const {payload, params = {}, id} = pane\n  const [firstSibling] = group\n  const paneIsFirstSibling = pane === firstSibling\n  const sameAsFirst = index !== 0 && id === firstSibling.id\n  const encodedPayload =\n    typeof payload === 'undefined' ? undefined : encodeJsonParams(payload as any)\n\n  const encodedParams = Object.entries(params)\n    .filter((entry): entry is [string, string] => {\n      const [key, value] = entry\n      if (!value) return false\n      if (paneIsFirstSibling) return true\n\n      // omit the value if it's the same as the value from the first sibling\n      const valueFromFirstSibling = firstSibling.params?.[key]\n      if (value === valueFromFirstSibling && !exclusiveParams.includes(key)) return false\n      return true\n    })\n    .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n\n  return (\n    [sameAsFirst ? '' : id]\n      .concat([encodedParams.length > 0 && encodedParams, encodedPayload].filter(isTruthy).flat())\n      .join(',') || ','\n  )\n}\n\nexport function parsePanesSegment(str: string): RouterPanes {\n  if (str.indexOf(',{') !== -1) {\n    return parseOldPanesSegment(str)\n  }\n\n  return str\n    .split(';')\n    .map((group) => {\n      const [firstSibling, ...restOfSiblings] = group.split('|').map((segment) => {\n        const [id, ...chunks] = segment.split(',')\n        return parseChunks(chunks, {id})\n      })\n\n      return [\n        firstSibling,\n        ...restOfSiblings.map((sibling) => ({\n          ...firstSibling,\n          ...sibling,\n          id: sibling.id || firstSibling.id,\n          params: {...omit(firstSibling.params, exclusiveParams), ...sibling.params},\n          payload: sibling.payload || firstSibling.payload,\n        })),\n      ]\n    })\n    .filter((group) => group.length > 0)\n}\n\nfunction parseOldPanesSegment(str: string): RouterPanes {\n  const chunks: RouterPaneGroup = []\n\n  let buffer = str\n  while (buffer.length) {\n    const [match, id, payloadChunk] = buffer.match(panePattern) || []\n    if (!match) {\n      buffer = buffer.slice(1)\n      continue\n    }\n\n    const payload = payloadChunk && tryParsePayload(payloadChunk)\n    chunks.push({id, payload})\n\n    buffer = buffer.slice(match.length)\n  }\n\n  return [chunks]\n}\n\nfunction tryParsePayload(json: string) {\n  try {\n    return JSON.parse(json)\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(`Failed to parse parameters: ${err.message}`)\n    return undefined\n  }\n}\n\nfunction tryParseBase64Payload(data: string): unknown {\n  try {\n    return data ? decodeJsonParams(data) : undefined\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(`Failed to parse parameters: ${err.message}`)\n    return undefined\n  }\n}\n","import {MasterDetailIcon} from '@sanity/icons'\nimport {lazy} from 'react'\nimport {definePlugin} from 'sanity'\n\nimport {\n  DeleteAction,\n  DiscardChangesAction,\n  DuplicateAction,\n  HistoryRestoreAction,\n  PublishAction,\n  UnpublishAction,\n} from './documentActions'\nimport {LiveEditBadge} from './documentBadges'\nimport {getIntentState} from './getIntentState'\nimport {structureUsEnglishLocaleBundle} from './i18n'\nimport {changesInspector} from './panes/document/inspectors/changes'\nimport {validationInspector} from './panes/document/inspectors/validation'\nimport {router} from './router'\nimport {type StructureToolOptions} from './types'\n\nconst documentActions = [\n  PublishAction,\n  UnpublishAction,\n  DiscardChangesAction,\n  DuplicateAction,\n  DeleteAction,\n  HistoryRestoreAction,\n]\n\nconst documentBadges = [LiveEditBadge]\n\nconst inspectors = [validationInspector, changesInspector]\n\n/**\n * The structureTool is a studio plugin which adds the “structure tool” – a tool within\n * Sanity Studio in which content editors can drill down to specific documents to edit them.\n * You can configure your Studio's structure tool(s).\n *\n * @public\n * @param options - Options for the structure tool. See {@link StructureToolOptions}\n * @example Minimal example\n * ```ts\n * // sanity.config.ts\n * import { defineConfig } from 'sanity'\n * import { structureTool } from 'sanity/structure'\n *\n * export default defineConfig((\n *  // ...\n *  plugins: [\n *    structureTool() // use defaults\n *  ]\n * })\n * ```\n *\n * @example To customise your structure tool\n * ```ts\n * // sanity.config.ts\n * import { defineConfig } from 'sanity'\n * import { structureTool } from 'sanity/structure'\n * import { FaCar } from 'react-icons'\n\n * export default defineConfig((\n *\t // ...\n *   plugins: [\n *    structureTool({\n *      name: 'cars',\n *      title: 'Cars',\n *      icon: FaCar,\n *      structure: (S) => S.documentTypeList('car'),\n *      defaultDocumentNode: (S) =>\n *        S.document().views([\n *          S.view.form(),\n *          S.view.component(Preview).title('Preview')\n *        ])\n *    })\n *  ]\n * })\n * ```\n * */\nexport const structureTool = definePlugin<StructureToolOptions | void>((options) => {\n  const icon = options?.icon || MasterDetailIcon\n\n  return {\n    name: 'sanity/structure',\n    document: {\n      actions: (prevActions) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the document actions already exist in the Studio config\n        return Array.from(new Set([...prevActions, ...documentActions]))\n      },\n      badges: (prevBadges) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the document badges already exist in the Studio config\n        return Array.from(new Set([...prevBadges, ...documentBadges]))\n      },\n      inspectors: (prevInspectors) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the inspectors already exist in the Studio config\n        return Array.from(new Set([...prevInspectors, ...inspectors]))\n      },\n    },\n\n    tools: [\n      {\n        name: options?.name || 'structure',\n        title: options?.title || 'Structure',\n        icon,\n        component: lazy(() => import('./components/structureTool')),\n        canHandleIntent: (intent, params) => {\n          if (intent === 'create') return canHandleCreateIntent(params)\n          if (intent === 'edit') return canHandleEditIntent(params)\n          return false\n        },\n        getIntentState,\n        // Controlled by sanity/src/structure/components/structureTool/StructureTitle.tsx\n        controlsDocumentTitle: true,\n        options,\n        router,\n      },\n    ],\n\n    i18n: {\n      bundles: [structureUsEnglishLocaleBundle],\n    },\n  }\n})\n\nfunction canHandleCreateIntent(params: Record<string, unknown>) {\n  // We can't handle create intents without a `type` parameter\n  if (!('type' in params)) {\n    return false\n  }\n\n  // We can handle any create intent as long as it has a `type` parameter,\n  // but we also know how to deal with templates, where other tools might not\n  return 'template' in params ? {template: true} : true\n}\n\nfunction canHandleEditIntent(params: Record<string, unknown>) {\n  // We can't handle edit intents without an `id` parameter\n  if (!('id' in params)) {\n    return false\n  }\n\n  // We can handle any edit intent with a document ID, but we're best at `structure` mode\n  // This ensures that other tools that can handle modes such as `presentation` or `batch`\n  // can take precedence over the structure tool\n  return 'mode' in params ? {mode: params.mode === 'structure'} : true\n}\n","import {type ReactElement, type ReactNode, useMemo, useState} from 'react'\nimport {useConfigContextFromSource, useDocumentStore, useSource} from 'sanity'\nimport {StructureToolContext} from 'sanity/_singletons'\n\nimport {createStructureBuilder, type DefaultDocumentNodeResolver} from './structureBuilder'\nimport {\n  type StructureResolver,\n  type StructureToolContextValue,\n  type UnresolvedPaneNode,\n} from './types'\n\n/** @internal */\nexport interface StructureToolProviderProps {\n  structure?: StructureResolver\n  defaultDocumentNode?: DefaultDocumentNodeResolver\n  children: ReactNode\n}\n\n/** @internal */\nexport function StructureToolProvider({\n  defaultDocumentNode,\n  structure: resolveStructure,\n  children,\n}: StructureToolProviderProps): ReactElement {\n  const [layoutCollapsed, setLayoutCollapsed] = useState(false)\n  const source = useSource()\n  const configContext = useConfigContextFromSource(source)\n  const documentStore = useDocumentStore()\n\n  const S = useMemo(() => {\n    return createStructureBuilder({\n      defaultDocumentNode,\n      source,\n    })\n  }, [defaultDocumentNode, source])\n\n  const rootPaneNode = useMemo(() => {\n    // TODO: unify types and remove cast\n    if (resolveStructure)\n      return resolveStructure(S, {\n        ...configContext,\n        documentStore,\n      }) as UnresolvedPaneNode\n    return S.defaults() as UnresolvedPaneNode\n  }, [S, resolveStructure, configContext, documentStore])\n\n  const features: StructureToolContextValue['features'] = useMemo(\n    () => ({\n      backButton: layoutCollapsed,\n      resizablePanes: !layoutCollapsed,\n      reviewChanges: !layoutCollapsed,\n      splitPanes: !layoutCollapsed,\n      splitViews: !layoutCollapsed,\n    }),\n    [layoutCollapsed],\n  )\n\n  const structureTool: StructureToolContextValue = useMemo(() => {\n    return {\n      features,\n      layoutCollapsed,\n      setLayoutCollapsed,\n      rootPaneNode,\n      structureContext: S.context,\n    }\n  }, [features, layoutCollapsed, rootPaneNode, S.context])\n\n  return (\n    <StructureToolContext.Provider value={structureTool}>{children}</StructureToolContext.Provider>\n  )\n}\n"],"names":["structureLocaleNamespace","structureUsEnglishLocaleBundle","defineLocaleResourceBundle","locale","namespace","resources","DocTitle","props","$","_c","document","documentValue","schema","useSchema","t0","_type","get","schemaType","t","useTranslation","t1","value","error","useValuePreview","t2","t3","message","errorMessage","title","color","ChevronWrapper","styled","Box","CrossDatasetReferencesDetails","details","CrossDatasetReferencesSummary","summary","Table","table","theme","rem","sanity","space","DocumentIdFlex","Flex","OtherReferenceCount","difference","totalCount","references","length","count","Symbol","for","t4","t5","PaneItemPreview","icon","layout","presence","isRecord","isValidElement","isString","isNumber","documentPreviewStore","_id","getPreviewStateObservable","previewStateObservable","draft","isLoading","published","useObservable","status","tooltip","getPreviewValueWithFallback","t6","BackLink","forwardRef","ref","routerPanesState","groupIndex","useContext","PaneRouterContext","slice","panes","state","usePaneLayout","pane","PaneLayoutContext","Error","ChildLink","childId","childParameters","childPayload","rest","id","params","payload","ParameterizedLink","currentPanes","siblingIndex","nextParams","useUnique","nextPayload","currentGroup","currentSibling","nextSibling","nextGroup","t7","t8","t9","nextPanes","t10","nextState","t11","ReferenceChildLink","children","documentId","documentType","parentRefPath","template","pathToString","type","usePaneRouter","EMPTY_ARRAY","ReferencePreviewLink","onClick","getPublishedId","documentPresence","useDocumentPresence","useDocumentPreviewStore","name","linkProps","ConfirmDeleteDialogBody","crossDatasetReferences","internalReferences","documentTitle","action","datasetNames","hasUnknownDatasetNames","onReferenceLinkClick","toast","useToast","item","UnknownIcon","renderPreviewItem","DocumentTitle","T0","T1","T2","t12","normalizedDatasetNames","datasetSubtitle","datasets","join","context","t13","t14","t15","t16","Card","map","item_0","borderTop","undefined","documentCount","minWidth","filter","_temp","t17","index","projectId","datasetName","push","CopyIcon","content","reference","isClientError","e","POLL_INTERVAL","visiblePoll$","getVisiblePoll$","fromEvent","pipe","startWith","visibilityState","distinctUntilChanged","switchMap","visible","timer","EMPTY","shareReplay","refCount","bufferSize","getDocumentExistence","versionedClient","draftId","getDraftId","publishedId","requestOptions","uri","getDataUrl","json","query","excludeContent","tag","observable","request","omitted","nonExistant","doc","reason","some","fetchCrossDatasetReferences","checkDocumentId","of","currentDataset","config","dataset","url","catchError","statusCode","useInternalReferences","createHookFromObservableFactory","documentStore","listenQuery","fetch","listen","transitions","throttleTime","useCrossDatasetReferences","useReferringDocuments","useClient","DEFAULT_STUDIO_CLIENT_OPTIONS","useDocumentStore","isInternalReferencesLoading","isCrossDatasetReferencesLoading","Array","from","Set","Boolean","sort","projectIds","_temp2","_temp3","_temp4","crossDatasetReference_1","crossDatasetReference","crossDatasetReference_0","DialogBody","LoadingContainer","attrs","align","direction","justify","ConfirmDeleteDialog","onCancel","onConfirm","dialogId","useId","showConfirmButton","text","cancelButton","confirmButton","ConfirmDeleteDialogContainer","setError","useState","handleRetry","tone","Delay","ms","ready","setReady","timeoutId","setTimeout","clearTimeout","useEffect","PANE_DEBUG","PANE_COLLAPSED_WIDTH","PANE_DEFAULT_MIN_WIDTH","Root","Layer","PaneDivider","disabled","element","resize","dragging","setDragging","event","preventDefault","startX","pageX","handleMouseMove","deltaX","handleMouseUp","e_0","window","removeEventListener","addEventListener","handleMouseDown","Pane","forwardedRef","currentMaxWidthProp","currentMinWidthProp","maxWidthProp","minWidthProp","restProps","currentMinWidth","currentMaxWidth","flex","maxWidth","selected","flexProp","rootElement","setRootElement","collapse","collapsed","layoutCollapsed","expand","expandedElement","mount","p","find","indexOf","paneIndex","nextPane","isLast","expanded","nextCollapsed","useRef","current","useImperativeHandle","refValue","setRef","handleCollapse","handleExpand","contextValue","bb0","bb1","hidden","divider","Infinity","t18","style","t19","t20","t21","t22","t23","t24","t25","t26","t27","t28","displayName","usePane","PaneContext","PaneContent","as","overflow","padding","MENU_GROUP_POPOVER_PROPS","constrainSize","placement","portal","PaneMenuButtonItem","isAfterGroup","node","getI18nText","useGetI18nText","child","childIndex","key","child_0","childIndex_0","PaneContextMenuItemResolver","intent","PaneContextMenuItem","tooltipContent","useI18nText","hotkey","split","iconRight","CheckmarkIcon","onAction","PaneContextIntentMenuItem","intentLink","useIntentLink","handleClick","href","CONTEXT_MENU_POPOVER_PROPS","nodesHasTone","nodes","PaneContextMenuButton","actionsNodes","hasCritical","hasCaution","nodeIndex","RootCard","PaneFooter","$border","css","Layout","TitleCard","fg","bg","card","enabled","TitleTextSkeleton","TextSkeleton","TitleText","Text","TabsBox","rgba","base","PaneHeader","actions","backButton","border","contentAfter","loading","subActions","tabs","tabIndex","paneElement","paneRect","useElementRect","height","innerHeight","width","layoutStyle","handleTitleClick","handleLayoutClick","showTabsOrSubActions","getDisabledReason","disabledReason","ariaLabel","isDisabled","PaneHeaderActionButton","warn","PaneHeaderMenuItemActionButton","hotkeys","PaneHeaderActionIntentButton","PaneHeaderMenuGroupActionButton","idx","_calcPaneResize","cache","left","right","sum","leftMinWidth","rightMinWidth","leftMaxWidth","Math","min","rightMaxWidth","minDeltaX","rightMinDeltaX","maxDeltaX","leftMaxDeltaX","_deltaX","max","leftW","rightW","leftFlex","rightFlex","_getDOMPath","el","path","parentElement","childNodes","unshift","EMPTY_PATH","_sortElements","elements","WeakMap","set","_sortByElementPath","a","b","_a","_b","len","i","aIndex","bIndex","createPaneLayoutController","observers","optionsMap","userCollapsedElementSet","rootWidth","resizeDataMap","Map","resizing","add","_notifyObservers","delete","options","original","splice","leftElement","leftIndex","leftOptions","rightElement","rightOptions","offsetWidth","leftResizeData","rightResizeData","nextRootElement","setRootWidth","nextRootWidth","subscribe","observer","_elements","dataMap","lastElement","collapsedWidth","remaingWidth","userCollapsed","has","sizeCollapsed","resizeData","data","PaneLayout","onCollapse","onExpand","controller","setState","paneLayout","isMenuNodeButton","renderAsButton","isNotMenuNodeButton","negate","resolveMenuNodes","fieldActions","menuItems","menuItemGroups","keyOffset","mapFieldActionToPaneMenuNode","groups","itemGroup","g","i18n","ungroupedItems","group","shortcut","actionHandler","showAsAction","childIdx","IntentButton","linkRef","Link","InsufficientPermissionsMessageTooltip","reveal","currentUser","useCurrentUser","POPOVER_PROPS","getIntent","templates","typeName","templateId","baseParams","initialDocumentId","parameters","PaneHeaderCreateButton","templateItems","useTemplates","templatePermissions","isTemplatePermissionsLoading","useTemplatePermissions","every","nothingGranted","reduce","permissionsById","AddIcon","firstItem","granted","itemIndex","disabled_0","intent_0","acc","permission_0","permission","isNonNullable","hashObject","sortObject","v","isArray","Object","entries","keyA","keyB","localeCompare","JSON","stringify","parse","PaneHeaderActions","memo","initialValueTemplateItems","initialValueTemplateItemsFromStructure","actionHandlers","EMPTY_OBJECT","handleAction","useCallback","console","handler","menuNodes","useMemo","actionNodes","contextMenuNodes","initialValueTemplateItemFromMenuItems","menuItemIndex","intentParams","templateParams","description","combinedInitialValueTemplates","uniqBy","MissingSchemaType","Code","getIconWithFallback","defaultIcon","PaneItem","pressed","margin","marginBottom","marginTop","hasSchemaType","clicked","setClicked","isSanityDocument","DocumentIcon","opacity","FolderIcon","preview","metaKey","RenderActionCollectionState","actionProps","onActionComplete","RenderBadgeCollectionState","badges","badgeProps","ErrorPane","paneKey","getWaitMessages","thresholds","messageKey","isDev","src","merge","threshold","mapTo","delay","DEFAULT_MESSAGE_KEY","Content","LoadingPane","messageProp","resolvedMessage","currentMessage","setCurrentMessage","sub","unsubscribe","contentElement","setContentElement","mounted","setMounted","_raf2","DELAY","useDocumentPane","documentPane","DocumentPaneContext","CommentsWrapper","CommentsProviderWrapper","useCommentsEnabled","connectionState","onPathOpen","inspector","openInspector","setParams","createPathWithParams","selectedCommentId","comment","paramsRef","useLayoutEffect","commentId","inspect","COMMENTS_INSPECTOR_NAME","location","origin","getCommentLink","handleClearSelectedComment","handleOpenCommentsInspector","_DEBUG","EMPTY_PARAMS","LOADING_PANE","DOCUMENT_PANEL_PORTAL_ELEMENT","useStructureTool","structureTool","StructureToolContext","DOCUMENT_PANEL_MIN_WIDTH","DOCUMENT_PANEL_INITIAL_MIN_WIDTH","DOCUMENT_INSPECTOR_MIN_WIDTH","DOCUMENT_INSPECTOR_MAX_WIDTH","INSPECT_ACTION_PREFIX","DEFAULT_MENU_ITEM_GROUPS","HISTORY_INSPECTOR_NAME","VALIDATION_INSPECTOR_NAME","DocumentInspectorMenuItemsResolver","inspectors","onMenuItems","lenRef","setMenuItems","menuItemsRef","newFieldActions","setMenuItem","prev","next","InspectorMenuItems","useMenuItem","defineInspectorMenuItemComponent","InspectorMenuItem","menuItem","useDocumentTitle","editState","subscribed","IGNORE_OPS","DocumentOperationResults","pushToast","documentPaneValue","documentTitleInfo","titleError","useDocumentOperationEvent","prevEvent","paneRouter","includes","op","documentTitleBase","cleanupId","closable","duration","Strong","closeCurrentAndAfter","isLiveEditEnabled","liveEdit","position","zIndex","lineHeight","DocumentInspectorHeader","closeButtonLabel","forwardedAs","onClose","CloseIcon","div","Resizer","onResize","onResizeStart","mouseXRef","Resizable","setElement","elementWidthRef","targetWidth","setTargetWidth","handleResizeStart","w","handleResize","DocumentInspectorPanel","closeInspector","features","handleClose","component","createElement","resizablePanes","STRUCTURE_TOOL_NAMESPACE","useStructureToolSetting","defaultValue","keyValueStore","useKeyValueStore","keyValueStoreKey","getKey","value_0","newValue","setKey","VIEW_MODE_PARSED","VIEW_MODE_RAW","VIEW_MODES","lru","LRU","maxSize","isExpanded","keyPath","cached","toggleExpanded","selectElement","sel","getSelection","range","createRange","removeAllRanges","selectNodeContents","addRange","select","currentTarget","maybeSelectAll","keyCode","ctrlKey","isDocumentLike","JSONInspectorWrapper","fonts","code","family","sizes","fontSize","syntax","property","constant","string","boolean","number","Search","onChange","target","handleChange","SearchIcon","InspectDialog","onInspectClose","dialogIdPrefix","viewModeId","onViewModeChange","mode","viewMode","setParsedViewMode","setRawViewMode","bottom","outline","ignoreCase","Banner","Icon","DeletedDocumentBanner","revisionId","restore","useDocumentOperation","navigateIntent","useRouter","execute","handleRestore","ReadOnlyIcon","DeprecatedDocumentTypeBanner","isDeprecatedSchemaType","deprecated","ErrorOutlineIcon","AskToEditDialogOpened","defineEvent","version","AskToEditRequestSent","MAX_NOTE_LENGTH","RequestPermissionDialog","onRequestSubmitted","telemtry","useTelemetry","useProjectId","apiVersion","client","zOffset","useZIndex","isSubmitting","setIsSubmitting","note","setNote","msgError","setMsgError","hasTooManyRequests","setHasTooManyRequests","hasBeenDenied","setHasBeenDenied","adminRole","roles","requestedRole","method","body","requestUrl","then","log","catch","err","response","errMessage","finally","onSubmit","fullscreen","role_0","role","appliesToUsers","LOADING_STATE","EMPTY_STATE","DECLINED_STATE","PENDING_STATE","EXPIRED_STATE","useRoleRequestsStatus","checkRoleRequests","checkRoleRequests$","requests","projectRequests","resourceId","declinedRequest","isAfter","addWeeks","Date","createdAt","isBefore","InsufficientPermissionBanner","requiredPermission","roleRequestStatus","requestStatusLoading","requestStatusError","requestSent","setRequestSent","requestPending","currentUserRoles","isOnlyViewer","showRequestPermissionDialog","setShowRequestPermissionDialog","listFormat","useListFormat","telemetry","roleTitles","formatToParts","Roles","part","ReferenceChangedBanner","replaceCurrent","routerReferenceId","parentSibling","parentId","hasHistoryOpen","rev","pathFromString","referenceInfoObservable","parentRefPathSegment","keyedSegmentIndex","findIndex","concat","unstable_observePathsDocumentPair","debounceTime","result","availability","pathGet","snapshot","_ref","referenceInfo","handleReloadReference","available","SyncIcon","WarningOutlineIcon","ResolvedLiveEdit","DraftLiveEditBanner","displayed","isPublishing","setPublishing","isDiscarding","setDiscarding","publish","discardChanges","liveEditResolveType","handlePublish","handleDiscard","isDraftId","TitleContainer","Stack","heading","FormHeader","isSingleton","__experimental_formPreviewTitle","LONG_ENOUGH_BUT_NOT_TOO_LONG","useConditionalToast","ev","FormView","margins","collapsedFieldSets","collapsedPaths","validation","formState","onFocus","onBlur","onSetCollapsedPath","onSetCollapsedFieldSet","onSetActiveFieldGroup","openPath","patchChannel","createPatchChannel","isLocked","transactionSyncLock","conditionalToastParams","pair","documentEvents","tap","prepareMutationEvent","prepareRebaseEvent","hasRev","_rev","patches","formRef","setFormRef","focusedFirstDescendant","setFocusedFirstDescendant","focusPath","focusFirstDescendant","changed","focused","members","readOnly","mutations","mut","patch","fromMutationPatches","remotePatches","remoteMutations","localPatches","localMutations","DocumentBox","Scroller","ScrollContainer","$disabled","DocumentPanel","footerHeight","headerHeight","isInspectOpen","setDocumentPanelPortalElement","activeViewId","views","permissions","isPermissionsLoading","isDeleting","isDeleted","timelineStore","parentPortal","usePortal","portalRef","documentScrollElement","setDocumentScrollElement","formContainerElement","_createdAt","activeView","view","portalElement","splitPanes","formViewHidden","activeViewNode","historical","lastNonDeletedRevId","useTimelineSelector","isLiveEdit","scrollTo","inspectDialog","showInspector","POPOVER_FALLBACK_PLACEMENTS","DIALOG_WIDTH_TO_UI_WIDTH","small","medium","large","full","ConfirmDialog","dialog","referenceElement","ConfirmDialogContent","cancelButtonIcon","cancelButtonText","confirmButtonIcon","confirmButtonText","isTopLayer","useLayer","useGlobalKeyDown","useClickOutsideEvent","Button","Grid","ModalDialog","footer","showCloseButton","header","Dialog","PopoverDialog","PopoverDialogContent","DocumentActionPortalProvider","ActionStateDialog","modalId","unknownModal","ActionDialogWrapper","actionStates","actionIndex","setActionIndex","currentAction","ActionMenuButton","idPrefix","setReferenceElement","preventOverflow","popoverProps","actionState","renderActionDialog","ActionMenuListItem","onHandle","String","label","replace","tooltipProps","s","toUpperCase","DISABLED_REASON_TITLE_KEY","NOTHING_TO_DELETE","NOT_READY","DeleteAction","onComplete","setIsDeleting","paneSetIsDeleting","deleteOp","isConfirmDialogOpen","setConfirmDialogOpen","handleCancel","handleConfirm","handle","useDocumentPairPermissions","TrashIcon","DISABLED_REASON_KEY","NO_CHANGES","NOT_PUBLISHED","DiscardChangesAction","ResetIcon","NOTHING_TO_DUPLICATE","DuplicateAction","duplicate","isDuplicating","setDuplicating","dupeId","uuid","duplicateSuccess","firstValueFrom","operationEvents","HistoryRestoreAction","revision","isRevisionInitial","isRevisionLatest","RevertIcon","DocumentPublished","LIVE_EDIT_ENABLED","ALREADY_PUBLISHED","publishedAt","AlreadyPublished","useTemporalPhrase","timeSincePublished","useRelativeTime","PublishAction","publishState","setPublishState","validationStatus","useValidationStatus","syncState","useSyncState","changesOpen","useEditState","isValidationErrorMarker","hasValidationErrors","publishScheduled","setPublishScheduled","isSyncing","isValidating","_updatedAt","hasDraft","doPublish","validationComplete","didPublish","publishedImmediately","previouslyPublished","PublishIcon","UnpublishAction","unpublish","UnpublishIcon","DocumentStatusBarActionsInner","showMenu","states","__internal_tasks","firstActionState","menuActionStates","buttonElement","setButtonElement","footerAction","DocumentStatusBarActions","allActions","renderDocumentStatusBarActions","HistoryStatusBarActions","isRestoreAction","historyActions","toLowerCase","revTime","DocumentHeaderTabs","tabPanelId","DocumentHeaderTab","isActive","viewId","setView","DocumentHeaderTitle","DocumentPanelHeader","_props","onMenuAction","onPaneClose","onPaneSplit","unstable_languageFilter","hasGroupSiblings","useFieldActions","menuButtonNodes","showTabs","showSplitPaneButton","splitViews","showSplitPaneCloseButton","showBackButton","showPaneGroupCloseButton","renderPaneActions","ArrowLeftIcon","languageFilterComponent","SplitVerticalIcon","DocumentPanelHeaderActionDialogDeferred","useDeferredValue","DocumentPanelHeaderActionDialog","SpacerButton","size","pointerEvents","visibility","BADGE_TONES","primary","success","warning","danger","DocumentBadgesInner","DocumentBadgesDeferred","DocumentBadges","renderDocumentBadges","badge","whiteSpace","StyledMotionPath","motion","Circle","Arrows","Checkmark","rotateAnimation","keyframes","RotateGroup","root","syncing","scale","transition","saved","changes","circle","strokeDasharray","strokeDashoffset","arrows","checkmark","pathLength","AnimatedStatusIcon","STATUS_DICTIONARY","i18nKey","DocumentStatusPulse","currentStatus","SYNCING_TIMEOUT","SAVED_TIMEOUT","DocumentStatusLine","singleLine","setStatus","lastUpdated","timerId","timerId_0","StatusText","RevisionStatusLine","date","format","RestoreIcon","useResizeObserver","resizeObserver","observe","unobserve","CONTAINER_BREAKPOINT","DocumentStatusBar","actionsBoxRef","createLinkMetadata","onDocumentChange","CreateLinkedActions","useSanityCreateConfig","components","documentLinkedActions","showingRevision","setCollapsed","contentRect","shouldRender","isSanityCreateLinked","flexShrink","marginLeft","onOlderRevision","KeyboardShortcutResponder","actionsBoxElement","activeIndex","onActionStart","onKeyDown","rootRef","activeAction","matchingStates","isHotkey","matchingState","handleKeyDown","DocumentActionShortcuts","setActiveIndex","renderDocumentActionShortcuts","getInspectorItems","currentInspector","hasValue","inspectorMenuItems","getInspectItem","JsonIcon","getProductionPreviewItem","previewUrl","EarthAmericasIcon","getMenuItems","inspectorItems","items","LinkIcon","usePreviewUrl","resolveProductionUrl","useSource","BehaviorSubject","subject","asObservable","DocumentLayoutError","DIALOG_PROVIDER_POSITION","StyledChangeConnectorRoot","ChangeConnectorRoot","DocumentLayout","inspectOpen","onHistoryOpen","paneParams","zOffsets","getSanityCreateLinkMetadata","CreateLinkedBannerContent","documentLinkedBannerContent","footerElement","setFooterElement","headerElement","setHeaderElement","setActionsBoxElement","documentPanelPortalElement","setInspectorMenuItems","rootFieldActionNodes","setRootFieldActionNodes","footerRect","headerRect","handleKeyUp","stopPropagation","onConnectorSetFocus","paneDialog","changesInspectorTab","ShowWhenPaneOpen","pick","plugin","unstable_layout","useDocumentLayoutComponent","defaultComponent","useMiddlewareComponents","DocumentURLCopied","CreatedDraft","getInitialValueTemplateOpts","opts","panePayload","structureNodeTemplate","templateName","urlTemplate","typeTemplates","DocumentPaneProvider","onFocusPath","setDocumentMeta","useCopyPaste","documentActions","documentBadges","unstable_fieldActions","fieldActionsResolver","languageFilterResolver","inspectorsResolver","presenceStore","usePresenceStore","setPaneParams","viewsProp","paneOptions","documentIdRaw","templateParameters","initialValueRaw","useInitialValue","initialValue","validationRaw","useConnectionState","languageFilter","setFocusPath","focusPathRef","timelineMode","setTimelineMode","timelineError","setTimelineError","useTimelineStore","onError","since","sinceAttributes","timelineDisplayed","timelineReady","isPristine","setPresence","subscription","nextPresence","inspectorName","setInspectorName","inspectParamRef","resolvedChangesInspector","compareValue","setTimelineRange","newSince","newRev","handleBlur","blurredPath","disableBlurRef","patchRef","toMutationPatches","closeInspectorName","nextInspectorName","nextInspector","currentParams","onOpen","handleHistoryClose","handleHistoryOpen","reviewChanges","handlePaneClose","closeCurrent","handlePaneSplit","duplicateCurrent","toggleLegacyInspect","toggle","omit","handleMenuAction","open","navigator","clipboard","writeText","toString","startsWith","handleLegacyInspectClose","onSetOpenPath","fieldGroupState","onSetFieldGroupState","onSetCollapsedFieldSets","handleOnSetCollapsedPath","prevState","setAtPath","handleOnSetCollapsedFieldSet","handleSetActiveFieldGroup","groupName","docId","docPermissionsInput","useDocumentValuePermissions","isCreateLinked","isSanityCreateLinkedDocument","isNonExistent","hasNoPermission","updateActionDisabled","isActionEnabled","createActionDisabled","reconnecting","isLiveEditAndDraft","useFormState","comparisonValue","formStateRef","setOpenPath","getExpandOperations","forEach","updatePresence","nextFocusPath","setLocation","lastActiveAt","toISOString","selection","updatePresenceThrottled","throttle","leading","trailing","handleFocus","_nextFocusPath","pathFor","onHistoryClose","timeout","restParams","pathFromUrl","resolveKeyedPath","deepEquals","DocumentPane","parentSourceName","source","DocumentPaneInner","resolveNewDocumentOptions","usePaneOptions","isLoaded","isDocumentLoaded","useDocumentType","mergeDocumentType","providerProps","handleEditReference","childParams","routerPanesStateLength","activePath","PARTIAL_PAGE_LIMIT","FULL_LIST_LIMIT","DEFAULT_ORDERING","by","field","EMPTY_RECORD","RootBox","$opacity","CommandListBox","SKELETON_ITEMS","keys","LoadingView","num","DocumentListPaneContent","childItemId","filterIsSimpleTypeConstraint","hasMaxItems","hasSearchQuery","isLazyLoading","loadingVariant","onEndReached","onRetry","paneTitle","searchInputElement","showIcons","setShouldRender","handleEndReached","renderItem","isSelected","isLastItem","showSpinner","showMaxItemsMessage","limit","noDocumentsContent","mainContent","removePublishedWithDrafts","documents","collate","entry","hasPublished","applyOrderingFunctions","order","orderBy","mapWith","fieldType","tryResolveSchemaTypeForPath","fieldExtendsType","jsonType","baseType","pathSegments","PathUtils","fromString","segment","getFieldTypeByName","isKeySegment","isIndexSegment","memberType","otherType","isReferenceSchemaType","refType","otherRefType","to","fieldName","fields","ofType","findTypes","types","isSplat","findStaticTypesInFilter","IMPLICIT_SCHEMA_TYPE_FIELDS","joinReferences","strict","head","tail","schemaField","refTypes","tailFields","tailWrapper","getExtendedProjection","ordering","swr","createSWR","listenSearchQuery","searchQuery","staticTypeNames","maxFieldDepth","searchStrategy","sortBy","extendedProjection","events$","defer","events","includeResult","mergeMap","throwError","share","welcome$","mutationAndReconnect$","partition","swrKey","take","asyncScheduler","exhaustMapWithTrailing","typeNames","getSearchableTypes","search","createSearch","strategy","maxDepth","doFetch","__unstable_extendedProjection","comments","skipSortByScore","hits","hit","fromCache","INITIAL_QUERY_STATE","isLoadingFullList","useDocumentList","searchFilter","paramsProp","sortOrder","useWorkspace","useSearchMaxFieldDepth","typeNameFromFilter","onRetry$","observableCallback","onFetchFullList$","onLoadFullList","queryResults$","listenSearchQueryArgs","partialList$","fullList$","withLatestFrom","takeUntil","caught$","safeError","scan","nonErrorThrownWarning","thrown","rotate","fadeIn","AnimatedSpinnerIcon","SpinnerIcon","SubtleSpinnerIcon","DelayedSubtleSpinnerIcon","DocumentListPane","sortOrderRaw","displayOptions","useShallowUnique","staticTypes","setSearchQuery","searchInputValue","setSearchInputValue","setSearchInputElement","sortWithOrderingFn","trim","handleQueryChange","useObservableEvent","event$","debounce","handleClearSearch","handleSearchKeyDown","enableSearchSpinner","setEnableSearchSpinner","textInputIcon","initialValueTemplates","setLayout","setSortOrder","StructurePaneHeader","DocumentSheetListSelect","row","selectedAnchor","setSelectedAnchor","meta","handleOnClick","shiftKey","shiftClickIndex","lowerIndex","upperIndex","additionalSelectedRows","getRowModel","flatRows","currentSelectedRows","getSelectedRowModel","rows","setRowSelection","nextSelectedRows","rowId","isRowCurrentlySelected","getIsSelected","toggleSelected","paddingLeft","getCanSelect","useDocumentSheetListContext","DocumentSheetListContext","DocumentSheetListProvider","selectedAnchorCellDetails","setSelectedAnchorCellDetails","selectedRangeCellIndexes","setSelectedRangeCellIndexes","clearAndSetFocusSelection","nextAnchorDetails","activeElement","HTMLElement","blur","resetFocusSelection","changeSelectionColumn","visibleColumns","getVisibleLeafColumns","columnIndexAfterMove","col","colId","rowIndex","changeSelectionRange","previousSelection","anchorIndex","getNextIndex","startingIndex","firstSelectedIndex","lastIndexSelected","nextIndex","setSelectedAnchorCell","handleEscapePress","nextAnchorCellDetails","handleUpDownKey","isShiftKey","offset","newSelectedCellRowIndex","handleAnchorKeydown","handleAnchorClick","getElementById","contains","focusAnchorCell","anchorCellDetails","getStateByCellId","submitFocusedCell","DataCell","td","PinnedDataCell","SheetListCellInner","getValue","column","cellId","renderValue","setRenderValue","isDirty","setIsDirty","inputRef","cellState","handleOnFocus","patchDocument","handleProgrammaticFocus","focus","HTMLInputElement","handleOnMouseDown","detail","handleOnEnterDown","handleOnChange","handleOnBlur","handlePaste","clipboardData","getData","handleCopy","getBorderStyle","inputProps","boxShadow","SheetListCell","cell","isPinned","getIsPinned","Cell","borderWidth","getIsLastColumn","getStart","borderRight","getSize","flexRender","columnDef","getContext","VISIBLE_COLUMN_LIMIT","PreviewCell","displayValue","columnHelper","createColumnHelper","SUPPORTED_FIELDS","getColsFromSchemaType","parentalField","tableColumns","nextCol","accessor","enableHiding","info","isObjectSchemaType","columns","isAccessorKeyColumnDef","isGroupColumnDef","flatColumns","cols","flatMap","useDocumentSheetColumns","documentSchemaType","display","getIsSomeRowsSelected","getToggleAllPageRowsSelectedHandler","initialColumnsVisibility","accCols","countAllowedVisible","visibilityKey","ColumnsControl","isVisibleLimitReached","getCanHide","setInitialColumns","resetColumnVisibility","handleColumnOnChange","toggleVisibility","getColumnVisibilityDisabled","isColumnVisible","getIsVisible","isSingleColumnVisible","maxHeight","overflowY","getAllLeafColumns","SearchContainer","DocumentSheetListFilter","useSearchState","filtersVisible","Header","th","PinnedHeader","HoverMenu","DocumentSheetListHeader","headerGroup","headerTitle","depth","parent","HeaderTag","canShowHeaderMenu","boxSizing","EllipsisHorizontalIcon","DocumentSheetListPaginator","setPageIndex","getCanPreviousPage","DoubleChevronLeftIcon","previousPage","ChevronLeftIcon","getState","pagination","pageIndex","getPageCount","nextPage","getCanNextPage","ChevronRightIcon","DoubleChevronRightIcon","pageSize","setPageSize","Number","createDocumentsSet","documentsReducer","nextDocumentResult","_","restDocuments","updatedDocument","nextDocument","LISTEN_OPTIONS","useDocumentSheetListStore","QUERY","dispatch","useReducer","setIsLoading","res","initialFetch","handleListenerEvent","err_0","listener$","uniques","isDraft","values","dataAsArray","useDocumentSheetList","h","PaneContainer","TableContainer","DocumentSheetListPaneInner","totalRows","useReactTable","getCoreRowModel","getFilteredRowModel","getPaginationRowModel","autoResetPageIndex","initialState","columnPinning","columnVisibility","getRowId","fieldId","renderRow","getVisibleCells","rowsCount","getHeaderGroups","headers","DocumentSheetListPane","schemaTypeName","isDocumentSchemaType","addSelectedStateToMenuItems","isEqual","valueRef","shallowEquals","defaultLayout","defaultOrdering","sourceName","defaultSortOrder","menuItemsWithSelectedState","isSheetListLayout","SerializeError","constructor","parentPath","pathSegment","hint","withHelpUrl","helpId","HELP_URL","ORDER_BY_UPDATED_AT","ns","ORDER_BY_CREATED_AT","DEFAULT_SELECTED_ORDERING_OPTION","DEFAULT_ORDERING_OPTIONS","maybeSerializeMenuItem","MenuItemBuilder","serialize","_context","spec","clone","getAction","getTitle","getI18n","getGroup","getIcon","getParams","getShowAsAction","TITLE_REQUIRED","ACTION_OR_INTENT_REQUIRED","ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE","withSpec","builder","getOrderingMenuItem","SortIcon","getOrderingMenuItemsForSchemaType","orderings","maybeSerializeMenuItemGroup","MenuItemGroupBuilder","_title","_i18n","getId","ID_REQUIRED","disallowedPattern","validateId","disallowedChar","match","getStructureNodeId","camelCased","camelCase","test","getSlug","ComponentBuilder","getChild","getComponent","getOptions","getMenuItemGroups","canHandleIntent","componentOptions","resolveTypeForDocument","getClient","GenericViewBuilder","kebabCase","isSerializable","maybeSerializeView","isComponentSpec","ComponentViewBuilder","componentOrSpec","userComponent","COMPONENT_REQUIRED","FormViewBuilder","form","createDocumentChildResolver","resolveDocumentNode","itemId","currentSegment","DocumentBuilder","paneId","getDocumentId","getSchemaType","initialValueTemplate","getInitialValueTemplate","getInitialValueTemplateParameters","getViews","urlId","DOCUMENT_ID_REQUIRED","viewIds","dupes","uniq","getDocumentOptions","documentFromEditor","documentFromEditorWithInitialValue","InitialValueTemplateItemBuilder","getDescription","getTemplateId","getParameters","subtitle","defaultInitialValueTemplateItems","getStructureBuilder","getTypeNames","tpl","initialValueTemplateItem","maybeSerializeInitialValueTemplateItem","menuItemsFromInitialValueTemplateItems","DEFAULT_INTENT_HANDLER","defaultIntentChecker","intentName","isEdit","isCreate","typedSpec","paneFilter","getTypeNamesFromFilter","identity","layoutOptions","noChildResolver","shallowIntentChecker","GenericListBuilder","initialValueTemplatesSpecified","getDefaultLayout","getCanHandleIntent","getShowIcons","getInitialValueTemplates","validateFilter","QUERY_PROVIDED_FOR_FILTER","createDocumentChildResolverForItem","parentItem","Promise","resolve","DocumentListBuilder","getApiVersion","getFilter","getDefaultOrdering","FILTER_REQUIRED","generateHelpUrl","API_VERSION_REQUIRED_FOR_CUSTOM_FILTER","inferInitialValueTemplates","inferTypeName","getSpec","option","getTypeNamesFromEqualityFilter","getTypeNamesFromInTypesFilter","pattern","matches","exec","candidate","getArgType","thing","ListBuilder","isPromise","isListItem","defaultCanHandleIntent","isDocumentListItem","resolveChildForItem","maybeSerializeListItem","ListItemBuilder","listItem","gotWhat","helpText","INVALID_LIST_ITEM","getItems","LIST_ITEMS_MUST_BE_ARRAY","serializedItems","val","dupeIds","dupeDesc","LIST_ITEM_IDS_MUST_BE_UNIQUE","showIcon","getShowIcon","titleIsOptional","SCHEMA_TYPE_NOT_FOUND","serializeOptions","listChild","originalChild","childOptions","createDefaultChildResolver","DocumentListItemBuilder","SCHEMA_TYPE_REQUIRED","DocumentTypeListBuilder","cloneWithoutDefaultIntentHandler","override","BUNDLED_DOC_TYPES","isBundledDocType","isDocumentType","isList","collection","getDocumentTypes","n","getDocumentTypeListItems","getDocumentTypeListItem","startCase","childContext","list","getDocumentTypeList","typeNameOrSpec","StackCompactIcon","StackIcon","hasIcon","getDefaultStructure","createStructureBuilder","defaultDocumentNode","configContext","getConfigContextFromSource","structureBuilder","defaults","documentTypeList","args","documentTypeListItem","documentTypeListItems","documentWithInitialValueTemplate","defaultDocument","menuItemGroup","documentList","documentListItem","orderingMenuItem","orderingMenuItemsForType","editor","isValidElementType","uniqueId","LiveEditBadge","activePanes","setActivePanes","getIntentState","routerState","editDocumentId","isTemplate","TIMELINE_ICON_COMPONENTS","create","discardDraft","initial","editDraft","EditIcon","editLive","getTimelineEventIconComponent","hideScrollbarOnExpand","listWrapper","TIMELINE_LIST_WRAPPER_ID","firstChildren","scrollHeight","clientHeight","currentStyle","getComputedStyle","FlipIcon","ExpandableTimelineItemButton","handleExpandClick","StackWrapper","ListWrapper","$maxHeight","$visible","TIMELINE_ITEM_I18N_KEY_MAPPING","UserAvatarStack","maxLength","userIds","withTooltip","userId","IconBox","getTheme_v2","$color","avatar","TIMELINE_ITEM_EVENT_TONE","withinSelection","RELATIVE_TIME_OPTIONS","minimal","AvatarSkeleton","Skeleton","NameSkeleton","font","UserLine","user","useUser","TooltipContent","collaborators","TimelineItem","chunk","onSelect","optionsMenu","endTimestamp","timestamp","iconComponent","authors","authorUserIds","collaboratorsUsersIds","isSelectable","dateStyle","timeStyle","dateFormat","useDateTimeFormat","updatedTimeAgo","parsedDate","formattedTimestamp","evt","T3","T4","t29","t30","t31","t32","t33","t34","isNonPublishChunk","isPublishChunk","getPreviousPublishAction","chunks","previousPublish","addChunksMetadata","Timeline","hasMoreChunks","lastChunk","selectedChunk","onLoadMore","listMaxHeight","selectedChunkId","chunksWithMetadata","expandedParents","setExpandedParents","filteredChunks","handleExpandParent","selectedIndex","handleSelectChunk","timelineChunk","c","TimelineError","Popover","TIMELINE_MENU_PORTAL","TimelineMenu","setOpen","button","setButton","popoverRef","setPopoverRef","realRevChunk","sinceTime","_temp5","handleOpen","revChunk","sinceId","revId","findRangeForRev","selectRev","sinceChunk","sinceId_0","revId_0","findRangeForSince","selectSince","loadMore","handleLoadMore","revLabel","formatParams","buttonLabel","ChevronDownIcon","state_3","state_2","state_1","state_0","ChangesInspector","showChanges","scrollRef","setScrollRef","diff","selectionState","isComparingCurrent","structureT","FieldWrapper","ChangeFieldWrapper","rootDiff","showFromValue","documentContext","HistorySelector","showList","listHeight","setListHeight","getScrollerRef","FadeInFlex","TABS","isValidTab","tab","ChangesTabs","isReady","paneRouterTab","setPaneRouterTab","changesInspector","getPathTitles","f","itemType","_key","MARKER_ICON","InfoOutlineIcon","MARKER_TONE","ValidationInspector","marker","ValidationCard","errorInfo","setErrorInfo","level","DocumentNodePathBreadcrumbs","pathTitles","Fragment","fontWeight","validationMarkers","hasErrors","isValidationError","hasWarnings","isValidationWarning","CheckmarkCircleIcon","validationInspector","legacyEditParamsToState","decodeURIComponent","encodePanesSegment","encodeChunks","encodeURIComponent","legacyEditParamsToPath","toState","parsePanesSegment","toPath","router","route","intents","transform","panePattern","isParam","str","isPayloadLike","exclusiveParams","isTruthy","parseChunks","sibling","tryParseBase64Payload","firstSibling","paneIsFirstSibling","sameAsFirst","encodedPayload","encodeJsonParams","encodedParams","valueFromFirstSibling","flat","parseOldPanesSegment","restOfSiblings","buffer","payloadChunk","tryParsePayload","decodeJsonParams","definePlugin","MasterDetailIcon","prevActions","prevBadges","prevInspectors","tools","lazy","canHandleCreateIntent","canHandleEditIntent","controlsDocumentTitle","bundles","StructureToolProvider","structure","resolveStructure","setLayoutCollapsed","useConfigContextFromSource","S","rootPaneNode","structureContext"],"mappings":"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"}