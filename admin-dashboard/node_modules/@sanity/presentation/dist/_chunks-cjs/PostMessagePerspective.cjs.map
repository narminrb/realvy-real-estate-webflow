{"version":3,"file":"PostMessagePerspective.cjs","sources":["../../src/PostMessagePerspective.tsx"],"sourcesContent":["import type {ClientPerspective} from '@sanity/client'\nimport {memo, useEffect, type FC} from 'react'\nimport type {VisualEditingConnection} from './types'\n\nexport interface PostMessagePerspectiveProps {\n  comlink: VisualEditingConnection\n  perspective: ClientPerspective\n}\n\nconst PostMessagePerspective: FC<PostMessagePerspectiveProps> = (props) => {\n  const {comlink, perspective} = props\n\n  // Return the perspective when requested\n  useEffect(() => {\n    return comlink.on('visual-editing/fetch-perspective', () => ({\n      perspective,\n    }))\n  }, [comlink, perspective])\n\n  // Dispatch a perspective message when the perspective changes\n  useEffect(() => {\n    comlink.post({\n      type: 'presentation/perspective',\n      data: {perspective},\n    })\n  }, [comlink, perspective])\n\n  return null\n}\n\nexport default memo(PostMessagePerspective)\n"],"names":["PostMessagePerspective","props","$","_c","comlink","perspective","t0","t1","on","useEffect","t2","t3","post","type","data","memo"],"mappings":";;AASA,MAAMA,yBAA0DC,CAAA,UAAA;AAAAC,QAAAA,IAAAC,uBAAA,CAAA,GAC9D;AAAA,IAAAC;AAAAA,IAAAC;AAAAA,EAAAA,IAA+BJ;AAAK,MAAAK,IAAAC;AAAAL,IAAAE,CAAAA,MAAAA,WAAAF,SAAAG,eAG1BC,KAAAA,MACDF,QAAOI,GAAI,oCAAkC,OAAA;AAAA,IAAAH;AAAAA,EAElD,EAAA,GACDE,KAAA,CAACH,SAASC,WAAW,GAACH,OAAAE,SAAAF,OAAAG,aAAAH,OAAAI,IAAAJ,OAAAK,OAAAD,KAAAJ,EAAA,CAAA,GAAAK,KAAAL,EAAA,CAAA,IAJzBO,MAAAA,UAAUH,IAIPC,EAAsB;AAAC,MAAAG,IAAAC;AAAAT,SAAAA,EAAAE,CAAAA,MAAAA,WAAAF,SAAAG,eAGhBK,KAAAA,MAAA;AACRN,YAAOQ,KAAA;AAAA,MAAAC,MACC;AAAA,MAA0BC,MAAA;AAAA,QAAAT;AAAAA,MAAAA;AAAAA,IAAA,CAEjC;AAAA,EACAM,GAAAA,KAAA,CAACP,SAASC,WAAW,GAACH,OAAAE,SAAAF,OAAAG,aAAAH,OAAAQ,IAAAR,OAAAS,OAAAD,KAAAR,EAAA,CAAA,GAAAS,KAAAT,EAAA,CAAA,IALzBO,MAAAA,UAAUC,IAKPC,EAAsB,GAAC;AAAA;AAK5B,IAAeI,2BAAAA,MAAAA,KAAKf,sBAAsB;;"}