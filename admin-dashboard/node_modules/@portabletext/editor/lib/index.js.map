{"version":3,"file":"index.js","sources":["../src/editor/behavior/behavior.types.ts","../src/editor/behavior/behavior.utils.ts","../src/editor/behavior/behavior.core.block-objects.ts","../src/editor/behavior/behavior.core.decorators.ts","../src/editor/behavior/behavior.core.lists.ts","../src/editor/behavior/behavior.core.ts","../src/editor/behavior/behavior.links.ts","../src/editor/behavior/behavior.utils.block-offset.ts","../src/editor/behavior/behavior.utils.is-keyed-segment.ts","../src/editor/behavior/behavior.utils.reverse-selection.ts","../src/editor/behavior/behavior.utils.get-selection-text.ts","../src/editor/behavior/behavior.utils.get-start-point.ts","../src/editor/behavior/behavior.utilts.get-text-before.ts","../src/editor/behavior/behavior.markdown.ts","../src/utils/getPortableTextMemberSchemaTypes.ts","../src/editor/define-schema.ts","../src/utils/debug.ts","../src/utils/paths.ts","../src/utils/ranges.ts","../src/utils/selection.ts","../src/utils/values.ts","../src/utils/weakMaps.ts","../src/editor/nodes/DefaultObject.tsx","../src/editor/nodes/index.ts","../src/editor/components/DraggableBlock.tsx","../src/editor/components/Element.tsx","../src/editor/hooks/usePortableTextEditor.ts","../src/editor/nodes/DefaultAnnotation.tsx","../src/utils/schema.ts","../src/utils/validateValue.ts","../src/utils/withChanges.ts","../src/utils/withoutPatching.ts","../../../node_modules/.pnpm/@sanity+diff-match-patch@3.1.1/node_modules/@sanity/diff-match-patch/dist/index.js","../src/utils/withUndoRedo.ts","../src/editor/plugins/createWithUndoRedo.ts","../src/editor/hooks/useSyncValue.ts","../src/editor/components/Synchronizer.tsx","../src/editor/editor-actor-context.ts","../src/editor/hooks/usePortableTextEditorSelection.tsx","../src/editor/key-generator.ts","../src/utils/operationToPatches.ts","../src/editor/plugins/create-with-event-listeners.ts","../src/editor/plugins/createWithMaxBlocks.ts","../src/editor/plugins/createWithObjectKeys.ts","../src/utils/applyPatch.ts","../src/editor/plugins/createWithPatches.ts","../src/editor/plugins/createWithPlaceholderBlock.ts","../src/editor/plugins/createWithPortableTextBlockStyle.ts","../src/editor/plugins/createWithPortableTextLists.ts","../../../node_modules/.pnpm/@portabletext+toolkit@2.0.16/node_modules/@portabletext/toolkit/dist/index.js","../src/utils/sibling-utils.ts","../src/editor/plugins/createWithPortableTextMarkModel.ts","../src/editor/plugins/createWithPortableTextSelections.ts","../src/editor/plugins/createWithSchemaTypes.ts","../src/editor/plugins/createWithUtils.ts","../src/editor/plugins/with-plugins.ts","../src/editor/create-slate-editor.tsx","../src/editor/behavior/behavior.action-utils.insert-block.ts","../src/editor/behavior/behavior.action.insert-block-object.ts","../src/editor/plugins/createWithEditableAPI.ts","../src/editor/behavior/behavior.action.insert-break.ts","../src/editor/behavior/behavior.action.insert-span.ts","../src/editor/behavior/behavior.actions.ts","../src/editor/editor-machine.ts","../src/editor/use-editor.ts","../src/editor/PortableTextEditor.tsx","../src/editor/components/Leaf.tsx","../src/utils/is-hotkey.ts","../src/editor/plugins/createWithHotKeys.ts","../src/editor/plugins/createWithInsertData.ts","../src/editor/withSyncRangeDecorations.ts","../src/editor/Editable.tsx","../src/editor/editor-provider.tsx","../src/editor/editor-event-listener.tsx"],"sourcesContent":["import type {\n  KeyedSegment,\n  PortableTextBlock,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport type {TextUnit} from 'slate'\nimport type {TextInsertTextOptions} from 'slate/dist/interfaces/transforms/text'\nimport type {\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {BlockOffset} from './behavior.utils.block-offset'\n\n/**\n * @alpha\n */\nexport type BehaviorContext = {\n  schema: PortableTextMemberSchemaTypes\n  value: Array<PortableTextBlock>\n  selection: NonNullable<EditorSelection>\n}\n\n/**\n * @alpha\n */\nexport type BehaviorEvent =\n  | {\n      type: 'annotation.add'\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: 'annotation.remove'\n      annotation: {\n        name: string\n      }\n    }\n  | {\n      type: 'annotation.toggle'\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: 'decorator.add'\n      decorator: string\n    }\n  | {\n      type: 'decorator.remove'\n      decorator: string\n    }\n  | {\n      type: 'decorator.toggle'\n      decorator: string\n    }\n  | {\n      type: 'delete backward'\n      unit: TextUnit\n    }\n  | {\n      type: 'delete forward'\n      unit: TextUnit\n    }\n  | {\n      type: 'focus'\n    }\n  | {\n      type: 'insert soft break'\n    }\n  | {\n      type: 'insert break'\n    }\n  | {\n      type: 'insert text'\n      text: string\n      options?: TextInsertTextOptions\n    }\n  | {\n      type: 'paste'\n      clipboardData: NonNullable<ClipboardEvent['clipboardData']>\n    }\n\n/**\n * @alpha\n */\nexport type BehaviorGuard<\n  TBehaviorEvent extends BehaviorEvent,\n  TGuardResponse,\n> = ({\n  context,\n  event,\n}: {\n  event: TBehaviorEvent\n  context: BehaviorContext\n}) => TGuardResponse | false\n\n/**\n * @alpha\n */\nexport type BehaviorActionIntend =\n  | BehaviorEvent\n  | {\n      type: 'insert block object'\n      placement: 'auto' | 'after' | 'before'\n      blockObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: 'insert span'\n      text: string\n      annotations?: Array<{\n        name: string\n        value: {[prop: string]: unknown}\n      }>\n      decorators?: Array<string>\n    }\n  | {\n      type: 'insert text block'\n      placement: 'auto' | 'after' | 'before'\n      textBlock?: {\n        children?: PortableTextTextBlock['children']\n      }\n    }\n  | {\n      type: 'set block'\n      paths: Array<[KeyedSegment]>\n      style?: string\n      listItem?: string\n      level?: number\n    }\n  | {\n      type: 'unset block'\n      paths: Array<[KeyedSegment]>\n      props: Array<'style' | 'listItem' | 'level'>\n    }\n  | {\n      type: 'delete block'\n      blockPath: [KeyedSegment]\n    }\n  | {\n      type: 'delete text'\n      anchor: BlockOffset\n      focus: BlockOffset\n    }\n  | {\n      type: 'effect'\n      effect: () => void\n    }\n  | {\n      type: 'select'\n      selection: EditorSelection\n    }\n  | {\n      type: 'reselect'\n    }\n\n/**\n * @alpha\n */\nexport type BehaviorAction = BehaviorActionIntend & {\n  editor: PortableTextSlateEditor\n}\n\n/**\n * @alpha\n */\nexport type Behavior<\n  TBehaviorEventType extends BehaviorEvent['type'] = BehaviorEvent['type'],\n  TGuardResponse = true,\n> = {\n  /**\n   * The internal editor event that triggers this behavior.\n   */\n  on: TBehaviorEventType\n  /**\n   * Predicate function that determines if the behavior should be executed.\n   * Returning a non-nullable value from the guard will pass the value to the\n   * actions and execute them.\n   */\n  guard?: BehaviorGuard<\n    PickFromUnion<BehaviorEvent, 'type', TBehaviorEventType>,\n    TGuardResponse\n  >\n  /**\n   * Array of behavior action sets.\n   */\n  actions: Array<BehaviorActionIntendSet<TBehaviorEventType, TGuardResponse>>\n}\n\n/**\n * @alpha\n */\nexport type BehaviorActionIntendSet<\n  TBehaviorEventType extends BehaviorEvent['type'] = BehaviorEvent['type'],\n  TGuardResponse = true,\n> = (\n  {\n    context,\n    event,\n  }: {\n    context: BehaviorContext\n    event: PickFromUnion<BehaviorEvent, 'type', TBehaviorEventType>\n  },\n  guardResponse: TGuardResponse,\n) => Array<BehaviorActionIntend>\n\n/**\n * @alpha\n */\nexport function defineBehavior<\n  TBehaviorEventType extends BehaviorEvent['type'],\n  TGuardResponse = true,\n>(behavior: Behavior<TBehaviorEventType, TGuardResponse>): Behavior {\n  return behavior as unknown as Behavior\n}\n\n/**\n * @alpha\n */\nexport type PickFromUnion<\n  TUnion,\n  TTagKey extends keyof TUnion,\n  TPickedTags extends TUnion[TTagKey],\n> = TUnion extends Record<TTagKey, TPickedTags> ? TUnion : never\n\n/**\n * @alpha\n */\nexport type OmitFromUnion<\n  TUnion,\n  TTagKey extends keyof TUnion,\n  TOmittedTags extends TUnion[TTagKey],\n> = TUnion extends Record<TTagKey, TOmittedTags> ? never : TUnion\n","import {\n  isKeySegment,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type KeyedSegment,\n  type PortableTextBlock,\n  type PortableTextObject,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport type {BehaviorContext} from './behavior.types'\n\n/**\n * Selection utilities\n */\n\nexport function selectionIsCollapsed(context: BehaviorContext) {\n  return (\n    context.selection?.anchor.path.join() ===\n      context.selection?.focus.path.join() &&\n    context.selection?.anchor.offset === context.selection?.focus.offset\n  )\n}\n\n/**\n * Value utilities\n */\n\nexport function getFocusBlock(\n  context: BehaviorContext,\n): {node: PortableTextBlock; path: [KeyedSegment]} | undefined {\n  const key = context.selection\n    ? isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n    : undefined\n\n  const node = key\n    ? context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\nexport function getFocusTextBlock(\n  context: BehaviorContext,\n): {node: PortableTextTextBlock; path: [KeyedSegment]} | undefined {\n  const focusBlock = getFocusBlock(context)\n\n  return focusBlock && isPortableTextTextBlock(focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n\nexport function getFocusBlockObject(\n  context: BehaviorContext,\n): {node: PortableTextObject; path: [KeyedSegment]} | undefined {\n  const focusBlock = getFocusBlock(context)\n\n  return focusBlock && !isPortableTextTextBlock(focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n\nexport function getFocusChild(context: BehaviorContext):\n  | {\n      node: PortableTextObject | PortableTextSpan\n      path: [KeyedSegment, 'children', KeyedSegment]\n    }\n  | undefined {\n  const focusBlock = getFocusTextBlock(context)\n\n  if (!focusBlock) {\n    return undefined\n  }\n\n  const key = context.selection\n    ? isKeySegment(context.selection.focus.path[2])\n      ? context.selection.focus.path[2]._key\n      : undefined\n    : undefined\n\n  const node = key\n    ? focusBlock.node.children.find((span) => span._key === key)\n    : undefined\n\n  return node && key\n    ? {node, path: [...focusBlock.path, 'children', {_key: key}]}\n    : undefined\n}\n\nexport function getFocusSpan(\n  context: BehaviorContext,\n):\n  | {node: PortableTextSpan; path: [KeyedSegment, 'children', KeyedSegment]}\n  | undefined {\n  const focusChild = getFocusChild(context)\n\n  return focusChild && isPortableTextSpan(focusChild.node)\n    ? {node: focusChild.node, path: focusChild.path}\n    : undefined\n}\n\nexport function getSelectionStartBlock(context: BehaviorContext):\n  | {\n      node: PortableTextBlock\n      path: [KeyedSegment]\n    }\n  | undefined {\n  const key = context.selection.backward\n    ? isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n    : isKeySegment(context.selection.anchor.path[0])\n      ? context.selection.anchor.path[0]._key\n      : undefined\n\n  const node = key\n    ? context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\nexport function getSelectionEndBlock(context: BehaviorContext):\n  | {\n      node: PortableTextBlock\n      path: [KeyedSegment]\n    }\n  | undefined {\n  const key = context.selection.backward\n    ? isKeySegment(context.selection.anchor.path[0])\n      ? context.selection.anchor.path[0]._key\n      : undefined\n    : isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n\n  const node = key\n    ? context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\nexport function getPreviousBlock(\n  context: BehaviorContext,\n): {node: PortableTextBlock; path: [KeyedSegment]} | undefined {\n  let previousBlock: {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n  const selectionStartBlock = getSelectionStartBlock(context)\n\n  if (!selectionStartBlock) {\n    return undefined\n  }\n\n  let foundSelectionStartBlock = false\n\n  for (const block of context.value) {\n    if (block._key === selectionStartBlock.node._key) {\n      foundSelectionStartBlock = true\n      break\n    }\n\n    previousBlock = {node: block, path: [{_key: block._key}]}\n  }\n\n  if (foundSelectionStartBlock && previousBlock) {\n    return previousBlock\n  }\n\n  return undefined\n}\n\nexport function getNextBlock(\n  context: BehaviorContext,\n): {node: PortableTextBlock; path: [KeyedSegment]} | undefined {\n  let nextBlock: {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n  const selectionEndBlock = getSelectionEndBlock(context)\n\n  if (!selectionEndBlock) {\n    return undefined\n  }\n\n  let foundSelectionEndBlock = false\n\n  for (const block of context.value) {\n    if (block._key === selectionEndBlock.node._key) {\n      foundSelectionEndBlock = true\n      continue\n    }\n\n    if (foundSelectionEndBlock) {\n      nextBlock = {node: block, path: [{_key: block._key}]}\n      break\n    }\n  }\n\n  if (foundSelectionEndBlock && nextBlock) {\n    return nextBlock\n  }\n\n  return undefined\n}\n\nexport function isEmptyTextBlock(block: PortableTextBlock) {\n  if (!isPortableTextTextBlock(block)) {\n    return false\n  }\n\n  const onlyText = block.children.every(isPortableTextSpan)\n  const blockText = getTextBlockText(block)\n\n  return onlyText && blockText === ''\n}\n\nexport function getTextBlockText(block: PortableTextTextBlock) {\n  return block.children.map((child) => child.text ?? '').join('')\n}\n","import {isPortableTextTextBlock} from '@sanity/types'\nimport {defineBehavior} from './behavior.types'\nimport {\n  getFocusBlockObject,\n  getFocusTextBlock,\n  getNextBlock,\n  getPreviousBlock,\n  isEmptyTextBlock,\n  selectionIsCollapsed,\n} from './behavior.utils'\n\nconst breakingBlockObject = defineBehavior({\n  on: 'insert break',\n  guard: ({context}) => {\n    const focusBlockObject = getFocusBlockObject(context)\n\n    return !!focusBlockObject\n  },\n  actions: [() => [{type: 'insert text block', placement: 'after'}]],\n})\n\nconst deletingEmptyTextBlockAfterBlockObject = defineBehavior({\n  on: 'delete backward',\n  guard: ({context}) => {\n    const focusTextBlock = getFocusTextBlock(context)\n    const selectionCollapsed = selectionIsCollapsed(context)\n    const previousBlock = getPreviousBlock(context)\n\n    if (!focusTextBlock || !selectionCollapsed || !previousBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(focusTextBlock.node) &&\n      !isPortableTextTextBlock(previousBlock.node)\n    ) {\n      return {focusTextBlock, previousBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, previousBlock}) => [\n      {\n        type: 'delete block',\n        blockPath: focusTextBlock.path,\n      },\n      {\n        type: 'select',\n        selection: {\n          anchor: {path: previousBlock.path, offset: 0},\n          focus: {path: previousBlock.path, offset: 0},\n        },\n      },\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockBeforeBlockObject = defineBehavior({\n  on: 'delete forward',\n  guard: ({context}) => {\n    const focusTextBlock = getFocusTextBlock(context)\n    const selectionCollapsed = selectionIsCollapsed(context)\n    const nextBlock = getNextBlock(context)\n\n    if (!focusTextBlock || !selectionCollapsed || !nextBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(focusTextBlock.node) &&\n      !isPortableTextTextBlock(nextBlock.node)\n    ) {\n      return {focusTextBlock, nextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, nextBlock}) => [\n      {\n        type: 'delete block',\n        blockPath: focusTextBlock.path,\n      },\n      {\n        type: 'select',\n        selection: {\n          anchor: {path: nextBlock.path, offset: 0},\n          focus: {path: nextBlock.path, offset: 0},\n        },\n      },\n    ],\n  ],\n})\n\nexport const coreBlockObjectBehaviors = {\n  breakingBlockObject,\n  deletingEmptyTextBlockAfterBlockObject,\n  deletingEmptyTextBlockBeforeBlockObject,\n}\n","import {defineBehavior} from './behavior.types'\n\nconst decoratorAdd = defineBehavior({\n  on: 'decorator.add',\n  actions: [\n    ({event}) => [\n      {\n        type: 'decorator.add',\n        decorator: event.decorator,\n      },\n      {\n        type: 'reselect',\n      },\n    ],\n  ],\n})\n\nconst decoratorRemove = defineBehavior({\n  on: 'decorator.remove',\n  actions: [\n    ({event}) => [\n      {\n        type: 'decorator.remove',\n        decorator: event.decorator,\n      },\n      {\n        type: 'reselect',\n      },\n    ],\n  ],\n})\n\nconst decoratorToggle = defineBehavior({\n  on: 'decorator.toggle',\n  actions: [\n    ({event}) => [\n      {\n        type: 'decorator.toggle',\n        decorator: event.decorator,\n      },\n      {\n        type: 'reselect',\n      },\n    ],\n  ],\n})\n\nexport const coreDecoratorBehaviors = {\n  decoratorAdd,\n  decoratorRemove,\n  decoratorToggle,\n}\n","import {defineBehavior} from './behavior.types'\nimport {\n  getFocusSpan,\n  getFocusTextBlock,\n  selectionIsCollapsed,\n} from './behavior.utils'\n\nconst clearListOnBackspace = defineBehavior({\n  on: 'delete backward',\n  guard: ({context}) => {\n    const selectionCollapsed = selectionIsCollapsed(context)\n    const focusTextBlock = getFocusTextBlock(context)\n    const focusSpan = getFocusSpan(context)\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      context.selection.focus.offset === 0\n\n    if (atTheBeginningOfBLock && focusTextBlock.node.level === 1) {\n      return {focusTextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock}) => [\n      {\n        type: 'unset block',\n        props: ['listItem', 'level'],\n        paths: [focusTextBlock.path],\n      },\n    ],\n  ],\n})\n\nconst unindentListOnBackspace = defineBehavior({\n  on: 'delete backward',\n  guard: ({context}) => {\n    const selectionCollapsed = selectionIsCollapsed(context)\n    const focusTextBlock = getFocusTextBlock(context)\n    const focusSpan = getFocusSpan(context)\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      context.selection.focus.offset === 0\n\n    if (\n      atTheBeginningOfBLock &&\n      focusTextBlock.node.level !== undefined &&\n      focusTextBlock.node.level > 1\n    ) {\n      return {focusTextBlock, level: focusTextBlock.node.level - 1}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, level}) => [\n      {\n        type: 'set block',\n        level,\n        paths: [focusTextBlock.path],\n      },\n    ],\n  ],\n})\n\nexport const coreListBehaviors = {clearListOnBackspace, unindentListOnBackspace}\n","import {coreBlockObjectBehaviors} from './behavior.core.block-objects'\nimport {coreDecoratorBehaviors} from './behavior.core.decorators'\nimport {coreListBehaviors} from './behavior.core.lists'\nimport {defineBehavior} from './behavior.types'\n\nconst softReturn = defineBehavior({\n  on: 'insert soft break',\n  actions: [() => [{type: 'insert text', text: '\\n'}]],\n})\n\n/**\n * @alpha\n */\nexport const coreBehaviors = [\n  softReturn,\n  coreDecoratorBehaviors.decoratorAdd,\n  coreDecoratorBehaviors.decoratorRemove,\n  coreDecoratorBehaviors.decoratorToggle,\n  coreBlockObjectBehaviors.breakingBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockAfterBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockBeforeBlockObject,\n  coreListBehaviors.clearListOnBackspace,\n  coreListBehaviors.unindentListOnBackspace,\n]\n\n/**\n * @alpha\n */\nexport const coreBehavior = {\n  softReturn,\n  decorators: coreDecoratorBehaviors,\n  blockObjects: coreBlockObjectBehaviors,\n  lists: coreListBehaviors,\n}\n","import type {PortableTextMemberSchemaTypes} from '../../types/editor'\nimport {defineBehavior} from './behavior.types'\nimport {getFocusSpan, selectionIsCollapsed} from './behavior.utils'\n\n/**\n * @alpha\n */\nexport type LinkBehaviorsConfig = {\n  linkAnnotation?: (context: {\n    schema: PortableTextMemberSchemaTypes\n    url: string\n  }) => {name: string; value: {[prop: string]: unknown}} | undefined\n}\n\n/**\n * @alpha\n */\nexport function createLinkBehaviors(config: LinkBehaviorsConfig) {\n  const pasteLinkOnSelection = defineBehavior({\n    on: 'paste',\n    guard: ({context, event}) => {\n      const selectionCollapsed = selectionIsCollapsed(context)\n      const text = event.clipboardData.getData('text/plain')\n      const url = looksLikeUrl(text) ? text : undefined\n      const annotation =\n        url !== undefined\n          ? config.linkAnnotation?.({url, schema: context.schema})\n          : undefined\n\n      if (annotation && !selectionCollapsed) {\n        return {annotation}\n      }\n\n      return false\n    },\n    actions: [\n      (_, {annotation}) => [\n        {\n          type: 'annotation.add',\n          annotation,\n        },\n      ],\n    ],\n  })\n  const pasteLinkAtCaret = defineBehavior({\n    on: 'paste',\n    guard: ({context, event}) => {\n      const focusSpan = getFocusSpan(context)\n      const selectionCollapsed = selectionIsCollapsed(context)\n\n      if (!focusSpan || !selectionCollapsed) {\n        return false\n      }\n\n      const text = event.clipboardData.getData('text/plain')\n      const url = looksLikeUrl(text) ? text : undefined\n      const annotation =\n        url !== undefined\n          ? config.linkAnnotation?.({url, schema: context.schema})\n          : undefined\n\n      if (url && annotation && selectionCollapsed) {\n        return {focusSpan, annotation, url}\n      }\n\n      return false\n    },\n    actions: [\n      (_, {annotation, url}) => [\n        {\n          type: 'insert span',\n          text: url,\n          annotations: [annotation],\n        },\n      ],\n    ],\n  })\n\n  const linkBehaviors = [pasteLinkOnSelection, pasteLinkAtCaret]\n\n  return linkBehaviors\n}\n\nfunction looksLikeUrl(text: string) {\n  let looksLikeUrl = false\n  try {\n    new URL(text)\n    looksLikeUrl = true\n  } catch {}\n  return looksLikeUrl\n}\n","import {\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type KeyedSegment,\n  type PortableTextBlock,\n} from '@sanity/types'\n\n/**\n * @alpha\n */\nexport type BlockOffset = {\n  path: [KeyedSegment]\n  offset: number\n}\n\nexport function blockOffsetToSpanSelectionPoint({\n  value,\n  blockOffset,\n}: {\n  value: Array<PortableTextBlock>\n  blockOffset: BlockOffset\n}) {\n  let offsetLeft = blockOffset.offset\n  let selectionPoint:\n    | {path: [KeyedSegment, 'children', KeyedSegment]; offset: number}\n    | undefined\n\n  for (const block of value) {\n    if (block._key !== blockOffset.path[0]._key) {\n      continue\n    }\n\n    if (!isPortableTextTextBlock(block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (!isPortableTextSpan(child)) {\n        continue\n      }\n\n      if (offsetLeft === 0) {\n        selectionPoint = {\n          path: [...blockOffset.path, 'children', {_key: child._key}],\n          offset: 0,\n        }\n        break\n      }\n\n      if (offsetLeft <= child.text.length) {\n        selectionPoint = {\n          path: [...blockOffset.path, 'children', {_key: child._key}],\n          offset: offsetLeft,\n        }\n        break\n      }\n\n      offsetLeft -= child.text.length\n    }\n  }\n\n  return selectionPoint\n}\n\nexport function spanSelectionPointToBlockOffset({\n  value,\n  selectionPoint,\n}: {\n  value: Array<PortableTextBlock>\n  selectionPoint: {\n    path: [KeyedSegment, 'children', KeyedSegment]\n    offset: number\n  }\n}): BlockOffset | undefined {\n  let offset = 0\n\n  for (const block of value) {\n    if (block._key !== selectionPoint.path[0]._key) {\n      continue\n    }\n\n    if (!isPortableTextTextBlock(block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (!isPortableTextSpan(child)) {\n        continue\n      }\n\n      if (child._key === selectionPoint.path[2]._key) {\n        return {\n          path: [{_key: block._key}],\n          offset: offset + selectionPoint.offset,\n        }\n      }\n\n      offset += child.text.length\n    }\n  }\n}\n","import type {KeyedSegment, PathSegment} from '@sanity/types'\n\nexport function isKeyedSegment(segment: PathSegment): segment is KeyedSegment {\n  return typeof segment === 'object' && segment !== null && '_key' in segment\n}\n","import type {EditorSelection} from '../../types/editor'\n\nexport function reverseSelection(selection: EditorSelection): EditorSelection {\n  if (!selection) {\n    return selection\n  }\n\n  if (selection.backward) {\n    return {\n      anchor: selection.focus,\n      focus: selection.anchor,\n      backward: false,\n    }\n  }\n\n  return {\n    anchor: selection.focus,\n    focus: selection.anchor,\n    backward: true,\n  }\n}\n","import {\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextBlock,\n} from '@sanity/types'\nimport type {EditorSelection} from '../../types/editor'\nimport {isKeyedSegment} from './behavior.utils.is-keyed-segment'\nimport {reverseSelection} from './behavior.utils.reverse-selection'\n\nexport function getSelectionText({\n  value,\n  selection,\n}: {\n  value: Array<PortableTextBlock>\n  selection: NonNullable<EditorSelection>\n}): string {\n  let text = ''\n\n  if (!value || !selection) {\n    return text\n  }\n\n  const forwardSelection = selection.backward\n    ? reverseSelection(selection)\n    : selection\n\n  if (!forwardSelection) {\n    return text\n  }\n\n  for (const block of value) {\n    if (\n      isKeyedSegment(forwardSelection.anchor.path[0]) &&\n      block._key !== forwardSelection.anchor.path[0]._key\n    ) {\n      continue\n    }\n\n    if (!isPortableTextTextBlock(block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (isPortableTextSpan(child)) {\n        if (\n          isKeyedSegment(forwardSelection.anchor.path[2]) &&\n          child._key === forwardSelection.anchor.path[2]._key &&\n          isKeyedSegment(forwardSelection.focus.path[2]) &&\n          child._key === forwardSelection.focus.path[2]._key\n        ) {\n          text =\n            text +\n            child.text.slice(\n              forwardSelection.anchor.offset,\n              forwardSelection.focus.offset,\n            )\n\n          break\n        }\n\n        if (\n          isKeyedSegment(forwardSelection.anchor.path[2]) &&\n          child._key === forwardSelection.anchor.path[2]._key\n        ) {\n          text = text + child.text.slice(forwardSelection.anchor.offset)\n          continue\n        }\n\n        if (\n          isKeyedSegment(forwardSelection.focus.path[2]) &&\n          child._key === forwardSelection.focus.path[2]._key\n        ) {\n          text = text + child.text.slice(0, forwardSelection.focus.offset)\n          break\n        }\n\n        if (text.length > 0) {\n          text + child.text\n        }\n      }\n    }\n\n    if (\n      isKeyedSegment(forwardSelection.focus.path[0]) &&\n      block._key === forwardSelection.focus.path[0]._key\n    ) {\n      break\n    }\n  }\n\n  return text\n}\n","import {\n  isPortableTextTextBlock,\n  type KeyedSegment,\n  type PortableTextBlock,\n} from '@sanity/types'\nimport type {EditorSelectionPoint} from '../../types/editor'\n\nexport function getStartPoint({\n  node,\n  path,\n}: {\n  node: PortableTextBlock\n  path: [KeyedSegment]\n}): EditorSelectionPoint {\n  if (isPortableTextTextBlock(node)) {\n    return {\n      path: [...path, 'children', {_key: node.children[0]._key}],\n      offset: 0,\n    }\n  }\n\n  return {\n    path,\n    offset: 0,\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelectionPoint} from '../../types/editor'\nimport {getSelectionText} from './behavior.utils.get-selection-text'\nimport {getStartPoint} from './behavior.utils.get-start-point'\nimport {isKeyedSegment} from './behavior.utils.is-keyed-segment'\n\nexport function getBlockTextBefore({\n  value,\n  point,\n}: {\n  value: Array<PortableTextBlock>\n  point: EditorSelectionPoint\n}) {\n  const key = isKeyedSegment(point.path[0]) ? point.path[0]._key : undefined\n\n  const block = key ? value.find((block) => block._key === key) : undefined\n\n  if (!block) {\n    return ''\n  }\n\n  const startPoint = getStartPoint({node: block, path: [{_key: block._key}]})\n\n  return getSelectionText({\n    value,\n    selection: {\n      anchor: startPoint,\n      focus: point,\n    },\n  })\n}\n","import {isPortableTextTextBlock} from '@sanity/types'\nimport type {PortableTextMemberSchemaTypes} from '../../types/editor'\nimport {defineBehavior} from './behavior.types'\nimport {\n  getFocusBlock,\n  getFocusSpan,\n  getFocusTextBlock,\n  getTextBlockText,\n  selectionIsCollapsed,\n} from './behavior.utils'\nimport {spanSelectionPointToBlockOffset} from './behavior.utils.block-offset'\nimport {getBlockTextBefore} from './behavior.utilts.get-text-before'\n\n/**\n * @alpha\n */\nexport type MarkdownBehaviorsConfig = {\n  horizontalRuleObject?: (context: {\n    schema: PortableTextMemberSchemaTypes\n  }) => {name: string; value?: {[prop: string]: unknown}} | undefined\n  defaultStyle?: (context: {\n    schema: PortableTextMemberSchemaTypes\n  }) => string | undefined\n  headingStyle?: (context: {\n    schema: PortableTextMemberSchemaTypes\n    level: number\n  }) => string | undefined\n  blockquoteStyle?: (context: {\n    schema: PortableTextMemberSchemaTypes\n  }) => string | undefined\n  unorderedListStyle?: (context: {\n    schema: PortableTextMemberSchemaTypes\n  }) => string | undefined\n  orderedListStyle?: (context: {\n    schema: PortableTextMemberSchemaTypes\n  }) => string | undefined\n}\n\n/**\n * @alpha\n */\nexport function createMarkdownBehaviors(config: MarkdownBehaviorsConfig) {\n  const automaticBlockquoteOnSpace = defineBehavior({\n    on: 'insert text',\n    guard: ({context, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = selectionIsCollapsed(context)\n      const focusTextBlock = getFocusTextBlock(context)\n      const focusSpan = getFocusSpan(context)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const blockOffset = spanSelectionPointToBlockOffset({\n        value: context.value,\n        selectionPoint: {\n          path: [\n            {_key: focusTextBlock.node._key},\n            'children',\n            {_key: focusSpan.node._key},\n          ],\n          offset: context.selection.focus.offset,\n        },\n      })\n\n      if (!blockOffset) {\n        return false\n      }\n\n      const blockText = getTextBlockText(focusTextBlock.node)\n      const caretAtTheEndOfQuote = blockOffset.offset === 1\n      const looksLikeMarkdownQuote = /^>/.test(blockText)\n      const blockquoteStyle = config.blockquoteStyle?.({schema: context.schema})\n\n      if (\n        caretAtTheEndOfQuote &&\n        looksLikeMarkdownQuote &&\n        blockquoteStyle !== undefined\n      ) {\n        return {focusTextBlock, style: blockquoteStyle}\n      }\n\n      return false\n    },\n    actions: [\n      () => [\n        {\n          type: 'insert text',\n          text: ' ',\n        },\n      ],\n      (_, {focusTextBlock, style}) => [\n        {\n          type: 'unset block',\n          props: ['listItem', 'level'],\n          paths: [focusTextBlock.path],\n        },\n        {\n          type: 'set block',\n          style,\n          paths: [focusTextBlock.path],\n        },\n        {\n          type: 'delete text',\n          anchor: {\n            path: focusTextBlock.path,\n            offset: 0,\n          },\n          focus: {\n            path: focusTextBlock.path,\n            offset: 2,\n          },\n        },\n      ],\n    ],\n  })\n  const automaticHr = defineBehavior({\n    on: 'insert text',\n    guard: ({context, event}) => {\n      const hrCharacter =\n        event.text === '-'\n          ? '-'\n          : event.text === '*'\n            ? '*'\n            : event.text === '_'\n              ? '_'\n              : undefined\n\n      if (hrCharacter === undefined) {\n        return false\n      }\n\n      const hrObject = config.horizontalRuleObject?.({\n        schema: context.schema,\n      })\n      const focusBlock = getFocusTextBlock(context)\n      const selectionCollapsed = selectionIsCollapsed(context)\n\n      if (!hrObject || !focusBlock || !selectionCollapsed) {\n        return false\n      }\n\n      const textBefore = getBlockTextBefore({\n        value: context.value,\n        point: context.selection.focus,\n      })\n      const hrBlockOffsets = {\n        anchor: {\n          path: focusBlock.path,\n          offset: 0,\n        },\n        focus: {\n          path: focusBlock.path,\n          offset: 3,\n        },\n      }\n\n      if (textBefore === `${hrCharacter}${hrCharacter}`) {\n        return {hrObject, focusBlock, hrCharacter, hrBlockOffsets}\n      }\n\n      return false\n    },\n    actions: [\n      (_, {hrCharacter}) => [\n        {\n          type: 'insert text',\n          text: hrCharacter,\n        },\n      ],\n      (_, {hrObject, hrBlockOffsets}) => [\n        {\n          type: 'insert block object',\n          placement: 'before',\n          blockObject: hrObject,\n        },\n        {\n          type: 'delete text',\n          ...hrBlockOffsets,\n        },\n      ],\n    ],\n  })\n  const automaticHrOnPaste = defineBehavior({\n    on: 'paste',\n    guard: ({context, event}) => {\n      const text = event.clipboardData.getData('text/plain')\n      const hrRegExp = /^(---)$|(___)$|(\\*\\*\\*)$/gm\n      const hrCharacters = text.match(hrRegExp)?.[0]\n      const hrObject = config.horizontalRuleObject?.({\n        schema: context.schema,\n      })\n      const focusBlock = getFocusBlock(context)\n\n      if (!hrCharacters || !hrObject || !focusBlock) {\n        return false\n      }\n\n      return {hrCharacters, hrObject, focusBlock}\n    },\n    actions: [\n      (_, {hrCharacters}) => [\n        {\n          type: 'insert text',\n          text: hrCharacters,\n        },\n      ],\n      (_, {hrObject, focusBlock}) =>\n        isPortableTextTextBlock(focusBlock.node)\n          ? [\n              {\n                type: 'insert text block',\n                textBlock: {children: focusBlock.node.children},\n                placement: 'after',\n              },\n              {\n                type: 'insert block object',\n                blockObject: hrObject,\n                placement: 'after',\n              },\n              {type: 'delete block', blockPath: focusBlock.path},\n            ]\n          : [\n              {\n                type: 'insert block object',\n                blockObject: hrObject,\n                placement: 'after',\n              },\n            ],\n    ],\n  })\n  const automaticHeadingOnSpace = defineBehavior({\n    on: 'insert text',\n    guard: ({context, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = selectionIsCollapsed(context)\n      const focusTextBlock = getFocusTextBlock(context)\n      const focusSpan = getFocusSpan(context)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const blockOffset = spanSelectionPointToBlockOffset({\n        value: context.value,\n        selectionPoint: {\n          path: [\n            {_key: focusTextBlock.node._key},\n            'children',\n            {_key: focusSpan.node._key},\n          ],\n          offset: context.selection.focus.offset,\n        },\n      })\n\n      if (!blockOffset) {\n        return false\n      }\n\n      const blockText = getTextBlockText(focusTextBlock.node)\n      const markdownHeadingSearch = /^#+/.exec(blockText)\n      const level = markdownHeadingSearch\n        ? markdownHeadingSearch[0].length\n        : undefined\n      const caretAtTheEndOfHeading = blockOffset.offset === level\n\n      if (!caretAtTheEndOfHeading) {\n        return false\n      }\n\n      const style =\n        level !== undefined\n          ? config.headingStyle?.({schema: context.schema, level})\n          : undefined\n\n      if (level !== undefined && style !== undefined) {\n        return {\n          focusTextBlock,\n          style: style,\n          level,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      () => [\n        {\n          type: 'insert text',\n          text: ' ',\n        },\n      ],\n      (_, {focusTextBlock, style, level}) => [\n        {\n          type: 'unset block',\n          props: ['listItem', 'level'],\n          paths: [focusTextBlock.path],\n        },\n        {\n          type: 'set block',\n          style,\n          paths: [focusTextBlock.path],\n        },\n        {\n          type: 'delete text',\n          anchor: {\n            path: focusTextBlock.path,\n            offset: 0,\n          },\n          focus: {\n            path: focusTextBlock.path,\n            offset: level + 1,\n          },\n        },\n      ],\n    ],\n  })\n  const clearStyleOnBackspace = defineBehavior({\n    on: 'delete backward',\n    guard: ({context}) => {\n      const selectionCollapsed = selectionIsCollapsed(context)\n      const focusTextBlock = getFocusTextBlock(context)\n      const focusSpan = getFocusSpan(context)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const atTheBeginningOfBLock =\n        focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n        context.selection.focus.offset === 0\n\n      const defaultStyle = config.defaultStyle?.({schema: context.schema})\n\n      if (\n        atTheBeginningOfBLock &&\n        defaultStyle &&\n        focusTextBlock.node.style !== defaultStyle\n      ) {\n        return {defaultStyle, focusTextBlock}\n      }\n\n      return false\n    },\n    actions: [\n      (_, {defaultStyle, focusTextBlock}) => [\n        {\n          type: 'set block',\n          style: defaultStyle,\n          paths: [focusTextBlock.path],\n        },\n      ],\n    ],\n  })\n  const automaticListOnSpace = defineBehavior({\n    on: 'insert text',\n    guard: ({context, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = selectionIsCollapsed(context)\n      const focusTextBlock = getFocusTextBlock(context)\n      const focusSpan = getFocusSpan(context)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const blockOffset = spanSelectionPointToBlockOffset({\n        value: context.value,\n        selectionPoint: {\n          path: [\n            {_key: focusTextBlock.node._key},\n            'children',\n            {_key: focusSpan.node._key},\n          ],\n          offset: context.selection.focus.offset,\n        },\n      })\n\n      if (!blockOffset) {\n        return false\n      }\n\n      const blockText = getTextBlockText(focusTextBlock.node)\n      const defaultStyle = config.defaultStyle?.({schema: context.schema})\n      const looksLikeUnorderedList = /^(-|\\*)/.test(blockText)\n      const unorderedListStyle = config.unorderedListStyle?.({\n        schema: context.schema,\n      })\n      const caretAtTheEndOfUnorderedList = blockOffset.offset === 1\n\n      if (\n        defaultStyle &&\n        caretAtTheEndOfUnorderedList &&\n        looksLikeUnorderedList &&\n        unorderedListStyle !== undefined\n      ) {\n        return {\n          focusTextBlock,\n          listItem: unorderedListStyle,\n          listItemLength: 1,\n          style: defaultStyle,\n        }\n      }\n\n      const looksLikeOrderedList = /^1\\./.test(blockText)\n      const orderedListStyle = config.orderedListStyle?.({\n        schema: context.schema,\n      })\n      const caretAtTheEndOfOrderedList = blockOffset.offset === 2\n\n      if (\n        defaultStyle &&\n        caretAtTheEndOfOrderedList &&\n        looksLikeOrderedList &&\n        orderedListStyle !== undefined\n      ) {\n        return {\n          focusTextBlock,\n          listItem: orderedListStyle,\n          listItemLength: 2,\n          style: defaultStyle,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      () => [\n        {\n          type: 'insert text',\n          text: ' ',\n        },\n      ],\n      (_, {focusTextBlock, style, listItem, listItemLength}) => [\n        {\n          type: 'set block',\n          listItem,\n          level: 1,\n          style,\n          paths: [focusTextBlock.path],\n        },\n        {\n          type: 'delete text',\n          anchor: {\n            path: focusTextBlock.path,\n            offset: 0,\n          },\n          focus: {\n            path: focusTextBlock.path,\n            offset: listItemLength + 1,\n          },\n        },\n      ],\n    ],\n  })\n\n  const markdownBehaviors = [\n    automaticBlockquoteOnSpace,\n    automaticHeadingOnSpace,\n    automaticHr,\n    automaticHrOnPaste,\n    clearStyleOnBackspace,\n    automaticListOnSpace,\n  ]\n\n  return markdownBehaviors\n}\n","import type {\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  PortableTextBlock,\n  SchemaType,\n  SpanSchemaType,\n} from '@sanity/types'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport function getPortableTextMemberSchemaTypes(\n  portableTextType: ArraySchemaType<PortableTextBlock>,\n): PortableTextMemberSchemaTypes {\n  if (!portableTextType) {\n    throw new Error(\"Parameter 'portabletextType' missing (required)\")\n  }\n  const blockType = portableTextType.of?.find(findBlockType) as\n    | BlockSchemaType\n    | undefined\n  if (!blockType) {\n    throw new Error('Block type is not defined in this schema (required)')\n  }\n  const childrenField = blockType.fields?.find(\n    (field) => field.name === 'children',\n  ) as {type: ArraySchemaType} | undefined\n  if (!childrenField) {\n    throw new Error('Children field for block type found in schema (required)')\n  }\n  const ofType = childrenField.type.of\n  if (!ofType) {\n    throw new Error(\n      'Valid types for block children not found in schema (required)',\n    )\n  }\n  const spanType = ofType.find((memberType) => memberType.name === 'span') as\n    | ObjectSchemaType\n    | undefined\n  if (!spanType) {\n    throw new Error('Span type not found in schema (required)')\n  }\n  const inlineObjectTypes = (ofType.filter(\n    (memberType) => memberType.name !== 'span',\n  ) || []) as ObjectSchemaType[]\n  const blockObjectTypes = (portableTextType.of?.filter(\n    (field) => field.name !== blockType.name,\n  ) || []) as ObjectSchemaType[]\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: (spanType as SpanSchemaType).annotations,\n  }\n}\n\nfunction resolveEnabledStyles(blockType: ObjectSchemaType) {\n  const styleField = blockType.fields?.find(\n    (btField) => btField.name === 'style',\n  )\n  if (!styleField) {\n    throw new Error(\n      \"A field with name 'style' is not defined in the block type (required).\",\n    )\n  }\n  const textStyles =\n    styleField.type.options?.list &&\n    styleField.type.options.list?.filter(\n      (style: {value: string}) => style.value,\n    )\n  if (!textStyles || textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\",\n    )\n  }\n  return textStyles\n}\n\nfunction resolveEnabledDecorators(spanType: ObjectSchemaType) {\n  return (spanType as any).decorators\n}\n\nfunction resolveEnabledListItems(blockType: ObjectSchemaType) {\n  const listField = blockType.fields?.find(\n    (btField) => btField.name === 'listItem',\n  )\n  if (!listField) {\n    throw new Error(\n      \"A field with name 'listItem' is not defined in the block type (required).\",\n    )\n  }\n  const listItems =\n    listField.type.options?.list &&\n    listField.type.options.list.filter((list: {value: string}) => list.value)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n  return listItems\n}\n\nfunction findBlockType(type: SchemaType): BlockSchemaType | null {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return type as BlockSchemaType\n  }\n\n  return null\n}\n","import {Schema as SanitySchema} from '@sanity/schema'\nimport {\n  defineField,\n  defineType,\n  type BlockDecoratorDefinition,\n  type ObjectSchemaType,\n} from '@sanity/types'\nimport startCase from 'lodash.startcase'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {getPortableTextMemberSchemaTypes} from '../utils/getPortableTextMemberSchemaTypes'\n\n/**\n * @alpha\n */\nexport type BaseDefinition = {\n  name: string\n  title?: string\n  icon?: BlockDecoratorDefinition['icon']\n}\n\n/**\n * @alpha\n */\nexport type SchemaDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = {\n  decorators?: ReadonlyArray<TBaseDefinition>\n  blockObjects?: ReadonlyArray<TBaseDefinition>\n  inlineObjects?: ReadonlyArray<TBaseDefinition>\n  annotations?: ReadonlyArray<TBaseDefinition>\n  lists?: ReadonlyArray<TBaseDefinition>\n  styles?: ReadonlyArray<TBaseDefinition>\n}\n\n/**\n * @alpha\n */\nexport function defineSchema<const TSchemaDefinition extends SchemaDefinition>(\n  definition: TSchemaDefinition,\n): TSchemaDefinition {\n  return definition\n}\n\nexport function compileSchemaDefinition<\n  TSchemaDefinition extends SchemaDefinition,\n>(definition?: TSchemaDefinition) {\n  const blockObjects =\n    definition?.blockObjects?.map((blockObject) =>\n      defineType({\n        type: 'object',\n        // Very naive way to work around `SanitySchema.compile` adding default\n        // fields to objects with the name `image`\n        name: blockObject.name === 'image' ? 'tmp-image' : blockObject.name,\n        title: blockObject.title,\n        icon: blockObject.icon,\n        fields: [],\n      }),\n    ) ?? []\n  const inlineObjects =\n    definition?.inlineObjects?.map((inlineObject) =>\n      defineType({\n        type: 'object',\n        name: inlineObject.name,\n        title: inlineObject.title,\n        icon: inlineObject.icon,\n        fields: [],\n      }),\n    ) ?? []\n\n  const portableTextSchema = defineField({\n    type: 'array',\n    name: 'portable-text',\n    of: [\n      ...blockObjects.map((blockObject) => ({type: blockObject.name})),\n      {\n        type: 'block',\n        name: 'block',\n        of: inlineObjects.map((inlineObject) => ({type: inlineObject.name})),\n        marks: {\n          decorators:\n            definition?.decorators?.map((decorator) => ({\n              title: decorator.title ?? startCase(decorator.name),\n              value: decorator.name,\n              icon: decorator.icon,\n            })) ?? [],\n          annotations:\n            definition?.annotations?.map((annotation) => ({\n              name: annotation.name,\n              type: 'object',\n              title: annotation.title,\n              icon: annotation.icon,\n            })) ?? [],\n        },\n        lists:\n          definition?.lists?.map((list) => ({\n            value: list.name,\n            title: list.title ?? startCase(list.name),\n            icon: list.icon,\n          })) ?? [],\n        styles:\n          definition?.styles?.map((style) => ({\n            value: style.name,\n            title: style.title ?? startCase(style.name),\n            icon: style.icon,\n          })) ?? [],\n      },\n    ],\n  })\n\n  const schema = SanitySchema.compile({\n    types: [portableTextSchema, ...blockObjects, ...inlineObjects],\n  }).get('portable-text')\n\n  const pteSchema = getPortableTextMemberSchemaTypes(schema)\n\n  return {\n    ...pteSchema,\n    blockObjects: pteSchema.blockObjects.map((blockObject) =>\n      blockObject.name === 'tmp-image'\n        ? ({\n            ...blockObject,\n            name: 'image',\n            type: {\n              ...blockObject.type,\n              name: 'image',\n            },\n          } as ObjectSchemaType)\n        : blockObject,\n    ),\n  } satisfies PortableTextMemberSchemaTypes\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import {isKeySegment, type Path} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {\n  Editor,\n  Element,\n  type Descendant,\n  type Point,\n  type Path as SlatePath,\n} from 'slate'\nimport type {\n  EditorSelectionPoint,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport type {ObjectWithKeyAndType} from './ranges'\n\nexport function createKeyedPath(\n  point: Point,\n  value: ObjectWithKeyAndType[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n): Path | null {\n  const blockPath = [point.path[0]]\n  if (!value) {\n    return null\n  }\n  const block = value[blockPath[0]]\n  if (!block) {\n    return null\n  }\n  const keyedBlockPath = [{_key: block._key}]\n  if (block._type !== types.block.name) {\n    return keyedBlockPath as Path\n  }\n  let keyedChildPath: Path | undefined\n  const childPath = point.path.slice(0, 2)\n  const child = Array.isArray(block.children) && block.children[childPath[1]]\n  if (child) {\n    keyedChildPath = ['children', {_key: child._key}]\n  }\n  return (\n    keyedChildPath ? [...keyedBlockPath, ...keyedChildPath] : keyedBlockPath\n  ) as Path\n}\n\nexport function createArrayedPath(\n  point: EditorSelectionPoint,\n  editor: Editor,\n): SlatePath {\n  if (!editor) {\n    return []\n  }\n  const [block, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) =>\n        isKeySegment(point.path[0]) &&\n        (n as Descendant)._key === point.path[0]._key,\n    }),\n  )[0] || [undefined, undefined]\n  if (!block || !Element.isElement(block)) {\n    return []\n  }\n  if (editor.isVoid(block)) {\n    return [blockPath[0], 0]\n  }\n  const childPath = [point.path[2]]\n  const childIndex = block.children.findIndex((child) =>\n    isEqual([{_key: child._key}], childPath),\n  )\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex]\n    if (Element.isElement(child) && editor.isVoid(child)) {\n      return blockPath.concat(childIndex).concat(0)\n    }\n    return blockPath.concat(childIndex)\n  }\n  return blockPath\n}\n","import {Point, Range, type BaseRange, type Editor, type Operation} from 'slate'\nimport type {\n  EditorSelection,\n  EditorSelectionPoint,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {createArrayedPath, createKeyedPath} from './paths'\n\nexport interface ObjectWithKeyAndType {\n  _key: string\n  _type: string\n  children?: ObjectWithKeyAndType[]\n}\n\nexport function toPortableTextRange(\n  value: ObjectWithKeyAndType[] | undefined,\n  range: BaseRange | Partial<BaseRange> | null,\n  types: PortableTextMemberSchemaTypes,\n): EditorSelection {\n  if (!range) {\n    return null\n  }\n  let anchor: EditorSelectionPoint | null = null\n  let focus: EditorSelectionPoint | null = null\n  const anchorPath = range.anchor && createKeyedPath(range.anchor, value, types)\n  if (anchorPath && range.anchor) {\n    anchor = {\n      path: anchorPath,\n      offset: range.anchor.offset,\n    }\n  }\n  const focusPath = range.focus && createKeyedPath(range.focus, value, types)\n  if (focusPath && range.focus) {\n    focus = {\n      path: focusPath,\n      offset: range.focus.offset,\n    }\n  }\n  const backward = Boolean(\n    Range.isRange(range) ? Range.isBackward(range) : undefined,\n  )\n  return anchor && focus ? {anchor, focus, backward} : null\n}\n\nexport function toSlateRange(\n  selection: EditorSelection,\n  editor: Editor,\n): Range | null {\n  if (!selection || !editor) {\n    return null\n  }\n  const anchor = {\n    path: createArrayedPath(selection.anchor, editor),\n    offset: selection.anchor.offset,\n  }\n  const focus = {\n    path: createArrayedPath(selection.focus, editor),\n    offset: selection.focus.offset,\n  }\n  if (focus.path.length === 0 || anchor.path.length === 0) {\n    return null\n  }\n  const range = anchor && focus ? {anchor, focus} : null\n  return range\n}\n\nexport function moveRangeByOperation(\n  range: Range,\n  operation: Operation,\n): Range | null {\n  const anchor = Point.transform(range.anchor, operation)\n  const focus = Point.transform(range.focus, operation)\n\n  if (anchor === null || focus === null) {\n    return null\n  }\n\n  if (Point.equals(anchor, range.anchor) && Point.equals(focus, range.focus)) {\n    return range\n  }\n\n  return {anchor, focus}\n}\n","import type {Path, PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[],\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' &&\n    '_key' in point.path[0] &&\n    point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' &&\n    '_key' in point.path[2] &&\n    point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find(\n    (blk) => blk._key === blockKey,\n  )\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (\n      !block.children ||\n      (Array.isArray(block.children) && block.children.length === 0)\n    ) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) &&\n      block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined,\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (\n    anchor &&\n    value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))\n  ) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus, backward: selection.backward}\n  }\n  return null\n}\n","import type {\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Element, Text, type Descendant, type Node} from 'slate'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport const EMPTY_MARKDEFS: PortableTextObject[] = []\n\nexport const VOID_CHILD_KEY = 'void-child'\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>,\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: PortableTextMemberSchemaTypes},\n  keyMap: Record<string, any> = {},\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const voidChildren = [\n        {_key: VOID_CHILD_KEY, _type: 'span', text: '', marks: []},\n      ]\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const hasMissingChildren = typeof textBlock.children === 'undefined'\n\n        const children = (textBlock.children || []).map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          // Return 'slate' version of inline object where the actual\n          // value is stored in the `value` property.\n          // In slate, inline objects are represented as regular\n          // children with actual text node in order to be able to\n          // be selected the same way as the rest of the (text) content.\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: voidChildren,\n                value: cRest,\n                __inline: true,\n              },\n              keyMap,\n            )\n          }\n          // Original child object (span)\n          return child\n        })\n        // Return original block\n        if (\n          !hasMissingStyle &&\n          !hasMissingMarkDefs &&\n          !hasMissingChildren &&\n          !hasInlines &&\n          Element.isElement(block)\n        ) {\n          // Original object\n          return block\n        }\n        // TODO: remove this when we have a better way to handle missing style\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].value\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: voidChildren,\n          value: rest,\n        },\n        keyMap,\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: Descendant[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {},\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (\n      _type === textBlockType &&\n      'children' in block &&\n      Array.isArray(block.children) &&\n      _key\n    ) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child\n          return keepObjectEquality(\n            {...rest, ...v, _key: k as string, _type: t as string},\n            keyMap,\n          )\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality(\n        {...block, children, _key, _type},\n        keyMap,\n      ) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap,\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  schemaTypes: PortableTextMemberSchemaTypes,\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === schemaTypes.block.name &&\n      'style' in children[0] &&\n      children[0].style === schemaTypes.styles[0].value &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n\nexport function findBlockAndIndexFromPath(\n  firstPathSegment: PathSegment,\n  children: (Node | Partial<Node>)[],\n): [Element | undefined, number | undefined] {\n  let blockIndex = -1\n  const isNumber = Number.isInteger(Number(firstPathSegment))\n  if (isNumber) {\n    blockIndex = Number(firstPathSegment)\n  } else if (children) {\n    blockIndex = children.findIndex(\n      (blk) =>\n        Element.isElement(blk) && isEqual({_key: blk._key}, firstPathSegment),\n    )\n  }\n  if (blockIndex > -1) {\n    return [children[blockIndex] as Element, blockIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function findChildAndIndexFromPath(\n  secondPathSegment: PathSegment,\n  block: Element,\n): [Element | Text | undefined, number] {\n  let childIndex = -1\n  const isNumber = Number.isInteger(Number(secondPathSegment))\n  if (isNumber) {\n    childIndex = Number(secondPathSegment)\n  } else {\n    childIndex = block.children.findIndex((child) =>\n      isEqual({_key: child._key}, secondPathSegment),\n    )\n  }\n  if (childIndex > -1) {\n    return [block.children[childIndex] as Element | Text, childIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function getValueOrInitialValue(\n  value: unknown,\n  initialValue: PortableTextBlock[],\n): PortableTextBlock[] | undefined {\n  if (value && Array.isArray(value) && value.length > 0) {\n    return value\n  }\n  return initialValue\n}\n","import type {Editor, Element, Range} from 'slate'\nimport type {EditorSelection} from '..'\n\n// Is the editor currently receiving remote changes that are being applied to the content?\nexport const IS_PROCESSING_REMOTE_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n// Is the editor currently producing local changes that are not yet submitted?\nexport const IS_PROCESSING_LOCAL_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n\n// Is the editor dragging something?\nexport const IS_DRAGGING: WeakMap<Editor, boolean> = new WeakMap()\n// Is the editor dragging a element?\nexport const IS_DRAGGING_BLOCK_ELEMENT: WeakMap<Editor, Element> = new WeakMap()\n\n// When dragging elements, this will be the target element\nexport const IS_DRAGGING_ELEMENT_TARGET: WeakMap<Editor, Element> =\n  new WeakMap()\n// Target position for dragging over a block\nexport const IS_DRAGGING_BLOCK_TARGET_POSITION: WeakMap<\n  Editor,\n  'top' | 'bottom'\n> = new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<\n  Range,\n  EditorSelection\n>()\n","import type {PortableTextBlock, PortableTextChild} from '@sanity/types'\n\ntype Props = {\n  value: PortableTextBlock | PortableTextChild\n}\n\nconst DefaultObject = (props: Props): JSX.Element => {\n  return (\n    <div>\n      <pre>{JSON.stringify(props.value, null, 2)}</pre>\n    </div>\n  )\n}\n\nDefaultObject.displayName = 'DefaultObject'\n\nexport default DefaultObject\n","import {styled} from 'styled-components'\n\nexport const DefaultBlockObject = styled.div<{selected: boolean}>`\n  user-select: none;\n  border: ${(props) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\nexport const DefaultInlineObject = styled.span<{selected: boolean}>`\n  background: #999;\n  border: ${(props) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\ntype ListItemProps = {listLevel: number; listStyle: string}\n\nexport const DefaultListItem = styled.div<ListItemProps>`\n  &.pt-list-item {\n    width: fit-content;\n    position: relative;\n    display: block;\n\n    /* Important 'transform' in order to force refresh the ::before and ::after rules\n      in Webkit: https://stackoverflow.com/a/21947628/831480\n    */\n    transform: translateZ(0);\n    margin-left: ${(props: ListItemProps) => getLeftPositionForListLevel(props.listLevel)};\n  }\n  &.pt-list-item > .pt-list-item-inner {\n    display: flex;\n    margin: 0;\n    padding: 0;\n    &:before {\n      justify-content: flex-start;\n      vertical-align: top;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner:before {\n      content: '${(props: ListItemProps) =>\n        getContentForListLevelAndStyle(props.listLevel, props.listStyle)}';\n      font-size: 0.4375rem; /* 7px */\n      line-height: 1.5rem; /* Same as body text */\n      /* Optical alignment */\n      position: relative;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner {\n    &:before {\n      min-width: 1.5rem; /* Make sure space between bullet and text never shrinks */\n    }\n  }\n  &.pt-list-item-number {\n    counter-increment: ${(props: {listLevel: number}) =>\n      getCounterIncrementForListLevel(props.listLevel)};\n    counter-reset: ${(props: {listLevel: number}) => getCounterResetForListLevel(props.listLevel)};\n  }\n  & + :not(.pt-list-item-number) {\n    counter-reset: listItemNumber;\n  }\n  &.pt-list-item-number > .pt-list-item-inner:before {\n    content: ${(props) => getCounterContentForListLevel(props.listLevel)};\n    min-width: 1.5rem; /* Make sure space between number and text never shrinks */\n    /* Optical alignment */\n    position: relative;\n    top: 1px;\n  }\n`\n\nexport const DefaultListItemInner = styled.div``\n\nfunction getLeftPositionForListLevel(level: number) {\n  switch (Number(level)) {\n    case 1:\n      return '1.5em'\n    case 2:\n      return '3em'\n    case 3:\n      return '4.5em'\n    case 4:\n      return '6em'\n    case 5:\n      return '7.5em'\n    case 6:\n      return '9em'\n    case 7:\n      return '10.5em'\n    case 8:\n      return '12em'\n    case 9:\n      return '13.5em'\n    case 10:\n      return '15em'\n    default:\n      return '0em'\n  }\n}\n\nconst bullets = ['●', '○', '■']\n\nfunction getContentForListLevelAndStyle(level: number, style: string) {\n  const normalizedLevel = (level - 1) % 3\n  if (style === 'bullet') {\n    return bullets[normalizedLevel]\n  }\n  return '*'\n}\n\nfunction getCounterIncrementForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemNumber'\n    case 2:\n      return 'listItemAlpha'\n    case 3:\n      return 'listItemRoman'\n    case 4:\n      return 'listItemNumberNext'\n    case 5:\n      return 'listItemLetterNext'\n    case 6:\n      return 'listItemRomanNext'\n    case 7:\n      return 'listItemNumberNextNext'\n    case 8:\n      return 'listItemAlphaNextNext'\n    case 9:\n      return 'listItemRomanNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterResetForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemAlpha'\n    case 2:\n      return 'listItemRoman'\n    case 3:\n      return 'listItemNumberNext'\n    case 4:\n      return 'listItemLetterNext'\n    case 5:\n      return 'listItemRomanNext'\n    case 6:\n      return 'listItemNumberNextNext'\n    case 7:\n      return 'listItemAlphaNextNext'\n    case 8:\n      return 'listItemRomanNextNext'\n    case 9:\n      return 'listItemNumberNextNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterContentForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return `counter(listItemNumber) '. '`\n    case 2:\n      return `counter(listItemAlpha, lower-alpha) '. '`\n    case 3:\n      return `counter(listItemRoman, lower-roman) '. '`\n    case 4:\n      return `counter(listItemNumberNext) '. '`\n    case 5:\n      return `counter(listItemLetterNext, lower-alpha) '. '`\n    case 6:\n      return `counter(listItemRomanNext, lower-roman) '. '`\n    case 7:\n      return `counter(listItemNumberNextNext) '. '`\n    case 8:\n      return `counter(listItemAlphaNextNext, lower-alpha) '. '`\n    case 9:\n      return `counter(listItemRomanNextNext, lower-roman) '. '`\n    default:\n      return `counter(listItemNumberNextNextNext) '. '`\n  }\n}\n","import {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type DragEvent,\n  type MutableRefObject,\n  type ReactNode,\n} from 'react'\nimport {Editor, Path, Transforms, type Element as SlateElement} from 'slate'\nimport {ReactEditor, useSlateStatic} from 'slate-react'\nimport {debugWithName} from '../../utils/debug'\nimport {\n  IS_DRAGGING,\n  IS_DRAGGING_BLOCK_ELEMENT,\n  IS_DRAGGING_BLOCK_TARGET_POSITION,\n  IS_DRAGGING_ELEMENT_TARGET,\n} from '../../utils/weakMaps'\n\nconst debug = debugWithName('components:DraggableBlock')\nconst debugRenders = false\n\n/**\n * @internal\n */\nexport interface DraggableBlockProps {\n  children: ReactNode\n  element: SlateElement\n  readOnly: boolean\n  blockRef: MutableRefObject<HTMLDivElement | null>\n}\n\n/**\n * Implements drag and drop functionality on editor block nodes\n * @internal\n */\nexport const DraggableBlock = ({\n  children,\n  element,\n  readOnly,\n  blockRef,\n}: DraggableBlockProps) => {\n  const editor = useSlateStatic()\n  const dragGhostRef: MutableRefObject<undefined | HTMLElement> = useRef()\n  const [isDragOver, setIsDragOver] = useState(false)\n  const isVoid = useMemo(\n    () => Editor.isVoid(editor, element),\n    [editor, element],\n  )\n  const isInline = useMemo(\n    () => Editor.isInline(editor, element),\n    [editor, element],\n  )\n\n  const [blockElement, setBlockElement] = useState<HTMLElement | null>(null)\n\n  useEffect(\n    () =>\n      setBlockElement(\n        blockRef ? blockRef.current : ReactEditor.toDOMNode(editor, element),\n      ),\n    [editor, element, blockRef],\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragOver = useCallback(\n    (event: DragEvent) => {\n      const isMyDragOver = IS_DRAGGING_BLOCK_ELEMENT.get(editor)\n      // debug('Drag over', blockElement)\n      if (!isMyDragOver || !blockElement) {\n        return\n      }\n      event.preventDefault()\n      event.dataTransfer.dropEffect = 'move'\n      IS_DRAGGING_ELEMENT_TARGET.set(editor, element)\n      const elementRect = blockElement.getBoundingClientRect()\n      const offset = elementRect.top\n      const height = elementRect.height\n      const Y = event.pageY\n      const loc = Math.abs(offset - Y)\n      let position: 'top' | 'bottom' = 'bottom'\n      if (element === editor.children[0]) {\n        position = 'top'\n      } else if (loc < height / 2) {\n        position = 'top'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      } else {\n        position = 'bottom'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      }\n      if (isMyDragOver === element) {\n        event.dataTransfer.dropEffect = 'none'\n        return\n      }\n      setIsDragOver(true)\n    },\n    [blockElement, editor, element],\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragLeave = useCallback(() => {\n    setIsDragOver(false)\n  }, [])\n\n  // Note: this is called for the dragging block\n  const handleDragEnd = useCallback(\n    (event: DragEvent) => {\n      const targetBlock = IS_DRAGGING_ELEMENT_TARGET.get(editor)\n      if (targetBlock) {\n        IS_DRAGGING.set(editor, false)\n        event.preventDefault()\n        event.stopPropagation()\n        IS_DRAGGING_ELEMENT_TARGET.delete(editor)\n        if (dragGhostRef.current) {\n          debug('Removing drag ghost')\n          document.body.removeChild(dragGhostRef.current)\n        }\n        const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n        IS_DRAGGING_BLOCK_TARGET_POSITION.delete(editor)\n        let targetPath = ReactEditor.findPath(editor, targetBlock)\n        const myPath = ReactEditor.findPath(editor, element)\n        const isBefore = Path.isBefore(myPath, targetPath)\n        if (dragPosition === 'bottom' && !isBefore) {\n          // If it is already at the bottom, don't do anything.\n          if (targetPath[0] >= editor.children.length - 1) {\n            debug('target is already at the bottom, not moving')\n            return\n          }\n          const originalPath = targetPath\n          targetPath = Path.next(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath,\n            )}`,\n          )\n        }\n        if (\n          dragPosition === 'top' &&\n          isBefore &&\n          targetPath[0] !== editor.children.length - 1\n        ) {\n          const originalPath = targetPath\n          targetPath = Path.previous(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath,\n            )}`,\n          )\n        }\n        if (Path.equals(targetPath, myPath)) {\n          event.preventDefault()\n          debug('targetPath and myPath is the same, not moving')\n          return\n        }\n        debug(\n          `Moving element ${element._key} from path ${JSON.stringify(myPath)} to ${JSON.stringify(\n            targetPath,\n          )} (${dragPosition})`,\n        )\n        Transforms.moveNodes(editor, {at: myPath, to: targetPath})\n        editor.onChange()\n        return\n      }\n      debug('No target element, not doing anything')\n    },\n    [editor, element],\n  )\n  // Note: this is called not for the dragging block, but for the drop target\n  const handleDrop = useCallback(\n    (event: DragEvent) => {\n      if (IS_DRAGGING_BLOCK_ELEMENT.get(editor)) {\n        debug('On drop (prevented)', element)\n        event.preventDefault()\n        event.stopPropagation()\n        setIsDragOver(false)\n      }\n    },\n    [editor, element],\n  )\n  // Note: this is called for the dragging block\n  const handleDrag = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid) {\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        return\n      }\n      IS_DRAGGING.set(editor, true)\n      IS_DRAGGING_BLOCK_ELEMENT.set(editor, element)\n      event.stopPropagation() // Stop propagation so that leafs don't get this and take focus/selection!\n\n      const target = event.target\n\n      if (target instanceof HTMLElement) {\n        target.style.opacity = '1'\n      }\n    },\n    [editor, element, isVoid],\n  )\n\n  // Note: this is called for the dragging block\n  const handleDragStart = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid || isInline) {\n        debug('Not dragging block')\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        IS_DRAGGING.set(editor, false)\n        return\n      }\n      debug('Drag start')\n      IS_DRAGGING.set(editor, true)\n      if (event.dataTransfer) {\n        event.dataTransfer.setData('application/portable-text', 'something')\n        event.dataTransfer.effectAllowed = 'move'\n      }\n      // Clone blockElement so that it will not be visually clipped by scroll-containers etc.\n      // The application that uses the portable-text-editor may indicate the element used as\n      // drag ghost by adding a truthy data attribute 'data-pt-drag-ghost-element' to a HTML element.\n      if (blockElement && blockElement instanceof HTMLElement) {\n        let dragGhost = blockElement.cloneNode(true) as HTMLElement\n        const customGhost = dragGhost.querySelector(\n          '[data-pt-drag-ghost-element]',\n        )\n        if (customGhost) {\n          dragGhost = customGhost as HTMLElement\n        }\n\n        // Set the `data-dragged` attribute so the consumer can style the element while it’s dragged\n        dragGhost.setAttribute('data-dragged', '')\n\n        if (document.body) {\n          dragGhostRef.current = dragGhost\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n          const rect = blockElement.getBoundingClientRect()\n          const x = event.clientX - rect.left\n          const y = event.clientY - rect.top\n          dragGhost.style.width = `${rect.width}px`\n          dragGhost.style.height = `${rect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        }\n      }\n      handleDrag(event)\n    },\n    [blockElement, editor, handleDrag, isInline, isVoid],\n  )\n\n  const isDraggingOverFirstBlock =\n    isDragOver && editor.children[0] === IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const isDraggingOverLastBlock =\n    isDragOver &&\n    editor.children[editor.children.length - 1] ===\n      IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n\n  const isDraggingOverTop =\n    isDraggingOverFirstBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'top')\n  const isDraggingOverBottom =\n    isDraggingOverLastBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'bottom')\n\n  const dropIndicator = useMemo(\n    () => (\n      <div\n        className=\"pt-drop-indicator\"\n        style={{\n          position: 'absolute',\n          width: '100%',\n          height: 1,\n          borderBottom: '1px solid currentColor',\n          zIndex: 5,\n        }}\n      />\n    ),\n    [],\n  )\n\n  if (readOnly) {\n    return <>{children}</>\n  }\n\n  if (debugRenders) {\n    debug('render')\n  }\n\n  return (\n    <div\n      draggable={isVoid}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}\n      onDragEnd={handleDragEnd}\n      onDrop={handleDrop}\n    >\n      {isDraggingOverTop && dropIndicator}\n      {children}\n      {isDraggingOverBottom && dropIndicator}\n    </div>\n  )\n}\n\nDraggableBlock.displayName = 'DraggableBlock'\n","import type {\n  Path,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {useMemo, useRef, type FunctionComponent, type ReactElement} from 'react'\nimport {Editor, Range, Element as SlateElement} from 'slate'\nimport {\n  ReactEditor,\n  useSelected,\n  useSlateStatic,\n  type RenderElementProps,\n} from 'slate-react'\nimport type {\n  BlockRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {fromSlateValue} from '../../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../../utils/weakMaps'\nimport ObjectNode from '../nodes/DefaultObject'\nimport {\n  DefaultBlockObject,\n  DefaultListItem,\n  DefaultListItemInner,\n} from '../nodes/index'\nimport {DraggableBlock} from './DraggableBlock'\n\nconst debug = debugWithName('components:Element')\nconst debugRenders = false\nconst EMPTY_ANNOTATIONS: PortableTextObject[] = []\n\n/**\n * @internal\n */\nexport interface ElementProps {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  schemaTypes: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}\n\nconst inlineBlockStyle = {display: 'inline-block'}\n\n/**\n * Renders Portable Text block and inline object nodes in Slate\n * @internal\n */\nexport const Element: FunctionComponent<ElementProps> = ({\n  attributes,\n  children,\n  element,\n  schemaTypes,\n  readOnly,\n  renderBlock,\n  renderChild,\n  renderListItem,\n  renderStyle,\n  spellCheck,\n}) => {\n  const editor = useSlateStatic()\n  const selected = useSelected()\n  const blockRef = useRef<HTMLDivElement | null>(null)\n  const inlineBlockObjectRef = useRef(null)\n  const focused =\n    (selected && editor.selection && Range.isCollapsed(editor.selection)) ||\n    false\n\n  const value = useMemo(\n    () =>\n      fromSlateValue(\n        [element],\n        schemaTypes.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )[0],\n    [editor, element, schemaTypes.block.name],\n  )\n\n  let renderedBlock = children\n\n  let className: string | undefined\n\n  const blockPath: Path = useMemo(() => [{_key: element._key}], [element])\n\n  if (typeof element._type !== 'string') {\n    throw new Error(`Expected element to have a _type property`)\n  }\n\n  if (typeof element._key !== 'string') {\n    throw new Error(`Expected element to have a _key property`)\n  }\n\n  // Test for inline objects first\n  if (editor.isInline(element)) {\n    const path = ReactEditor.findPath(editor, element)\n    const [block] = Editor.node(editor, path, {depth: 1})\n    const schemaType = schemaTypes.inlineObjects.find(\n      (_type) => _type.name === element._type,\n    )\n    if (!schemaType) {\n      throw new Error('Could not find type for inline block element')\n    }\n    if (SlateElement.isElement(block)) {\n      const elmPath: Path = [\n        {_key: block._key},\n        'children',\n        {_key: element._key},\n      ]\n      if (debugRenders) {\n        debug(`Render ${element._key} (inline object)`)\n      }\n      return (\n        <span {...attributes}>\n          {/* Note that children must follow immediately or cut and selections will not work properly in Chrome. */}\n          {children}\n          <span\n            draggable={!readOnly}\n            className=\"pt-inline-object\"\n            data-testid=\"pt-inline-object\"\n            ref={inlineBlockObjectRef}\n            key={element._key}\n            style={inlineBlockStyle}\n            contentEditable={false}\n          >\n            {renderChild &&\n              renderChild({\n                annotations: EMPTY_ANNOTATIONS, // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.\n                children: <ObjectNode value={value} />,\n                editorElementRef: inlineBlockObjectRef,\n                focused,\n                path: elmPath,\n                schemaType,\n                selected,\n                type: schemaType,\n                value: value as PortableTextChild,\n              })}\n            {!renderChild && <ObjectNode value={value} />}\n          </span>\n        </span>\n      )\n    }\n    throw new Error('Block not found!')\n  }\n\n  // If not inline, it's either a block (text) or a block object (non-text)\n  // NOTE: text blocks aren't draggable with DraggableBlock (yet?)\n  if (element._type === schemaTypes.block.name) {\n    className = `pt-block pt-text-block`\n    const isListItem = 'listItem' in element\n    if (debugRenders) {\n      debug(`Render ${element._key} (text block)`)\n    }\n    const style = ('style' in element && element.style) || 'normal'\n    className = `pt-block pt-text-block pt-text-block-style-${style}`\n    const blockStyleType = schemaTypes.styles.find(\n      (item) => item.value === style,\n    )\n    if (renderStyle && blockStyleType) {\n      renderedBlock = renderStyle({\n        block: element as PortableTextTextBlock,\n        children,\n        focused,\n        selected,\n        value: style,\n        path: blockPath,\n        schemaType: blockStyleType,\n        editorElementRef: blockRef,\n      })\n    }\n    let level: number | undefined\n    if (isListItem) {\n      if (typeof element.level === 'number') {\n        level = element.level\n      }\n      className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`\n    }\n    if (editor.isListBlock(value) && isListItem && element.listItem) {\n      const listType = schemaTypes.lists.find(\n        (item) => item.value === element.listItem,\n      )\n      if (renderListItem && listType) {\n        renderedBlock = renderListItem({\n          block: value,\n          children: renderedBlock,\n          focused,\n          selected,\n          value: element.listItem,\n          path: blockPath,\n          schemaType: listType,\n          level: value.level || 1,\n          editorElementRef: blockRef,\n        })\n      } else {\n        renderedBlock = (\n          <DefaultListItem\n            listStyle={value.listItem || schemaTypes.lists[0].value}\n            listLevel={value.level || 1}\n          >\n            <DefaultListItemInner>{renderedBlock}</DefaultListItemInner>\n          </DefaultListItem>\n        )\n      }\n    }\n    const renderProps: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: renderedBlock,\n        editorElementRef: blockRef,\n        focused,\n        level,\n        listItem: isListItem ? element.listItem : undefined,\n        path: blockPath,\n        selected,\n        style,\n        schemaType: schemaTypes.block,\n        value,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaTypes.block\n        },\n      },\n    )\n\n    const propsOrDefaultRendered = renderBlock\n      ? renderBlock(renderProps as BlockRenderProps)\n      : children\n    return (\n      <div\n        key={element._key}\n        {...attributes}\n        className={className}\n        spellCheck={spellCheck}\n      >\n        <DraggableBlock\n          element={element}\n          readOnly={readOnly}\n          blockRef={blockRef}\n        >\n          <div ref={blockRef}>{propsOrDefaultRendered}</div>\n        </DraggableBlock>\n      </div>\n    )\n  }\n  const schemaType = schemaTypes.blockObjects.find(\n    (_type) => _type.name === element._type,\n  )\n  if (!schemaType) {\n    throw new Error(\n      `Could not find schema type for block element of _type ${element._type}`,\n    )\n  }\n  if (debugRenders) {\n    debug(`Render ${element._key} (object block)`)\n  }\n  className = 'pt-block pt-object-block'\n  const block = fromSlateValue(\n    [element],\n    schemaTypes.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )[0]\n  let renderedBlockFromProps: JSX.Element | undefined\n  if (renderBlock) {\n    const _props: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: <ObjectNode value={value} />,\n        editorElementRef: blockRef,\n        focused,\n        path: blockPath,\n        schemaType,\n        selected,\n        value: block,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaType\n        },\n      },\n    )\n    renderedBlockFromProps = renderBlock(_props as BlockRenderProps)\n  }\n  return (\n    <div key={element._key} {...attributes} className={className}>\n      {children}\n      <DraggableBlock element={element} readOnly={readOnly} blockRef={blockRef}>\n        {renderedBlockFromProps && (\n          <div ref={blockRef} contentEditable={false}>\n            {renderedBlockFromProps}\n          </div>\n        )}\n        {!renderedBlockFromProps && (\n          <DefaultBlockObject selected={selected}>\n            <ObjectNode value={value} />\n          </DefaultBlockObject>\n        )}\n      </DraggableBlock>\n    </div>\n  )\n}\n\nElement.displayName = 'Element'\n","import {createContext, useContext} from 'react'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext =\n  createContext<PortableTextEditor | null>(null)\n\n/**\n * @public\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n\n  return editor\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport {useCallback, type ReactNode} from 'react'\n\ntype Props = {\n  annotation: PortableTextObject\n  children: ReactNode\n}\nexport function DefaultAnnotation(props: Props) {\n  const handleClick = useCallback(\n    () => alert(JSON.stringify(props.annotation)),\n    [props.annotation],\n  )\n  return (\n    <span style={{color: 'blue'}} onClick={handleClick}>\n      {props.children}\n    </span>\n  )\n}\n\nDefaultAnnotation.displayName = 'DefaultAnnotation'\n","import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import {insert, set, setIfMissing, unset} from '@portabletext/patches'\nimport {\n  isPortableTextTextBlock,\n  type PortableTextBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {flatten, isPlainObject, uniq} from 'lodash'\nimport type {\n  InvalidValueResolution,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\n\nexport interface Validation {\n  valid: boolean\n  resolution: InvalidValueResolution | null\n  value: PortableTextBlock[] | undefined\n}\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string,\n): Validation {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [\n    types.span.name,\n    ...types.inlineObjects.map((t) => t.name),\n  ]\n  const validBlockTypes = [\n    types.block.name,\n    ...types.blockObjects.map((t) => t.name),\n  ]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null, value}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description:\n          'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n\n        i18n: {\n          description:\n            'inputs.portable-text.invalid-value.not-an-array.description',\n          action: 'inputs.portable-text.invalid-value.not-an-array.action',\n        },\n      },\n      value,\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isPlainObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.not-an-object.description',\n            action: 'inputs.portable-text.invalid-value.not-an-object.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key || typeof blk._key !== 'string') {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.missing-key.description',\n            action: 'inputs.portable-text.invalid-value.missing-key.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [\n              set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.incorrect-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.incorrect-block-type.action',\n              values: {key: blk._key, expectedTypeName: currentBlockTypeName},\n            },\n          }\n          return true\n        }\n\n        // If the block has no `_type`, but aside from that is a valid Portable Text block\n        if (\n          !blk._type &&\n          isPortableTextTextBlock({...blk, _type: types.block.name})\n        ) {\n          resolution = {\n            patches: [\n              set({...blk, _type: types.block.name}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n            action: `Use type '${types.block.name}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-block-type.action',\n              values: {key: blk._key, expectedTypeName: types.block.name},\n            },\n          }\n          return true\n        }\n\n        if (!blk._type) {\n          resolution = {\n            patches: [unset([{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' is missing an _type property`,\n            action: 'Remove the block',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-type.description',\n              action: 'inputs.portable-text.invalid-value.missing-type.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.disallowed-type.description',\n            action: 'inputs.portable-text.invalid-value.disallowed-type.action',\n            values: {key: blk._key, typeName: blk._type},\n          },\n        }\n        return true\n      }\n\n      // Test regular text blocks\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has a valid children property (array)\n        if (textBlock.children && !Array.isArray(textBlock.children)) {\n          resolution = {\n            patches: [set({children: []}, [{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n            action: 'Reset the children property',\n            item: textBlock,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.action',\n              values: {key: textBlock._key},\n            },\n          }\n          return true\n        }\n        // Test that children is set and lengthy\n        if (\n          textBlock.children === undefined ||\n          (Array.isArray(textBlock.children) && textBlock.children.length === 0)\n        ) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          }\n          resolution = {\n            autoResolve: true,\n            patches: [\n              setIfMissing([], [{_key: blk._key}, 'children']),\n              insert([newSpan], 'after', [{_key: blk._key}, 'children', 0]),\n            ],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.empty-children.description',\n              action:\n                'inputs.portable-text.invalid-value.empty-children.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || []),\n          ) as string[],\n        )\n\n        // Test that all markDefs are in use (remove orphaned markDefs)\n        if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n          const unusedMarkDefs: string[] = uniq(\n            blk.markDefs\n              .map((def) => def._key)\n              .filter((key) => !allUsedMarks.includes(key)),\n          )\n          if (unusedMarkDefs.length > 0) {\n            resolution = {\n              autoResolve: true,\n              patches: unusedMarkDefs.map((markDefKey) =>\n                unset([{_key: blk._key}, 'markDefs', {_key: markDefKey}]),\n              ),\n              description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n                ', ',\n              )}.`,\n              action: 'Remove unused mark definition item',\n              item: blk,\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.action',\n                values: {\n                  key: blk._key,\n                  unusedMarkDefs: unusedMarkDefs.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.value).includes(mark),\n        )\n        const orphanedMarks = annotationMarks.filter(\n          (mark) =>\n            textBlock.markDefs === undefined ||\n            !textBlock.markDefs.find((def) => def._key === mark),\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark)),\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            const orphaned = orphanedMarks.join(', ')\n            resolution = {\n              autoResolve: true,\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter(\n                    (cMrk) => !orphanedMarks.includes(cMrk),\n                  ),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks'],\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-marks.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-marks.action',\n                values: {\n                  key: blk._key,\n                  orphanedMarks: orphanedMarks.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!isPlainObject(child)) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n                action: 'Remove the item',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.non-object-child.description',\n                  action:\n                    'inputs.portable-text.invalid-value.non-object-child.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            if (!child._key || typeof child._key !== 'string') {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                autoResolve: true,\n                patches: [\n                  set(newChild, [{_key: blk._key}, 'children', cIndex]),\n                ],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-key.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-key.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            // Verify that children have valid types\n            if (!child._type) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-type.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n\n            if (!validChildTypes.includes(child._type)) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.action',\n                  values: {\n                    key: blk._key,\n                    childKey: child._key,\n                    childType: child._type,\n                  },\n                },\n              }\n              return true\n            }\n\n            // Verify that spans have .text property that is a string\n            if (\n              child._type === types.span.name &&\n              typeof child.text !== 'string'\n            ) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [\n                    {_key: blk._key},\n                    'children',\n                    {_key: child._key},\n                  ]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n                action: `Write an empty text property to the object`,\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.invalid-span-text.description',\n                  action:\n                    'inputs.portable-text.invalid-value.invalid-span-text.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution, value}\n}\n","import type {Editor} from 'slate'\nimport {\n  IS_PROCESSING_LOCAL_CHANGES,\n  IS_PROCESSING_REMOTE_CHANGES,\n} from './weakMaps'\n\nexport function withRemoteChanges(editor: Editor, fn: () => void): void {\n  const prev = isChangingRemotely(editor) || false\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, true)\n  fn()\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, prev)\n}\n\nexport function isChangingRemotely(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor)\n}\n\nexport function isChangingLocally(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_LOCAL_CHANGES.get(editor)\n}\n","import type {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","function isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction cloneDiff(diff) {\n  const [type, patch] = diff;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA;\n  let text2 = textB;\n  const text1Length = text1.length;\n  const text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0) {\n    return 0;\n  }\n  if (text1Length > text2Length) {\n    text1 = text1.substring(text1Length - text2Length);\n  } else if (text1Length < text2Length) {\n    text2 = text2.substring(0, text1Length);\n  }\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2) {\n    return textLength;\n  }\n  let best = 0;\n  let length = 1;\n  for (let found = 0; found !== -1;) {\n    const pattern = text1.substring(textLength - length);\n    found = text2.indexOf(pattern);\n    if (found === -1) {\n      return best;\n    }\n    length += found;\n    if (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0]) {\n    return 0;\n  }\n  let pointerMin = 0;\n  let pointerMax = Math.min(text1.length, text2.length);\n  let pointerMid = pointerMax;\n  let pointerStart = 0;\n  while (pointerMin < pointerMid) {\n    if (text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid)) {\n      pointerMin = pointerMid;\n      pointerStart = pointerMin;\n    } else {\n      pointerMax = pointerMid;\n    }\n    pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  }\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1]) {\n    return 0;\n  }\n  let pointerMin = 0;\n  let pointerMax = Math.min(text1.length, text2.length);\n  let pointerMid = pointerMax;\n  let pointerEnd = 0;\n  while (pointerMin < pointerMid) {\n    if (text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd)) {\n      pointerMin = pointerMid;\n      pointerEnd = pointerMin;\n    } else {\n      pointerMax = pointerMid;\n    }\n    pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  }\n  return pointerMid;\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map(diff => cloneDiff(diff));\n  let hasChanges = false;\n  const equalities = [];\n  let equalitiesLength = 0;\n  let lastEquality = null;\n  let pointer = 0;\n  let lengthInsertions1 = 0;\n  let lengthDeletions1 = 0;\n  let lengthInsertions2 = 0;\n  let lengthDeletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] === DIFF_EQUAL) {\n      equalities[equalitiesLength++] = pointer;\n      lengthInsertions1 = lengthInsertions2;\n      lengthDeletions1 = lengthDeletions2;\n      lengthInsertions2 = 0;\n      lengthDeletions2 = 0;\n      lastEquality = diffs[pointer][1];\n    } else {\n      if (diffs[pointer][0] === DIFF_INSERT) {\n        lengthInsertions2 += diffs[pointer][1].length;\n      } else {\n        lengthDeletions2 += diffs[pointer][1].length;\n      }\n      if (lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2)) {\n        diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]);\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        lengthInsertions1 = 0;\n        lengthDeletions1 = 0;\n        lengthInsertions2 = 0;\n        lengthDeletions2 = 0;\n        lastEquality = null;\n        hasChanges = true;\n      }\n    }\n    pointer++;\n  }\n  if (hasChanges) {\n    diffs = cleanupMerge(diffs);\n  }\n  diffs = cleanupSemanticLossless(diffs);\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1];\n      const insertion = diffs[pointer][1];\n      const overlapLength1 = getCommonOverlap(deletion, insertion);\n      const overlapLength2 = getCommonOverlap(insertion, deletion);\n      if (overlapLength1 >= overlapLength2) {\n        if (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) {\n          diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]);\n          diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1);\n          diffs[pointer + 1][1] = insertion.substring(overlapLength1);\n          pointer++;\n        }\n      } else if (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) {\n        diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]);\n        diffs[pointer - 1][0] = DIFF_INSERT;\n        diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2);\n        diffs[pointer + 1][0] = DIFF_DELETE;\n        diffs[pointer + 1][1] = deletion.substring(overlapLength2);\n        pointer++;\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/;\nconst whitespaceRegex = /\\s/;\nconst linebreakRegex = /[\\r\\n]/;\nconst blanklineEndRegex = /\\n\\r?\\n$/;\nconst blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map(diff => cloneDiff(diff));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two) {\n      return 6;\n    }\n    const char1 = one.charAt(one.length - 1);\n    const char2 = two.charAt(0);\n    const nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex);\n    const nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex);\n    const whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex);\n    const whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex);\n    const lineBreak1 = whitespace1 && char1.match(linebreakRegex);\n    const lineBreak2 = whitespace2 && char2.match(linebreakRegex);\n    const blankLine1 = lineBreak1 && one.match(blanklineEndRegex);\n    const blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    if (blankLine1 || blankLine2) {\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      return 1;\n    }\n    return 0;\n  }\n  let pointer = 1;\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1];\n      let edit = diffs[pointer][1];\n      let equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1;\n      let bestEdit = edit;\n      let bestEquality2 = equality2;\n      let bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n      if (diffs[pointer - 1][1] !== bestEquality1) {\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map(diff => cloneDiff(diff));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0;\n  let countDelete = 0;\n  let countInsert = 0;\n  let textDelete = \"\";\n  let textInsert = \"\";\n  let commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++;\n        textInsert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        countDelete++;\n        textDelete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        if (countDelete + countInsert > 1) {\n          if (countDelete !== 0 && countInsert !== 0) {\n            commonlength = getCommonPrefix(textInsert, textDelete);\n            if (commonlength !== 0) {\n              if (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL) {\n                diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]);\n                pointer++;\n              }\n              textInsert = textInsert.substring(commonlength);\n              textDelete = textDelete.substring(commonlength);\n            }\n            commonlength = getCommonSuffix(textInsert, textDelete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1];\n              textInsert = textInsert.substring(0, textInsert.length - commonlength);\n              textDelete = textDelete.substring(0, textDelete.length - commonlength);\n            }\n          }\n          pointer -= countDelete + countInsert;\n          diffs.splice(pointer, countDelete + countInsert);\n          if (textDelete.length) {\n            diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]);\n            pointer++;\n          }\n          if (textInsert.length) {\n            diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]);\n            pointer++;\n          }\n          pointer++;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL) {\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        countInsert = 0;\n        countDelete = 0;\n        textDelete = \"\";\n        textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation\");\n    }\n  }\n  if (diffs[diffs.length - 1][1] === \"\") {\n    diffs.pop();\n  }\n  let hasChanges = false;\n  pointer = 1;\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1]) {\n        diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        hasChanges = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1]) {\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        hasChanges = true;\n      }\n    }\n    pointer++;\n  }\n  if (hasChanges) {\n    diffs = cleanupMerge(diffs);\n  }\n  return diffs;\n}\nfunction trueCount() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs) {\n  let editCost = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  let diffs = rawDiffs.map(diff => cloneDiff(diff));\n  let hasChanges = false;\n  const equalities = [];\n  let equalitiesLength = 0;\n  let lastEquality = null;\n  let pointer = 0;\n  let preIns = false;\n  let preDel = false;\n  let postIns = false;\n  let postDel = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] === DIFF_EQUAL) {\n      if (diffs[pointer][1].length < editCost && (postIns || postDel)) {\n        equalities[equalitiesLength++] = pointer;\n        preIns = postIns;\n        preDel = postDel;\n        lastEquality = diffs[pointer][1];\n      } else {\n        equalitiesLength = 0;\n        lastEquality = null;\n      }\n      postIns = false;\n      postDel = false;\n    } else {\n      if (diffs[pointer][0] === DIFF_DELETE) {\n        postDel = true;\n      } else {\n        postIns = true;\n      }\n      if (lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3)) {\n        diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]);\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;\n        lastEquality = null;\n        if (preIns && preDel) {\n          postIns = true;\n          postDel = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;\n          pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n          postIns = false;\n          postDel = false;\n        }\n        hasChanges = true;\n      }\n    }\n    pointer++;\n  }\n  if (hasChanges) {\n    diffs = cleanupMerge(diffs);\n  }\n  return diffs;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length;\n  const text2Length = text2.length;\n  const maxD = Math.ceil((text1Length + text2Length) / 2);\n  const vOffset = maxD;\n  const vLength = 2 * maxD;\n  const v1 = new Array(vLength);\n  const v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[vOffset + 1] = 0;\n  v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length;\n  const front = delta % 2 !== 0;\n  let k1start = 0;\n  let k1end = 0;\n  let k2start = 0;\n  let k2end = 0;\n  for (let d = 0; d < maxD; d++) {\n    if (Date.now() > deadline) {\n      break;\n    }\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      if (k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1]) {\n        x1 = v1[k1Offset + 1];\n      } else {\n        x1 = v1[k1Offset - 1] + 1;\n      }\n      let y1 = x1 - k1;\n      while (x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1Offset] = x1;\n      if (x1 > text1Length) {\n        k1end += 2;\n      } else if (y1 > text2Length) {\n        k1start += 2;\n      } else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2) {\n            return bisectSplit(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      if (k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1]) {\n        x2 = v2[k2Offset + 1];\n      } else {\n        x2 = v2[k2Offset - 1] + 1;\n      }\n      let y2 = x2 - k2;\n      while (x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2Offset] = x2;\n      if (x2 > text1Length) {\n        k2end += 2;\n      } else if (y2 > text2Length) {\n        k2start += 2;\n      } else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset];\n          const y1 = vOffset + x1 - k1Offset;\n          x2 = text1Length - x2;\n          if (x1 >= x2) {\n            return bisectSplit(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x);\n  const text2a = text2.substring(0, y);\n  const text1b = text1.substring(x);\n  const text2b = text2.substring(y);\n  const diffs = doDiff(text1a, text2a, {\n    checkLines: false,\n    deadline\n  });\n  const diffsb = doDiff(text1b, text2b, {\n    checkLines: false,\n    deadline\n  });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (timeout <= 0) {\n    return null;\n  }\n  const longText = text1.length > text2.length ? text1 : text2;\n  const shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length) {\n    return null;\n  }\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4));\n  const halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2) {\n    halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  } else if (!halfMatch1 && !halfMatch2) {\n    return null;\n  } else if (!halfMatch2) {\n    halfMatch = halfMatch1;\n  } else if (!halfMatch1) {\n    halfMatch = halfMatch2;\n  }\n  if (!halfMatch) {\n    throw new Error(\"Unable to find a half match.\");\n  }\n  let text1A;\n  let text1B;\n  let text2A;\n  let text2B;\n  if (text1.length > text2.length) {\n    text1A = halfMatch[0];\n    text1B = halfMatch[1];\n    text2A = halfMatch[2];\n    text2B = halfMatch[3];\n  } else {\n    text2A = halfMatch[0];\n    text2B = halfMatch[1];\n    text1A = halfMatch[2];\n    text1B = halfMatch[3];\n  }\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1;\n  let bestCommon = \"\";\n  let bestLongTextA;\n  let bestLongTextB;\n  let bestShortTextA;\n  let bestShortTextB;\n  while ((j = shortText.indexOf(seed, j + 1)) !== -1) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j));\n    const suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    if (bestCommon.length < suffixLength + prefixLength) {\n      bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength);\n      bestLongTextA = longText.slice(0, i - suffixLength);\n      bestLongTextB = longText.slice(i + prefixLength);\n      bestShortTextA = shortText.slice(0, j - suffixLength);\n      bestShortTextB = shortText.slice(j + prefixLength);\n    }\n  }\n  if (bestCommon.length * 2 >= longText.length) {\n    return [bestLongTextA || \"\", bestLongTextB || \"\", bestShortTextA || \"\", bestShortTextB || \"\", bestCommon || \"\"];\n  }\n  return null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1];\n    const text = [];\n    for (let y = 0; y < chars.length; y++) {\n      text[y] = lineArray[chars.charCodeAt(y)];\n    }\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [];\n  const lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\";\n    let lineStart = 0;\n    let lineEnd = -1;\n    let lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf(\"\\n\", lineStart);\n      if (lineEnd === -1) {\n        lineEnd = text.length - 1;\n      }\n      let line = text.slice(lineStart, lineEnd + 1);\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        if (lineArrayLength === maxLines) {\n          line = text.slice(lineStart);\n          lineEnd = text.length;\n        }\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n      lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return {\n    chars1,\n    chars2,\n    lineArray\n  };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA;\n  let text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: false,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray);\n  diffs = cleanupSemantic(diffs);\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0;\n  let countDelete = 0;\n  let countInsert = 0;\n  let textDelete = \"\";\n  let textInsert = \"\";\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++;\n        textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++;\n        textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert);\n          pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: false,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, aa[j]);\n          }\n          pointer += aa.length;\n        }\n        countInsert = 0;\n        countDelete = 0;\n        textDelete = \"\";\n        textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  diffs.pop();\n  return diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1) {\n    return [[DIFF_INSERT, text2]];\n  }\n  if (!text2) {\n    return [[DIFF_DELETE, text1]];\n  }\n  const longtext = text1.length > text2.length ? text1 : text2;\n  const shorttext = text1.length > text2.length ? text2 : text1;\n  const i = longtext.indexOf(shorttext);\n  if (i !== -1) {\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n    if (text1.length > text2.length) {\n      diffs[0][0] = DIFF_DELETE;\n      diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n  if (shorttext.length === 1) {\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0];\n    const text1B = halfMatch[1];\n    const text2A = halfMatch[2];\n    const text2B = halfMatch[3];\n    const midCommon = halfMatch[4];\n    const diffsA = doDiff(text1A, text2A, opts);\n    const diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  if (opts.checkLines && text1.length > 100 && text2.length > 100) {\n    return doLineModeDiff(text1, text2, opts);\n  }\n  return bisect(text1, text2, opts.deadline);\n}\nconst DIFF_DELETE = -1;\nconst DIFF_INSERT = 1;\nconst DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null) {\n    throw new Error(\"Null input. (diff)\");\n  }\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  adjustDiffForSurrogatePairs(diffs);\n  return diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA;\n  let text2 = textB;\n  if (text1 === text2) {\n    return text1 ? [[DIFF_EQUAL, text1]] : [];\n  }\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n  commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  diffs = cleanupMerge(diffs);\n  return diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  if (typeof timeout !== \"undefined\") {\n    t = timeout <= 0 ? Number.MAX_VALUE : timeout;\n  }\n  return Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return {\n    checkLines: true,\n    deadline: createDeadLine(opts.timeout || 1),\n    ...opts\n  };\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null;\n  let deleteIdx = null;\n  let j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length === 0) {\n      continue;\n    }\n    if (op === DIFF_INSERT) {\n      if (insertIdx === null) {\n        insertIdx = j;\n      }\n      continue;\n    } else if (op === DIFF_DELETE) {\n      if (deleteIdx === null) {\n        deleteIdx = j;\n      }\n      continue;\n    } else if (op === DIFF_EQUAL) {\n      if (insertIdx === null && deleteIdx === null) {\n        const [rest, char2] = splitChar(diffs[i][1], dir);\n        diffs[i][1] = rest;\n        diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n        return;\n      }\n      break;\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv);\n    const [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText;\n    diffs[deleteIdx][1] = deleteText;\n    diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text;\n  if (insertIdx === null) {\n    diffs.splice(j, 0, [DIFF_INSERT, char]);\n    if (deleteIdx !== null && deleteIdx >= j) deleteIdx++;\n  } else {\n    diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv);\n  }\n  if (deleteIdx === null) {\n    diffs.splice(j, 0, [DIFF_DELETE, char]);\n  } else {\n    diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n  }\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0];\n    const lastChar = diffText[diffText.length - 1];\n    if (isHighSurrogate(lastChar) && diffType === DIFF_EQUAL) {\n      deisolateChar(diffs, i, 1);\n    }\n    if (isLowSurrogate(firstChar) && diffType === DIFF_EQUAL) {\n      deisolateChar(diffs, i, -1);\n    }\n  }\n  for (let i = 0; i < diffs.length; i++) {\n    if (diffs[i][1].length === 0) {\n      diffs.splice(i, 1);\n    }\n  }\n}\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return {\n    ...DEFAULT_OPTIONS,\n    ...options\n  };\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc) {\n  let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  if (pattern.length > MAX_BITS$1) {\n    throw new Error(\"Pattern too long for this browser.\");\n  }\n  const options = applyDefaults(opts);\n  const s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length;\n    const proximity = Math.abs(loc - x);\n    if (!options.distance) {\n      return proximity ? 1 : accuracy;\n    }\n    return accuracy + proximity / options.distance;\n  }\n  let scoreThreshold = options.threshold;\n  let bestLoc = text.indexOf(pattern, loc);\n  if (bestLoc !== -1) {\n    scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold);\n    bestLoc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (bestLoc !== -1) {\n      scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold);\n    }\n  }\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin;\n  let binMid;\n  let binMax = pattern.length + text.length;\n  let lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    binMin = 0;\n    binMid = binMax;\n    while (binMin < binMid) {\n      if (getBitapScore(d, loc + binMid) <= scoreThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length;\n    const rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {\n        rd[j] = (rd[j + 1] << 1 | 1) & charMatch;\n      } else {\n        rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold) {\n          scoreThreshold = score;\n          bestLoc = j - 1;\n          if (bestLoc > loc) {\n            start = Math.max(1, 2 * loc - bestLoc);\n          } else {\n            break;\n          }\n        }\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold) {\n      break;\n    }\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (let i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  }\n  return s;\n}\nfunction match(text, pattern, searchLocation) {\n  if (text === null || pattern === null || searchLocation === null) {\n    throw new Error(\"Null input. (match())\");\n  }\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern) {\n    return 0;\n  } else if (!text.length) {\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) === pattern) {\n    return loc;\n  }\n  return bitap(text, pattern, loc);\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join(\"\");\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint === \"undefined\") {\n      throw new Error(\"Failed to get codepoint\");\n    }\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let byteOffset = 0;\n  let idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target;) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint === \"undefined\") {\n        return idx;\n      }\n      byteOffset += utf8len(codePoint);\n      if (codePoint > 65535) {\n        idx += 2;\n      } else {\n        idx += 1;\n      }\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target) {\n      throw new Error(\"Failed to determine byte offset\");\n    }\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches) {\n    adjusted.push({\n      diffs: patch.diffs.map(diff => cloneDiff(diff)),\n      start1: advanceTo(patch.start1),\n      start2: advanceTo(patch.start2),\n      utf8Start1: patch.utf8Start1,\n      utf8Start2: patch.utf8Start2,\n      length1: patch.length1,\n      length2: patch.length2,\n      utf8Length1: patch.utf8Length1,\n      utf8Length2: patch.utf8Length2\n    });\n  }\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  if (codePoint <= 127) return 1;\n  if (codePoint <= 2047) return 2;\n  if (codePoint <= 65535) return 3;\n  return 4;\n}\nconst MAX_BITS = 32;\nconst DEFAULT_MARGIN = 4;\nconst DEFAULT_OPTS = {\n  margin: 4\n};\nfunction getDefaultOpts() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    ...DEFAULT_OPTS,\n    ...opts\n  };\n}\nfunction make(a, b, options) {\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    let diffs = diff(a, b, {\n      checkLines: true\n    });\n    if (diffs.length > 2) {\n      diffs = cleanupSemantic(diffs);\n      diffs = cleanupEfficiency(diffs);\n    }\n    return _make(a, diffs, getDefaultOpts(options));\n  }\n  if (a && Array.isArray(a) && typeof b === \"undefined\") {\n    return _make(diffText1(a), a, getDefaultOpts(options));\n  }\n  if (typeof a === \"string\" && b && Array.isArray(b)) {\n    return _make(a, b, getDefaultOpts(options));\n  }\n  throw new Error(\"Unknown call format to make()\");\n}\nfunction _make(textA, diffs, options) {\n  if (diffs.length === 0) {\n    return [];\n  }\n  const patches = [];\n  let patch = createPatchObject(0, 0);\n  let patchDiffLength = 0;\n  let charCount1 = 0;\n  let charCount2 = 0;\n  let utf8Count1 = 0;\n  let utf8Count2 = 0;\n  let prepatchText = textA;\n  let postpatchText = textA;\n  for (let x = 0; x < diffs.length; x++) {\n    const currentDiff = diffs[x];\n    const [diffType, diffText] = currentDiff;\n    const diffTextLength = diffText.length;\n    const diffByteLength = countUtf8Bytes(diffText);\n    if (!patchDiffLength && diffType !== DIFF_EQUAL) {\n      patch.start1 = charCount1;\n      patch.start2 = charCount2;\n      patch.utf8Start1 = utf8Count1;\n      patch.utf8Start2 = utf8Count2;\n    }\n    switch (diffType) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = currentDiff;\n        patch.length2 += diffTextLength;\n        patch.utf8Length2 += diffByteLength;\n        postpatchText = postpatchText.substring(0, charCount2) + diffText + postpatchText.substring(charCount2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diffTextLength;\n        patch.utf8Length1 += diffByteLength;\n        patch.diffs[patchDiffLength++] = currentDiff;\n        postpatchText = postpatchText.substring(0, charCount2) + postpatchText.substring(charCount2 + diffTextLength);\n        break;\n      case DIFF_EQUAL:\n        if (diffTextLength <= 2 * options.margin && patchDiffLength && diffs.length !== x + 1) {\n          patch.diffs[patchDiffLength++] = currentDiff;\n          patch.length1 += diffTextLength;\n          patch.length2 += diffTextLength;\n          patch.utf8Length1 += diffByteLength;\n          patch.utf8Length2 += diffByteLength;\n        } else if (diffTextLength >= 2 * options.margin) {\n          if (patchDiffLength) {\n            addContext(patch, prepatchText, options);\n            patches.push(patch);\n            patch = createPatchObject(-1, -1);\n            patchDiffLength = 0;\n            prepatchText = postpatchText;\n            charCount1 = charCount2;\n            utf8Count1 = utf8Count2;\n          }\n        }\n        break;\n      default:\n        throw new Error(\"Unknown diff type\");\n    }\n    if (diffType !== DIFF_INSERT) {\n      charCount1 += diffTextLength;\n      utf8Count1 += diffByteLength;\n    }\n    if (diffType !== DIFF_DELETE) {\n      charCount2 += diffTextLength;\n      utf8Count2 += diffByteLength;\n    }\n  }\n  if (patchDiffLength) {\n    addContext(patch, prepatchText, options);\n    patches.push(patch);\n  }\n  return patches;\n}\nfunction addContext(patch, text, opts) {\n  if (text.length === 0) {\n    return;\n  }\n  let pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  let padding = 0;\n  while (text.indexOf(pattern) !== text.lastIndexOf(pattern) && pattern.length < MAX_BITS - opts.margin - opts.margin) {\n    padding += opts.margin;\n    pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  }\n  padding += opts.margin;\n  let prefixStart = patch.start2 - padding;\n  if (prefixStart >= 1 && isLowSurrogate(text[prefixStart])) {\n    prefixStart--;\n  }\n  const prefix = text.substring(prefixStart, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  }\n  const prefixLength = prefix.length;\n  const prefixUtf8Length = countUtf8Bytes(prefix);\n  let suffixEnd = patch.start2 + patch.length1 + padding;\n  if (suffixEnd < text.length && isLowSurrogate(text[suffixEnd])) {\n    suffixEnd++;\n  }\n  const suffix = text.substring(patch.start2 + patch.length1, suffixEnd);\n  if (suffix) {\n    patch.diffs.push([DIFF_EQUAL, suffix]);\n  }\n  const suffixLength = suffix.length;\n  const suffixUtf8Length = countUtf8Bytes(suffix);\n  patch.start1 -= prefixLength;\n  patch.start2 -= prefixLength;\n  patch.utf8Start1 -= prefixUtf8Length;\n  patch.utf8Start2 -= prefixUtf8Length;\n  patch.length1 += prefixLength + suffixLength;\n  patch.length2 += prefixLength + suffixLength;\n  patch.utf8Length1 += prefixUtf8Length + suffixUtf8Length;\n  patch.utf8Length2 += prefixUtf8Length + suffixUtf8Length;\n}\nfunction levenshtein(diffs) {\n  let leven = 0;\n  let insertions = 0;\n  let deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0];\n    const data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  leven += Math.max(insertions, deletions);\n  return leven;\n}\nfunction xIndex(diffs, loc) {\n  let chars1 = 0;\n  let chars2 = 0;\n  let lastChars1 = 0;\n  let lastChars2 = 0;\n  let x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {\n      break;\n    }\n    lastChars1 = chars1;\n    lastChars2 = chars2;\n  }\n  if (diffs.length !== x && diffs[x][0] === DIFF_DELETE) {\n    return lastChars2;\n  }\n  return lastChars2 + (loc - lastChars1);\n}\nfunction addPadding(patches) {\n  let margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_MARGIN;\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n  for (const p of patches) {\n    p.start1 += paddingLength;\n    p.start2 += paddingLength;\n    p.utf8Start1 += paddingLength;\n    p.utf8Start2 += paddingLength;\n  }\n  let patch = patches[0];\n  let diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL) {\n    diffs.unshift([DIFF_EQUAL, nullPadding]);\n    patch.start1 -= paddingLength;\n    patch.start2 -= paddingLength;\n    patch.utf8Start1 -= paddingLength;\n    patch.utf8Start2 -= paddingLength;\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n    patch.utf8Length1 += paddingLength;\n    patch.utf8Length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length;\n    const extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.utf8Start1 -= extraLength;\n    patch.utf8Start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n    patch.utf8Length1 += extraLength;\n    patch.utf8Length2 += extraLength;\n  }\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL) {\n    diffs.push([DIFF_EQUAL, nullPadding]);\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n    patch.utf8Length1 += paddingLength;\n    patch.utf8Length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n    patch.utf8Length1 += extraLength;\n    patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction splitMax(patches) {\n  let margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_MARGIN;\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize) {\n      continue;\n    }\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1;\n    let start2 = bigpatch.start2;\n    let preContext = \"\";\n    while (bigpatch.diffs.length !== 0) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = true;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length;\n        patch.utf8Length1 = precontextByteCount;\n        patch.length2 = preContext.length;\n        patch.utf8Length2 = precontextByteCount;\n        patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      while (bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1];\n        let diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length;\n          patch.utf8Length2 += diffTextByteCount;\n          start2 += diffText.length;\n          const diff = bigpatch.diffs.shift();\n          if (diff) {\n            patch.diffs.push(diff);\n          }\n          empty = false;\n        } else if (diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize) {\n          patch.length1 += diffText.length;\n          patch.utf8Length1 += diffTextByteCount;\n          start1 += diffText.length;\n          empty = false;\n          patch.diffs.push([diffType, diffText]);\n          bigpatch.diffs.shift();\n        } else {\n          diffText = diffText.substring(0, patchSize - patch.length1 - margin);\n          diffTextByteCount = countUtf8Bytes(diffText);\n          patch.length1 += diffText.length;\n          patch.utf8Length1 += diffTextByteCount;\n          start1 += diffText.length;\n          if (diffType === DIFF_EQUAL) {\n            patch.length2 += diffText.length;\n            patch.utf8Length2 += diffTextByteCount;\n            start2 += diffText.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push([diffType, diffText]);\n          if (diffText === bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length);\n          }\n        }\n      }\n      preContext = diffText2(patch.diffs);\n      preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin);\n      const postContextByteCount = countUtf8Bytes(postContext);\n      if (postContext !== \"\") {\n        patch.length1 += postContext.length;\n        patch.length2 += postContext.length;\n        patch.utf8Length1 += postContextByteCount;\n        patch.utf8Length2 += postContextByteCount;\n        if (patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postContext;\n        } else {\n          patch.diffs.push([DIFF_EQUAL, postContext]);\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n}\nfunction apply(patches, originalText) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (typeof patches === \"string\") {\n    throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  }\n  let text = originalText;\n  if (patches.length === 0) {\n    return [text, []];\n  }\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  });\n  const margin = opts.margin || DEFAULT_MARGIN;\n  const deleteThreshold = opts.deleteThreshold || 0.4;\n  const nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding;\n  splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta;\n    const text1 = diffText1(parsed[x].diffs);\n    let startLoc;\n    let endLoc = -1;\n    if (text1.length > MAX_BITS) {\n      startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc);\n      if (startLoc !== -1) {\n        endLoc = match(text, text1.substring(text1.length - MAX_BITS), expectedLoc + text1.length - MAX_BITS);\n        if (endLoc === -1 || startLoc >= endLoc) {\n          startLoc = -1;\n        }\n      }\n    } else {\n      startLoc = match(text, text1, expectedLoc);\n    }\n    if (startLoc === -1) {\n      results[x] = false;\n      delta -= parsed[x].length2 - parsed[x].length1;\n    } else {\n      results[x] = true;\n      delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1) {\n        text2 = text.substring(startLoc, startLoc + text1.length);\n      } else {\n        text2 = text.substring(startLoc, endLoc + MAX_BITS);\n      }\n      if (text1 === text2) {\n        text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      } else {\n        let diffs = diff(text1, text2, {\n          checkLines: false\n        });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold) {\n          results[x] = false;\n        } else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0;\n          let index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {\n              text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2);\n            } else if (mod[0] === DIFF_DELETE) {\n              text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n}\nfunction stringify(patches) {\n  return patches.map(stringifyPatch).join(\"\");\n}\nfunction stringifyPatch(patch) {\n  const {\n    utf8Length1,\n    utf8Length2,\n    utf8Start1,\n    utf8Start2,\n    diffs\n  } = patch;\n  let coords1;\n  if (utf8Length1 === 0) {\n    coords1 = \"\".concat(utf8Start1, \",0\");\n  } else if (utf8Length1 === 1) {\n    coords1 = \"\".concat(utf8Start1 + 1);\n  } else {\n    coords1 = \"\".concat(utf8Start1 + 1, \",\").concat(utf8Length1);\n  }\n  let coords2;\n  if (utf8Length2 === 0) {\n    coords2 = \"\".concat(utf8Start2, \",0\");\n  } else if (utf8Length2 === 1) {\n    coords2 = \"\".concat(utf8Start2 + 1);\n  } else {\n    coords2 = \"\".concat(utf8Start2 + 1, \",\").concat(utf8Length2);\n  }\n  const text = [\"@@ -\".concat(coords1, \" +\").concat(coords2, \" @@\\n\")];\n  let op;\n  for (let x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        op = \"+\";\n        break;\n      case DIFF_DELETE:\n        op = \"-\";\n        break;\n      case DIFF_EQUAL:\n        op = \" \";\n        break;\n      default:\n        throw new Error(\"Unknown patch operation.\");\n    }\n    text[x + 1] = \"\".concat(op + encodeURI(diffs[x][1]), \"\\n\");\n  }\n  return text.join(\"\").replace(/%20/g, \" \");\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline) {\n    return [];\n  }\n  const patches = [];\n  const lines = textline.split(\"\\n\");\n  let textPointer = 0;\n  while (textPointer < lines.length) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error(\"Invalid patch string: \".concat(lines[textPointer]));\n    }\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    patches.push(patch);\n    if (m[2] === \"\") {\n      patch.start1--;\n      patch.utf8Start1--;\n      patch.length1 = 1;\n      patch.utf8Length1 = 1;\n    } else if (m[2] === \"0\") {\n      patch.length1 = 0;\n      patch.utf8Length1 = 0;\n    } else {\n      patch.start1--;\n      patch.utf8Start1--;\n      patch.utf8Length1 = toInt(m[2]);\n      patch.length1 = patch.utf8Length1;\n    }\n    if (m[4] === \"\") {\n      patch.start2--;\n      patch.utf8Start2--;\n      patch.length2 = 1;\n      patch.utf8Length2 = 1;\n    } else if (m[4] === \"0\") {\n      patch.length2 = 0;\n      patch.utf8Length2 = 0;\n    } else {\n      patch.start2--;\n      patch.utf8Start2--;\n      patch.utf8Length2 = toInt(m[4]);\n      patch.length2 = patch.utf8Length2;\n    }\n    textPointer++;\n    while (textPointer < lines.length) {\n      const currentLine = lines[textPointer];\n      const sign = currentLine.charAt(0);\n      if (sign === \"@\") {\n        break;\n      }\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch (ex) {\n        throw new Error(\"Illegal escape in parse: \".concat(currentLine));\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\") {\n        patch.diffs.push([DIFF_DELETE, line]);\n        patch.length1 -= utf8Diff;\n      } else if (sign === \"+\") {\n        patch.diffs.push([DIFF_INSERT, line]);\n        patch.length2 -= utf8Diff;\n      } else if (sign === \" \") {\n        patch.diffs.push([DIFF_EQUAL, line]);\n        patch.length1 -= utf8Diff;\n        patch.length2 -= utf8Diff;\n      } else {\n        throw new Error(\"Invalid patch mode \\\"\".concat(sign, \"\\\" in: \").concat(line));\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nexport { DIFF_DELETE, DIFF_EQUAL, DIFF_INSERT, adjustIndiciesToUcs2, apply as applyPatches, cleanupEfficiency, cleanupSemantic, diff as makeDiff, make as makePatches, match, parse as parsePatch, stringifyPatch, stringify as stringifyPatches };\n//# sourceMappingURL=index.js.map\n","import type {Editor} from 'slate'\n\nconst IS_UDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\nconst IS_REDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withUndoing(editor: Editor, fn: () => void) {\n  const prev = isUndoing(editor)\n  IS_UDOING.set(editor, true)\n  fn()\n  IS_UDOING.set(editor, prev)\n}\n\nexport function isUndoing(editor: Editor) {\n  return IS_UDOING.get(editor) ?? false\n}\n\nexport function setIsUndoing(editor: Editor, isUndoing: boolean) {\n  IS_UDOING.set(editor, isUndoing)\n}\n\nexport function withRedoing(editor: Editor, fn: () => void) {\n  const prev = isRedoing(editor)\n  IS_REDOING.set(editor, true)\n  fn()\n  IS_REDOING.set(editor, prev)\n}\n\nexport function isRedoing(editor: Editor) {\n  return IS_REDOING.get(editor) ?? false\n}\n\nexport function setIsRedoing(editor: Editor, isRedoing: boolean) {\n  IS_REDOING.set(editor, isRedoing)\n}\n","/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport type {Patch} from '@portabletext/patches'\nimport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {ObjectSchemaType, PortableTextBlock} from '@sanity/types'\nimport {flatten, isEqual} from 'lodash'\nimport {\n  Editor,\n  Operation,\n  Path,\n  Transforms,\n  type Descendant,\n  type SelectionOperation,\n} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {fromSlateValue} from '../../utils/values'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {\n  isRedoing,\n  isUndoing,\n  setIsRedoing,\n  setIsUndoing,\n  withRedoing,\n  withUndoing,\n} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withUndoRedo')\nconst debugVerbose = debug.enabled && false\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst REMOTE_PATCHES = new WeakMap<\n  Editor,\n  {\n    patch: Patch\n    time: Date\n    snapshot: PortableTextBlock[] | undefined\n    previousSnapshot: PortableTextBlock[] | undefined\n  }[]\n>()\nconst UNDO_STEP_LIMIT = 1000\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  const state = SAVING.get(editor)\n  return state === undefined ? true : state\n}\n\nexport interface Options {\n  editorActor: EditorActor\n  blockSchemaType: ObjectSchemaType\n  subscriptions: Array<() => () => void>\n}\n\nconst getRemotePatches = (editor: Editor) => {\n  if (!REMOTE_PATCHES.get(editor)) {\n    REMOTE_PATCHES.set(editor, [])\n  }\n  return REMOTE_PATCHES.get(editor) || []\n}\n\nexport function createWithUndoRedo(\n  options: Options,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {editorActor, blockSchemaType} = options\n\n  return (editor: PortableTextSlateEditor) => {\n    let previousSnapshot: PortableTextBlock[] | undefined = fromSlateValue(\n      editor.children,\n      blockSchemaType.name,\n    )\n    const remotePatches = getRemotePatches(editor)\n\n    options.subscriptions.push(() => {\n      debug('Subscribing to patches')\n      const sub = editorActor.on('patches', ({patches, snapshot}) => {\n        let reset = false\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== 'local' && remotePatches) {\n            if (patch.type === 'unset' && patch.path.length === 0) {\n              debug(\n                'Someone else cleared the content, resetting undo/redo history',\n              )\n              editor.history = {undos: [], redos: []}\n              remotePatches.splice(0, remotePatches.length)\n              SAVING.set(editor, true)\n              reset = true\n              return\n            }\n            remotePatches.push({\n              patch,\n              time: new Date(),\n              snapshot,\n              previousSnapshot,\n            })\n          }\n        })\n        previousSnapshot = snapshot\n      })\n      return () => {\n        debug('Unsubscribing to patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.history = {undos: [], redos: []}\n    const {apply} = editor\n    editor.apply = (op: Operation) => {\n      if (editorActor.getSnapshot().context.readOnly) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp =\n        step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      const save = isSaving(editor)\n\n      let merge = true\n      if (save) {\n        if (!step) {\n          merge = false\n        } else if (operations.length === 0) {\n          merge = shouldMerge(op, lastOp) || overwrite\n        }\n\n        if (step && merge) {\n          step.operations.push(op)\n        } else {\n          const newStep = {\n            operations: [\n              ...(editor.selection === null\n                ? []\n                : [createSelectOperation(editor)]),\n              op,\n            ],\n            timestamp: new Date(),\n          }\n          undos.push(newStep)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n      apply(op)\n    }\n\n    editor.undo = () => {\n      if (editorActor.getSnapshot().context.readOnly) {\n        return\n      }\n      const {undos} = editor.history\n      if (undos.length > 0) {\n        const step = undos[undos.length - 1]\n        debug('Undoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = remotePatches.filter(\n            (item) => item.time >= step.timestamp,\n          )\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) =>\n                transformOperation(\n                  editor,\n                  item.patch,\n                  op,\n                  item.snapshot,\n                  item.previousSnapshot,\n                ),\n              ),\n            )\n          })\n          const reversedOperations = transformedOperations\n            .map(Operation.inverse)\n            .reverse()\n\n          try {\n            Editor.withoutNormalizing(editor, () => {\n              withUndoing(editor, () => {\n                withoutSaving(editor, () => {\n                  reversedOperations.forEach((op) => {\n                    editor.apply(op)\n                  })\n                })\n              })\n            })\n            editor.normalize()\n            editor.onChange()\n          } catch (err) {\n            debug('Could not perform undo step', err)\n            remotePatches.splice(0, remotePatches.length)\n            Transforms.deselect(editor)\n            editor.history = {undos: [], redos: []}\n            SAVING.set(editor, true)\n            setIsUndoing(editor, false)\n            editor.onChange()\n            return\n          }\n          editor.history.redos.push(step)\n          editor.history.undos.pop()\n        }\n      }\n    }\n\n    editor.redo = () => {\n      if (editorActor.getSnapshot().context.readOnly) {\n        return\n      }\n      const {redos} = editor.history\n      if (redos.length > 0) {\n        const step = redos[redos.length - 1]\n        debug('Redoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = remotePatches.filter(\n            (item) => item.time >= step.timestamp,\n          )\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) =>\n                transformOperation(\n                  editor,\n                  item.patch,\n                  op,\n                  item.snapshot,\n                  item.previousSnapshot,\n                ),\n              ),\n            )\n          })\n          try {\n            Editor.withoutNormalizing(editor, () => {\n              withRedoing(editor, () => {\n                withoutSaving(editor, () => {\n                  transformedOperations.forEach((op) => {\n                    editor.apply(op)\n                  })\n                })\n              })\n            })\n            editor.normalize()\n            editor.onChange()\n          } catch (err) {\n            debug('Could not perform redo step', err)\n            remotePatches.splice(0, remotePatches.length)\n            Transforms.deselect(editor)\n            editor.history = {undos: [], redos: []}\n            SAVING.set(editor, true)\n            setIsRedoing(editor, false)\n            editor.onChange()\n            return\n          }\n          editor.history.undos.push(step)\n          editor.history.redos.pop()\n        }\n      }\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\n/**\n * This will adjust the operation paths and offsets according to the\n * remote patches by other editors since the step operations was performed.\n */\nfunction transformOperation(\n  editor: PortableTextSlateEditor,\n  patch: Patch,\n  operation: Operation,\n  snapshot: PortableTextBlock[] | undefined,\n  previousSnapshot: PortableTextBlock[] | undefined,\n): Operation[] {\n  if (debugVerbose) {\n    debug(\n      `Adjusting '${operation.type}' operation paths for '${patch.type}' patch`,\n    )\n    debug(`Operation ${JSON.stringify(operation)}`)\n    debug(`Patch ${JSON.stringify(patch)}`)\n  }\n\n  const transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    debug(\n      `Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n    )\n    return [\n      adjustBlockPath(\n        transformedOperation,\n        patch.items.length,\n        insertBlockIndex,\n      ),\n    ]\n  }\n\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    // If this operation is targeting the same block that got removed, return empty\n    if (\n      'path' in transformedOperation &&\n      Array.isArray(transformedOperation.path) &&\n      transformedOperation.path[0] === unsetBlockIndex\n    ) {\n      debug('Skipping transformation that targeted removed block')\n      return []\n    }\n    if (debugVerbose) {\n      debug(`Selection ${JSON.stringify(editor.selection)}`)\n      debug(\n        `Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n      )\n    }\n    return [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(\n      `Adjusting selection for unset everything patch and ${operation.type} operation`,\n    )\n    return []\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const operationTargetBlock = findOperationTargetBlock(\n      editor,\n      transformedOperation,\n    )\n    if (\n      !operationTargetBlock ||\n      !isEqual({_key: operationTargetBlock._key}, patch.path[0])\n    ) {\n      return [transformedOperation]\n    }\n    const diffPatches = parsePatch(patch.value)\n    diffPatches.forEach((diffPatch) => {\n      let adjustOffsetBy = 0\n      let changedOffset = diffPatch.utf8Start1\n      const {diffs} = diffPatch\n      diffs.forEach((diff, index) => {\n        const [diffType, text] = diff\n        if (diffType === DIFF_INSERT) {\n          adjustOffsetBy += text.length\n          changedOffset += text.length\n        } else if (diffType === DIFF_DELETE) {\n          adjustOffsetBy -= text.length\n          changedOffset -= text.length\n        } else if (diffType === DIFF_EQUAL) {\n          // Only up to the point where there are no other changes\n          if (!diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL)) {\n            changedOffset += text.length\n          }\n        }\n      })\n      // Adjust accordingly if someone inserted text in the same node before us\n      if (transformedOperation.type === 'insert_text') {\n        if (changedOffset < transformedOperation.offset) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust accordingly if someone removed text in the same node before us\n      if (transformedOperation.type === 'remove_text') {\n        if (\n          changedOffset <=\n          transformedOperation.offset - transformedOperation.text.length\n        ) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust set_selection operation's points to new offset\n      if (transformedOperation.type === 'set_selection') {\n        const currentFocus = transformedOperation.properties?.focus\n          ? {...transformedOperation.properties.focus}\n          : undefined\n        const currentAnchor = transformedOperation?.properties?.anchor\n          ? {...transformedOperation.properties.anchor}\n          : undefined\n        const newFocus = transformedOperation?.newProperties?.focus\n          ? {...transformedOperation.newProperties.focus}\n          : undefined\n        const newAnchor = transformedOperation?.newProperties?.anchor\n          ? {...transformedOperation.newProperties.anchor}\n          : undefined\n        if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n          const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n          points.forEach((point) => {\n            if (point && changedOffset < point.offset) {\n              point.offset += adjustOffsetBy\n            }\n          })\n          if (currentFocus && currentAnchor) {\n            transformedOperation.properties = {\n              focus: currentFocus,\n              anchor: currentAnchor,\n            }\n          }\n          if (newFocus && newAnchor) {\n            transformedOperation.newProperties = {\n              focus: newFocus,\n              anchor: newAnchor,\n            }\n          }\n        }\n      }\n    })\n    return [transformedOperation]\n  }\n  return [transformedOperation]\n}\n/**\n * Adjust the block path for a operation\n */\nfunction adjustBlockPath(\n  operation: Operation,\n  level: number,\n  blockIndex: number,\n): Operation {\n  const transformedOperation = {...operation}\n  if (\n    blockIndex >= 0 &&\n    transformedOperation.type !== 'set_selection' &&\n    Array.isArray(transformedOperation.path) &&\n    transformedOperation.path[0] >= blockIndex + level &&\n    transformedOperation.path[0] + level > -1\n  ) {\n    const newPath = [\n      transformedOperation.path[0] + level,\n      ...transformedOperation.path.slice(1),\n    ]\n    transformedOperation.path = newPath\n  }\n  if (transformedOperation.type === 'set_selection') {\n    const currentFocus = transformedOperation.properties?.focus\n      ? {...transformedOperation.properties.focus}\n      : undefined\n    const currentAnchor = transformedOperation?.properties?.anchor\n      ? {...transformedOperation.properties.anchor}\n      : undefined\n    const newFocus = transformedOperation?.newProperties?.focus\n      ? {...transformedOperation.newProperties.focus}\n      : undefined\n    const newAnchor = transformedOperation?.newProperties?.anchor\n      ? {...transformedOperation.newProperties.anchor}\n      : undefined\n    if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n      const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n      points.forEach((point) => {\n        if (\n          point &&\n          point.path[0] >= blockIndex + level &&\n          point.path[0] + level > -1\n        ) {\n          point.path = [point.path[0] + level, ...point.path.slice(1)]\n        }\n      })\n      if (currentFocus && currentAnchor) {\n        transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor,\n        }\n      }\n      if (newFocus && newAnchor) {\n        transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor,\n        }\n      }\n    }\n  }\n  //   // Assign fresh point objects (we don't want to mutate the original ones)\n  return transformedOperation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldOverwrite = (\n  op: Operation,\n  prev: Operation | undefined,\n): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n\nfunction findOperationTargetBlock(\n  editor: PortableTextSlateEditor,\n  operation: Operation,\n): Descendant | undefined {\n  let block: Descendant | undefined\n  if (operation.type === 'set_selection' && editor.selection) {\n    block = editor.children[editor.selection.focus.path[0]]\n  } else if ('path' in operation) {\n    block = editor.children[operation.path[0]]\n  }\n  return block\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport {debounce, isEqual} from 'lodash'\nimport {useCallback, useMemo, useRef} from 'react'\nimport {Editor, Text, Transforms, type Descendant, type Node} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {validateValue} from '../../utils/validateValue'\nimport {toSlateValue, VOID_CHILD_KEY} from '../../utils/values'\nimport {\n  isChangingLocally,\n  isChangingRemotely,\n  withRemoteChanges,\n} from '../../utils/withChanges'\nimport {withoutPatching} from '../../utils/withoutPatching'\nimport type {EditorActor} from '../editor-machine'\nimport {withoutSaving} from '../plugins/createWithUndoRedo'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('hook:useSyncValue')\n\n/**\n * @internal\n */\nexport interface UseSyncValueProps {\n  editorActor: EditorActor\n  portableTextEditor: PortableTextEditor\n  readOnly: boolean\n  slateEditor: PortableTextSlateEditor\n}\n\nconst CURRENT_VALUE = new WeakMap<\n  PortableTextEditor,\n  PortableTextBlock[] | undefined\n>()\n\n/**\n * Sync value with the editor state\n *\n * Normally nothing here should apply, and the editor and the real world are perfectly aligned.\n *\n * Inconsistencies could happen though, so we need to check the editor state when the value changes.\n *\n * For performance reasons, it makes sense to also do the content validation here, as we already\n * iterate over the value and can validate only the new content that is actually changed.\n *\n * @internal\n */\nexport function useSyncValue(\n  props: UseSyncValueProps,\n): (\n  value: PortableTextBlock[] | undefined,\n  userCallbackFn?: () => void,\n) => void {\n  const {editorActor, portableTextEditor, readOnly, slateEditor} = props\n  const schemaTypes = editorActor.getSnapshot().context.schema\n  const previousValue = useRef<PortableTextBlock[] | undefined>()\n  const updateValueFunctionRef =\n    useRef<(value: PortableTextBlock[] | undefined) => void>()\n\n  const updateFromCurrentValue = useCallback(() => {\n    const currentValue = CURRENT_VALUE.get(portableTextEditor)\n    if (previousValue.current === currentValue) {\n      debug('Value is the same object as previous, not need to sync')\n      return\n    }\n    if (updateValueFunctionRef.current && currentValue) {\n      debug('Updating the value debounced')\n      updateValueFunctionRef.current(currentValue)\n    }\n  }, [portableTextEditor])\n  const updateValueDebounced = useMemo(\n    () =>\n      debounce(updateFromCurrentValue, 1000, {trailing: true, leading: false}),\n    [updateFromCurrentValue],\n  )\n\n  return useMemo(() => {\n    const updateFunction = (value: PortableTextBlock[] | undefined) => {\n      CURRENT_VALUE.set(portableTextEditor, value)\n      const isProcessingLocalChanges = isChangingLocally(slateEditor)\n      const isProcessingRemoteChanges = isChangingRemotely(slateEditor)\n      if (!readOnly) {\n        if (isProcessingLocalChanges) {\n          debug('Has local changes, not syncing value right now')\n          updateValueDebounced()\n          return\n        }\n        if (isProcessingRemoteChanges) {\n          debug('Has remote changes, not syncing value right now')\n          updateValueDebounced()\n          return\n        }\n      }\n\n      let isChanged = false\n      let isValid = true\n\n      const hadSelection = !!slateEditor.selection\n\n      // If empty value, remove everything in the editor and insert a placeholder block\n      if (!value || value.length === 0) {\n        debug('Value is empty')\n        Editor.withoutNormalizing(slateEditor, () => {\n          withoutSaving(slateEditor, () => {\n            withoutPatching(slateEditor, () => {\n              if (hadSelection) {\n                Transforms.deselect(slateEditor)\n              }\n              const childrenLength = slateEditor.children.length\n              slateEditor.children.forEach((_, index) => {\n                Transforms.removeNodes(slateEditor, {\n                  at: [childrenLength - 1 - index],\n                })\n              })\n              Transforms.insertNodes(\n                slateEditor,\n                slateEditor.pteCreateTextBlock({decorators: []}),\n                {at: [0]},\n              )\n              // Add a new selection in the top of the document\n              if (hadSelection) {\n                Transforms.select(slateEditor, [0, 0])\n              }\n            })\n          })\n        })\n        isChanged = true\n      }\n      // Remove, replace or add nodes according to what is changed.\n      if (value && value.length > 0) {\n        const slateValueFromProps = toSlateValue(value, {\n          schemaTypes,\n        })\n        Editor.withoutNormalizing(slateEditor, () => {\n          withRemoteChanges(slateEditor, () => {\n            withoutSaving(slateEditor, () => {\n              withoutPatching(slateEditor, () => {\n                const childrenLength = slateEditor.children.length\n                // Remove blocks that have become superfluous\n                if (slateValueFromProps.length < childrenLength) {\n                  for (\n                    let i = childrenLength - 1;\n                    i > slateValueFromProps.length - 1;\n                    i--\n                  ) {\n                    Transforms.removeNodes(slateEditor, {\n                      at: [i],\n                    })\n                  }\n                  isChanged = true\n                }\n                // Go through all of the blocks and see if they need to be updated\n                slateValueFromProps.forEach(\n                  (currentBlock, currentBlockIndex) => {\n                    const oldBlock = slateEditor.children[currentBlockIndex]\n                    const hasChanges =\n                      oldBlock && !isEqual(currentBlock, oldBlock)\n                    if (hasChanges && isValid) {\n                      const validationValue = [value[currentBlockIndex]]\n                      const validation = validateValue(\n                        validationValue,\n                        schemaTypes,\n                        editorActor.getSnapshot().context.keyGenerator,\n                      )\n                      // Resolve validations that can be resolved automatically, without involving the user (but only if the value was changed)\n                      if (\n                        !validation.valid &&\n                        validation.resolution?.autoResolve &&\n                        validation.resolution?.patches.length > 0\n                      ) {\n                        // Only apply auto resolution if the value has been populated before and is different from the last one.\n                        if (\n                          !readOnly &&\n                          previousValue.current &&\n                          previousValue.current !== value\n                        ) {\n                          // Give a console warning about the fact that it did an auto resolution\n                          console.warn(\n                            `${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`,\n                          )\n                          validation.resolution.patches.forEach((patch) => {\n                            editorActor.send({type: 'patch', patch})\n                          })\n                        }\n                      }\n                      if (\n                        validation.valid ||\n                        validation.resolution?.autoResolve\n                      ) {\n                        if (oldBlock._key === currentBlock._key) {\n                          if (debug.enabled)\n                            debug('Updating block', oldBlock, currentBlock)\n                          _updateBlock(\n                            slateEditor,\n                            currentBlock,\n                            oldBlock,\n                            currentBlockIndex,\n                          )\n                        } else {\n                          if (debug.enabled)\n                            debug('Replacing block', oldBlock, currentBlock)\n                          _replaceBlock(\n                            slateEditor,\n                            currentBlock,\n                            currentBlockIndex,\n                          )\n                        }\n                        isChanged = true\n                      } else {\n                        editorActor.send({\n                          type: 'invalid value',\n                          resolution: validation.resolution,\n                          value,\n                        })\n                        isValid = false\n                      }\n                    }\n                    if (!oldBlock && isValid) {\n                      const validationValue = [value[currentBlockIndex]]\n                      const validation = validateValue(\n                        validationValue,\n                        schemaTypes,\n                        editorActor.getSnapshot().context.keyGenerator,\n                      )\n                      if (debug.enabled)\n                        debug(\n                          'Validating and inserting new block in the end of the value',\n                          currentBlock,\n                        )\n                      if (\n                        validation.valid ||\n                        validation.resolution?.autoResolve\n                      ) {\n                        Transforms.insertNodes(slateEditor, currentBlock, {\n                          at: [currentBlockIndex],\n                        })\n                      } else {\n                        debug('Invalid', validation)\n                        editorActor.send({\n                          type: 'invalid value',\n                          resolution: validation.resolution,\n                          value,\n                        })\n                        isValid = false\n                      }\n                    }\n                  },\n                )\n              })\n            })\n          })\n        })\n      }\n\n      if (!isValid) {\n        debug('Invalid value, returning')\n        return\n      }\n      if (isChanged) {\n        debug('Server value changed, syncing editor')\n        try {\n          slateEditor.onChange()\n        } catch (err) {\n          console.error(err)\n          editorActor.send({\n            type: 'invalid value',\n            resolution: null,\n            value,\n          })\n          return\n        }\n        if (hadSelection && !slateEditor.selection) {\n          Transforms.select(slateEditor, {\n            anchor: {path: [0, 0], offset: 0},\n            focus: {path: [0, 0], offset: 0},\n          })\n          slateEditor.onChange()\n        }\n        editorActor.send({type: 'value changed', value})\n      } else {\n        debug('Server value and editor value is equal, no need to sync.')\n      }\n      previousValue.current = value\n    }\n    updateValueFunctionRef.current = updateFunction\n    return updateFunction\n  }, [\n    editorActor,\n    portableTextEditor,\n    readOnly,\n    schemaTypes,\n    slateEditor,\n    updateValueDebounced,\n  ])\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _replaceBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // While replacing the block and the current selection focus is on the replaced block,\n  // temporarily deselect the editor then optimistically try to restore the selection afterwards.\n  const currentSelection = slateEditor.selection\n  const selectionFocusOnBlock =\n    currentSelection && currentSelection.focus.path[0] === currentBlockIndex\n  if (selectionFocusOnBlock) {\n    Transforms.deselect(slateEditor)\n  }\n  Transforms.removeNodes(slateEditor, {at: [currentBlockIndex]})\n  Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n  slateEditor.onChange()\n  if (selectionFocusOnBlock) {\n    Transforms.select(slateEditor, currentSelection)\n  }\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _updateBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  oldBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // Update the root props on the block\n  Transforms.setNodes(slateEditor, currentBlock as Partial<Node>, {\n    at: [currentBlockIndex],\n  })\n  // Text block's need to have their children updated as well (setNode does not target a node's children)\n  if (\n    slateEditor.isTextBlock(currentBlock) &&\n    slateEditor.isTextBlock(oldBlock)\n  ) {\n    const oldBlockChildrenLength = oldBlock.children.length\n    if (currentBlock.children.length < oldBlockChildrenLength) {\n      // Remove any children that have become superfluous\n      Array.from(\n        Array(oldBlockChildrenLength - currentBlock.children.length),\n      ).forEach((_, index) => {\n        const childIndex = oldBlockChildrenLength - 1 - index\n        if (childIndex > 0) {\n          debug('Removing child')\n          Transforms.removeNodes(slateEditor, {\n            at: [currentBlockIndex, childIndex],\n          })\n        }\n      })\n    }\n    currentBlock.children.forEach(\n      (currentBlockChild, currentBlockChildIndex) => {\n        const oldBlockChild = oldBlock.children[currentBlockChildIndex]\n        const isChildChanged = !isEqual(currentBlockChild, oldBlockChild)\n        const isTextChanged = !isEqual(\n          currentBlockChild.text,\n          oldBlockChild?.text,\n        )\n        const path = [currentBlockIndex, currentBlockChildIndex]\n        if (isChildChanged) {\n          // Update if this is the same child\n          if (currentBlockChild._key === oldBlockChild?._key) {\n            debug('Updating changed child', currentBlockChild, oldBlockChild)\n            Transforms.setNodes(\n              slateEditor,\n              currentBlockChild as Partial<Node>,\n              {\n                at: path,\n              },\n            )\n            const isSpanNode =\n              Text.isText(currentBlockChild) &&\n              currentBlockChild._type === 'span' &&\n              Text.isText(oldBlockChild) &&\n              oldBlockChild._type === 'span'\n            if (isSpanNode && isTextChanged) {\n              Transforms.delete(slateEditor, {\n                at: {\n                  focus: {path, offset: 0},\n                  anchor: {path, offset: oldBlockChild.text.length},\n                },\n              })\n              Transforms.insertText(slateEditor, currentBlockChild.text, {\n                at: path,\n              })\n              slateEditor.onChange()\n            } else if (!isSpanNode) {\n              // If it's a inline block, also update the void text node key\n              debug('Updating changed inline object child', currentBlockChild)\n              Transforms.setNodes(\n                slateEditor,\n                {_key: VOID_CHILD_KEY},\n                {\n                  at: [...path, 0],\n                  voids: true,\n                },\n              )\n            }\n            // Replace the child if _key's are different\n          } else if (oldBlockChild) {\n            debug('Replacing child', currentBlockChild)\n            Transforms.removeNodes(slateEditor, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n            // Insert it if it didn't exist before\n          } else if (!oldBlockChild) {\n            debug('Inserting new child', currentBlockChild)\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n          }\n        }\n      },\n    )\n  }\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {useSelector} from '@xstate/react'\nimport {throttle} from 'lodash'\nimport {useCallback, useEffect, useRef} from 'react'\nimport {Editor} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {IS_PROCESSING_LOCAL_CHANGES} from '../../utils/weakMaps'\nimport type {EditorActor} from '../editor-machine'\nimport {useSyncValue} from '../hooks/useSyncValue'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('component:PortableTextEditor:Synchronizer')\nconst debugVerbose = debug.enabled && false\n\n// The editor will commit changes in a throttled fashion in order\n// not to overload the network and degrade performance while typing.\nconst FLUSH_PATCHES_THROTTLED_MS = process.env.NODE_ENV === 'test' ? 500 : 1000\n\n/**\n * @internal\n */\nexport interface SynchronizerProps {\n  editorActor: EditorActor\n  getValue: () => Array<PortableTextBlock> | undefined\n  portableTextEditor: PortableTextEditor\n  slateEditor: PortableTextSlateEditor\n}\n\n/**\n * Synchronizes the server value with the editor, and provides various contexts for the editor state.\n * @internal\n */\nexport function Synchronizer(props: SynchronizerProps) {\n  const readOnly = useSelector(props.editorActor, (s) => s.context.readOnly)\n  const value = useSelector(props.editorActor, (s) => s.context.value)\n  const {editorActor, getValue, portableTextEditor, slateEditor} = props\n  const pendingPatches = useRef<Patch[]>([])\n\n  const syncValue = useSyncValue({\n    editorActor,\n    portableTextEditor,\n    readOnly,\n    slateEditor,\n  })\n\n  useEffect(() => {\n    IS_PROCESSING_LOCAL_CHANGES.set(slateEditor, false)\n  }, [slateEditor])\n\n  const onFlushPendingPatches = useCallback(() => {\n    if (pendingPatches.current.length > 0) {\n      debug('Flushing pending patches')\n      if (debugVerbose) {\n        debug(`Patches:\\n${JSON.stringify(pendingPatches.current, null, 2)}`)\n      }\n      const snapshot = getValue()\n      editorActor.send({\n        type: 'mutation',\n        patches: pendingPatches.current,\n        snapshot,\n      })\n      pendingPatches.current = []\n    }\n    IS_PROCESSING_LOCAL_CHANGES.set(slateEditor, false)\n  }, [editorActor, slateEditor, getValue])\n\n  // Flush pending patches immediately on unmount\n  useEffect(() => {\n    return () => {\n      onFlushPendingPatches()\n    }\n  }, [onFlushPendingPatches])\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    const onFlushPendingPatchesThrottled = throttle(\n      () => {\n        // If the editor is normalizing (each operation) it means that it's not in the middle of a bigger transform,\n        // and we can flush these changes immediately.\n        if (Editor.isNormalizing(slateEditor)) {\n          onFlushPendingPatches()\n          return\n        }\n        // If it's in the middle of something, try again.\n        onFlushPendingPatchesThrottled()\n      },\n      FLUSH_PATCHES_THROTTLED_MS,\n      {\n        leading: false,\n        trailing: true,\n      },\n    )\n\n    debug('Subscribing to patch events')\n    const sub = editorActor.on('patch', (event) => {\n      IS_PROCESSING_LOCAL_CHANGES.set(slateEditor, true)\n      pendingPatches.current.push(event.patch)\n      onFlushPendingPatchesThrottled()\n    })\n    return () => {\n      debug('Unsubscribing to patch events')\n      sub.unsubscribe()\n    }\n  }, [editorActor, onFlushPendingPatches, slateEditor])\n\n  // This hook must be set up after setting up the subscription above, or it will not pick up validation errors from the useSyncValue hook.\n  // This will cause the editor to not be able to signal a validation error and offer invalid value resolution of the initial value.\n  const isInitialValueFromProps = useRef(true)\n  useEffect(() => {\n    debug('Value from props changed, syncing new value')\n    syncValue(value)\n    // Signal that we have our first value, and are ready to roll.\n    if (isInitialValueFromProps.current) {\n      editorActor.send({type: 'ready'})\n      isInitialValueFromProps.current = false\n    }\n  }, [editorActor, syncValue, value])\n\n  return null\n}\n\nSynchronizer.displayName = 'Synchronizer'\n","import {createContext} from 'react'\nimport type {EditorActor} from './editor-machine'\n\nexport const EditorActorContext = createContext<EditorActor>({} as EditorActor)\n","import {\n  createContext,\n  startTransition,\n  useContext,\n  useEffect,\n  useState,\n} from 'react'\nimport type {EditorSelection} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * A React context for sharing the editor selection.\n */\nconst PortableTextEditorSelectionContext =\n  createContext<EditorSelection | null>(null)\n\n/**\n * @public\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const selection = useContext(PortableTextEditorSelectionContext)\n\n  if (selection === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorSelection\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n  return selection\n}\nconst debug = debugWithName('component:PortableTextEditor:SelectionProvider')\nconst debugVerbose = debug.enabled && false\n\n/**\n * @internal\n */\nexport function PortableTextEditorSelectionProvider(\n  props: React.PropsWithChildren<{\n    editorActor: EditorActor\n  }>,\n) {\n  const [selection, setSelection] = useState<EditorSelection>(null)\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to selection changes')\n    const subscription = props.editorActor.on('selection', (event) => {\n      // Set the selection state in a transition, we don't need the state immediately.\n      startTransition(() => {\n        if (debugVerbose) debug('Setting selection')\n        setSelection(event.selection)\n      })\n    })\n\n    return () => {\n      debug('Unsubscribing to selection changes')\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor])\n\n  return (\n    <PortableTextEditorSelectionContext.Provider value={selection}>\n      {props.children}\n    </PortableTextEditorSelectionContext.Provider>\n  )\n}\n","import getRandomValues from 'get-random-values-esm'\n\n/**\n * @public\n */\nexport const defaultKeyGenerator = (): string => randomKey(12)\n\nconst getByteHexTable = (() => {\n  let table: any[]\n  return () => {\n    if (table) {\n      return table\n    }\n\n    table = []\n    for (let i = 0; i < 256; ++i) {\n      table[i] = (i + 0x100).toString(16).slice(1)\n    }\n    return table\n  }\n})()\n\n// WHATWG crypto RNG - https://w3c.github.io/webcrypto/Overview.html\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length)\n  getRandomValues(rnds8)\n  return rnds8\n}\n\nfunction randomKey(length?: number): string {\n  const table = getByteHexTable()\n  return whatwgRNG(length)\n    .reduce((str, n) => str + table[n], '')\n    .slice(0, length)\n}\n","import {\n  diffMatchPatch,\n  insert,\n  set,\n  setIfMissing,\n  unset,\n  type InsertPosition,\n  type Patch,\n} from '@portabletext/patches'\nimport type {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {get, isUndefined, omitBy} from 'lodash'\nimport {\n  Text,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {PatchFunctions} from '../editor/plugins/createWithPatches'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {fromSlateValue} from './values'\n\nconst debug = debugWithName('operationToPatches')\n\nexport function createOperationToPatches(\n  types: PortableTextMemberSchemaTypes,\n): PatchFunctions {\n  const textBlockName = types.block.name\n  function insertTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    if (debug.enabled) {\n      debug('Operation', JSON.stringify(operation, null, 2))\n    }\n    const block =\n      editor.isTextBlock(editor.children[operation.path[0]]) &&\n      editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const textChild =\n      editor.isTextBlock(block) &&\n      editor.isTextSpan(block.children[operation.path[1]]) &&\n      (block.children[operation.path[1]] as PortableTextSpan)\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const prevBlock = beforeValue[operation.path[0]]\n    const prevChild =\n      editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevChild) ? prevChild.text : ''\n    const patch = diffMatchPatch(prevText, textChild.text, path)\n    return patch.value.length ? [patch] : []\n  }\n\n  function removeTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = editor && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const child =\n      (editor.isTextBlock(block) && block.children[operation.path[1]]) ||\n      undefined\n    const textChild: PortableTextSpan | undefined = editor.isTextSpan(child)\n      ? child\n      : undefined\n    if (child && !textChild) {\n      throw new Error('Expected span')\n    }\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const beforeBlock = beforeValue[operation.path[0]]\n    const prevTextChild =\n      editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text\n    const patch = diffMatchPatch(prevText || '', textChild.text, path)\n    return patch.value ? [patch] : []\n  }\n\n  function setNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n  ) {\n    if (operation.path.length === 1) {\n      const block = editor.children[operation.path[0]]\n      if (typeof block._key !== 'string') {\n        throw new Error('Expected block to have a _key')\n      }\n      const setNode = omitBy(\n        {...editor.children[operation.path[0]], ...operation.newProperties},\n        isUndefined,\n      ) as unknown as Descendant\n      return [\n        set(fromSlateValue([setNode], textBlockName)[0], [{_key: block._key}]),\n      ]\n    } else if (operation.path.length === 2) {\n      const block = editor.children[operation.path[0]]\n      if (editor.isTextBlock(block)) {\n        const child = block.children[operation.path[1]]\n        if (child) {\n          const blockKey = block._key\n          const childKey = child._key\n          const patches: Patch[] = []\n          const keys = Object.keys(operation.newProperties)\n          keys.forEach((keyName) => {\n            // Special case for setting _key on a child. We have to target it by index and not the _key.\n            if (keys.length === 1 && keyName === '_key') {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  block.children.indexOf(child),\n                  keyName,\n                ]),\n              )\n            } else {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  {_key: childKey},\n                  keyName,\n                ]),\n              )\n            }\n          })\n          return patches\n        }\n        throw new Error('Could not find a valid child')\n      }\n      throw new Error('Could not find a valid block')\n    } else {\n      throw new Error(\n        `Unexpected path encountered: ${JSON.stringify(operation.path)}`,\n      )\n    }\n  }\n\n  function insertNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    beforeValue: Descendant[],\n  ): Patch[] {\n    const block = beforeValue[operation.path[0]]\n    const isTextBlock = editor.isTextBlock(block)\n    if (operation.path.length === 1) {\n      const position = operation.path[0] === 0 ? 'before' : 'after'\n      const beforeBlock = beforeValue[operation.path[0] - 1]\n      const targetKey =\n        operation.path[0] === 0 ? block?._key : beforeBlock?._key\n      if (targetKey) {\n        return [\n          insert(\n            [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n            position,\n            [{_key: targetKey}],\n          ),\n        ]\n      }\n      return [\n        setIfMissing(beforeValue, []),\n        insert(\n          [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n          'before',\n          [operation.path[0]],\n        ),\n      ]\n    } else if (\n      isTextBlock &&\n      operation.path.length === 2 &&\n      editor.children[operation.path[0]]\n    ) {\n      const position =\n        block.children.length === 0 || !block.children[operation.path[1] - 1]\n          ? 'before'\n          : 'after'\n      const node = {...operation.node} as Descendant\n      if (!node._type && Text.isText(node)) {\n        node._type = 'span'\n        node.marks = []\n      }\n      const blk = fromSlateValue(\n        [\n          {\n            _key: 'bogus',\n            _type: textBlockName,\n            children: [node],\n          },\n        ],\n        textBlockName,\n      )[0] as PortableTextTextBlock\n      const child = blk.children[0]\n      return [\n        insert([child], position, [\n          {_key: block._key},\n          'children',\n          block.children.length <= 1 || !block.children[operation.path[1] - 1]\n            ? 0\n            : {_key: block.children[operation.path[1] - 1]._key},\n        ]),\n      ]\n    }\n    debug(\n      'Something was inserted into a void block. Not producing editor patches.',\n    )\n    return []\n  }\n\n  function splitNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const splitBlock = editor.children[operation.path[0]]\n    if (!editor.isTextBlock(splitBlock)) {\n      throw new Error(\n        `Block with path ${JSON.stringify(\n          operation.path[0],\n        )} is not a text block and can't be split`,\n      )\n    }\n    if (operation.path.length === 1) {\n      const oldBlock = beforeValue[operation.path[0]]\n      if (editor.isTextBlock(oldBlock)) {\n        const targetValue = fromSlateValue(\n          [editor.children[operation.path[0] + 1]],\n          textBlockName,\n        )[0]\n        if (targetValue) {\n          patches.push(\n            insert([targetValue], 'after', [{_key: splitBlock._key}]),\n          )\n          const spansToUnset = oldBlock.children.slice(operation.position)\n          spansToUnset.forEach((span) => {\n            const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n            patches.push(unset(path))\n          })\n        }\n      }\n      return patches\n    }\n    if (operation.path.length === 2) {\n      const splitSpan = splitBlock.children[operation.path[1]]\n      if (editor.isTextSpan(splitSpan)) {\n        const targetSpans = (\n          fromSlateValue(\n            [\n              {\n                ...splitBlock,\n                children: splitBlock.children.slice(\n                  operation.path[1] + 1,\n                  operation.path[1] + 2,\n                ),\n              } as Descendant,\n            ],\n            textBlockName,\n          )[0] as PortableTextTextBlock\n        ).children\n\n        patches.push(\n          insert(targetSpans, 'after', [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n          ]),\n        )\n        patches.push(\n          set(splitSpan.text, [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n            'text',\n          ]),\n        )\n      }\n      return patches\n    }\n    return patches\n  }\n\n  function removeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = beforeValue[operation.path[0]]\n    if (operation.path.length === 1) {\n      // Remove a single block\n      if (block && block._key) {\n        return [unset([{_key: block._key}])]\n      }\n      throw new Error('Block not found')\n    } else if (editor.isTextBlock(block) && operation.path.length === 2) {\n      const spanToRemove = block.children[operation.path[1]]\n\n      if (spanToRemove) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === operation.node._key,\n        )\n\n        if (spansMatchingKey.length > 1) {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n          return []\n        }\n\n        return [\n          unset([{_key: block._key}, 'children', {_key: spanToRemove._key}]),\n        ]\n      }\n      debug('Span not found in editor trying to remove node')\n      return []\n    } else {\n      debug('Not creating patch inside object block')\n      return []\n    }\n  }\n\n  function mergeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n\n    const block = beforeValue[operation.path[0]]\n    const updatedBlock = editor.children[operation.path[0]]\n\n    if (operation.path.length === 1) {\n      if (block?._key) {\n        const newBlock = fromSlateValue(\n          [editor.children[operation.path[0] - 1]],\n          textBlockName,\n        )[0]\n        patches.push(set(newBlock, [{_key: newBlock._key}]))\n        patches.push(unset([{_key: block._key}]))\n      } else {\n        throw new Error('Target key not found!')\n      }\n    } else if (\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(updatedBlock) &&\n      operation.path.length === 2\n    ) {\n      const updatedSpan =\n        updatedBlock.children[operation.path[1] - 1] &&\n        editor.isTextSpan(updatedBlock.children[operation.path[1] - 1])\n          ? updatedBlock.children[operation.path[1] - 1]\n          : undefined\n      const removedSpan =\n        block.children[operation.path[1]] &&\n        editor.isTextSpan(block.children[operation.path[1]])\n          ? block.children[operation.path[1]]\n          : undefined\n\n      if (updatedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === updatedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            set(updatedSpan.text, [\n              {_key: block._key},\n              'children',\n              {_key: updatedSpan._key},\n              'text',\n            ]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n\n      if (removedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === removedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            unset([{_key: block._key}, 'children', {_key: removedSpan._key}]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n    } else {\n      debug(\"Void nodes can't be merged, not creating any patches\")\n    }\n    return patches\n  }\n\n  function moveNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const block = beforeValue[operation.path[0]]\n    const targetBlock = beforeValue[operation.newPath[0]]\n    if (operation.path.length === 1) {\n      const position: InsertPosition =\n        operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n      patches.push(unset([{_key: block._key}]))\n      patches.push(\n        insert([fromSlateValue([block], textBlockName)[0]], position, [\n          {_key: targetBlock._key},\n        ]),\n      )\n    } else if (\n      operation.path.length === 2 &&\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(targetBlock)\n    ) {\n      const child = block.children[operation.path[1]]\n      const targetChild = targetBlock.children[operation.newPath[1]]\n      const position =\n        operation.newPath[1] === targetBlock.children.length\n          ? 'after'\n          : 'before'\n      const childToInsert = (\n        fromSlateValue([block], textBlockName)[0] as PortableTextTextBlock\n      ).children[operation.path[1]]\n      patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n      patches.push(\n        insert([childToInsert], position, [\n          {_key: targetBlock._key},\n          'children',\n          {_key: targetChild._key},\n        ]),\n      )\n    }\n    return patches\n  }\n\n  return {\n    insertNodePatch,\n    insertTextPatch,\n    mergeNodePatch,\n    moveNodePatch,\n    removeNodePatch,\n    removeTextPatch,\n    setNodePatch,\n    splitNodePatch,\n  }\n}\n","import type {Editor} from 'slate'\nimport type {EditorActor} from '../editor-machine'\n\nexport function createWithEventListeners(\n  editorActor: EditorActor,\n  subscriptions: Array<() => () => void>,\n) {\n  return function withEventListeners(editor: Editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== undefined) {\n      return editor\n    }\n\n    subscriptions.push(() => {\n      const subscription = editorActor.on('*', (event) => {\n        switch (event.type) {\n          case 'annotation.add': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'annotation.add',\n                annotation: event.annotation,\n              },\n              editor,\n            })\n            break\n          }\n          case 'annotation.remove': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'annotation.remove',\n                annotation: event.annotation,\n              },\n              editor,\n            })\n            break\n          }\n          case 'annotation.toggle': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'annotation.toggle',\n                annotation: event.annotation,\n              },\n              editor,\n            })\n            break\n          }\n          case 'focus': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'focus',\n              },\n              editor,\n            })\n            break\n          }\n        }\n      })\n\n      return () => {\n        subscription.unsubscribe()\n      }\n    })\n\n    editor.addMark = (mark) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.add',\n          decorator: mark,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.removeMark = (mark) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.remove',\n          decorator: mark,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteBackward = (unit) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete backward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteForward = (unit) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete forward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertBreak = () => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertSoftBreak = () => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert soft break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertText = (text, options) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert text',\n          text,\n          options,\n        },\n        editor,\n      })\n      return\n    }\n\n    return editor\n  }\n}\n","import type {PortableTextSlateEditor} from '../../types/editor'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(editorActor: EditorActor) {\n  return function withMaxBlocks(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      if (editorActor.getSnapshot().context.readOnly) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' ||\n            operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {Editor, Element, Node, Transforms} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(\n  editorActor: EditorActor,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  return function withKeys(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply, normalizeNode} = editor\n\n    // The default behavior is to always generate a new key here.\n    // For example, when undoing and redoing we want to retain the keys, but\n    // when we create a new bold span by splitting a non-bold-span we want the produced node to get a new key.\n    editor.apply = (operation) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      if (operation.type === 'split_node') {\n        apply({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n          },\n        })\n\n        return\n      }\n\n      if (operation.type === 'insert_node') {\n        if (!Editor.isEditor(operation.node)) {\n          apply({\n            ...operation,\n            node: {\n              ...operation.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n            },\n          })\n\n          return\n        }\n      }\n\n      apply(operation)\n    }\n\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (Element.isElement(node) && node._type === schemaTypes.block.name) {\n        // Set key on block itself\n        if (!node._key) {\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {_key: editorActor.getSnapshot().context.keyGenerator()},\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {_key: editorActor.getSnapshot().context.keyGenerator()},\n              {at: childPath},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","import {\n  applyAll,\n  type DiffMatchPatch,\n  type InsertPatch,\n  type Patch,\n  type SetPatch,\n  type UnsetPatch,\n} from '@portabletext/patches'\nimport {\n  cleanupEfficiency,\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  applyPatches as diffMatchPatchApplyPatches,\n  makeDiff,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {\n  KeyedSegment,\n  Path,\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n} from '@sanity/types'\nimport {\n  Element,\n  Text,\n  Transforms,\n  type Descendant,\n  type Node,\n  type Path as SlatePath,\n} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {toSlateValue} from './values'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\nconst debug = debugWithName('applyPatches')\nconst debugVerbose = debug.enabled && true\n\n/**\n * Creates a function that can apply a patch onto a PortableTextSlateEditor.\n */\nexport function createApplyPatch(\n  schemaTypes: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor, patch: Patch) => boolean {\n  return (editor: PortableTextSlateEditor, patch: Patch): boolean => {\n    let changed = false\n\n    // Save some CPU cycles by not stringifying unless enabled\n    if (debugVerbose) {\n      debug(\n        '\\n\\nNEW PATCH =============================================================',\n      )\n      debug(JSON.stringify(patch, null, 2))\n    }\n\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch, schemaTypes)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n        default:\n          debug('Unhandled patch', patch.type)\n      }\n    } catch (err) {\n      console.error(err)\n    }\n\n    return changed\n  }\n}\n\n/**\n * Apply a remote diff match patch to the current PTE instance.\n * Note meant for external consumption, only exported for testing purposes.\n *\n * @param editor - Portable text slate editor instance\n * @param patch - The PTE diff match patch operation to apply\n * @returns true if the patch was applied, false otherwise\n * @internal\n */\nexport function diffMatchPatch(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  patch: DiffMatchPatch,\n): boolean {\n  const {block, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  if (!child || !childPath) {\n    debug('Child not found')\n    return false\n  }\n  const isSpanTextDiffMatchPatch =\n    block &&\n    editor.isTextBlock(block) &&\n    patch.path.length === 4 &&\n    patch.path[1] === 'children' &&\n    patch.path[3] === 'text'\n\n  if (!isSpanTextDiffMatchPatch || !Text.isText(child)) {\n    return false\n  }\n\n  const patches = parsePatch(patch.value)\n  const [newValue] = diffMatchPatchApplyPatches(patches, child.text, {\n    allowExceedingIndices: true,\n  })\n  const diff = cleanupEfficiency(makeDiff(child.text, newValue), 5)\n\n  debugState(editor, 'before')\n  let offset = 0\n  for (const [op, text] of diff) {\n    if (op === DIFF_INSERT) {\n      editor.apply({type: 'insert_text', path: childPath, offset, text})\n      offset += text.length\n    } else if (op === DIFF_DELETE) {\n      editor.apply({type: 'remove_text', path: childPath, offset: offset, text})\n    } else if (op === DIFF_EQUAL) {\n      offset += text.length\n    }\n  }\n  debugState(editor, 'after')\n\n  return true\n}\n\nfunction insertPatch(\n  editor: PortableTextSlateEditor,\n  patch: InsertPatch,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  const {\n    block: targetBlock,\n    child: targetChild,\n    blockPath: targetBlockPath,\n    childPath: targetChildPath,\n  } = findBlockAndChildFromPath(editor, patch.path)\n  if (!targetBlock || !targetBlockPath) {\n    debug('Block not found')\n    return false\n  }\n  if (patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring patch targeting void value')\n    return false\n  }\n  // Insert blocks\n  if (patch.path.length === 1) {\n    const {items, position} = patch\n    const blocksToInsert = toSlateValue(\n      items as PortableTextBlock[],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    ) as Descendant[]\n    const targetBlockIndex = targetBlockPath[0]\n    const normalizedIdx =\n      position === 'after' ? targetBlockIndex + 1 : targetBlockIndex\n    debug(`Inserting blocks at path [${normalizedIdx}]`)\n    debugState(editor, 'before')\n    Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n    debugState(editor, 'after')\n    return true\n  }\n  // Insert children\n  const {items, position} = patch\n  if (!targetChild || !targetChildPath) {\n    debug('Child not found')\n    return false\n  }\n  const childrenToInsert =\n    targetBlock &&\n    toSlateValue(\n      [{...targetBlock, children: items as PortableTextChild[]}],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    )\n  const targetChildIndex = targetChildPath[1]\n  const normalizedIdx =\n    position === 'after' ? targetChildIndex + 1 : targetChildIndex\n  const childInsertPath = [targetChildPath[0], normalizedIdx]\n  debug(`Inserting children at path ${childInsertPath}`)\n  debugState(editor, 'before')\n  if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n    Transforms.insertNodes(editor, childrenToInsert[0].children, {\n      at: childInsertPath,\n    })\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction setPatch(editor: PortableTextSlateEditor, patch: SetPatch) {\n  let value = patch.value\n  if (typeof patch.path[3] === 'string') {\n    value = {}\n    value[patch.path[3]] = patch.value\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  const isTextBlock = editor.isTextBlock(block)\n\n  // Ignore patches targeting nested void data, like 'markDefs'\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring setting void value')\n    return false\n  }\n\n  debugState(editor, 'before')\n\n  // If this is targeting a text block child\n  if (isTextBlock && child && childPath) {\n    if (Text.isText(value) && Text.isText(child)) {\n      const newText = child.text\n      const oldText = value.text\n      if (oldText !== newText) {\n        debug('Setting text property')\n        editor.apply({\n          type: 'remove_text',\n          path: childPath,\n          offset: 0,\n          text: newText,\n        })\n        editor.apply({\n          type: 'insert_text',\n          path: childPath,\n          offset: 0,\n          text: value.text,\n        })\n        // call OnChange here to emit the new selection\n        // the user's selection might be interfering with\n        editor.onChange()\n      }\n    } else {\n      debug('Setting non-text property')\n      editor.apply({\n        type: 'set_node',\n        path: childPath,\n        properties: {},\n        newProperties: value as Partial<Node>,\n      })\n    }\n    return true\n  } else if (Element.isElement(block) && patch.path.length === 1 && blockPath) {\n    debug('Setting block property')\n    const {children, ...nextRest} = value as unknown as PortableTextBlock\n    const {children: prevChildren, ...prevRest} = block || {children: undefined}\n    // Set any block properties\n    editor.apply({\n      type: 'set_node',\n      path: blockPath,\n      properties: {...prevRest},\n      newProperties: nextRest,\n    })\n    // Replace the children in the block\n    // Note that children must be explicitly inserted, and can't be set with set_node\n    debug('Setting children')\n    block.children.forEach((c, cIndex) => {\n      editor.apply({\n        type: 'remove_node',\n        path: blockPath.concat(block.children.length - 1 - cIndex),\n        node: c,\n      })\n    })\n    if (Array.isArray(children)) {\n      children.forEach((c, cIndex) => {\n        editor.apply({\n          type: 'insert_node',\n          path: blockPath.concat(cIndex),\n          node: c,\n        })\n      })\n    }\n  } else if (block && 'value' in block) {\n    const newVal = applyAll([block.value], [patch])[0]\n    Transforms.setNodes(editor, {...block, value: newVal}, {at: blockPath})\n    return true\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction unsetPatch(editor: PortableTextSlateEditor, patch: UnsetPatch) {\n  // Value\n  if (patch.path.length === 0) {\n    debug('Removing everything')\n    debugState(editor, 'before')\n    const previousSelection = editor.selection\n    Transforms.deselect(editor)\n    editor.children.forEach((_child, i) => {\n      Transforms.removeNodes(editor, {at: [i]})\n    })\n    Transforms.insertNodes(editor, editor.pteCreateTextBlock({decorators: []}))\n    if (previousSelection) {\n      Transforms.select(editor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n    }\n    // call OnChange here to emit the new selection\n    editor.onChange()\n    debugState(editor, 'after')\n    return true\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  // Single blocks\n  if (patch.path.length === 1) {\n    if (!block || !blockPath) {\n      debug('Block not found')\n      return false\n    }\n    const blockIndex = blockPath[0]\n    debug(`Removing block at path [${blockIndex}]`)\n    debugState(editor, 'before')\n\n    Transforms.removeNodes(editor, {at: [blockIndex]})\n    debugState(editor, 'after')\n    return true\n  }\n\n  // Unset on text block children\n  if (\n    editor.isTextBlock(block) &&\n    patch.path[1] === 'children' &&\n    patch.path.length === 3\n  ) {\n    if (!child || !childPath) {\n      debug('Child not found')\n      return false\n    }\n    debug(`Unsetting child at path ${JSON.stringify(childPath)}`)\n    debugState(editor, 'before')\n    if (debugVerbose) {\n      debug(`Removing child at path ${JSON.stringify(childPath)}`)\n    }\n    Transforms.removeNodes(editor, {at: childPath})\n    debugState(editor, 'after')\n    return true\n  }\n  return false\n}\n\nfunction isKeyedSegment(segment: PathSegment): segment is KeyedSegment {\n  return typeof segment === 'object' && '_key' in segment\n}\n\nfunction debugState(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection'\n  >,\n  stateName: string,\n) {\n  if (!debugVerbose) {\n    return\n  }\n\n  debug(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2))\n  debug(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2))\n}\n\nfunction findBlockFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {block?: Descendant; path?: SlatePath} {\n  let blockIndex = -1\n  const block = editor.children.find((node: Descendant, index: number) => {\n    const isMatch = isKeyedSegment(path[0])\n      ? node._key === path[0]._key\n      : index === path[0]\n    if (isMatch) {\n      blockIndex = index\n    }\n    return isMatch\n  })\n  if (!block) {\n    return {}\n  }\n  return {block, path: [blockIndex] as SlatePath}\n}\n\nfunction findBlockAndChildFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {\n  child?: Descendant\n  childPath?: SlatePath\n  block?: Descendant\n  blockPath?: SlatePath\n} {\n  const {block, path: blockPath} = findBlockFromPath(editor, path)\n  if (!(Element.isElement(block) && path[1] === 'children')) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  let childIndex = -1\n  const child = block.children.find((node, index: number) => {\n    const isMatch = isKeyedSegment(path[2])\n      ? node._key === path[2]._key\n      : index === path[2]\n    if (isMatch) {\n      childIndex = index\n    }\n    return isMatch\n  })\n  if (!child) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  return {\n    block,\n    child,\n    blockPath,\n    childPath: blockPath?.concat(childIndex) as SlatePath,\n  }\n}\n","import {insert, setIfMissing, unset, type Patch} from '@portabletext/patches'\nimport {\n  Editor,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type Operation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {createApplyPatch} from '../../utils/applyPatch'\nimport {debugWithName} from '../../utils/debug'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../utils/values'\nimport {\n  IS_PROCESSING_REMOTE_CHANGES,\n  KEY_TO_VALUE_ELEMENT,\n} from '../../utils/weakMaps'\nimport {withRemoteChanges} from '../../utils/withChanges'\nimport {\n  isPatching,\n  PATCHING,\n  withoutPatching,\n} from '../../utils/withoutPatching'\nimport type {EditorActor} from '../editor-machine'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\nconst debugVerbose = false\n\nexport interface PatchFunctions {\n  insertNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  insertTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  mergeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  moveNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  setNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  splitNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n}\n\ninterface Options {\n  editorActor: EditorActor\n  patchFunctions: PatchFunctions\n  schemaTypes: PortableTextMemberSchemaTypes\n  subscriptions: Array<() => () => void>\n}\n\nexport function createWithPatches({\n  editorActor,\n  patchFunctions,\n  schemaTypes,\n  subscriptions,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const applyPatch = createApplyPatch(schemaTypes)\n\n  return function withPatches(editor: PortableTextSlateEditor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, false)\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n    let bufferedPatches: Patch[] = []\n\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0) {\n        return\n      }\n      const patches = bufferedPatches\n      bufferedPatches = []\n      let changed = false\n      withRemoteChanges(editor, () => {\n        Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              patches.forEach((patch) => {\n                if (debug.enabled)\n                  debug(`Handling remote patch ${JSON.stringify(patch)}`)\n                changed = applyPatch(editor, patch)\n              })\n            })\n          })\n        })\n        if (changed) {\n          editor.normalize()\n          editor.onChange()\n        }\n      })\n    }\n\n    const handlePatches = ({patches}: {patches: Patch[]}) => {\n      const remotePatches = patches.filter((p) => p.origin !== 'local')\n      if (remotePatches.length === 0) {\n        return\n      }\n      bufferedPatches = bufferedPatches.concat(remotePatches)\n      handleBufferedRemotePatches()\n    }\n\n    subscriptions.push(() => {\n      debug('Subscribing to remote patches')\n      const sub = editorActor.on('patches', handlePatches)\n      return () => {\n        debug('Unsubscribing to remote patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.apply = (operation: Operation): void | Editor => {\n      if (editorActor.getSnapshot().context.readOnly) {\n        apply(operation)\n        return editor\n      }\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(previousChildren, schemaTypes)\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(editor.children, schemaTypes)\n\n      if (!isPatching(editor)) {\n        if (debugVerbose && debug.enabled)\n          debug(\n            `Editor is not producing patch for operation ${operation.type}`,\n            operation,\n          )\n        return editor\n      }\n\n      // If the editor was empty and now isn't, insert the placeholder into it.\n      if (\n        editorWasEmpty &&\n        !editorIsEmpty &&\n        operation.type !== 'set_selection'\n      ) {\n        patches.push(insert(previousChildren, 'before', [0]))\n      }\n\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.splitNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.setNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.mergeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.moveNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if a operation made the editor empty\n      if (\n        !editorWasEmpty &&\n        editorIsEmpty &&\n        ['merge_node', 'set_node', 'remove_text', 'remove_node'].includes(\n          operation.type,\n        )\n      ) {\n        patches = [...patches, unset([])]\n        editorActor.send({\n          type: 'unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            schemaTypes.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n        })\n      }\n\n      // Prepend patches with setIfMissing if going from empty editor to something involving a patch.\n      if (editorWasEmpty && patches.length > 0) {\n        patches = [setIfMissing([], []), ...patches]\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        patches.forEach((patch) => {\n          editorActor.send({\n            type: 'patch',\n            patch: {...patch, origin: 'local'},\n          })\n        })\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {Editor, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {SlateTextBlock, VoidElement} from '../../types/slate'\nimport {debugWithName} from '../../utils/debug'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n\n    editor.apply = (op) => {\n      if (editorActor.getSnapshot().context.readOnly) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'remove_node') {\n        const node = op.node as SlateTextBlock | VoidElement\n        if (op.path[0] === 0 && Editor.isVoid(editor, node)) {\n          // Check next path, if it exists, do nothing\n          const nextPath = Path.next(op.path)\n          // Is removing the first block which is a void (not a text block), add a new empty text block in it, if there is no other element in the next path\n          if (!editor.children[nextPath[0]]) {\n            debug('Adding placeholder block')\n            Editor.insertNode(\n              editor,\n              editor.pteCreateTextBlock({decorators: []}),\n            )\n          }\n        }\n      }\n      apply(op)\n    }\n    return editor\n  }\n}\n","import {Editor, Path, Text as SlateText, Transforms, type Node} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextBlockStyle')\n\nexport function createWithPortableTextBlockStyle(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const defaultStyle = types.styles[0].value\n  return function withPortableTextBlockStyle(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Extend Slate's default normalization to reset split node to normal style\n    // if there is no text at the right end of the split.\n    const {normalizeNode} = editor\n\n    editor.normalizeNode = (nodeEntry) => {\n      const [, path] = nodeEntry\n\n      for (const op of editor.operations) {\n        if (\n          op.type === 'split_node' &&\n          op.path.length === 1 &&\n          editor.isTextBlock(op.properties) &&\n          op.properties.style !== defaultStyle &&\n          op.path[0] === path[0] &&\n          !Path.equals(path, op.path)\n        ) {\n          const [child] = Editor.node(editor, [op.path[0] + 1, 0])\n          if (SlateText.isText(child) && child.text === '') {\n            debug(`Normalizing split node to ${defaultStyle} style`, op)\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {style: defaultStyle},\n              {at: [op.path[0] + 1], voids: false},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    editor.pteHasBlockStyle = (style: string): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isTextBlock(node) && node.style === style,\n        }),\n      ]\n      if (selectedBlocks.length > 0) {\n        return true\n      }\n      return false\n    }\n\n    editor.pteToggleBlockStyle = (blockStyle: string): void => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isTextBlock(node),\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isTextBlock(node) && node.style === blockStyle) {\n          debug(`Unsetting block style '${blockStyle}'`)\n          Transforms.setNodes(\n            editor,\n            {...node, style: defaultStyle} as Partial<Node>,\n            {\n              at: path,\n            },\n          )\n        } else {\n          if (blockStyle) {\n            debug(`Setting style '${blockStyle}'`)\n          } else {\n            debug('Setting default style', defaultStyle)\n          }\n          Transforms.setNodes(\n            editor,\n            {\n              ...node,\n              style: blockStyle || defaultStyle,\n            } as Partial<Node>,\n            {at: path},\n          )\n        }\n      })\n      editor.onChange()\n    }\n    return editor\n  }\n}\n","import {Editor, Element, Text, Transforms, type Node} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withPortableTextLists')\nconst MAX_LIST_LEVEL = 10\n\nexport function createWithPortableTextLists(\n  types: PortableTextMemberSchemaTypes,\n) {\n  return function withPortableTextLists(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.pteToggleListItem = (listItemStyle: string) => {\n      const isActive = editor.pteHasListStyle(listItemStyle)\n      if (isActive) {\n        debug(`Remove list item '${listItemStyle}'`)\n        editor.pteUnsetListItem(listItemStyle)\n      } else {\n        debug(`Add list item '${listItemStyle}'`)\n        editor.pteSetListItem(listItemStyle)\n      }\n    }\n\n    editor.pteUnsetListItem = (listItemStyle: string) => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Element.isElement(node) && node._type === types.block.name,\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isListBlock(node)) {\n          const {listItem, level, ...rest} = node\n          const newNode = {\n            ...rest,\n            listItem: undefined,\n            level: undefined,\n          } as Partial<Node>\n          debug(`Unsetting list '${listItemStyle}'`)\n          Transforms.setNodes(editor, newNode, {at: path})\n        }\n      })\n    }\n\n    editor.pteSetListItem = (listItemStyle: string) => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isTextBlock(node),\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        debug(`Setting list '${listItemStyle}'`)\n        Transforms.setNodes(\n          editor,\n          {\n            ...node,\n            level: 1,\n            listItem: listItemStyle || (types.lists[0] && types.lists[0].value),\n          } as Partial<Node>,\n          {at: path},\n        )\n      })\n    }\n\n    editor.pteEndList = () => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Element.isElement(node) &&\n            editor.isListBlock(node) &&\n            node.children.length === 1 &&\n            Text.isText(node.children[0]) &&\n            node.children[0].text === '',\n        }),\n      ]\n      if (selectedBlocks.length === 0) {\n        return false\n      }\n      selectedBlocks.forEach(([node, path]) => {\n        if (Element.isElement(node)) {\n          debug('Unset list')\n          Transforms.setNodes(\n            editor,\n            {\n              ...node,\n              level: undefined,\n              listItem: undefined,\n            },\n            {at: path},\n          )\n        }\n      })\n      return true // Note: we are exiting the plugin chain by not returning editor (or hotkey plugin 'enter' will fire)\n    }\n\n    editor.pteIncrementBlockLevels = (reverse?: boolean): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => !!editor.isListBlock(node),\n        }),\n      ]\n      if (selectedBlocks.length === 0) {\n        return false\n      }\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isListBlock(node)) {\n          let level = node.level || 1\n          if (reverse) {\n            level--\n            debug(\n              'Decrementing list level',\n              Math.min(MAX_LIST_LEVEL, Math.max(1, level)),\n            )\n          } else {\n            level++\n            debug(\n              'Incrementing list level',\n              Math.min(MAX_LIST_LEVEL, Math.max(1, level)),\n            )\n          }\n          Transforms.setNodes(\n            editor,\n            {level: Math.min(MAX_LIST_LEVEL, Math.max(1, level))},\n            {at: path},\n          )\n        }\n      })\n      return true\n    }\n\n    editor.pteHasListStyle = (listStyle: string): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isTextBlock(node),\n        }),\n      ]\n\n      if (selectedBlocks.length > 0) {\n        return selectedBlocks.every(\n          ([node]) => editor.isListBlock(node) && node.listItem === listStyle,\n        )\n      }\n      return false\n    }\n\n    return editor\n  }\n}\n","function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every(mark => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && (\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    !(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) &&\n    // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every(def => typeof def._key == \"string\")) &&\n    // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every(child => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks) return [];\n  if (!span.marks.length) return [];\n  const marks = span.marks.slice(),\n    occurences = {};\n  return marks.forEach(mark => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;else break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA],\n    bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences) return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA),\n    bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a;\n  const {\n    children,\n    markDefs = []\n  } = block;\n  if (!children || !children.length) return [];\n  const sortedMarks = children.map(sortMarksByOccurences),\n    rootNode = {\n      _type: \"@span\",\n      children: [],\n      markType: \"<unknown>\"\n    };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span) continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1) for (pos; pos < nodeStack.length; pos++) {\n      const mark = ((_a = nodeStack[pos]) == null ? void 0 : _a.markKey) || \"\",\n        index = marksNeeded.indexOf(mark);\n      if (index === -1) break;\n      marksNeeded.splice(index, 1);\n    }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs.find(def => def._key === markKey),\n          markType = markDef ? markDef._type : markKey,\n          node = {\n            _type: \"@span\",\n            _key: span._key,\n            children: [],\n            markDef,\n            markType,\n            markKey\n          };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1;) lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(lines.map(text => ({\n          _type: \"@text\",\n          text\n        })));\n      } else currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1],\n            newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n              children: [...lastListItem.children, newList]\n            });\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else currentList.children.push(newList);\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, {\n            level: block.level || 1\n          });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1,\n    style = matching.listItem || \"normal\",\n    filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) return rootNode;\n  if (!(\"children\" in rootNode)) return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach(current => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/,\n  trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) return;\n    let pad = !1;\n    current.children.forEach(span => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\",\n  LIST_NEST_MODE_DIRECT = \"direct\";\nexport { LIST_NEST_MODE_DIRECT, LIST_NEST_MODE_HTML, buildMarksTree, isPortableTextBlock, isPortableTextListItemBlock, isPortableTextSpan, isPortableTextToolkitList, isPortableTextToolkitSpan, isPortableTextToolkitTextNode, nestLists, sortMarksByOccurences, spanToPlainText, toPlainText };\n//# sourceMappingURL=index.js.map\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Node, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport function getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let previousSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath, {\n    reverse: true,\n  })) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isBefore(childPath, spanPath)) {\n      previousSpan = child\n      break\n    }\n  }\n\n  return previousSpan\n}\n\nexport function getNextSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let nextSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath)) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isAfter(childPath, spanPath)) {\n      nextSpan = child\n      break\n    }\n  }\n\n  return nextSpan\n}\n","/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isPortableTextBlock, isPortableTextSpan} from '@portabletext/toolkit'\nimport type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Element, Node, Path, Range, Text, Transforms} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {getNextSpan, getPreviousSpan} from '../../utils/sibling-utils'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\nimport type {BehaviorActionImplementation} from '../behavior/behavior.actions'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = types.decorators.map((t) => t.value)\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry\n\n      if (editor.isTextBlock(node)) {\n        const children = Node.children(editor, path)\n\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1]\n\n          if (\n            editor.isTextSpan(child) &&\n            editor.isTextSpan(nextNode) &&\n            child.marks?.every((mark) => nextNode.marks?.includes(mark)) &&\n            nextNode.marks?.every((mark) => child.marks?.includes(mark))\n          ) {\n            debug(\n              'Merging spans',\n              JSON.stringify(child, null, 2),\n              JSON.stringify(nextNode, null, 2),\n            )\n            editorActor.send({type: 'normalizing'})\n            Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: true,\n            })\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Add missing .markDefs to block nodes\n       */\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug('Adding .markDefs to block node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {markDefs: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Add missing .marks to span nodes\n       */\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug('Adding .marks to span node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {marks: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Remove annotations from empty spans\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n        const decorators = types.decorators.map((decorator) => decorator.value)\n        const annotations = node.marks?.filter(\n          (mark) => !decorators.includes(mark),\n        )\n\n        if (editor.isTextBlock(block)) {\n          if (node.text === '' && annotations && annotations.length > 0) {\n            debug('Removing annotations from empty span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {marks: node.marks?.filter((mark) => decorators.includes(mark))},\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from child spans of block nodes\n       */\n      if (editor.isTextBlock(node)) {\n        const decorators = types.decorators.map((decorator) => decorator.value)\n\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? []\n            const orphanedAnnotations = marks.filter((mark) => {\n              return (\n                !decorators.includes(mark) &&\n                !node.markDefs?.find((def) => def._key === mark)\n              )\n            })\n\n            if (orphanedAnnotations.length > 0) {\n              debug('Removing orphaned annotations from span node')\n              editorActor.send({type: 'normalizing'})\n              Transforms.setNodes(\n                editor,\n                {\n                  marks: marks.filter(\n                    (mark) => !orphanedAnnotations.includes(mark),\n                  ),\n                },\n                {at: childPath},\n              )\n              editorActor.send({type: 'done normalizing'})\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from span nodes\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n\n        if (editor.isTextBlock(block)) {\n          const decorators = types.decorators.map(\n            (decorator) => decorator.value,\n          )\n          const marks = node.marks ?? []\n          const orphanedAnnotations = marks.filter((mark) => {\n            return (\n              !decorators.includes(mark) &&\n              !block.markDefs?.find((def) => def._key === mark)\n            )\n          })\n\n          if (orphanedAnnotations.length > 0) {\n            debug('Removing orphaned annotations from span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {\n                marks: marks.filter(\n                  (mark) => !orphanedAnnotations.includes(mark),\n                ),\n              },\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      // Remove duplicate markDefs\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? []\n        const markDefKeys = new Set<string>()\n        const newMarkDefs: Array<PortableTextObject> = []\n\n        for (const markDef of markDefs) {\n          if (!markDefKeys.has(markDef._key)) {\n            markDefKeys.add(markDef._key)\n            newMarkDefs.push(markDef)\n          }\n        }\n\n        if (markDefs.length !== newMarkDefs.length) {\n          debug('Removing duplicate markDefs')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: path})\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      // Check consistency of markDefs (unless we are merging two nodes)\n      if (\n        editor.isTextBlock(node) &&\n        !editor.operations.some(\n          (op) =>\n            op.type === 'merge_node' &&\n            'markDefs' in op.properties &&\n            op.path.length === 1,\n        )\n      ) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => {\n          return node.children.find((child) => {\n            return (\n              Text.isText(child) &&\n              Array.isArray(child.marks) &&\n              child.marks.includes(def._key)\n            )\n          })\n        })\n        if (node.markDefs && !isEqual(newMarkDefs, node.markDefs)) {\n          debug('Removing markDef not in use')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: newMarkDefs,\n            },\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    editor.apply = (op) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'set_selection') {\n        const marks = Editor.marks(editor)\n\n        if (\n          marks &&\n          op.properties &&\n          op.newProperties &&\n          op.properties.anchor &&\n          op.properties.focus &&\n          op.newProperties.anchor &&\n          op.newProperties.focus\n        ) {\n          const previousSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.properties.anchor,\n            focus: op.properties.focus,\n          })\n          const newSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.newProperties.anchor,\n            focus: op.newProperties.focus,\n          })\n\n          if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n            const focusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.properties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const newFocusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.newProperties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const movedToNextSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] + 1 &&\n              focusSpan.text.length === op.properties.focus.offset &&\n              op.newProperties.focus.offset === 0\n            const movedToPreviousSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] - 1 &&\n              op.properties.focus.offset === 0 &&\n              newFocusSpan.text.length === op.newProperties.focus.offset\n\n            // If the editor has marks and we are not visually moving the\n            // selection then we just abort. Otherwise the marks would be\n            // cleared and we can't use them for the possible subsequent insert\n            // operation.\n            if (movedToNextSpan || movedToPreviousSpan) {\n              return\n            }\n          }\n        }\n      }\n\n      if (op.type === 'insert_node') {\n        const {selection} = editor\n\n        if (selection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {depth: 1})\n          const previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path,\n          })\n          const previousSpanAnnotations = previousSpan\n            ? previousSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1],\n          })\n          const nextSpanAnnotations = nextSpan\n            ? nextSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const annotationsEnding =\n            previousSpanAnnotations?.filter(\n              (annotation) => !nextSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheEndOfAnnotation = annotationsEnding.length > 0\n\n          if (\n            atTheEndOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsEnding.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsEnding.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const annotationsStarting =\n            nextSpanAnnotations?.filter(\n              (annotation) => !previousSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheStartOfAnnotation = annotationsStarting.length > 0\n\n          if (\n            atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsStarting.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsStarting.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const nextSpanDecorators =\n            nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? []\n          const decoratorStarting = nextSpanDecorators.length > 0\n\n          if (\n            decoratorStarting &&\n            atTheEndOfAnnotation &&\n            !atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.length === 0\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              marks: nextSpanDecorators,\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'insert_text') {\n        const {selection} = editor\n        const collapsedSelection = selection\n          ? Range.isCollapsed(selection)\n          : false\n\n        if (selection && collapsedSelection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: selection.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          const marks = span.marks ?? []\n          const marksWithoutAnnotations = marks.filter((mark) =>\n            decorators.includes(mark),\n          )\n          const spanHasAnnotations =\n            marks.length > marksWithoutAnnotations.length\n\n          const spanIsEmpty = span.text.length === 0\n\n          const atTheBeginningOfSpan = selection.anchor.offset === 0\n          const atTheEndOfSpan = selection.anchor.offset === span.text.length\n\n          const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n          const nextSpan = getNextSpan({editor, blockPath, spanPath})\n          const nextSpanAnnotations =\n            nextSpan?.marks?.filter((mark) => !decorators.includes(mark)) ?? []\n          const spanAnnotations = marks.filter(\n            (mark) => !decorators.includes(mark),\n          )\n\n          const previousSpanHasAnnotations = previousSpan\n            ? previousSpan.marks?.some((mark) => !decorators.includes(mark))\n            : false\n          const previousSpanHasSameAnnotations = previousSpan\n            ? previousSpan.marks\n                ?.filter((mark) => !decorators.includes(mark))\n                .every((mark) => marks.includes(mark))\n            : false\n          const previousSpanHasSameAnnotation = previousSpan\n            ? previousSpan.marks?.some(\n                (mark) => !decorators.includes(mark) && marks.includes(mark),\n              )\n            : false\n\n          const previousSpanHasSameMarks = previousSpan\n            ? previousSpan.marks?.every((mark) => marks.includes(mark))\n            : false\n          const nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) =>\n            nextSpanAnnotations?.includes(mark),\n          )\n\n          if (spanHasAnnotations && !spanIsEmpty) {\n            if (atTheBeginningOfSpan) {\n              if (previousSpanHasSameMarks) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotations) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotation) {\n                apply(op)\n                return\n              } else if (!previousSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n\n            if (atTheEndOfSpan) {\n              if (\n                (nextSpan &&\n                  nextSpanSharesSomeAnnotations &&\n                  nextSpanAnnotations.length < spanAnnotations.length) ||\n                !nextSpanSharesSomeAnnotations\n              ) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: nextSpan?.marks ?? [],\n                })\n                return\n              }\n\n              if (!nextSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n          }\n\n          if (atTheBeginningOfSpan && !spanIsEmpty && !!previousSpan) {\n            Transforms.insertNodes(editor, {\n              _type: 'span',\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              text: op.text,\n              marks: previousSpanHasAnnotations\n                ? []\n                : (previousSpan.marks ?? []).filter((mark) =>\n                    decorators.includes(mark),\n                  ),\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'remove_text') {\n        const {selection} = editor\n\n        if (selection && Range.isExpanded(selection)) {\n          const [block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: {path: op.path, offset: op.offset},\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          if (span && block && isPortableTextBlock(block)) {\n            const markDefs = block.markDefs ?? []\n            const marks = span.marks ?? []\n            const spanHasAnnotations = marks.some((mark) =>\n              markDefs.find((markDef) => markDef._key === mark),\n            )\n            const deletingFromTheEnd =\n              op.offset + op.text.length === span.text.length\n            const deletingAllText = op.offset === 0 && deletingFromTheEnd\n\n            const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n            const nextSpan = getNextSpan({editor, blockPath, spanPath})\n\n            const previousSpanHasSameAnnotation = previousSpan\n              ? previousSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n            const nextSpanHasSameAnnotation = nextSpan\n              ? nextSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n\n            if (\n              spanHasAnnotations &&\n              deletingAllText &&\n              !previousSpanHasSameAnnotation &&\n              !nextSpanHasSameAnnotation\n            ) {\n              const marksWithoutAnnotationMarks: string[] = (\n                {\n                  ...(Editor.marks(editor) || {}),\n                }.marks || []\n              ).filter((mark) => decorators.includes(mark))\n\n              Editor.withoutNormalizing(editor, () => {\n                apply(op)\n                Transforms.setNodes(\n                  editor,\n                  {marks: marksWithoutAnnotationMarks},\n                  {at: op.path},\n                )\n              })\n\n              editor.onChange()\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Copy over markDefs when merging blocks\n       */\n      if (\n        op.type === 'merge_node' &&\n        op.path.length === 1 &&\n        'markDefs' in op.properties &&\n        op.properties._type === types.block.name &&\n        Array.isArray(op.properties.markDefs) &&\n        op.properties.markDefs.length > 0 &&\n        op.path[0] - 1 >= 0\n      ) {\n        const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs =\n            (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n          const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n\n          debug(`Copying markDefs over to merged block`, op)\n          Transforms.setNodes(\n            editor,\n            {markDefs: newMarkDefs},\n            {at: targetPath, voids: false},\n          )\n          apply(op)\n          return\n        }\n      }\n\n      apply(op)\n    }\n\n    return editor\n  }\n}\n\nexport const addDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.add'\n> = ({action}) => {\n  const editor = action.editor\n  const mark = action.decorator\n\n  if (editor.selection) {\n    if (Range.isExpanded(editor.selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      // Use new selection\n      const splitTextNodes = Range.isRange(editor.selection)\n        ? [\n            ...Editor.nodes(editor, {\n              at: editor.selection,\n              match: Text.isText,\n            }),\n          ]\n        : []\n      const shouldRemoveMark =\n        splitTextNodes.length > 1 &&\n        splitTextNodes.every((node) => node[0].marks?.includes(mark))\n\n      if (shouldRemoveMark) {\n        editor.removeMark(mark)\n      } else {\n        splitTextNodes.forEach(([node, path]) => {\n          const marks = [\n            ...(Array.isArray(node.marks) ? node.marks : []).filter(\n              (eMark: string) => eMark !== mark,\n            ),\n            mark,\n          ]\n          Transforms.setNodes(\n            editor,\n            {marks},\n            {at: path, match: Text.isText, split: true, hanging: true},\n          )\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, editor.selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks:\n              existingMarks.length === existingMarksWithoutDecorator.length\n                ? [...existingMarks, mark]\n                : existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        const existingMarks: string[] =\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        const marks = {\n          ...(Editor.marks(editor) || {}),\n          marks: [...existingMarks, mark],\n        }\n        editor.marks = marks as Text\n      }\n    }\n    editor.onChange()\n  }\n}\n\nexport const removeDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.remove'\n> = ({action}) => {\n  const editor = action.editor\n  const mark = action.decorator\n  const {selection} = editor\n\n  if (selection) {\n    if (Range.isExpanded(selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      if (editor.selection) {\n        const splitTextNodes = [\n          ...Editor.nodes(editor, {\n            at: editor.selection,\n            match: Text.isText,\n          }),\n        ]\n        splitTextNodes.forEach(([node, path]) => {\n          const block = editor.children[path[0]]\n          if (Element.isElement(block) && block.children.includes(node)) {\n            Transforms.setNodes(\n              editor,\n              {\n                marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark,\n                ),\n                _type: 'span',\n              },\n              {at: path},\n            )\n          }\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks: existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        const existingMarks: string[] =\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        const marks = {\n          ...(Editor.marks(editor) || {}),\n          marks: existingMarks.filter((eMark) => eMark !== mark),\n        } as Text\n        editor.marks = {marks: marks.marks, _type: 'span'} as Text\n      }\n    }\n  }\n}\n\nexport function isDecoratorActive({\n  editor,\n  decorator,\n}: {\n  editor: PortableTextSlateEditor\n  decorator: string\n}) {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedTextNodes = Array.from(\n    Editor.nodes(editor, {match: Text.isText, at: editor.selection}),\n  )\n\n  if (selectedTextNodes.length === 0) {\n    return false\n  }\n\n  if (Range.isExpanded(editor.selection)) {\n    return selectedTextNodes.every((n) => {\n      const [node] = n\n\n      return node.marks?.includes(decorator)\n    })\n  }\n\n  return (\n    {\n      ...(Editor.marks(editor) || {}),\n    }.marks || []\n  ).includes(decorator)\n}\n\nexport const toggleDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.toggle'\n> = ({context, action}) => {\n  const isActive = isDecoratorActive({\n    editor: action.editor,\n    decorator: action.decorator,\n  })\n\n  if (isActive) {\n    removeDecoratorActionImplementation({\n      context,\n      action: {\n        type: 'decorator.remove',\n        editor: action.editor,\n        decorator: action.decorator,\n      },\n    })\n  } else {\n    addDecoratorActionImplementation({\n      context,\n      action: {\n        type: 'decorator.add',\n        editor: action.editor,\n        decorator: action.decorator,\n      },\n    })\n  }\n}\n","import type {BaseRange} from 'slate'\nimport type {\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {\n  toPortableTextRange,\n  type ObjectWithKeyAndType,\n} from '../../utils/ranges'\nimport {SLATE_TO_PORTABLE_TEXT_RANGE} from '../../utils/weakMaps'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextSelections')\nconst debugVerbose = debug.enabled && false\n\n// This plugin will make sure that we emit a PT selection whenever the editor has changed.\nexport function createWithPortableTextSelections(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  let prevSelection: BaseRange | null = null\n  return function withPortableTextSelections(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const emitPortableTextSelection = () => {\n      if (prevSelection !== editor.selection) {\n        let ptRange: EditorSelection = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            ptRange = existing\n          } else {\n            const value = editor.children satisfies ObjectWithKeyAndType[]\n            ptRange = toPortableTextRange(value, editor.selection, types)\n            SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n          }\n        }\n        if (debugVerbose) {\n          debug(\n            `Emitting selection ${JSON.stringify(ptRange || null)} (${JSON.stringify(\n              editor.selection,\n            )})`,\n          )\n        }\n        if (ptRange) {\n          editorActor.send({type: 'selection', selection: ptRange})\n        } else {\n          editorActor.send({type: 'selection', selection: null})\n        }\n      }\n      prevSelection = editor.selection\n    }\n\n    const {onChange} = editor\n    editor.onChange = () => {\n      const hasChanges = editor.operations.length > 0\n      onChange()\n      if (hasChanges) {\n        emitPortableTextSelection()\n      }\n    }\n    return editor\n  }\n}\n","import {\n  isPortableTextListBlock,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextListBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {Transforms, type Element} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes({\n  editorActor,\n  schemaTypes,\n}: {\n  editorActor: EditorActor\n  schemaTypes: PortableTextMemberSchemaTypes\n}) {\n  return function withSchemaTypes(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      return (\n        isPortableTextTextBlock(value) && value._type === schemaTypes.block.name\n      )\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      return isPortableTextSpan(value) && value._type === schemaTypes.span.name\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      return (\n        isPortableTextListBlock(value) && value._type === schemaTypes.block.name\n      )\n    }\n    editor.isVoid = (element: Element): boolean => {\n      return (\n        schemaTypes.block.name !== element._type &&\n        (schemaTypes.blockObjects\n          .map((obj) => obj.name)\n          .includes(element._type) ||\n          schemaTypes.inlineObjects\n            .map((obj) => obj.name)\n            .includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      const inlineSchemaTypes = schemaTypes.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n\n    // Extend Slate's default normalization\n    const {normalizeNode} = editor\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n\n      // If text block children node is missing _type, set it to the span type\n      if (node._type === undefined && path.length === 2) {\n        debug('Setting span type on text node without a type')\n        const span = node as PortableTextSpan\n        const key =\n          span._key || editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(\n          editor,\n          {...span, _type: schemaTypes.span.name, _key: key},\n          {at: path},\n        )\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      // catches cases when the children are missing keys but excludes it when the normalize is running the node as the editor object\n      if (node._key === undefined && (path.length === 1 || path.length === 2)) {\n        debug('Setting missing key on child node without a key')\n        const key = editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {_key: key}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      normalizeNode(entry)\n    }\n    return editor\n  }\n}\n","import {Editor, Range, Text, Transforms} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toSlateValue} from '../../utils/values'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withUtils')\n\ninterface Options {\n  editorActor: EditorActor\n  schemaTypes: PortableTextMemberSchemaTypes\n}\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({editorActor, schemaTypes}: Options) {\n  return function withUtils(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Expands the the selection to wrap around the word the focus is at\n    editor.pteExpandToWord = () => {\n      const {selection} = editor\n      if (selection && !Range.isExpanded(selection)) {\n        const [textNode] = Editor.node(editor, selection.focus, {depth: 2})\n        if (!textNode || !Text.isText(textNode) || textNode.text.length === 0) {\n          debug(`pteExpandToWord: Can't expand to word here`)\n          return\n        }\n        const {focus} = selection\n        const focusOffset = focus.offset\n        const charsBefore = textNode.text.slice(0, focusOffset)\n        const charsAfter = textNode.text.slice(focusOffset, -1)\n        const isEmpty = (str: string) => str.match(/\\s/g)\n        const whiteSpaceBeforeIndex = charsBefore\n          .split('')\n          .reverse()\n          .findIndex((str) => isEmpty(str))\n        const newStartOffset =\n          whiteSpaceBeforeIndex > -1\n            ? charsBefore.length - whiteSpaceBeforeIndex\n            : 0\n        const whiteSpaceAfterIndex = charsAfter\n          .split('')\n          .findIndex((obj) => isEmpty(obj))\n        const newEndOffset =\n          charsBefore.length +\n          (whiteSpaceAfterIndex > -1\n            ? whiteSpaceAfterIndex\n            : charsAfter.length + 1)\n        if (\n          !(\n            newStartOffset === newEndOffset ||\n            Number.isNaN(newStartOffset) ||\n            Number.isNaN(newEndOffset)\n          )\n        ) {\n          debug('pteExpandToWord: Expanding to focused word')\n          Transforms.setSelection(editor, {\n            anchor: {...selection.anchor, offset: newStartOffset},\n            focus: {...selection.focus, offset: newEndOffset},\n          })\n          return\n        }\n        debug(`pteExpandToWord: Can't expand to word here`)\n      }\n    }\n\n    editor.pteCreateTextBlock = (options: {\n      decorators: Array<string>\n      listItem?: string\n      level?: number\n    }) => {\n      const block = toSlateValue(\n        [\n          {\n            _type: schemaTypes.block.name,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            style: schemaTypes.styles[0].value || 'normal',\n            ...(options.listItem ? {listItem: options.listItem} : {}),\n            ...(options.level ? {level: options.level} : {}),\n            markDefs: [],\n            children: [\n              {\n                _type: 'span',\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                text: '',\n                marks: options.decorators.filter((decorator) =>\n                  schemaTypes.decorators.find(({value}) => value === decorator),\n                ),\n              },\n            ],\n          },\n        ],\n        {schemaTypes},\n      )[0]\n      return block\n    }\n    return editor\n  }\n}\n","import type {BaseOperation, Editor, Node, NodeEntry} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport {createOperationToPatches} from '../../utils/operationToPatches'\nimport type {EditorActor} from '../editor-machine'\nimport {createWithEventListeners} from './create-with-event-listeners'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nimport {createWithPortableTextLists} from './createWithPortableTextLists'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\ntype PluginsOptions = {\n  editorActor: EditorActor\n  subscriptions: Array<() => () => void>\n}\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: PluginsOptions,\n): PortableTextSlateEditor => {\n  const e = editor as T & PortableTextSlateEditor\n  const {editorActor} = options\n  const schemaTypes = editorActor.getSnapshot().context.schema\n  const operationToPatches = createOperationToPatches(schemaTypes)\n  const withObjectKeys = createWithObjectKeys(editorActor, schemaTypes)\n  const withSchemaTypes = createWithSchemaTypes({\n    editorActor,\n    schemaTypes,\n  })\n  const withPatches = createWithPatches({\n    editorActor,\n    patchFunctions: operationToPatches,\n    schemaTypes,\n    subscriptions: options.subscriptions,\n  })\n  const withMaxBlocks = createWithMaxBlocks(editorActor)\n  const withPortableTextLists = createWithPortableTextLists(schemaTypes)\n  const withUndoRedo = createWithUndoRedo({\n    editorActor,\n    blockSchemaType: schemaTypes.block,\n    subscriptions: options.subscriptions,\n  })\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(\n    editorActor,\n    schemaTypes,\n  )\n  const withPortableTextBlockStyle = createWithPortableTextBlockStyle(\n    editorActor,\n    schemaTypes,\n  )\n\n  const withPlaceholderBlock = createWithPlaceholderBlock(editorActor)\n\n  const withUtils = createWithUtils({\n    editorActor,\n    schemaTypes,\n  })\n  const withPortableTextSelections = createWithPortableTextSelections(\n    editorActor,\n    schemaTypes,\n  )\n  const withEventListeners = createWithEventListeners(\n    editorActor,\n    options.subscriptions,\n  )\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return withEventListeners(\n    withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPortableTextBlockStyle(\n            withPortableTextLists(\n              withPlaceholderBlock(\n                withUtils(\n                  withMaxBlocks(\n                    withUndoRedo(withPatches(withPortableTextSelections(e))),\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  )\n}\n","import {createEditor, type Descendant} from 'slate'\nimport {withReact} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {debugWithName} from '../utils/debug'\nimport {KEY_TO_SLATE_ELEMENT, KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport type {EditorActor} from './editor-machine'\nimport {withPlugins} from './plugins/with-plugins'\n\nconst debug = debugWithName('component:PortableTextEditor:SlateContainer')\n\ntype SlateEditorConfig = {\n  editorActor: EditorActor\n}\n\n/**\n * @internal\n */\nexport type SlateEditor = {\n  instance: PortableTextSlateEditor\n  initialValue: Array<Descendant>\n}\n\nconst slateEditors = new WeakMap<EditorActor, SlateEditor>()\n\nexport function createSlateEditor(config: SlateEditorConfig): SlateEditor {\n  const existingSlateEditor = slateEditors.get(config.editorActor)\n\n  if (existingSlateEditor) {\n    debug('Reusing existing Slate editor instance', config.editorActor.id)\n    return existingSlateEditor\n  }\n\n  debug('Creating new Slate editor instance', config.editorActor.id)\n\n  const unsubscriptions: Array<() => void> = []\n  const subscriptions: Array<() => () => void> = []\n\n  const instance = withPlugins(withReact(createEditor()), {\n    editorActor: config.editorActor,\n    subscriptions,\n  })\n\n  KEY_TO_VALUE_ELEMENT.set(instance, {})\n  KEY_TO_SLATE_ELEMENT.set(instance, {})\n\n  for (const subscription of subscriptions) {\n    unsubscriptions.push(subscription())\n  }\n\n  const initialValue = [instance.pteCreateTextBlock({decorators: []})]\n\n  const slateEditor: SlateEditor = {\n    instance,\n    initialValue,\n  }\n\n  slateEditors.set(config.editorActor, slateEditor)\n\n  return slateEditor\n}\n","import {Editor, Transforms, type Descendant} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {isEqualToEmptyEditor} from '../../utils/values'\n\nexport function insertBlock({\n  block,\n  placement,\n  editor,\n  schema,\n}: {\n  block: Descendant\n  placement: 'auto' | 'after' | 'before'\n  editor: PortableTextSlateEditor\n  schema: PortableTextMemberSchemaTypes\n}) {\n  if (!editor.selection) {\n    const lastBlock = Array.from(\n      Editor.nodes(editor, {\n        match: (n) => !Editor.isEditor(n),\n        at: [],\n        reverse: true,\n      }),\n    )[0]\n\n    // If there is no selection, let's just insert the new block at the\n    // end of the document\n    Editor.insertNode(editor, block)\n\n    if (lastBlock && isEqualToEmptyEditor([lastBlock[0]], schema)) {\n      // And if the last block was an empty text block, let's remove\n      // that too\n      Transforms.removeNodes(editor, {at: lastBlock[1]})\n    }\n  } else {\n    const [focusBlock, focusBlockPath] = Array.from(\n      Editor.nodes(editor, {\n        at: editor.selection.focus.path.slice(0, 1),\n        match: (n) => !Editor.isEditor(n),\n      }),\n    )[0] ?? [undefined, undefined]\n\n    if (placement === 'after') {\n      const nextPath = [focusBlockPath[0] + 1]\n\n      Transforms.insertNodes(editor, block, {at: nextPath})\n      Transforms.select(editor, {\n        anchor: {path: [nextPath[0], 0], offset: 0},\n        focus: {path: [nextPath[0], 0], offset: 0},\n      })\n    } else if (placement === 'before') {\n      Transforms.insertNodes(editor, block, {at: focusBlockPath})\n    } else {\n      Editor.insertNode(editor, block)\n    }\n\n    if (focusBlock && isEqualToEmptyEditor([focusBlock], schema)) {\n      Transforms.removeNodes(editor, {at: focusBlockPath})\n    }\n  }\n}\n","import {toSlateValue} from '../../utils/values'\nimport {insertBlock} from './behavior.action-utils.insert-block'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertBlockObjectActionImplementation: BehaviorActionImplementation<\n  'insert block object'\n> = ({context, action}) => {\n  const block = toSlateValue(\n    [\n      {\n        _key: context.keyGenerator(),\n        _type: action.blockObject.name,\n        ...(action.blockObject.value ? action.blockObject.value : {}),\n      },\n    ],\n    {schemaTypes: context.schema},\n  )[0]\n\n  insertBlock({\n    block,\n    placement: action.placement,\n    editor: action.editor,\n    schema: context.schema,\n  })\n}\n","import {\n  isPortableTextSpan,\n  type Path,\n  type PortableTextBlock,\n  type PortableTextChild,\n  type PortableTextObject,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  Editor,\n  Node,\n  Range,\n  Element as SlateElement,\n  Path as SlatePath,\n  Text,\n  Transforms,\n} from 'slate'\nimport type {DOMNode} from 'slate-dom'\nimport {ReactEditor} from 'slate-react'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toPortableTextRange, toSlateRange} from '../../utils/ranges'\nimport {fromSlateValue, toSlateValue} from '../../utils/values'\nimport {\n  KEY_TO_VALUE_ELEMENT,\n  SLATE_TO_PORTABLE_TEXT_RANGE,\n} from '../../utils/weakMaps'\nimport {insertBlockObjectActionImplementation} from '../behavior/behavior.action.insert-block-object'\nimport type {BehaviorActionImplementation} from '../behavior/behavior.actions'\nimport type {EditorActor} from '../editor-machine'\nimport {isDecoratorActive} from './createWithPortableTextMarkModel'\n\nconst debug = debugWithName('API:editable')\n\nexport function createEditableAPI(\n  editor: PortableTextSlateEditor,\n  editorActor: EditorActor,\n) {\n  const types = editorActor.getSnapshot().context.schema\n\n  const editableApi: EditableAPI = {\n    focus: (): void => {\n      ReactEditor.focus(editor)\n    },\n    blur: (): void => {\n      ReactEditor.blur(editor)\n    },\n    toggleMark: (mark: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.toggle',\n          decorator: mark,\n        },\n        editor,\n      })\n    },\n    toggleList: (listStyle: string): void => {\n      editor.pteToggleListItem(listStyle)\n    },\n    toggleBlockStyle: (blockStyle: string): void => {\n      editor.pteToggleBlockStyle(blockStyle)\n    },\n    isMarkActive: (mark: string): boolean => {\n      // Try/catch this, as Slate may error because the selection is currently wrong\n      // TODO: catch only relevant error from Slate\n      try {\n        return isDecoratorActive({editor, decorator: mark})\n      } catch (err) {\n        console.warn(err)\n        return false\n      }\n    },\n    marks: (): string[] => {\n      return (\n        {\n          ...(Editor.marks(editor) || {}),\n        }.marks || []\n      )\n    },\n    undo: (): void => editor.undo(),\n    redo: (): void => editor.redo(),\n    select: (selection: EditorSelection): void => {\n      const slateSelection = toSlateRange(selection, editor)\n      if (slateSelection) {\n        Transforms.select(editor, slateSelection)\n      } else {\n        Transforms.deselect(editor)\n      }\n      editor.onChange()\n    },\n    focusBlock: (): PortableTextBlock | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block) {\n          return fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n        }\n      }\n      return undefined\n    },\n    focusChild: (): PortableTextChild | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block && editor.isTextBlock(block)) {\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0] as PortableTextTextBlock\n          return ptBlock.children[editor.selection.focus.path[1]]\n        }\n      }\n      return undefined\n    },\n    insertChild: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      if (!editor.selection) {\n        throw new Error('The editor has no selection')\n      }\n      const [focusBlock] = Array.from(\n        Editor.nodes(editor, {\n          at: editor.selection.focus.path.slice(0, 1),\n          match: (n) => n._type === types.block.name,\n        }),\n      )[0] || [undefined]\n      if (!focusBlock) {\n        throw new Error('No focused text block')\n      }\n      if (\n        type.name !== types.span.name &&\n        !types.inlineObjects.some((t) => t.name === type.name)\n      ) {\n        throw new Error(\n          'This type cannot be inserted as a child to a text block',\n        )\n      }\n      const block = toSlateValue(\n        [\n          {\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            _type: types.block.name,\n            children: [\n              {\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                _type: type.name,\n                ...(value ? value : {}),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0] as unknown as SlateElement\n      const child = block.children[0]\n      const focusChildPath = editor.selection.focus.path.slice(0, 2)\n      const isSpanNode = child._type === types.span.name\n      const focusNode = Node.get(editor, focusChildPath)\n\n      // If we are inserting a span, and currently have focus on an inline object,\n      // move the selection to the next span (guaranteed by normalizing rules) before inserting it.\n      if (isSpanNode && focusNode._type !== types.span.name) {\n        debug(\n          'Inserting span child next to inline object child, moving selection + 1',\n        )\n        editor.move({distance: 1, unit: 'character'})\n      }\n\n      Transforms.insertNodes(editor, child, {\n        select: true,\n        at: editor.selection,\n      })\n      editor.onChange()\n      return (\n        toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )?.focus.path || []\n      )\n    },\n    insertBlock: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      insertBlockObjectActionImplementation({\n        context: {\n          keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n          schema: types,\n        },\n        action: {\n          type: 'insert block object',\n          blockObject: {\n            name: type.name,\n            value,\n          },\n          placement: 'auto',\n          editor,\n        },\n      })\n\n      editor.onChange()\n\n      return (\n        toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )?.focus.path ?? []\n      )\n    },\n    hasBlockStyle: (style: string): boolean => {\n      try {\n        return editor.pteHasBlockStyle(style)\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    hasListStyle: (listStyle: string): boolean => {\n      try {\n        return editor.pteHasListStyle(listStyle)\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    isVoid: (element: PortableTextBlock | PortableTextChild) => {\n      return ![types.block.name, types.span.name].includes(element._type)\n    },\n    findByPath: (\n      path: Path,\n    ): [\n      PortableTextBlock | PortableTextChild | undefined,\n      Path | undefined,\n    ] => {\n      const slatePath = toSlateRange(\n        {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n        editor,\n      )\n      if (slatePath) {\n        const [block, blockPath] = Editor.node(\n          editor,\n          slatePath.focus.path.slice(0, 1),\n        )\n        if (block && blockPath && typeof block._key === 'string') {\n          if (path.length === 1 && slatePath.focus.path.length === 1) {\n            return [\n              fromSlateValue([block], types.block.name)[0],\n              [{_key: block._key}],\n            ]\n          }\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]]\n            if (ptChild) {\n              return [\n                ptChild,\n                [{_key: block._key}, 'children', {_key: ptChild._key}],\n              ]\n            }\n          }\n        }\n      }\n      return [undefined, undefined]\n    },\n    findDOMNode: (\n      element: PortableTextBlock | PortableTextChild,\n    ): DOMNode | undefined => {\n      let node: DOMNode | undefined\n      try {\n        const [item] = Array.from(\n          Editor.nodes(editor, {\n            at: [],\n            match: (n) => n._key === element._key,\n          }) || [],\n        )[0] || [undefined]\n        node = ReactEditor.toDOMNode(editor, item)\n      } catch {\n        // Nothing\n      }\n      return node\n    },\n    activeAnnotations: (): PortableTextObject[] => {\n      if (!editor.selection || editor.selection.focus.path.length < 2) {\n        return []\n      }\n      try {\n        const activeAnnotations: PortableTextObject[] = []\n        const spans = Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Text.isText(node) &&\n            node.marks !== undefined &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0,\n        })\n        for (const [span, path] of spans) {\n          const [block] = Editor.node(editor, path, {depth: 1})\n          if (editor.isTextBlock(block)) {\n            block.markDefs?.forEach((def) => {\n              if (\n                Text.isText(span) &&\n                span.marks &&\n                Array.isArray(span.marks) &&\n                span.marks.includes(def._key)\n              ) {\n                activeAnnotations.push(def)\n              }\n            })\n          }\n        }\n        return activeAnnotations\n      } catch {\n        return []\n      }\n    },\n    isAnnotationActive: (\n      annotationType: PortableTextObject['_type'],\n    ): boolean => {\n      return isAnnotationActive({editor, annotation: {name: annotationType}})\n    },\n    addAnnotation: (type, value) => {\n      let paths: ReturnType<EditableAPI['addAnnotation']> = undefined\n\n      Editor.withoutNormalizing(editor, () => {\n        paths = addAnnotationActionImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: types,\n          },\n          action: {\n            type: 'annotation.add',\n            annotation: {name: type.name, value: value ?? {}},\n            editor,\n          },\n        })\n      })\n      editor.onChange()\n\n      return paths\n    },\n    delete: (\n      selection: EditorSelection,\n      options?: EditableAPIDeleteOptions,\n    ): void => {\n      if (selection) {\n        const range = toSlateRange(selection, editor)\n        const hasRange =\n          range && range.anchor.path.length > 0 && range.focus.path.length > 0\n        if (!hasRange) {\n          throw new Error('Invalid range')\n        }\n        if (range) {\n          if (!options?.mode || options?.mode === 'selected') {\n            debug(`Deleting content in selection`)\n            Transforms.delete(editor, {\n              at: range,\n              hanging: true,\n              voids: true,\n            })\n            editor.onChange()\n            return\n          }\n          if (options?.mode === 'blocks') {\n            debug(`Deleting blocks touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  editor.isTextBlock(node) ||\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                )\n              },\n            })\n          }\n          if (options?.mode === 'children') {\n            debug(`Deleting children touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  node._type === types.span.name || // Text children\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                )\n              },\n            })\n          }\n          // If the editor was emptied, insert a placeholder block\n          // directly into the editor's children. We don't want to do this\n          // through a Transform (because that would trigger a change event\n          // that would insert the placeholder into the actual value\n          // which should remain empty)\n          if (editor.children.length === 0) {\n            editor.children = [editor.pteCreateTextBlock({decorators: []})]\n          }\n          editor.onChange()\n        }\n      }\n    },\n    removeAnnotation: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n    ): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'annotation.remove',\n          annotation: {name: type.name},\n        },\n        editor,\n      })\n    },\n    getSelection: (): EditorSelection | null => {\n      let ptRange: EditorSelection = null\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n        if (existing) {\n          return existing\n        }\n        ptRange = toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n      }\n      return ptRange\n    },\n    getValue: () => {\n      return fromSlateValue(\n        editor.children,\n        types.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )\n    },\n    isCollapsedSelection: () => {\n      return !!editor.selection && Range.isCollapsed(editor.selection)\n    },\n    isExpandedSelection: () => {\n      return !!editor.selection && Range.isExpanded(editor.selection)\n    },\n    insertBreak: () => {\n      editor.insertBreak()\n      editor.onChange()\n    },\n    getFragment: () => {\n      return fromSlateValue(editor.getFragment(), types.block.name)\n    },\n    isSelectionsOverlapping: (\n      selectionA: EditorSelection,\n      selectionB: EditorSelection,\n    ) => {\n      // Convert the selections to Slate ranges\n      const rangeA = toSlateRange(selectionA, editor)\n      const rangeB = toSlateRange(selectionB, editor)\n\n      // Make sure the ranges are valid\n      const isValidRanges = Range.isRange(rangeA) && Range.isRange(rangeB)\n\n      // Check if the ranges are overlapping\n      const isOverlapping = isValidRanges && Range.includes(rangeA, rangeB)\n\n      return isOverlapping\n    },\n  }\n\n  return editableApi\n}\n\nfunction isAnnotationActive({\n  editor,\n  annotation,\n}: {\n  editor: PortableTextSlateEditor\n  annotation: {\n    name: string\n  }\n}) {\n  if (!editor.selection || editor.selection.focus.path.length < 2) {\n    return false\n  }\n\n  try {\n    const spans = [\n      ...Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => Text.isText(node),\n      }),\n    ]\n\n    if (spans.length === 0) {\n      return false\n    }\n\n    if (\n      spans.some(\n        ([span]) =>\n          !isPortableTextSpan(span) || !span.marks || span.marks?.length === 0,\n      )\n    )\n      return false\n\n    const selectionMarkDefs = spans.reduce((accMarkDefs, [, path]) => {\n      const [block] = Editor.node(editor, path, {depth: 1})\n      if (editor.isTextBlock(block) && block.markDefs) {\n        return [...accMarkDefs, ...block.markDefs]\n      }\n      return accMarkDefs\n    }, [] as PortableTextObject[])\n\n    return spans.every(([span]) => {\n      if (!isPortableTextSpan(span)) return false\n\n      const spanMarkDefs = span.marks?.map(\n        (markKey) =>\n          selectionMarkDefs.find((def) => def?._key === markKey)?._type,\n      )\n\n      return spanMarkDefs?.includes(annotation.name)\n    })\n  } catch {\n    return false\n  }\n}\n\n/**\n * @public\n */\nexport type AddedAnnotationPaths = {\n  /**\n   * @deprecated An annotation may be applied to multiple blocks, resulting\n   * in multiple `markDef`'s being created. Use `markDefPaths` instead.\n   */\n  markDefPath: Path\n  markDefPaths: Array<Path>\n  /**\n   * @deprecated Does not return anything meaningful since an annotation\n   * can span multiple blocks and spans. If references the span closest\n   * to the focus point of the selection.\n   */\n  spanPath: Path\n}\n\nexport const addAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.add',\n  AddedAnnotationPaths | undefined\n> = ({context, action}) => {\n  const editor = action.editor\n  const {selection: originalSelection} = editor\n  let paths: AddedAnnotationPaths | undefined = undefined\n\n  if (originalSelection) {\n    if (Range.isCollapsed(originalSelection)) {\n      editor.pteExpandToWord()\n      editor.onChange()\n    }\n\n    // If we still have a selection, add the annotation to the selected text\n    if (editor.selection) {\n      let spanPath: Path | undefined\n      let markDefPath: Path | undefined\n      const markDefPaths: Path[] = []\n\n      if (!editor.selection) {\n        return\n      }\n\n      const selectedBlocks = Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => editor.isTextBlock(node),\n        reverse: Range.isBackward(editor.selection),\n      })\n\n      for (const [block, blockPath] of selectedBlocks) {\n        if (block.children.length === 0) {\n          continue\n        }\n\n        if (block.children.length === 1 && block.children[0].text === '') {\n          continue\n        }\n\n        const annotationKey = context.keyGenerator()\n        const markDefs = block.markDefs ?? []\n        const existingMarkDef = markDefs.find(\n          (markDef) =>\n            markDef._type === action.annotation.name &&\n            markDef._key === annotationKey,\n        )\n\n        if (existingMarkDef === undefined) {\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: [\n                ...markDefs,\n                {\n                  _type: action.annotation.name,\n                  _key: annotationKey,\n                  ...action.annotation.value,\n                },\n              ],\n            },\n            {at: blockPath},\n          )\n\n          markDefPath = [{_key: block._key}, 'markDefs', {_key: annotationKey}]\n          if (Range.isBackward(editor.selection)) {\n            markDefPaths.unshift(markDefPath)\n          } else {\n            markDefPaths.push(markDefPath)\n          }\n        }\n\n        Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n\n        const children = Node.children(editor, blockPath)\n\n        for (const [span, path] of children) {\n          if (!editor.isTextSpan(span)) {\n            continue\n          }\n\n          if (!Range.includes(editor.selection, path)) {\n            continue\n          }\n\n          const marks = span.marks ?? []\n          const existingSameTypeAnnotations = marks.filter((mark) =>\n            markDefs.some(\n              (markDef) =>\n                markDef._key === mark &&\n                markDef._type === action.annotation.name,\n            ),\n          )\n\n          Transforms.setNodes(\n            editor,\n            {\n              marks: [\n                ...marks.filter(\n                  (mark) => !existingSameTypeAnnotations.includes(mark),\n                ),\n                annotationKey,\n              ],\n            },\n            {at: path},\n          )\n          spanPath = [{_key: block._key}, 'children', {_key: span._key}]\n        }\n      }\n\n      if (markDefPath && spanPath) {\n        paths = {\n          markDefPath,\n          markDefPaths,\n          spanPath,\n        }\n      }\n    }\n  }\n  return paths\n}\n\nexport const removeAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.remove'\n> = ({action}) => {\n  const editor = action.editor\n\n  debug('Removing annotation', action.annotation.name)\n\n  if (!editor.selection) {\n    return\n  }\n\n  if (Range.isCollapsed(editor.selection)) {\n    const [block, blockPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n\n    if (!editor.isTextBlock(block)) {\n      return\n    }\n\n    const markDefs = block.markDefs ?? []\n    const potentialAnnotations = markDefs.filter(\n      (markDef) => markDef._type === action.annotation.name,\n    )\n\n    const [selectedChild, selectedChildPath] = Editor.node(\n      editor,\n      editor.selection,\n      {\n        depth: 2,\n      },\n    )\n\n    if (!editor.isTextSpan(selectedChild)) {\n      return\n    }\n\n    const annotationToRemove = selectedChild.marks?.find((mark) =>\n      potentialAnnotations.some((markDef) => markDef._key === mark),\n    )\n\n    if (!annotationToRemove) {\n      return\n    }\n\n    const previousSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: SlatePath]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath, {\n      reverse: true,\n    })) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!SlatePath.isBefore(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        previousSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    const nextSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: SlatePath]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath)) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!SlatePath.isAfter(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        nextSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    for (const [child, childPath] of [\n      ...previousSpansWithSameAnnotation,\n      [selectedChild, selectedChildPath] as const,\n      ...nextSpansWithSameAnnotation,\n    ]) {\n      Transforms.setNodes(\n        editor,\n        {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove),\n        },\n        {at: childPath},\n      )\n    }\n  } else {\n    Transforms.setNodes(\n      editor,\n      {},\n      {\n        match: (node) => editor.isTextSpan(node),\n        split: true,\n        hanging: true,\n      },\n    )\n\n    const blocks = Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    })\n\n    for (const [block, blockPath] of blocks) {\n      const children = Node.children(editor, blockPath)\n\n      for (const [child, childPath] of children) {\n        if (!editor.isTextSpan(child)) {\n          continue\n        }\n\n        if (!Range.includes(editor.selection, childPath)) {\n          continue\n        }\n\n        const markDefs = block.markDefs ?? []\n        const marks = child.marks ?? []\n        const marksWithoutAnnotation = marks.filter((mark) => {\n          const markDef = markDefs.find((markDef) => markDef._key === mark)\n          return markDef?._type !== action.annotation.name\n        })\n\n        if (marksWithoutAnnotation.length !== marks.length) {\n          Transforms.setNodes(\n            editor,\n            {\n              marks: marksWithoutAnnotation,\n            },\n            {at: childPath},\n          )\n        }\n      }\n    }\n  }\n}\n\nexport const toggleAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.toggle',\n  AddedAnnotationPaths | undefined\n> = ({context, action}) => {\n  const isActive = isAnnotationActive({\n    editor: action.editor,\n    annotation: {name: action.annotation.name},\n  })\n\n  if (isActive) {\n    removeAnnotationActionImplementation({\n      context,\n      action: {\n        type: 'annotation.remove',\n        annotation: action.annotation,\n        editor: action.editor,\n      },\n    })\n  } else {\n    return addAnnotationActionImplementation({\n      context,\n      action: {\n        type: 'annotation.add',\n        annotation: action.annotation,\n        editor: action.editor,\n      },\n    })\n  }\n}\n","import {isEqual} from 'lodash'\nimport {Editor, Node, Path, Range, Transforms} from 'slate'\nimport type {SlateTextBlock, VoidElement} from '../../types/slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertBreakActionImplementation: BehaviorActionImplementation<\n  'insert break'\n> = ({context, action}) => {\n  const keyGenerator = context.keyGenerator\n  const schema = context.schema\n  const editor = action.editor\n\n  if (!editor.selection) {\n    return\n  }\n\n  const [focusSpan] = Array.from(\n    Editor.nodes(editor, {\n      mode: 'lowest',\n      at: editor.selection.focus,\n      match: (n) => editor.isTextSpan(n),\n      voids: false,\n    }),\n  )[0] ?? [undefined]\n  const focusDecorators =\n    focusSpan.marks?.filter((mark) =>\n      schema.decorators.some((decorator) => decorator.value === mark),\n    ) ?? []\n  const focusAnnotations =\n    focusSpan.marks?.filter(\n      (mark) =>\n        !schema.decorators.some((decorator) => decorator.value === mark),\n    ) ?? []\n\n  const focusBlockPath = editor.selection.focus.path.slice(0, 1)\n  const focusBlock = Node.descendant(editor, focusBlockPath) as\n    | SlateTextBlock\n    | VoidElement\n\n  if (editor.isTextBlock(focusBlock)) {\n    const [start, end] = Range.edges(editor.selection)\n    const atTheStartOfBlock = isEqual(end, {\n      path: [...focusBlockPath, 0],\n      offset: 0,\n    })\n\n    if (atTheStartOfBlock && Range.isCollapsed(editor.selection)) {\n      Editor.insertNode(\n        editor,\n        editor.pteCreateTextBlock({\n          decorators: focusAnnotations.length === 0 ? focusDecorators : [],\n          listItem: focusBlock.listItem,\n          level: focusBlock.level,\n        }),\n      )\n\n      const [nextBlockPath] = Path.next(focusBlockPath)\n\n      Transforms.select(editor, {\n        anchor: {path: [nextBlockPath, 0], offset: 0},\n        focus: {path: [nextBlockPath, 0], offset: 0},\n      })\n\n      return\n    }\n\n    const lastFocusBlockChild =\n      focusBlock.children[focusBlock.children.length - 1]\n    const atTheEndOfBlock = isEqual(start, {\n      path: [...focusBlockPath, focusBlock.children.length - 1],\n      offset: editor.isTextSpan(lastFocusBlockChild)\n        ? lastFocusBlockChild.text.length\n        : 0,\n    })\n\n    if (atTheEndOfBlock && Range.isCollapsed(editor.selection)) {\n      Editor.insertNode(\n        editor,\n        editor.pteCreateTextBlock({\n          decorators: [],\n          listItem: focusBlock.listItem,\n          level: focusBlock.level,\n        }),\n      )\n\n      const [nextBlockPath] = Path.next(focusBlockPath)\n\n      Transforms.setSelection(editor, {\n        anchor: {path: [nextBlockPath, 0], offset: 0},\n        focus: {path: [nextBlockPath, 0], offset: 0},\n      })\n\n      return\n    }\n\n    const isInTheMiddleOfNode = !atTheStartOfBlock && !atTheEndOfBlock\n\n    if (isInTheMiddleOfNode) {\n      Editor.withoutNormalizing(editor, () => {\n        if (!editor.selection) {\n          return\n        }\n\n        Transforms.splitNodes(editor, {\n          at: editor.selection,\n        })\n\n        const [nextNode, nextNodePath] = Editor.node(\n          editor,\n          Path.next(focusBlockPath),\n          {depth: 1},\n        )\n\n        Transforms.setSelection(editor, {\n          anchor: {path: [...nextNodePath, 0], offset: 0},\n          focus: {path: [...nextNodePath, 0], offset: 0},\n        })\n\n        /**\n         * Assign new keys to markDefs that are now split across two blocks\n         */\n        if (\n          editor.isTextBlock(nextNode) &&\n          nextNode.markDefs &&\n          nextNode.markDefs.length > 0\n        ) {\n          const newMarkDefKeys = new Map<string, string>()\n\n          const prevNodeSpans = Array.from(\n            Node.children(editor, focusBlockPath),\n          )\n            .map((entry) => entry[0])\n            .filter((node) => editor.isTextSpan(node))\n          const children = Node.children(editor, nextNodePath)\n\n          for (const [child, childPath] of children) {\n            if (!editor.isTextSpan(child)) {\n              continue\n            }\n\n            const marks = child.marks ?? []\n\n            // Go through the marks of the span and figure out if any of\n            // them refer to annotations that are also present in the\n            // previous block\n            for (const mark of marks) {\n              if (\n                schema.decorators.some((decorator) => decorator.value === mark)\n              ) {\n                continue\n              }\n\n              if (\n                prevNodeSpans.some((prevNodeSpan) =>\n                  prevNodeSpan.marks?.includes(mark),\n                ) &&\n                !newMarkDefKeys.has(mark)\n              ) {\n                // This annotation is both present in the previous block\n                // and this block, so let's assign a new key to it\n                newMarkDefKeys.set(mark, keyGenerator())\n              }\n            }\n\n            const newMarks = marks.map(\n              (mark) => newMarkDefKeys.get(mark) ?? mark,\n            )\n\n            // No need to update the marks if they are the same\n            if (!isEqual(marks, newMarks)) {\n              Transforms.setNodes(\n                editor,\n                {marks: newMarks},\n                {\n                  at: childPath,\n                },\n              )\n            }\n          }\n\n          // Time to update all the markDefs that need a new key because\n          // they've been split across blocks\n          const newMarkDefs = nextNode.markDefs.map((markDef) => ({\n            ...markDef,\n            _key: newMarkDefKeys.get(markDef._key) ?? markDef._key,\n          }))\n\n          // No need to update the markDefs if they are the same\n          if (!isEqual(nextNode.markDefs, newMarkDefs)) {\n            Transforms.setNodes(\n              editor,\n              {markDefs: newMarkDefs},\n              {\n                at: nextNodePath,\n                match: (node) => editor.isTextBlock(node),\n              },\n            )\n          }\n        }\n      })\n      editor.onChange()\n      return\n    }\n  }\n}\n\nexport const insertSoftBreakActionImplementation: BehaviorActionImplementation<\n  'insert soft break'\n> = ({context, action}) => {\n  // This mimics Slate's internal which also just does a regular insert break\n  // when soft-breaking\n  insertBreakActionImplementation({\n    context,\n    action: {...action, type: 'insert break'},\n  })\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertSpanActionImplementation: BehaviorActionImplementation<\n  'insert span'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    console.error('Unable to perform action without selection', action)\n    return\n  }\n\n  const [focusBlock, focusBlockPath] = Array.from(\n    Editor.nodes(action.editor, {\n      at: action.editor.selection.focus.path,\n      match: (node) => action.editor.isTextBlock(node),\n    }),\n  )[0] ?? [undefined, undefined]\n\n  if (!focusBlock || !focusBlockPath) {\n    console.error('Unable to perform action without focus block', action)\n    return\n  }\n\n  const markDefs = focusBlock.markDefs ?? []\n  const annotations = action.annotations\n    ? action.annotations.map((annotation) => ({\n        _type: annotation.name,\n        _key: context.keyGenerator(),\n        ...annotation.value,\n      }))\n    : undefined\n\n  if (annotations && annotations.length > 0) {\n    Transforms.setNodes(action.editor, {\n      markDefs: [...markDefs, ...annotations],\n    })\n  }\n\n  Transforms.insertNodes(action.editor, {\n    _type: 'span',\n    _key: context.keyGenerator(),\n    text: action.text,\n    marks: [\n      ...(annotations?.map((annotation) => annotation._key) ?? []),\n      ...(action.decorators ?? []),\n    ],\n  })\n}\n","import {deleteBackward, deleteForward, insertText, Transforms} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport type {PortableTextMemberSchemaTypes} from '../../types/editor'\nimport {toSlateRange} from '../../utils/ranges'\nimport {fromSlateValue, toSlateValue} from '../../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../../utils/weakMaps'\nimport {\n  addAnnotationActionImplementation,\n  removeAnnotationActionImplementation,\n  toggleAnnotationActionImplementation,\n} from '../plugins/createWithEditableAPI'\nimport {\n  addDecoratorActionImplementation,\n  removeDecoratorActionImplementation,\n  toggleDecoratorActionImplementation,\n} from '../plugins/createWithPortableTextMarkModel'\nimport {insertBlock} from './behavior.action-utils.insert-block'\nimport {insertBlockObjectActionImplementation} from './behavior.action.insert-block-object'\nimport {\n  insertBreakActionImplementation,\n  insertSoftBreakActionImplementation,\n} from './behavior.action.insert-break'\nimport {insertSpanActionImplementation} from './behavior.action.insert-span'\nimport type {\n  BehaviorAction,\n  BehaviorEvent,\n  PickFromUnion,\n} from './behavior.types'\nimport {blockOffsetToSpanSelectionPoint} from './behavior.utils.block-offset'\n\nexport type BehaviorActionContext = {\n  keyGenerator: () => string\n  schema: PortableTextMemberSchemaTypes\n}\n\nexport type BehaviorActionImplementation<\n  TBehaviorActionType extends BehaviorAction['type'],\n  TReturnType = void,\n> = ({\n  context,\n  action,\n}: {\n  context: BehaviorActionContext\n  action: PickFromUnion<BehaviorAction, 'type', TBehaviorActionType>\n}) => TReturnType\n\ntype BehaviorActionImplementations = {\n  [TBehaviorActionType in BehaviorAction['type']]: BehaviorActionImplementation<TBehaviorActionType>\n}\n\nconst behaviorActionImplementations: BehaviorActionImplementations = {\n  'annotation.add': addAnnotationActionImplementation,\n  'annotation.remove': removeAnnotationActionImplementation,\n  'annotation.toggle': toggleAnnotationActionImplementation,\n  'decorator.add': addDecoratorActionImplementation,\n  'decorator.remove': removeDecoratorActionImplementation,\n  'decorator.toggle': toggleDecoratorActionImplementation,\n  'focus': ({action}) => {\n    ReactEditor.focus(action.editor)\n  },\n  'set block': ({action}) => {\n    for (const path of action.paths) {\n      const at = toSlateRange(\n        {anchor: {path, offset: 0}, focus: {path, offset: 0}},\n        action.editor,\n      )!\n\n      Transforms.setNodes(\n        action.editor,\n        {\n          ...(action.style ? {style: action.style} : {}),\n          ...(action.listItem ? {listItem: action.listItem} : {}),\n          ...(action.level ? {level: action.level} : {}),\n        },\n        {at},\n      )\n    }\n  },\n  'unset block': ({action}) => {\n    for (const path of action.paths) {\n      const at = toSlateRange(\n        {anchor: {path, offset: 0}, focus: {path, offset: 0}},\n        action.editor,\n      )!\n\n      Transforms.unsetNodes(action.editor, action.props, {at})\n    }\n  },\n  'delete backward': ({action}) => {\n    deleteBackward(action.editor, action.unit)\n  },\n  'delete forward': ({action}) => {\n    deleteForward(action.editor, action.unit)\n  },\n  'delete block': ({action}) => {\n    const range = toSlateRange(\n      {\n        anchor: {path: action.blockPath, offset: 0},\n        focus: {path: action.blockPath, offset: 0},\n      },\n      action.editor,\n    )\n\n    if (!range) {\n      console.error('Unable to find Slate range from selection points')\n      return\n    }\n\n    Transforms.removeNodes(action.editor, {\n      at: range,\n    })\n  },\n  'delete text': ({context, action}) => {\n    const value = fromSlateValue(\n      action.editor.children,\n      context.schema.block.name,\n      KEY_TO_VALUE_ELEMENT.get(action.editor),\n    )\n\n    const anchor = blockOffsetToSpanSelectionPoint({\n      value,\n      blockOffset: action.anchor,\n    })\n    const focus = blockOffsetToSpanSelectionPoint({\n      value,\n      blockOffset: action.focus,\n    })\n\n    if (!anchor || !focus) {\n      console.error('Unable to find anchor or focus selection point')\n      return\n    }\n\n    const range = toSlateRange(\n      {\n        anchor,\n        focus,\n      },\n      action.editor,\n    )\n\n    if (!range) {\n      console.error('Unable to find Slate range from selection points')\n      return\n    }\n\n    Transforms.delete(action.editor, {\n      at: range,\n    })\n  },\n  'insert block object': insertBlockObjectActionImplementation,\n  'insert break': insertBreakActionImplementation,\n  'insert soft break': insertSoftBreakActionImplementation,\n  'insert span': insertSpanActionImplementation,\n  'insert text': ({action}) => {\n    insertText(action.editor, action.text)\n  },\n  'insert text block': ({context, action}) => {\n    const block = toSlateValue(\n      [\n        {\n          _key: context.keyGenerator(),\n          _type: context.schema.block.name,\n          style: context.schema.styles[0].value ?? 'normal',\n          markDefs: [],\n          children: action.textBlock?.children?.map((child) => ({\n            ...child,\n            _key: context.keyGenerator(),\n          })) ?? [\n            {\n              _type: context.schema.span.name,\n              _key: context.keyGenerator(),\n              text: '',\n            },\n          ],\n        },\n      ],\n      {schemaTypes: context.schema},\n    )[0]\n\n    insertBlock({\n      block,\n      editor: action.editor,\n      schema: context.schema,\n      placement: action.placement,\n    })\n  },\n  'effect': ({action}) => {\n    action.effect()\n  },\n  'paste': ({action}) => {\n    action.editor.insertData(action.clipboardData)\n  },\n  'select': ({action}) => {\n    const newSelection = toSlateRange(action.selection, action.editor)\n\n    if (newSelection) {\n      Transforms.select(action.editor, newSelection)\n    } else {\n      Transforms.deselect(action.editor)\n    }\n  },\n  'reselect': ({action}) => {\n    const selection = action.editor.selection\n\n    if (selection) {\n      Transforms.select(action.editor, {...selection})\n      action.editor.selection = {...selection}\n    }\n  },\n}\n\nexport function performAction({\n  context,\n  action,\n}: {\n  context: BehaviorActionContext\n  action: BehaviorAction\n}) {\n  switch (action.type) {\n    case 'delete block': {\n      behaviorActionImplementations['delete block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete text': {\n      behaviorActionImplementations['delete text']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert block object': {\n      behaviorActionImplementations['insert block object']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert span': {\n      behaviorActionImplementations['insert span']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert text block': {\n      behaviorActionImplementations['insert text block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'set block': {\n      behaviorActionImplementations['set block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'unset block': {\n      behaviorActionImplementations['unset block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'effect': {\n      behaviorActionImplementations.effect({\n        context,\n        action,\n      })\n      break\n    }\n    case 'select': {\n      behaviorActionImplementations.select({\n        context,\n        action,\n      })\n      break\n    }\n    case 'reselect': {\n      behaviorActionImplementations.reselect({\n        context,\n        action,\n      })\n      break\n    }\n    default: {\n      performDefaultAction({context, action})\n    }\n  }\n}\n\nfunction performDefaultAction({\n  context,\n  action,\n}: {\n  context: BehaviorActionContext\n  action: PickFromUnion<BehaviorAction, 'type', BehaviorEvent['type']>\n}) {\n  switch (action.type) {\n    case 'annotation.add': {\n      behaviorActionImplementations['annotation.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'annotation.remove': {\n      behaviorActionImplementations['annotation.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'annotation.toggle': {\n      behaviorActionImplementations['annotation.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.add': {\n      behaviorActionImplementations['decorator.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.remove': {\n      behaviorActionImplementations['decorator.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.toggle': {\n      behaviorActionImplementations['decorator.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete backward': {\n      behaviorActionImplementations['delete backward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete forward': {\n      behaviorActionImplementations['delete forward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'focus': {\n      behaviorActionImplementations.focus({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert break': {\n      behaviorActionImplementations['insert break']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert soft break': {\n      behaviorActionImplementations['insert soft break']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert text': {\n      behaviorActionImplementations['insert text']({\n        context,\n        action,\n      })\n      break\n    }\n    default: {\n      behaviorActionImplementations.paste({\n        context,\n        action,\n      })\n    }\n  }\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {FocusEvent} from 'react'\nimport {Editor} from 'slate'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  setup,\n  type ActorRefFrom,\n} from 'xstate'\nimport type {\n  EditorSelection,\n  InvalidValueResolution,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {toPortableTextRange} from '../utils/ranges'\nimport {fromSlateValue} from '../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport {performAction} from './behavior/behavior.actions'\nimport {coreBehaviors} from './behavior/behavior.core'\nimport type {\n  Behavior,\n  BehaviorAction,\n  BehaviorActionIntend,\n  BehaviorContext,\n  BehaviorEvent,\n  OmitFromUnion,\n  PickFromUnion,\n} from './behavior/behavior.types'\n\nexport * from 'xstate/guards'\n\n/**\n * @internal\n */\nexport type EditorActor = ActorRefFrom<typeof editorMachine>\n\n/**\n * @internal\n */\nexport type PatchEvent = {type: 'patch'; patch: Patch}\n\n/**\n * @internal\n */\nexport type PatchesEvent = {\n  type: 'patches'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @internal\n */\nexport type MutationEvent = {\n  type: 'mutation'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @internal\n */\nexport type InternalEditorEvent =\n  | {type: 'normalizing'}\n  | {type: 'done normalizing'}\n  | {\n      type: 'behavior event'\n      behaviorEvent: BehaviorEvent\n      editor: PortableTextSlateEditor\n    }\n  | {\n      type: 'behavior action intends'\n      editor: PortableTextSlateEditor\n      actionIntends: Array<BehaviorActionIntend>\n    }\n  | {\n      type: 'update schema'\n      schema: PortableTextMemberSchemaTypes\n    }\n  | {\n      type: 'update behaviors'\n      behaviors: Array<Behavior>\n    }\n  | {\n      type: 'update value'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'toggle readOnly'\n    }\n  | {\n      type: 'update maxBlocks'\n      maxBlocks: number | undefined\n    }\n  | OmitFromUnion<InternalEditorEmittedEvent, 'type', 'readOnly toggled'>\n\n/**\n * @alpha\n */\nexport type EditorEmittedEvent = PickFromUnion<\n  InternalEditorEmittedEvent,\n  'type',\n  | 'blur'\n  | 'done loading'\n  | 'error'\n  | 'focus'\n  | 'invalid value'\n  | 'loading'\n  | 'mutation'\n  | 'patch'\n  | 'readOnly toggled'\n  | 'ready'\n  | 'selection'\n  | 'value changed'\n>\n\n/**\n * @internal\n */\nexport type InternalEditorEmittedEvent =\n  | {type: 'ready'}\n  | PatchEvent\n  | PatchesEvent\n  | MutationEvent\n  | {\n      type: 'unset'\n      previousValue: Array<PortableTextBlock>\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'error'\n      name: string\n      description: string\n      data: unknown\n    }\n  | {type: 'selection'; selection: EditorSelection}\n  | {type: 'blur'; event: FocusEvent<HTMLDivElement, Element>}\n  | {type: 'focused'; event: FocusEvent<HTMLDivElement, Element>}\n  | {type: 'loading'}\n  | {type: 'done loading'}\n  | {type: 'readOnly toggled'; readOnly: boolean}\n  | PickFromUnion<\n      BehaviorEvent,\n      'type',\n      'annotation.add' | 'annotation.remove' | 'annotation.toggle' | 'focus'\n    >\n\n/**\n * @internal\n */\nexport const editorMachine = setup({\n  types: {\n    context: {} as {\n      behaviors: Array<Behavior>\n      keyGenerator: () => string\n      pendingEvents: Array<PatchEvent | MutationEvent>\n      schema: PortableTextMemberSchemaTypes\n      readOnly: boolean\n      maxBlocks: number | undefined\n      value: Array<PortableTextBlock> | undefined\n    },\n    events: {} as InternalEditorEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n    input: {} as {\n      behaviors?: Array<Behavior>\n      keyGenerator: () => string\n      maxBlocks?: number\n      readOnly?: boolean\n      schema: PortableTextMemberSchemaTypes\n      value?: Array<PortableTextBlock>\n    },\n  },\n  actions: {\n    'assign behaviors': assign({\n      behaviors: ({event}) => {\n        assertEvent(event, 'update behaviors')\n        return event.behaviors\n      },\n    }),\n    'assign schema': assign({\n      schema: ({event}) => {\n        assertEvent(event, 'update schema')\n        return event.schema\n      },\n    }),\n    'emit patch event': emit(({event}) => {\n      assertEvent(event, 'patch')\n      return event\n    }),\n    'emit mutation event': emit(({event}) => {\n      assertEvent(event, 'mutation')\n      return event\n    }),\n    'defer event': assign({\n      pendingEvents: ({context, event}) => {\n        assertEvent(event, ['patch', 'mutation'])\n        return [...context.pendingEvents, event]\n      },\n    }),\n    'emit pending events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingEvents) {\n        enqueue(emit(event))\n      }\n    }),\n    'clear pending events': assign({\n      pendingEvents: [],\n    }),\n    'handle behavior event': enqueueActions(({context, event, enqueue}) => {\n      assertEvent(event, ['behavior event'])\n\n      const defaultAction = {\n        ...event.behaviorEvent,\n        editor: event.editor,\n      } satisfies BehaviorAction\n\n      const eventBehaviors = context.behaviors.filter(\n        (behavior) => behavior.on === event.behaviorEvent.type,\n      )\n\n      if (eventBehaviors.length === 0) {\n        enqueue.raise({\n          type: 'behavior action intends',\n          editor: event.editor,\n          actionIntends: [defaultAction],\n        })\n        return\n      }\n\n      const value = fromSlateValue(\n        event.editor.children,\n        context.schema.block.name,\n        KEY_TO_VALUE_ELEMENT.get(event.editor),\n      )\n      const selection = toPortableTextRange(\n        value,\n        event.editor.selection,\n        context.schema,\n      )\n\n      if (!selection) {\n        console.warn(\n          `Unable to handle event ${event.type} due to missing selection`,\n        )\n        enqueue.raise({\n          type: 'behavior action intends',\n          editor: event.editor,\n          actionIntends: [defaultAction],\n        })\n        return\n      }\n\n      const behaviorContext = {\n        schema: context.schema,\n        value,\n        selection,\n      } satisfies BehaviorContext\n\n      let behaviorOverwritten = false\n\n      for (const eventBehavior of eventBehaviors) {\n        const shouldRun =\n          eventBehavior.guard?.({\n            context: behaviorContext,\n            event: event.behaviorEvent,\n          }) ?? true\n\n        if (!shouldRun) {\n          continue\n        }\n\n        const actionIntendSets = eventBehavior.actions.map((actionSet) =>\n          actionSet(\n            {context: behaviorContext, event: event.behaviorEvent},\n            shouldRun,\n          ),\n        )\n\n        for (const actionIntends of actionIntendSets) {\n          behaviorOverwritten =\n            behaviorOverwritten ||\n            (actionIntends.length > 0 &&\n              actionIntends.some(\n                (actionIntend) => actionIntend.type !== 'effect',\n              ))\n\n          enqueue.raise({\n            type: 'behavior action intends',\n            editor: event.editor,\n            actionIntends,\n          })\n        }\n\n        if (behaviorOverwritten) {\n          break\n        }\n      }\n\n      if (!behaviorOverwritten) {\n        enqueue.raise({\n          type: 'behavior action intends',\n          editor: event.editor,\n          actionIntends: [defaultAction],\n        })\n      }\n    }),\n  },\n}).createMachine({\n  id: 'editor',\n  context: ({input}) => ({\n    behaviors: input.behaviors ?? coreBehaviors,\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    schema: input.schema,\n    readOnly: input.readOnly ?? false,\n    maxBlocks: input.maxBlocks,\n    value: input.value,\n  }),\n  on: {\n    'annotation.add': {\n      actions: emit(({event}) => event),\n      guard: ({context}) => !context.readOnly,\n    },\n    'annotation.remove': {\n      actions: emit(({event}) => event),\n      guard: ({context}) => !context.readOnly,\n    },\n    'annotation.toggle': {\n      actions: emit(({event}) => event),\n      guard: ({context}) => !context.readOnly,\n    },\n    'focus': {\n      actions: emit(({event}) => event),\n      guard: ({context}) => !context.readOnly,\n    },\n    'ready': {actions: emit(({event}) => event)},\n    'unset': {actions: emit(({event}) => event)},\n    'value changed': {actions: emit(({event}) => event)},\n    'invalid value': {actions: emit(({event}) => event)},\n    'error': {actions: emit(({event}) => event)},\n    'selection': {actions: emit(({event}) => event)},\n    'blur': {actions: emit(({event}) => event)},\n    'focused': {actions: emit(({event}) => event)},\n    'loading': {actions: emit({type: 'loading'})},\n    'patches': {actions: emit(({event}) => event)},\n    'done loading': {actions: emit({type: 'done loading'})},\n    'update behaviors': {actions: 'assign behaviors'},\n    'update schema': {actions: 'assign schema'},\n    'update value': {actions: assign({value: ({event}) => event.value})},\n    'toggle readOnly': {\n      actions: [\n        assign({readOnly: ({context}) => !context.readOnly}),\n        emit(({context}) => ({\n          type: 'readOnly toggled',\n          readOnly: context.readOnly,\n        })),\n      ],\n    },\n    'update maxBlocks': {\n      actions: assign({maxBlocks: ({event}) => event.maxBlocks}),\n    },\n    'behavior event': {\n      actions: 'handle behavior event',\n      guard: ({context}) => !context.readOnly,\n    },\n    'behavior action intends': {\n      actions: [\n        ({context, event}) => {\n          Editor.withoutNormalizing(event.editor, () => {\n            for (const actionIntend of event.actionIntends) {\n              const action = {\n                ...actionIntend,\n                editor: event.editor,\n              }\n\n              performAction({context, action})\n            }\n          })\n          event.editor.onChange()\n        },\n        enqueueActions(({context, event, enqueue}) => {\n          if (\n            event.actionIntends.some(\n              (actionIntend) => actionIntend.type === 'reselect',\n            )\n          ) {\n            enqueue.raise({\n              type: 'selection',\n              selection: toPortableTextRange(\n                event.editor.children,\n                event.editor.selection,\n                context.schema,\n              ),\n            })\n          }\n        }),\n      ],\n    },\n  },\n  initial: 'pristine',\n  states: {\n    pristine: {\n      initial: 'idle',\n      states: {\n        idle: {\n          on: {\n            normalizing: {\n              target: 'normalizing',\n            },\n            patch: {\n              actions: 'defer event',\n              target: '#editor.dirty',\n            },\n            mutation: {\n              actions: 'defer event',\n              target: '#editor.dirty',\n            },\n          },\n        },\n        normalizing: {\n          on: {\n            'done normalizing': {\n              target: 'idle',\n            },\n            'patch': {\n              actions: 'defer event',\n            },\n            'mutation': {\n              actions: 'defer event',\n            },\n          },\n        },\n      },\n    },\n    dirty: {\n      entry: ['emit pending events', 'clear pending events'],\n      on: {\n        patch: {\n          actions: 'emit patch event',\n        },\n        mutation: {\n          actions: 'emit mutation event',\n        },\n      },\n    },\n  },\n})\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  PortableTextBlock,\n} from '@sanity/types'\nimport {useActorRef} from '@xstate/react'\nimport {useCallback, useMemo} from 'react'\nimport {\n  createActor,\n  type ActorRef,\n  type EventObject,\n  type Snapshot,\n} from 'xstate'\nimport type {EditableAPI} from '../types/editor'\nimport {getPortableTextMemberSchemaTypes} from '../utils/getPortableTextMemberSchemaTypes'\nimport {compileType} from '../utils/schema'\nimport type {Behavior, PickFromUnion} from './behavior/behavior.types'\nimport {createSlateEditor, type SlateEditor} from './create-slate-editor'\nimport {compileSchemaDefinition, type SchemaDefinition} from './define-schema'\nimport {\n  editorMachine,\n  type EditorActor,\n  type EditorEmittedEvent,\n  type InternalEditorEvent,\n} from './editor-machine'\nimport {defaultKeyGenerator} from './key-generator'\nimport {createEditableAPI} from './plugins/createWithEditableAPI'\n\n/**\n * @alpha\n */\nexport type EditorConfig = {\n  behaviors?: Array<Behavior>\n  keyGenerator?: () => string\n  maxBlocks?: number\n  readOnly?: boolean\n  initialValue?: Array<PortableTextBlock>\n} & (\n  | {\n      schemaDefinition: SchemaDefinition\n      schema?: undefined\n    }\n  | {\n      schemaDefinition?: undefined\n      schema: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n    }\n)\n\n/**\n * @alpha\n */\nexport type EditorEvent = PickFromUnion<\n  InternalEditorEvent,\n  'type',\n  | 'annotation.toggle'\n  | 'focus'\n  | 'patches'\n  | 'toggle readOnly'\n  | 'update behaviors'\n  | 'update value'\n>\n\n/**\n * @alpha\n */\nexport type Editor = {\n  send: (event: EditorEvent) => void\n  on: ActorRef<Snapshot<unknown>, EventObject, EditorEmittedEvent>['on']\n  editable: EditableAPI\n  _internal: {\n    editorActor: EditorActor\n    slateEditor: SlateEditor\n  }\n}\n\n/**\n * @alpha\n */\nexport function createEditor(config: EditorConfig): Editor {\n  const editorActor = createActor(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n\n  editorActor.start()\n\n  const slateEditor = createSlateEditor({editorActor})\n  const editable = createEditableAPI(slateEditor.instance, editorActor)\n\n  return {\n    send: (event) => {\n      editorActor.send(event)\n    },\n    on: (event, listener) =>\n      editorActor.on(\n        event,\n        // @ts-ignore\n        listener,\n      ),\n    editable,\n    _internal: {\n      editorActor,\n      slateEditor,\n    },\n  }\n}\n\n/**\n * @alpha\n */\nexport function useEditor(config: EditorConfig): Editor {\n  const editorActor = useActorRef(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n  const slateEditor = createSlateEditor({editorActor})\n  const editable = useMemo(\n    () => createEditableAPI(slateEditor.instance, editorActor),\n    [slateEditor.instance, editorActor],\n  )\n  const send = useCallback(\n    (event: EditorEvent) => {\n      editorActor.send(event)\n    },\n    [editorActor],\n  )\n  const on = useCallback<Editor['on']>(\n    (event, listener) =>\n      editorActor.on(\n        event,\n        // @ts-ignore\n        listener,\n      ),\n    [editorActor],\n  )\n  const editor: Editor = useMemo(\n    () => ({\n      send,\n      on,\n      editable,\n      _internal: {\n        editorActor,\n        slateEditor,\n      },\n    }),\n    [send, on, editable, editorActor, slateEditor],\n  )\n\n  return editor\n}\n\nfunction editorConfigToMachineInput(config: EditorConfig) {\n  return {\n    behaviors: config.behaviors,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema: config.schemaDefinition\n      ? compileSchemaDefinition(config.schemaDefinition)\n      : getPortableTextMemberSchemaTypes(\n          config.schema.hasOwnProperty('jsonType')\n            ? config.schema\n            : compileType(config.schema),\n        ),\n    value: config.initialValue,\n  } as const\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n} from '@sanity/types'\nimport {\n  Component,\n  useEffect,\n  type MutableRefObject,\n  type PropsWithChildren,\n} from 'react'\nimport {Subject} from 'rxjs'\nimport {Slate} from 'slate-react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorChange,\n  EditorChanges,\n  EditorSelection,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {debugWithName} from '../utils/debug'\nimport {getPortableTextMemberSchemaTypes} from '../utils/getPortableTextMemberSchemaTypes'\nimport {compileType} from '../utils/schema'\nimport {Synchronizer} from './components/Synchronizer'\nimport {EditorActorContext} from './editor-actor-context'\nimport type {EditorActor} from './editor-machine'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {defaultKeyGenerator} from './key-generator'\nimport type {AddedAnnotationPaths} from './plugins/createWithEditableAPI'\nimport {createEditor, type Editor} from './use-editor'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n */\nexport type PortableTextEditorProps<\n  TEditor extends Editor | undefined = undefined,\n> = PropsWithChildren<\n  TEditor extends Editor\n    ? {\n        /**\n         * @alpha\n         */\n        editor: TEditor\n      }\n    : {\n        editor?: undefined\n\n        /**\n         * Function that gets called when the editor changes the value\n         */\n        onChange: (change: EditorChange) => void\n\n        /**\n         * Schema type for the portable text field\n         */\n        schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n        /**\n         * Maximum number of blocks to allow within the editor\n         */\n        maxBlocks?: number | string\n\n        /**\n         * Function used to generate keys for array items (`_key`)\n         */\n        keyGenerator?: () => string\n\n        /**\n         * Observable of local and remote patches for the edited value.\n         */\n        patches$?: PatchObservable\n\n        /**\n         * Backward compatibility (renamed to patches$).\n         */\n        incomingPatches$?: PatchObservable\n\n        /**\n         * Whether or not the editor should be in read-only mode\n         */\n        readOnly?: boolean\n\n        /**\n         * The current value of the portable text field\n         */\n        value?: PortableTextBlock[]\n\n        /**\n         * A ref to the editor instance\n         */\n        editorRef?: MutableRefObject<PortableTextEditor | null>\n      }\n>\n\n/**\n * The main Portable Text Editor component.\n * @public\n */\nexport class PortableTextEditor extends Component<\n  PortableTextEditorProps<Editor | undefined>\n> {\n  public static displayName = 'PortableTextEditor'\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor instance\n   */\n  private editor: Editor\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  private editable: EditableAPI\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (props.editor) {\n      this.editor = props.editor as Editor\n    } else {\n      this.editor = createEditor({\n        keyGenerator: props.keyGenerator ?? defaultKeyGenerator,\n        schema: props.schemaType,\n        initialValue: props.value,\n        maxBlocks:\n          props.maxBlocks === undefined\n            ? undefined\n            : Number.parseInt(props.maxBlocks.toString(), 10),\n        readOnly: props.readOnly,\n      })\n    }\n\n    this.schemaTypes =\n      this.editor._internal.editorActor.getSnapshot().context.schema\n    this.editable = this.editor.editable\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (\n      !this.props.editor &&\n      !prevProps.editor &&\n      this.props.schemaType !== prevProps.schemaType\n    ) {\n      this.schemaTypes = getPortableTextMemberSchemaTypes(\n        this.props.schemaType.hasOwnProperty('jsonType')\n          ? this.props.schemaType\n          : compileType(this.props.schemaType),\n      )\n\n      this.editor._internal.editorActor.send({\n        type: 'update schema',\n        schema: this.schemaTypes,\n      })\n    }\n\n    if (!this.props.editor && !prevProps.editor) {\n      if (this.props.readOnly !== prevProps.readOnly) {\n        this.editor._internal.editorActor.send({\n          type: 'toggle readOnly',\n        })\n      }\n\n      if (this.props.maxBlocks !== prevProps.maxBlocks) {\n        this.editor._internal.editorActor.send({\n          type: 'update maxBlocks',\n          maxBlocks:\n            this.props.maxBlocks === undefined\n              ? undefined\n              : Number.parseInt(this.props.maxBlocks.toString(), 10),\n        })\n      }\n\n      if (this.props.value !== prevProps.value) {\n        this.editor._internal.editorActor.send({\n          type: 'update value',\n          value: this.props.value,\n        })\n      }\n\n      if (\n        this.props.editorRef !== prevProps.editorRef &&\n        this.props.editorRef\n      ) {\n        this.props.editorRef.current = this\n      }\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editor.editable = {...this.editor.editable, ...editable}\n  }\n\n  render() {\n    const legacyPatches = !this.props.editor\n      ? (this.props.incomingPatches$ ?? this.props.patches$)\n      : undefined\n\n    return (\n      <>\n        {legacyPatches ? (\n          <RoutePatchesObservableToEditorActor\n            editorActor={this.editor._internal.editorActor}\n            patches$={legacyPatches}\n          />\n        ) : null}\n        <RouteEventsToChanges\n          editorActor={this.editor._internal.editorActor}\n          onChange={(change) => {\n            if (!this.props.editor) {\n              this.props.onChange(change)\n            }\n            /**\n             * For backwards compatibility, we relay all changes to the\n             * `change$` Subject as well.\n             */\n            this.change$.next(change)\n          }}\n        />\n        <Synchronizer\n          editorActor={this.editor._internal.editorActor}\n          getValue={this.editor.editable.getValue}\n          portableTextEditor={this}\n          slateEditor={this.editor._internal.slateEditor.instance}\n        />\n        <EditorActorContext.Provider value={this.editor._internal.editorActor}>\n          <Slate\n            editor={this.editor._internal.slateEditor.instance}\n            initialValue={this.editor._internal.slateEditor.initialValue}\n          >\n            <PortableTextEditorContext.Provider value={this}>\n              <PortableTextEditorSelectionProvider\n                editorActor={this.editor._internal.editorActor}\n              >\n                {this.props.children}\n              </PortableTextEditorSelectionProvider>\n            </PortableTextEditorContext.Provider>\n          </Slate>\n        </EditorActorContext.Provider>\n      </>\n    )\n  }\n\n  // Static API methods\n  static activeAnnotations = (\n    editor: PortableTextEditor,\n  ): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n  static isAnnotationActive = (\n    editor: PortableTextEditor,\n    annotationType: PortableTextObject['_type'],\n  ): boolean => {\n    return editor && editor.editable\n      ? editor.editable.isAnnotationActive(annotationType)\n      : false\n  }\n  static addAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): AddedAnnotationPaths | undefined =>\n    editor.editable?.addAnnotation(type, value)\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions,\n  ) => editor.editable?.delete(selection, options)\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.findDOMNode(element)\n  }\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n  static focusChild = (\n    editor: PortableTextEditor,\n  ): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n  static insertChild = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n  static insertBlock = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n  static isVoid = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.isVoid(element)\n  }\n  static isObjectPath = (_editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n  static select = (\n    editor: PortableTextEditor,\n    selection: EditorSelection | null,\n  ) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n  static removeAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n  ) => editor.editable?.removeAnnotation(type)\n  static toggleBlockStyle = (\n    editor: PortableTextEditor,\n    blockStyle: string,\n  ) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n  static getFragment = (\n    editor: PortableTextEditor,\n  ): PortableTextBlock[] | undefined => {\n    debug(`Host getting fragment`)\n    return editor.editable?.getFragment()\n  }\n  static undo = (editor: PortableTextEditor): void => {\n    debug('Host undoing')\n    editor.editable?.undo()\n  }\n  static redo = (editor: PortableTextEditor): void => {\n    debug('Host redoing')\n    editor.editable?.redo()\n  }\n  static isSelectionsOverlapping = (\n    editor: PortableTextEditor,\n    selectionA: EditorSelection,\n    selectionB: EditorSelection,\n  ) => {\n    return editor.editable?.isSelectionsOverlapping(selectionA, selectionB)\n  }\n}\n\nfunction RoutePatchesObservableToEditorActor(props: {\n  editorActor: EditorActor\n  patches$: PatchObservable\n}) {\n  useEffect(() => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: 'patches',\n        ...payload,\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, props.patches$])\n\n  return null\n}\n\nexport function RouteEventsToChanges(props: {\n  editorActor: EditorActor\n  onChange: (change: EditorChange) => void\n}) {\n  // We want to ensure that _when_ `props.onChange` is called, it uses the current value.\n  // But we don't want to have the `useEffect` run setup + teardown + setup every time the prop might change, as that's unnecessary.\n  // So we use our own polyfill that lets us use an upcoming React hook that solves this exact problem.\n  // https://19.react.dev/learn/separating-events-from-effects#declaring-an-effect-event\n  const handleChange = useEffectEvent((change: EditorChange) =>\n    props.onChange(change),\n  )\n\n  useEffect(() => {\n    debug('Subscribing to editor changes')\n    const sub = props.editorActor.on('*', (event) => {\n      switch (event.type) {\n        case 'patch':\n          handleChange(event)\n          break\n        case 'loading': {\n          handleChange({type: 'loading', isLoading: true})\n          break\n        }\n        case 'done loading': {\n          handleChange({type: 'loading', isLoading: false})\n          break\n        }\n        case 'focused': {\n          handleChange({type: 'focus', event: event.event})\n          break\n        }\n        case 'value changed': {\n          handleChange({type: 'value', value: event.value})\n          break\n        }\n        case 'invalid value': {\n          handleChange({\n            type: 'invalidValue',\n            resolution: event.resolution,\n            value: event.value,\n          })\n          break\n        }\n        case 'error': {\n          handleChange({\n            ...event,\n            level: 'warning',\n          })\n          break\n        }\n        case 'annotation.add':\n        case 'annotation.remove':\n        case 'annotation.toggle':\n        case 'focus':\n        case 'patches':\n        case 'readOnly toggled':\n          break\n        default:\n          handleChange(event)\n      }\n    })\n    return () => {\n      debug('Unsubscribing to changes')\n      sub.unsubscribe()\n    }\n  }, [props.editorActor, handleChange])\n\n  return null\n}\n","import type {\n  Path,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type ReactElement,\n} from 'react'\nimport {Text} from 'slate'\nimport {useSelected, type RenderLeafProps} from 'slate-react'\nimport type {\n  BlockAnnotationRenderProps,\n  BlockChildRenderProps,\n  BlockDecoratorRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\nimport {usePortableTextEditor} from '../hooks/usePortableTextEditor'\nimport {DefaultAnnotation} from '../nodes/DefaultAnnotation'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('components:Leaf')\n\nconst EMPTY_MARKS: string[] = []\n\n/**\n * @internal\n */\nexport interface LeafProps extends RenderLeafProps {\n  editorActor: EditorActor\n  children: ReactElement\n  schemaTypes: PortableTextMemberSchemaTypes\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\n/**\n * Renders Portable Text span nodes in Slate\n * @internal\n */\nexport const Leaf = (props: LeafProps) => {\n  const {\n    editorActor,\n    attributes,\n    children,\n    leaf,\n    schemaTypes,\n    renderChild,\n    renderDecorator,\n    renderAnnotation,\n  } = props\n  const spanRef = useRef<HTMLElement>(null)\n  const portableTextEditor = usePortableTextEditor()\n  const blockSelected = useSelected()\n  const [focused, setFocused] = useState(false)\n  const [selected, setSelected] = useState(false)\n  const block = children.props.parent as PortableTextTextBlock | undefined\n  const path: Path = useMemo(\n    () => (block ? [{_key: block?._key}, 'children', {_key: leaf._key}] : []),\n    [block, leaf._key],\n  )\n  const decoratorValues = useMemo(\n    () => schemaTypes.decorators.map((dec) => dec.value),\n    [schemaTypes.decorators],\n  )\n  const marks: string[] = useMemo(\n    () =>\n      uniq(\n        (leaf.marks || EMPTY_MARKS).filter((mark) =>\n          decoratorValues.includes(mark),\n        ),\n      ),\n    [decoratorValues, leaf.marks],\n  )\n  const annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : EMPTY_MARKS\n  const annotations = useMemo(\n    () =>\n      annotationMarks\n        .map(\n          (mark) =>\n            !decoratorValues.includes(mark) &&\n            block?.markDefs?.find((def) => def._key === mark),\n        )\n        .filter(Boolean) as PortableTextObject[],\n    [annotationMarks, block, decoratorValues],\n  )\n\n  const shouldTrackSelectionAndFocus = annotations.length > 0 && blockSelected\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(false)\n      return\n    }\n    const sel = PortableTextEditor.getSelection(portableTextEditor)\n    if (\n      sel &&\n      isEqual(sel.focus.path, path) &&\n      PortableTextEditor.isCollapsedSelection(portableTextEditor)\n    ) {\n      startTransition(() => {\n        setFocused(true)\n      })\n    }\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor])\n\n  // Function to check if this leaf is currently inside the user's text selection\n  const setSelectedFromRange = useCallback(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return\n    }\n    debug('Setting selection and focus from range')\n    const winSelection = window.getSelection()\n    if (!winSelection) {\n      setSelected(false)\n      return\n    }\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0)\n      if (spanRef.current && range.intersectsNode(spanRef.current)) {\n        setSelected(true)\n      } else {\n        setSelected(false)\n      }\n    } else {\n      setSelected(false)\n    }\n  }, [shouldTrackSelectionAndFocus])\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return undefined\n    }\n\n    const onBlur = editorActor.on('blur', () => {\n      setFocused(false)\n      setSelected(false)\n    })\n\n    const onFocus = editorActor.on('focus', () => {\n      const sel = PortableTextEditor.getSelection(portableTextEditor)\n      if (\n        sel &&\n        isEqual(sel.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      }\n      setSelectedFromRange()\n    })\n\n    const onSelection = editorActor.on('selection', (event) => {\n      if (\n        event.selection &&\n        isEqual(event.selection.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      } else {\n        setFocused(false)\n      }\n      setSelectedFromRange()\n    })\n\n    return () => {\n      onBlur.unsubscribe()\n      onFocus.unsubscribe()\n      onSelection.unsubscribe()\n    }\n  }, [\n    editorActor,\n    path,\n    portableTextEditor,\n    setSelectedFromRange,\n    shouldTrackSelectionAndFocus,\n  ])\n\n  useEffect(() => setSelectedFromRange(), [setSelectedFromRange])\n\n  const content = useMemo(() => {\n    let returnedChildren = children\n    // Render text nodes\n    if (Text.isText(leaf) && leaf._type === schemaTypes.span.name) {\n      marks.forEach((mark) => {\n        const schemaType = schemaTypes.decorators.find(\n          (dec) => dec.value === mark,\n        )\n        if (schemaType && renderDecorator) {\n          const _props: Omit<BlockDecoratorRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                children: returnedChildren,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                selected,\n                schemaType,\n                value: mark,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaType\n                },\n              },\n            )\n          returnedChildren = renderDecorator(\n            _props as BlockDecoratorRenderProps,\n          )\n        }\n      })\n\n      if (block && annotations.length > 0) {\n        annotations.forEach((annotation) => {\n          const schemaType = schemaTypes.annotations.find(\n            (t) => t.name === annotation._type,\n          )\n          if (schemaType) {\n            if (renderAnnotation) {\n              const _props: Omit<BlockAnnotationRenderProps, 'type'> =\n                Object.defineProperty(\n                  {\n                    block,\n                    children: returnedChildren,\n                    editorElementRef: spanRef,\n                    focused,\n                    path,\n                    selected,\n                    schemaType,\n                    value: annotation,\n                  },\n                  'type',\n                  {\n                    enumerable: false,\n                    get() {\n                      console.warn(\n                        \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                      )\n                      return schemaType\n                    },\n                  },\n                )\n\n              returnedChildren = (\n                <span ref={spanRef}>\n                  {renderAnnotation(_props as BlockAnnotationRenderProps)}\n                </span>\n              )\n            } else {\n              returnedChildren = (\n                <DefaultAnnotation annotation={annotation}>\n                  <span ref={spanRef}>{returnedChildren}</span>\n                </DefaultAnnotation>\n              )\n            }\n          }\n        })\n      }\n      if (block && renderChild) {\n        const child = block.children.find((_child) => _child._key === leaf._key) // Ensure object equality\n        if (child) {\n          const defaultRendered = <>{returnedChildren}</>\n          const _props: Omit<BlockChildRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                annotations,\n                children: defaultRendered,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                schemaType: schemaTypes.span,\n                selected,\n                value: child,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaTypes.span\n                },\n              },\n            )\n          returnedChildren = renderChild(_props as BlockChildRenderProps)\n        }\n      }\n    }\n    return returnedChildren\n  }, [\n    annotations,\n    block,\n    children,\n    focused,\n    leaf,\n    marks,\n    path,\n    renderAnnotation,\n    renderChild,\n    renderDecorator,\n    schemaTypes.annotations,\n    schemaTypes.decorators,\n    schemaTypes.span,\n    selected,\n  ])\n  return useMemo(\n    () => (\n      <span key={leaf._key} {...attributes} ref={spanRef}>\n        {content}\n      </span>\n    ),\n    [leaf, attributes, content],\n  )\n}\n\nLeaf.displayName = 'Leaf'\n","export interface KeyboardEventLike {\n  key: string\n  keyCode: number\n  altKey: boolean\n  ctrlKey: boolean\n  metaKey: boolean\n  shiftKey: boolean\n}\n\ninterface HotKey {\n  keyCode?: number | undefined\n  key?: string | undefined\n  altKey: boolean | null\n  ctrlKey: boolean | null\n  metaKey: boolean | null\n  shiftKey: boolean | null\n}\n\nconst IS_MAC =\n  typeof window !== 'undefined' &&\n  /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent)\n\ntype Modifier = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n\nconst modifiers: Record<string, Modifier | undefined> = {\n  alt: 'altKey',\n  control: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey',\n}\n\nconst aliases: Record<string, string | undefined> = {\n  add: '+',\n  break: 'pause',\n  cmd: 'meta',\n  command: 'meta',\n  ctl: 'control',\n  ctrl: 'control',\n  del: 'delete',\n  down: 'arrowdown',\n  esc: 'escape',\n  ins: 'insert',\n  left: 'arrowleft',\n  mod: IS_MAC ? 'meta' : 'control',\n  opt: 'alt',\n  option: 'alt',\n  return: 'enter',\n  right: 'arrowright',\n  space: ' ',\n  spacebar: ' ',\n  up: 'arrowup',\n  win: 'meta',\n  windows: 'meta',\n}\n\nconst keyCodes: Record<string, number | undefined> = {\n  'backspace': 8,\n  'tab': 9,\n  'enter': 13,\n  'shift': 16,\n  'control': 17,\n  'alt': 18,\n  'pause': 19,\n  'capslock': 20,\n  'escape': 27,\n  ' ': 32,\n  'pageup': 33,\n  'pagedown': 34,\n  'end': 35,\n  'home': 36,\n  'arrowleft': 37,\n  'arrowup': 38,\n  'arrowright': 39,\n  'arrowdown': 40,\n  'insert': 45,\n  'delete': 46,\n  'meta': 91,\n  'numlock': 144,\n  'scrolllock': 145,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  \"'\": 222,\n  'f1': 112,\n  'f2': 113,\n  'f3': 114,\n  'f4': 115,\n  'f5': 116,\n  'f6': 117,\n  'f7': 118,\n  'f8': 119,\n  'f9': 120,\n  'f10': 121,\n  'f11': 122,\n  'f12': 123,\n  'f13': 124,\n  'f14': 125,\n  'f15': 126,\n  'f16': 127,\n  'f17': 128,\n  'f18': 129,\n  'f19': 130,\n  'f20': 131,\n}\n\nexport function isHotkey(hotkey: string, event: KeyboardEventLike): boolean {\n  return compareHotkey(parseHotkey(hotkey), event)\n}\n\nfunction parseHotkey(hotkey: string): HotKey {\n  // Ensure that all the modifiers are set to false unless the hotkey has them.\n  const parsedHotkey: HotKey = {\n    altKey: false,\n    ctrlKey: false,\n    metaKey: false,\n    shiftKey: false,\n  }\n\n  // Special case to handle the `+` key since we use it as a separator.\n  const hotkeySegments = hotkey.replace('++', '+add').split('+')\n\n  for (const rawHotkeySegment of hotkeySegments) {\n    const optional =\n      rawHotkeySegment.endsWith('?') && rawHotkeySegment.length > 1\n    const hotkeySegment = optional\n      ? rawHotkeySegment.slice(0, -1)\n      : rawHotkeySegment\n    const keyName = toKeyName(hotkeySegment)\n    const modifier = modifiers[keyName]\n    const alias = aliases[hotkeySegment]\n    const code = keyCodes[keyName]\n\n    if (\n      hotkeySegment.length > 1 &&\n      modifier === undefined &&\n      alias === undefined &&\n      code === undefined\n    ) {\n      throw new TypeError(`Unknown modifier: \"${hotkeySegment}\"`)\n    }\n\n    if (hotkeySegments.length === 1 || modifier === undefined) {\n      parsedHotkey.key = keyName\n      parsedHotkey.keyCode = toKeyCode(hotkeySegment)\n    }\n\n    if (modifier !== undefined) {\n      parsedHotkey[modifier] = optional ? null : true\n    }\n  }\n\n  return parsedHotkey\n}\n\nfunction compareHotkey(\n  parsedHotkey: HotKey,\n  event: KeyboardEventLike,\n): boolean {\n  const matchingModifiers =\n    (parsedHotkey.altKey != null\n      ? parsedHotkey.altKey === event.altKey\n      : true) &&\n    (parsedHotkey.ctrlKey != null\n      ? parsedHotkey.ctrlKey === event.ctrlKey\n      : true) &&\n    (parsedHotkey.metaKey != null\n      ? parsedHotkey.metaKey === event.metaKey\n      : true) &&\n    (parsedHotkey.shiftKey != null\n      ? parsedHotkey.shiftKey === event.shiftKey\n      : true)\n\n  if (!matchingModifiers) {\n    return false\n  }\n\n  if (parsedHotkey.keyCode !== undefined && event.keyCode !== undefined) {\n    if (parsedHotkey.keyCode === 91 && event.keyCode === 93) {\n      return true\n    }\n\n    return parsedHotkey.keyCode === event.keyCode\n  }\n\n  return (\n    parsedHotkey.keyCode === event.keyCode ||\n    parsedHotkey.key === event.key.toLowerCase()\n  )\n}\n\nfunction toKeyCode(name: string): number {\n  const keyName = toKeyName(name)\n  const keyCode = keyCodes[keyName] ?? keyName.toUpperCase().charCodeAt(0)\n\n  return keyCode\n}\n\nfunction toKeyName(name: string): string {\n  const keyName = name.toLowerCase()\n\n  return aliases[keyName] ?? keyName\n}\n","import {isPortableTextSpan, isPortableTextTextBlock} from '@sanity/types'\nimport type {KeyboardEvent} from 'react'\nimport {Editor, Node, Path, Range, Transforms} from 'slate'\nimport type {ReactEditor} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {HotkeyOptions} from '../../types/options'\nimport type {SlateTextBlock, VoidElement} from '../../types/slate'\nimport {debugWithName} from '../../utils/debug'\nimport {isHotkey} from '../../utils/is-hotkey'\nimport type {EditorActor} from '../editor-machine'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\nconst DEFAULT_HOTKEYS: HotkeyOptions = {\n  marks: {\n    'mod+b': 'strong',\n    'mod+i': 'em',\n    'mod+u': 'underline',\n    \"mod+'\": 'code',\n  },\n  custom: {},\n}\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  editorActor: EditorActor,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions,\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions || DEFAULT_HOTKEYS // TODO: Merge where possible? A union?\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editorActor.send({\n                  type: 'behavior event',\n                  behaviorEvent: {\n                    type: 'decorator.toggle',\n                    decorator: mark,\n                  },\n                  editor,\n                })\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n\n      const isEnter = isHotkey('enter', event.nativeEvent)\n      const isTab = isHotkey('tab', event.nativeEvent)\n      const isShiftEnter = isHotkey('shift+enter', event.nativeEvent)\n      const isShiftTab = isHotkey('shift+tab', event.nativeEvent)\n      const isArrowDown = isHotkey('down', event.nativeEvent)\n      const isArrowUp = isHotkey('up', event.nativeEvent)\n\n      // Check if the user is in a void block, in that case, add an empty text block below if there is no next block\n      if (isArrowDown && editor.selection) {\n        const focusBlock = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        ) as SlateTextBlock | VoidElement\n\n        if (focusBlock && Editor.isVoid(editor, focusBlock)) {\n          const nextPath = Path.next(editor.selection.focus.path.slice(0, 1))\n          const nextBlock = Node.has(editor, nextPath)\n          if (!nextBlock) {\n            Transforms.insertNodes(\n              editor,\n              editor.pteCreateTextBlock({decorators: []}),\n              {\n                at: nextPath,\n              },\n            )\n            Transforms.select(editor, {path: [...nextPath, 0], offset: 0})\n            editor.onChange()\n            return\n          }\n        }\n      }\n      if (isArrowUp && editor.selection) {\n        const isFirstBlock = editor.selection.focus.path[0] === 0\n        const focusBlock = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        ) as SlateTextBlock | VoidElement\n\n        if (isFirstBlock && focusBlock && Editor.isVoid(editor, focusBlock)) {\n          Transforms.insertNodes(\n            editor,\n            editor.pteCreateTextBlock({decorators: []}),\n            {\n              at: [0],\n            },\n          )\n          Transforms.select(editor, {path: [0, 0], offset: 0})\n          editor.onChange()\n          return\n        }\n      }\n\n      // Tab for lists\n      // Only steal tab when we are on a plain text span or we are at the start of the line (fallback if the whole block is annotated or contains a single inline object)\n      // Otherwise tab is reserved for accessability for buttons etc.\n      if ((isTab || isShiftTab) && editor.selection) {\n        const [focusChild] = Editor.node(editor, editor.selection.focus, {\n          depth: 2,\n        })\n        const [focusBlock] = isPortableTextSpan(focusChild)\n          ? Editor.node(editor, editor.selection.focus, {depth: 1})\n          : []\n        const hasAnnotationFocus =\n          focusChild &&\n          isPortableTextTextBlock(focusBlock) &&\n          isPortableTextSpan(focusChild) &&\n          (focusChild.marks || ([] as string[])).filter((m) =>\n            (focusBlock.markDefs || []).map((def) => def._key).includes(m),\n          ).length > 0\n        const [start] = Range.edges(editor.selection)\n        const atStartOfNode = Editor.isStart(editor, start, start.path)\n\n        if (\n          focusChild &&\n          isPortableTextSpan(focusChild) &&\n          (!hasAnnotationFocus || atStartOfNode) &&\n          editor.pteIncrementBlockLevels(isShiftTab)\n        ) {\n          event.preventDefault()\n        }\n      }\n\n      // Deal with enter key combos\n      if (isEnter && !isShiftEnter && editor.selection) {\n        const focusBlockPath = editor.selection.focus.path.slice(0, 1)\n        const focusBlock = Node.descendant(editor, focusBlockPath) as\n          | SlateTextBlock\n          | VoidElement\n\n        // List item enter key\n        if (editor.isListBlock(focusBlock)) {\n          if (editor.pteEndList()) {\n            event.preventDefault()\n          }\n          return\n        }\n      }\n    }\n    return editor\n  }\n}\n","import {htmlToBlocks, normalizeBlock} from '@sanity/block-tools'\nimport type {PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Range, Transforms, type Descendant, type Node} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {validateValue} from '../../utils/validateValue'\nimport {\n  fromSlateValue,\n  isEqualToEmptyEditor,\n  toSlateValue,\n} from '../../utils/values'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withInsertData')\n\n/**\n * This plugin handles copy/paste in the editor\n *\n */\nexport function createWithInsertData(\n  editorActor: EditorActor,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  return function withInsertData(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const blockTypeName = schemaTypes.block.name\n    const spanTypeName = schemaTypes.span.name\n    const whitespaceOnPasteMode =\n      schemaTypes.block.options.unstable_whitespaceOnPasteMode\n\n    const toPlainText = (blocks: PortableTextBlock[]) => {\n      return blocks\n        .map((block) => {\n          if (editor.isTextBlock(block)) {\n            return block.children\n              .map((child: PortableTextChild) => {\n                if (child._type === spanTypeName) {\n                  return child.text\n                }\n                return `[${\n                  schemaTypes.inlineObjects.find((t) => t.name === child._type)\n                    ?.title || 'Object'\n                }]`\n              })\n              .join('')\n          }\n          return `[${\n            schemaTypes.blockObjects.find((t) => t.name === block._type)\n              ?.title || 'Object'\n          }]`\n        })\n        .join('\\n\\n')\n    }\n\n    editor.setFragmentData = (data: DataTransfer, originEvent) => {\n      const {selection} = editor\n\n      if (!selection) {\n        return\n      }\n\n      const [start, end] = Range.edges(selection)\n      const startVoid = Editor.void(editor, {at: start.path})\n      const endVoid = Editor.void(editor, {at: end.path})\n\n      if (Range.isCollapsed(selection) && !startVoid) {\n        return\n      }\n\n      // Create a fake selection so that we can add a Base64-encoded copy of the\n      // fragment to the HTML, to decode on future pastes.\n      const domRange = ReactEditor.toDOMRange(editor, selection)\n      let contents = domRange.cloneContents()\n      // COMPAT: If the end node is a void node, we need to move the end of the\n      // range from the void node's spacer span, to the end of the void node's\n      // content, since the spacer is before void's content in the DOM.\n      if (endVoid) {\n        const [voidNode] = endVoid\n        const r = domRange.cloneRange()\n        const domNode = ReactEditor.toDOMNode(editor, voidNode)\n        r.setEndAfter(domNode)\n        contents = r.cloneContents()\n      }\n      // Remove any zero-width space spans from the cloned DOM so that they don't\n      // show up elsewhere when pasted.\n      Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach(\n        (zw) => {\n          const isNewline = zw.getAttribute('data-slate-zero-width') === 'n'\n          zw.textContent = isNewline ? '\\n' : ''\n        },\n      )\n      // Clean up the clipboard HTML for editor spesific attributes\n      Array.from(contents.querySelectorAll('*')).forEach((elm) => {\n        elm.removeAttribute('contentEditable')\n        elm.removeAttribute('data-slate-inline')\n        elm.removeAttribute('data-slate-leaf')\n        elm.removeAttribute('data-slate-node')\n        elm.removeAttribute('data-slate-spacer')\n        elm.removeAttribute('data-slate-string')\n        elm.removeAttribute('data-slate-zero-width')\n        elm.removeAttribute('draggable')\n        for (const key in elm.attributes) {\n          if (elm.hasAttribute(key)) {\n            elm.removeAttribute(key)\n          }\n        }\n      })\n      const div = contents.ownerDocument.createElement('div')\n      div.appendChild(contents)\n      div.setAttribute('hidden', 'true')\n      contents.ownerDocument.body.appendChild(div)\n      const asHTML = div.innerHTML\n      contents.ownerDocument.body.removeChild(div)\n      const fragment = editor.getFragment()\n      const portableText = fromSlateValue(fragment, blockTypeName)\n\n      const asJSON = JSON.stringify(portableText)\n      const asPlainText = toPlainText(portableText)\n      data.clearData()\n      data.setData('text/plain', asPlainText)\n      data.setData('text/html', asHTML)\n      data.setData('application/json', asJSON)\n      data.setData('application/x-portable-text', asJSON)\n      debug('text', asPlainText)\n      data.setData(\n        'application/x-portable-text-event-origin',\n        originEvent || 'external',\n      )\n      debug('Set fragment data', asJSON, asHTML)\n    }\n\n    editor.insertPortableTextData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const pText = data.getData('application/x-portable-text')\n      const origin = data.getData('application/x-portable-text-event-origin')\n      debug(`Inserting portable text from ${origin} event`, pText)\n      if (pText) {\n        const parsed = JSON.parse(pText) as PortableTextBlock[]\n        if (Array.isArray(parsed) && parsed.length > 0) {\n          const slateValue = _regenerateKeys(\n            editor,\n            toSlateValue(parsed, {schemaTypes}),\n            editorActor.getSnapshot().context.keyGenerator,\n            spanTypeName,\n            schemaTypes,\n          )\n          // Validate the result\n          const validation = validateValue(\n            parsed,\n            schemaTypes,\n            editorActor.getSnapshot().context.keyGenerator,\n          )\n          // Bail out if it's not valid\n          if (!validation.valid && !validation.resolution?.autoResolve) {\n            const errorDescription = `${validation.resolution?.description}`\n            editorActor.send({\n              type: 'error',\n              name: 'pasteError',\n              description: errorDescription,\n              data: validation,\n            })\n            debug('Invalid insert result', validation)\n            return false\n          }\n          _insertFragment(editor, slateValue, schemaTypes)\n          return true\n        }\n      }\n      return false\n    }\n\n    editor.insertTextOrHTMLData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        debug('No selection, not inserting')\n        return false\n      }\n      const html = data.getData('text/html')\n      const text = data.getData('text/plain')\n\n      if (html || text) {\n        debug('Inserting data', data)\n        let portableText: PortableTextBlock[]\n        let fragment: Node[]\n        let insertedType: string | undefined\n\n        if (html) {\n          portableText = htmlToBlocks(html, schemaTypes.portableText, {\n            unstable_whitespaceOnPasteMode: whitespaceOnPasteMode,\n          }).map((block) =>\n            normalizeBlock(block, {blockTypeName}),\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {schemaTypes})\n          insertedType = 'HTML'\n\n          if (portableText.length === 0) {\n            return false\n          }\n        } else {\n          // plain text\n          const blocks = escapeHtml(text)\n            .split(/\\n{2,}/)\n            .map((line) =>\n              line\n                ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>`\n                : '<p></p>',\n            )\n            .join('')\n          const textToHtml = `<html><body>${blocks}</body></html>`\n          portableText = htmlToBlocks(textToHtml, schemaTypes.portableText).map(\n            (block) => normalizeBlock(block, {blockTypeName}),\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {\n            schemaTypes,\n          })\n          insertedType = 'text'\n        }\n\n        // Validate the result\n        const validation = validateValue(\n          portableText,\n          schemaTypes,\n          editorActor.getSnapshot().context.keyGenerator,\n        )\n\n        // Bail out if it's not valid\n        if (!validation.valid) {\n          const errorDescription = `Could not validate the resulting portable text to insert.\\n${validation.resolution?.description}\\nTry to insert as plain text (shift-paste) instead.`\n          editorActor.send({\n            type: 'error',\n            name: 'pasteError',\n            description: errorDescription,\n            data: validation,\n          })\n          debug('Invalid insert result', validation)\n          return false\n        }\n        debug(\n          `Inserting ${insertedType} fragment at ${JSON.stringify(editor.selection)}`,\n        )\n        _insertFragment(editor, fragment, schemaTypes)\n        return true\n      }\n      return false\n    }\n\n    editor.insertData = (data: DataTransfer) => {\n      if (!editor.insertPortableTextData(data)) {\n        editor.insertTextOrHTMLData(data)\n      }\n    }\n\n    editor.insertFragmentData = (data: DataTransfer): boolean => {\n      const fragment = data.getData('application/x-portable-text')\n      if (fragment) {\n        const parsed = JSON.parse(fragment)\n        editor.insertFragment(parsed)\n        return true\n      }\n      return false\n    }\n\n    return editor\n  }\n}\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n\n/**\n * Shared helper function to regenerate the keys on a fragment.\n *\n * @internal\n */\nfunction _regenerateKeys(\n  editor: Pick<PortableTextSlateEditor, 'isTextBlock' | 'isTextSpan'>,\n  fragment: Descendant[],\n  keyGenerator: () => string,\n  spanTypeName: string,\n  editorTypes: Pick<PortableTextMemberSchemaTypes, 'annotations'>,\n): Descendant[] {\n  return fragment.map((node) => {\n    const newNode: Descendant = {...node}\n    // Ensure the copy has new keys\n    if (editor.isTextBlock(newNode)) {\n      const annotations = editorTypes.annotations.map((t) => t.name)\n\n      // Ensure that if there are no annotations, we remove the markDefs\n      if (annotations.length === 0) {\n        const {markDefs, ...NewNodeNoDefs} = newNode\n\n        return {...NewNodeNoDefs, _key: keyGenerator()}\n      }\n\n      // Ensure that all annotations are allowed\n      const hasForbiddenAnnotations = (newNode.markDefs || []).some((def) => {\n        return !annotations.includes(def._type)\n      })\n\n      // if they have forbidden annotations, we remove them and keep the rest\n      if (hasForbiddenAnnotations) {\n        const allowedAnnotations = (newNode.markDefs || []).filter((def) => {\n          return annotations.includes(def._type)\n        })\n\n        return {...newNode, markDefs: allowedAnnotations, _key: keyGenerator()}\n      }\n\n      newNode.markDefs = (newNode.markDefs || []).map((def) => {\n        const oldKey = def._key\n        const newKey = keyGenerator()\n        newNode.children = newNode.children.map((child) =>\n          child._type === spanTypeName && editor.isTextSpan(child)\n            ? {\n                ...child,\n                marks:\n                  child.marks && child.marks.includes(oldKey)\n                    ? [...child.marks]\n                        .filter((mark) => mark !== oldKey)\n                        .concat(newKey)\n                    : child.marks,\n              }\n            : child,\n        )\n        return {...def, _key: newKey}\n      })\n    }\n    const nodeWithNewKeys = {...newNode, _key: keyGenerator()}\n    if (editor.isTextBlock(nodeWithNewKeys)) {\n      nodeWithNewKeys.children = nodeWithNewKeys.children.map((child) => ({\n        ...child,\n        _key: keyGenerator(),\n      }))\n    }\n    return nodeWithNewKeys as Descendant\n  })\n}\n\n/**\n * Shared helper function to insert the final fragment into the editor\n *\n * @internal\n */\nfunction _insertFragment(\n  editor: PortableTextSlateEditor,\n  fragment: Descendant[],\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  editor.withoutNormalizing(() => {\n    if (!editor.selection) {\n      return\n    }\n    // Ensure that markDefs for any annotations inside this fragment are copied over to the focused text block.\n    const [focusBlock, focusPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n    if (editor.isTextBlock(focusBlock) && editor.isTextBlock(fragment[0])) {\n      const {markDefs} = focusBlock\n      debug(\n        'Mixing markDefs of focusBlock and fragments[0] block',\n        markDefs,\n        fragment[0].markDefs,\n      )\n      if (!isEqual(markDefs, fragment[0].markDefs)) {\n        Transforms.setNodes(\n          editor,\n          {\n            markDefs: uniq([\n              ...(fragment[0].markDefs || []),\n              ...(markDefs || []),\n            ]),\n          },\n          {at: focusPath, mode: 'lowest', voids: false},\n        )\n      }\n    }\n\n    const isPasteToEmptyEditor = isEqualToEmptyEditor(\n      editor.children,\n      schemaTypes,\n    )\n\n    if (isPasteToEmptyEditor) {\n      // Special case for pasting directly into an empty editor (a placeholder block).\n      // When pasting content starting with multiple empty blocks,\n      // `editor.insertFragment` can potentially duplicate the keys of\n      // the placeholder block because of operations that happen\n      // inside `editor.insertFragment` (involves an `insert_node` operation).\n      // However by splitting the placeholder block first in this situation we are good.\n      Transforms.splitNodes(editor, {at: [0, 0]})\n      editor.insertFragment(fragment)\n      Transforms.removeNodes(editor, {at: [0]})\n    } else {\n      // All other inserts\n      editor.insertFragment(fragment)\n    }\n  })\n\n  editor.onChange()\n}\n\n/**\n * functions we don't want to export but want to test\n * @internal\n */\nexport const exportedForTesting = {\n  _regenerateKeys,\n}\n","import type {BaseEditor, Operation} from 'slate'\nimport type {ReactEditor} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\n// React Compiler considers `slateEditor` as immutable, and opts-out if we do this inline in a useEffect, doing it in a function moves it out of the scope, and opts-in again for the rest of the component.\nexport function withSyncRangeDecorations(\n  slateEditor: BaseEditor & ReactEditor & PortableTextSlateEditor,\n  syncRangeDecorations: (operation?: Operation) => void,\n) {\n  const originalApply = slateEditor.apply\n  slateEditor.apply = (op: Operation) => {\n    originalApply(op)\n    if (op.type !== 'set_selection') {\n      syncRangeDecorations(op)\n    }\n  }\n  return () => {\n    slateEditor.apply = originalApply\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport {useSelector} from '@xstate/react'\nimport {isEqual, noop} from 'lodash'\nimport {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n  type ClipboardEvent,\n  type CSSProperties,\n  type FocusEventHandler,\n  type KeyboardEvent,\n  type MutableRefObject,\n  type TextareaHTMLAttributes,\n} from 'react'\nimport {\n  Editor,\n  Node,\n  Path,\n  Range as SlateRange,\n  Transforms,\n  type BaseRange,\n  type NodeEntry,\n  type Operation,\n  type Text,\n} from 'slate'\nimport {\n  ReactEditor,\n  Editable as SlateEditable,\n  useSlate,\n  type RenderElementProps,\n  type RenderLeafProps,\n} from 'slate-react'\nimport type {\n  EditorSelection,\n  OnCopyFn,\n  OnPasteFn,\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderPlaceholderFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport type {HotkeyOptions} from '../types/options'\nimport type {SlateTextBlock, VoidElement} from '../types/slate'\nimport {debugWithName} from '../utils/debug'\nimport {\n  moveRangeByOperation,\n  toPortableTextRange,\n  toSlateRange,\n} from '../utils/ranges'\nimport {normalizeSelection} from '../utils/selection'\nimport {\n  fromSlateValue,\n  isEqualToEmptyEditor,\n  toSlateValue,\n} from '../utils/values'\nimport {Element} from './components/Element'\nimport {Leaf} from './components/Leaf'\nimport {EditorActorContext} from './editor-actor-context'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {createWithHotkeys} from './plugins/createWithHotKeys'\nimport {createWithInsertData} from './plugins/createWithInsertData'\nimport {PortableTextEditor} from './PortableTextEditor'\nimport {withSyncRangeDecorations} from './withSyncRangeDecorations'\n\nconst debug = debugWithName('component:Editable')\n\nconst PLACEHOLDER_STYLE: CSSProperties = {\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n  left: 0,\n  right: 0,\n}\n\ninterface BaseRangeWithDecoration extends BaseRange {\n  rangeDecoration: RangeDecoration\n}\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = Omit<\n  TextareaHTMLAttributes<HTMLDivElement>,\n  'onPaste' | 'onCopy' | 'onBeforeInput'\n> & {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: (event: InputEvent) => void\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  ref: MutableRefObject<HTMLDivElement | null>\n  rangeDecorations?: RangeDecoration[]\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: RenderPlaceholderFunction\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n */\nexport const PortableTextEditable = forwardRef<\n  Omit<HTMLDivElement, 'as' | 'onPaste' | 'onBeforeInput'>,\n  PortableTextEditableProps\n>(function PortableTextEditable(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onClick,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const ref = useRef<HTMLDivElement | null>(null)\n  const [editableElement, setEditableElement] = useState<HTMLDivElement | null>(\n    null,\n  )\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n  const [rangeDecorationState, setRangeDecorationsState] = useState<\n    BaseRangeWithDecoration[]\n  >([])\n\n  // Forward ref to parent component\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(\n    forwardedRef,\n    () => ref.current,\n  )\n\n  const rangeDecorationsRef = useRef(rangeDecorations)\n\n  const editorActor = useContext(EditorActorContext)\n  const readOnly = useSelector(editorActor, (s) => s.context.readOnly)\n  const schemaTypes = useSelector(editorActor, (s) => s.context.schema)\n  const slateEditor = useSlate()\n\n  const blockTypeName = schemaTypes.block.name\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    // React/UI-specific plugins\n    const withInsertData = createWithInsertData(editorActor, schemaTypes)\n\n    if (readOnly) {\n      debug('Editable is in read only mode')\n      return withInsertData(slateEditor)\n    }\n    const withHotKeys = createWithHotkeys(\n      editorActor,\n      portableTextEditor,\n      hotkeys,\n    )\n\n    debug('Editable is in edit mode')\n    return withInsertData(withHotKeys(slateEditor))\n  }, [\n    editorActor,\n    hotkeys,\n    portableTextEditor,\n    readOnly,\n    schemaTypes,\n    slateEditor,\n  ])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <Element\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        schemaTypes={schemaTypes}\n        spellCheck={spellCheck}\n      />\n    ),\n    [\n      schemaTypes,\n      spellCheck,\n      readOnly,\n      renderBlock,\n      renderChild,\n      renderListItem,\n      renderStyle,\n    ],\n  )\n\n  const renderLeaf = useCallback(\n    (\n      lProps: RenderLeafProps & {\n        leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n      },\n    ) => {\n      if (lProps.leaf._type === 'span') {\n        let rendered = (\n          <Leaf\n            {...lProps}\n            editorActor={editorActor}\n            schemaTypes={schemaTypes}\n            renderAnnotation={renderAnnotation}\n            renderChild={renderChild}\n            renderDecorator={renderDecorator}\n            readOnly={readOnly}\n          />\n        )\n        if (\n          renderPlaceholder &&\n          lProps.leaf.placeholder &&\n          lProps.text.text === ''\n        ) {\n          return (\n            <>\n              <span style={PLACEHOLDER_STYLE} contentEditable={false}>\n                {renderPlaceholder()}\n              </span>\n              {rendered}\n            </>\n          )\n        }\n        const decoration = lProps.leaf.rangeDecoration\n        if (decoration) {\n          rendered = decoration.component({children: rendered})\n        }\n        return rendered\n      }\n      return lProps.children\n    },\n    [\n      editorActor,\n      readOnly,\n      renderAnnotation,\n      renderChild,\n      renderDecorator,\n      renderPlaceholder,\n      schemaTypes,\n    ],\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(slateEditor.children, blockTypeName),\n      )\n      if (normalizedSelection !== null) {\n        debug(\n          `Normalized selection from props ${JSON.stringify(normalizedSelection)}`,\n        )\n        const slateRange = toSlateRange(normalizedSelection, slateEditor)\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            editorActor.send({\n              type: 'selection',\n              selection: normalizedSelection,\n            })\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [blockTypeName, editorActor, propsSelection, slateEditor])\n\n  const syncRangeDecorations = useCallback(\n    (operation?: Operation) => {\n      if (rangeDecorations && rangeDecorations.length > 0) {\n        const newSlateRanges: BaseRangeWithDecoration[] = []\n        rangeDecorations.forEach((rangeDecorationItem) => {\n          const slateRange = toSlateRange(\n            rangeDecorationItem.selection,\n            slateEditor,\n          )\n          if (!SlateRange.isRange(slateRange)) {\n            if (rangeDecorationItem.onMoved) {\n              rangeDecorationItem.onMoved({\n                newSelection: null,\n                rangeDecoration: rangeDecorationItem,\n                origin: 'local',\n              })\n            }\n            return\n          }\n          let newRange: BaseRange | null | undefined\n          if (operation) {\n            newRange = moveRangeByOperation(slateRange, operation)\n            if (\n              (newRange && newRange !== slateRange) ||\n              (newRange === null && slateRange)\n            ) {\n              const value = PortableTextEditor.getValue(portableTextEditor)\n              const newRangeSelection = toPortableTextRange(\n                value,\n                newRange,\n                schemaTypes,\n              )\n              if (rangeDecorationItem.onMoved) {\n                rangeDecorationItem.onMoved({\n                  newSelection: newRangeSelection,\n                  rangeDecoration: rangeDecorationItem,\n                  origin: 'local',\n                })\n              }\n            }\n          }\n          // If the newRange is null, it means that the range is not valid anymore and should be removed\n          // If it's undefined, it means that the slateRange is still valid and should be kept\n          if (newRange !== null) {\n            newSlateRanges.push({\n              ...(newRange || slateRange),\n              rangeDecoration: rangeDecorationItem,\n            })\n          }\n        })\n        if (newSlateRanges.length > 0) {\n          setRangeDecorationsState(newSlateRanges)\n          return\n        }\n      }\n      setRangeDecorationsState((rangeDecorationState) => {\n        // If there's state then we want to reset\n        if (rangeDecorationState.length > 0) {\n          return []\n        }\n        // Otherwise we no-op, React will skip a state update if what we return has reference equality to the previous state\n        return rangeDecorationState\n      })\n    },\n    [portableTextEditor, rangeDecorations, schemaTypes, slateEditor],\n  )\n\n  // Restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    const onReady = editorActor.on('ready', () => {\n      restoreSelectionFromProps()\n    })\n    const onInvalidValue = editorActor.on('invalid value', () => {\n      setHasInvalidValue(true)\n    })\n    const onValueChanged = editorActor.on('value changed', () => {\n      setHasInvalidValue(false)\n    })\n\n    return () => {\n      onReady.unsubscribe()\n      onInvalidValue.unsubscribe()\n      onValueChanged.unsubscribe()\n    }\n  }, [editorActor, restoreSelectionFromProps])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  const [syncedRangeDecorations, setSyncedRangeDecorations] = useState(false)\n  useEffect(() => {\n    if (!syncedRangeDecorations) {\n      // We only want this to run once, on mount\n      setSyncedRangeDecorations(true)\n      syncRangeDecorations()\n    }\n  }, [syncRangeDecorations, syncedRangeDecorations])\n\n  useEffect(() => {\n    if (!isEqual(rangeDecorations, rangeDecorationsRef.current)) {\n      syncRangeDecorations()\n    }\n    rangeDecorationsRef.current = rangeDecorations\n  }, [rangeDecorations, syncRangeDecorations])\n\n  // Sync range decorations after an operation is applied\n  useEffect(() => {\n    const teardown = withSyncRangeDecorations(slateEditor, syncRangeDecorations)\n    return () => teardown()\n  }, [slateEditor, syncRangeDecorations])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      }\n    },\n    [onCopy],\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      const value = PortableTextEditor.getValue(portableTextEditor)\n      const ptRange = toPortableTextRange(\n        value,\n        slateEditor.selection,\n        schemaTypes,\n      )\n      const path = ptRange?.focus.path || []\n      const onPasteResult = onPaste?.({event, value, path, schemaTypes})\n\n      if (onPasteResult || !slateEditor.selection) {\n        event.preventDefault()\n\n        // Resolve it as promise (can be either async promise or sync return value)\n        editorActor.send({type: 'loading'})\n\n        Promise.resolve(onPasteResult)\n          .then((result) => {\n            debug('Custom paste function from client resolved', result)\n\n            if (!result || !result.insert) {\n              debug('No result from custom paste handler, pasting normally')\n\n              slateEditor.insertData(event.clipboardData)\n            } else if (result.insert) {\n              slateEditor.insertFragment(\n                toSlateValue(result.insert as PortableTextBlock[], {\n                  schemaTypes,\n                }),\n              )\n            } else {\n              console.warn(\n                'Your onPaste function returned something unexpected:',\n                result,\n              )\n            }\n          })\n          .catch((error) => {\n            console.error(error)\n\n            return error\n          })\n          .finally(() => {\n            editorActor.send({type: 'done loading'})\n          })\n      } else if (event.nativeEvent.clipboardData) {\n        event.preventDefault()\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'paste',\n            clipboardData: event.nativeEvent.clipboardData,\n          },\n          editor: slateEditor,\n        })\n      }\n\n      debug('No result from custom paste handler, pasting normally')\n    },\n    [editorActor, onPaste, portableTextEditor, schemaTypes, slateEditor],\n  )\n\n  const handleOnFocus: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onFocus) {\n        onFocus(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        const selection = PortableTextEditor.getSelection(portableTextEditor)\n        // Create an editor selection if it does'nt exist\n        if (selection === null) {\n          Transforms.select(slateEditor, Editor.start(slateEditor, []))\n          slateEditor.onChange()\n        }\n        editorActor.send({type: 'focused', event})\n        const newSelection = PortableTextEditor.getSelection(portableTextEditor)\n        // If the selection is the same, emit it explicitly here as there is no actual onChange event triggered.\n        if (selection === newSelection) {\n          editorActor.send({\n            type: 'selection',\n            selection,\n          })\n        }\n      }\n    },\n    [editorActor, onFocus, portableTextEditor, slateEditor],\n  )\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (onClick) {\n        onClick(event)\n      }\n\n      const focusBlockPath = slateEditor.selection\n        ? slateEditor.selection.focus.path.slice(0, 1)\n        : undefined\n      const focusBlock = focusBlockPath\n        ? (Node.descendant(slateEditor, focusBlockPath) as\n            | SlateTextBlock\n            | VoidElement)\n        : undefined\n      const [_, lastNodePath] = Node.last(slateEditor, [])\n      const lastBlockPath = lastNodePath.slice(0, 1)\n      const lastNodeFocused = focusBlockPath\n        ? Path.equals(lastBlockPath, focusBlockPath)\n        : false\n      const lastBlockIsVoid = focusBlock\n        ? !slateEditor.isTextBlock(focusBlock)\n        : false\n      const collapsedSelection =\n        slateEditor.selection && SlateRange.isCollapsed(slateEditor.selection)\n\n      if (collapsedSelection && lastNodeFocused && lastBlockIsVoid) {\n        Transforms.insertNodes(\n          slateEditor,\n          slateEditor.pteCreateTextBlock({decorators: []}),\n        )\n        slateEditor.onChange()\n      }\n    },\n    [onClick, slateEditor],\n  )\n\n  const handleOnBlur: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onBlur) {\n        onBlur(event)\n      }\n      if (!event.isPropagationStopped()) {\n        editorActor.send({type: 'blur', event})\n      }\n    },\n    [editorActor, onBlur],\n  )\n\n  const handleOnBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput],\n  )\n\n  // This function will handle unexpected DOM changes inside the Editable rendering,\n  // and make sure that we can maintain a stable slateEditor.selection when that happens.\n  //\n  // For example, if this Editable is rendered inside something that might re-render\n  // this component (hidden contexts) while the user is still actively changing the\n  // contentEditable, this could interfere with the intermediate DOM selection,\n  // which again could be picked up by ReactEditor's event listeners.\n  // If that range is invalid at that point, the slate.editorSelection could be\n  // set either wrong, or invalid, to which slateEditor will throw exceptions\n  // that are impossible to recover properly from or result in a wrong selection.\n  //\n  // Also the other way around, when the ReactEditor will try to create a DOM Range\n  // from the current slateEditor.selection, it may throw unrecoverable errors\n  // if the current editor.selection is invalid according to the DOM.\n  // If this is the case, default to selecting the top of the document, if the\n  // user already had a selection.\n  const validateSelection = useCallback(() => {\n    if (!slateEditor.selection) {\n      return\n    }\n    const root = ReactEditor.findDocumentOrShadowRoot(slateEditor)\n    const {activeElement} = root\n    // Return if the editor isn't the active element\n    if (ref.current !== activeElement) {\n      return\n    }\n    const window = ReactEditor.getWindow(slateEditor)\n    const domSelection = window.getSelection()\n    if (!domSelection || domSelection.rangeCount === 0) {\n      return\n    }\n    const existingDOMRange = domSelection.getRangeAt(0)\n    try {\n      const newDOMRange = ReactEditor.toDOMRange(\n        slateEditor,\n        slateEditor.selection,\n      )\n      if (\n        newDOMRange.startOffset !== existingDOMRange.startOffset ||\n        newDOMRange.endOffset !== existingDOMRange.endOffset\n      ) {\n        debug('DOM range out of sync, validating selection')\n        // Remove all ranges temporary\n        domSelection?.removeAllRanges()\n        // Set the correct range\n        domSelection.addRange(newDOMRange)\n      }\n    } catch {\n      debug(`Could not resolve selection, selecting top document`)\n      // Deselect the editor\n      Transforms.deselect(slateEditor)\n      // Select top document if there is a top block to select\n      if (slateEditor.children.length > 0) {\n        Transforms.select(slateEditor, [0, 0])\n      }\n      slateEditor.onChange()\n    }\n  }, [ref, slateEditor])\n\n  // Observe mutations (child list and subtree) to this component's DOM,\n  // and make sure the editor selection is valid when that happens.\n  useEffect(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection)\n      mutationObserver.observe(editableElement, {\n        attributeOldValue: false,\n        attributes: false,\n        characterData: false,\n        childList: true,\n        subtree: true,\n      })\n      return () => {\n        mutationObserver.disconnect()\n      }\n    }\n    return undefined\n  }, [validateSelection, editableElement])\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyDown) {\n        props.onKeyDown(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        slateEditor.pteWithHotKeys(event)\n      }\n    },\n    [props, slateEditor],\n  )\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (_editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  const decorate: (entry: NodeEntry) => BaseRange[] = useCallback(\n    ([, path]) => {\n      if (isEqualToEmptyEditor(slateEditor.children, schemaTypes)) {\n        return [\n          {\n            anchor: {\n              path: [0, 0],\n              offset: 0,\n            },\n            focus: {\n              path: [0, 0],\n              offset: 0,\n            },\n            placeholder: true,\n          },\n        ]\n      }\n      // Editor node has a path length of 0 (should never be decorated)\n      if (path.length === 0) {\n        return []\n      }\n      const result = rangeDecorationState.filter((item) => {\n        // Special case in order to only return one decoration for collapsed ranges\n        if (SlateRange.isCollapsed(item)) {\n          // Collapsed ranges should only be decorated if they are on a block child level (length 2)\n          if (path.length !== 2) {\n            return false\n          }\n          return (\n            Path.equals(item.focus.path, path) &&\n            Path.equals(item.anchor.path, path)\n          )\n        }\n        // Include decorations that either include or intersects with this path\n        return (\n          SlateRange.intersection(item, {\n            anchor: {path, offset: 0},\n            focus: {path, offset: 0},\n          }) || SlateRange.includes(item, path)\n        )\n      })\n      if (result.length > 0) {\n        return result\n      }\n      return []\n    },\n    [slateEditor, schemaTypes, rangeDecorationState],\n  )\n\n  // Set the forwarded ref to be the Slate editable DOM element\n  // Also set the editable element in a state so that the MutationObserver\n  // is setup when this element is ready.\n  useEffect(() => {\n    ref.current = ReactEditor.toDOMNode(\n      slateEditor,\n      slateEditor,\n    ) as HTMLDivElement | null\n    setEditableElement(ref.current)\n  }, [slateEditor, ref])\n\n  if (!portableTextEditor) {\n    return null\n  }\n  return hasInvalidValue ? null : (\n    <SlateEditable\n      {...restProps}\n      autoFocus={false}\n      className={restProps.className || 'pt-editable'}\n      decorate={decorate}\n      onBlur={handleOnBlur}\n      onCopy={handleCopy}\n      onClick={handleClick}\n      onDOMBeforeInput={handleOnBeforeInput}\n      onFocus={handleOnFocus}\n      onKeyDown={handleKeyDown}\n      onPaste={handlePaste}\n      readOnly={readOnly}\n      // We have implemented our own placeholder logic with decorations.\n      // This 'renderPlaceholder' should not be used.\n      renderPlaceholder={undefined}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n    />\n  )\n})\n\nPortableTextEditable.displayName = 'ForwardRef(PortableTextEditable)'\n","import React, {useMemo} from 'react'\nimport {Slate} from 'slate-react'\nimport {Synchronizer} from './components/Synchronizer'\nimport {EditorActorContext} from './editor-actor-context'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {\n  PortableTextEditor,\n  RouteEventsToChanges,\n  type PortableTextEditorProps,\n} from './PortableTextEditor'\nimport {useEditor, type Editor, type EditorConfig} from './use-editor'\n\nconst EditorContext = React.createContext<Editor | undefined>(undefined)\n\n/**\n * @alpha\n */\nexport type EditorProviderProps = {\n  config: EditorConfig\n  children?: React.ReactNode\n}\n\n/**\n * @alpha\n */\nexport function EditorProvider(props: EditorProviderProps) {\n  const editor = useEditor(props.config)\n  const editorActor = editor._internal.editorActor\n  const slateEditor = editor._internal.slateEditor\n  const editable = editor.editable\n  const portableTextEditor = useMemo(\n    () =>\n      new PortableTextEditor({\n        editor,\n      } as unknown as PortableTextEditorProps),\n    [editor],\n  )\n\n  return (\n    <EditorContext.Provider value={editor}>\n      <RouteEventsToChanges\n        editorActor={editorActor}\n        onChange={(change) => {\n          portableTextEditor.change$.next(change)\n        }}\n      />\n      <Synchronizer\n        editorActor={editorActor}\n        getValue={editable.getValue}\n        portableTextEditor={portableTextEditor}\n        slateEditor={slateEditor.instance}\n      />\n      <EditorActorContext.Provider value={editorActor}>\n        <Slate\n          editor={slateEditor.instance}\n          initialValue={slateEditor.initialValue}\n        >\n          <PortableTextEditorContext.Provider value={portableTextEditor}>\n            <PortableTextEditorSelectionProvider editorActor={editorActor}>\n              {props.children}\n            </PortableTextEditorSelectionProvider>\n          </PortableTextEditorContext.Provider>\n        </Slate>\n      </EditorActorContext.Provider>\n    </EditorContext.Provider>\n  )\n}\n\n/**\n * @alpha\n */\nexport function useEditorContext() {\n  const editor = React.useContext(EditorContext)\n\n  if (!editor) {\n    throw new Error('No Editor set. Use EditorProvider to set one.')\n  }\n\n  return editor\n}\n","import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorEmittedEvent} from './editor-machine'\nimport {useEditorContext} from './editor-provider'\n\n/**\n * @alpha\n */\nexport function EditorEventListener(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditorContext()\n  const on = useEffectEvent(props.on)\n\n  useEffect(() => {\n    const subscription = editor.on('*', on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor, on])\n\n  return null\n}\n"],"names":["defineBehavior","behavior","selectionIsCollapsed","context","selection","anchor","path","join","focus","offset","getFocusBlock","key","isKeySegment","_key","undefined","node","value","find","block","getFocusTextBlock","focusBlock","isPortableTextTextBlock","getFocusBlockObject","getFocusChild","children","span","getFocusSpan","focusChild","isPortableTextSpan","getSelectionStartBlock","backward","getSelectionEndBlock","getPreviousBlock","previousBlock","selectionStartBlock","foundSelectionStartBlock","getNextBlock","nextBlock","selectionEndBlock","foundSelectionEndBlock","isEmptyTextBlock","onlyText","every","blockText","getTextBlockText","map","child","text","breakingBlockObject","on","guard","actions","type","placement","deletingEmptyTextBlockAfterBlockObject","focusTextBlock","selectionCollapsed","_","blockPath","deletingEmptyTextBlockBeforeBlockObject","coreBlockObjectBehaviors","decoratorAdd","event","decorator","decoratorRemove","decoratorToggle","coreDecoratorBehaviors","clearListOnBackspace","focusSpan","level","props","paths","unindentListOnBackspace","coreListBehaviors","softReturn","coreBehaviors","coreBehavior","decorators","blockObjects","lists","createLinkBehaviors","config","pasteLinkOnSelection","clipboardData","getData","url","looksLikeUrl","annotation","linkAnnotation","schema","pasteLinkAtCaret","annotations","URL","blockOffsetToSpanSelectionPoint","blockOffset","offsetLeft","selectionPoint","length","spanSelectionPointToBlockOffset","isKeyedSegment","segment","reverseSelection","getSelectionText","forwardSelection","slice","getStartPoint","getBlockTextBefore","point","startPoint","createMarkdownBehaviors","automaticBlockquoteOnSpace","caretAtTheEndOfQuote","looksLikeMarkdownQuote","test","blockquoteStyle","style","automaticHr","hrCharacter","hrObject","horizontalRuleObject","textBefore","hrBlockOffsets","blockObject","automaticHrOnPaste","hrRegExp","hrCharacters","match","textBlock","automaticHeadingOnSpace","markdownHeadingSearch","exec","headingStyle","clearStyleOnBackspace","atTheBeginningOfBLock","defaultStyle","automaticListOnSpace","looksLikeUnorderedList","unorderedListStyle","caretAtTheEndOfUnorderedList","listItem","listItemLength","looksLikeOrderedList","orderedListStyle","caretAtTheEndOfOrderedList","getPortableTextMemberSchemaTypes","portableTextType","Error","blockType","of","findBlockType","childrenField","fields","field","name","ofType","spanType","memberType","inlineObjectTypes","filter","blockObjectTypes","styles","resolveEnabledStyles","resolveEnabledDecorators","resolveEnabledListItems","portableText","inlineObjects","styleField","btField","textStyles","options","list","listField","listItems","defineSchema","definition","compileSchemaDefinition","defineType","title","icon","inlineObject","portableTextSchema","defineField","marks","startCase","SanitySchema","compile","types","get","pteSchema","rootName","debug","debugWithName","namespace","enabled","createKeyedPath","keyedBlockPath","_type","keyedChildPath","childPath","Array","isArray","createArrayedPath","editor","from","Editor","nodes","at","n","Element","isElement","isVoid","childIndex","findIndex","isEqual","concat","toPortableTextRange","range","anchorPath","focusPath","Boolean","Range","isRange","isBackward","toSlateRange","moveRangeByOperation","operation","Point","transform","equals","normalizePoint","newPath","newOffset","blockKey","childKey","blk","push","cld","normalizeSelection","newAnchor","newFocus","EMPTY_MARKDEFS","VOID_CHILD_KEY","keepObjectEquality","object","keyMap","toSlateValue","schemaTypes","rest","voidChildren","hasInlines","hasMissingStyle","hasMissingMarkDefs","markDefs","hasMissingChildren","cType","cKey","cRest","__inline","fromSlateValue","textBlockType","_cType","v","k","t","_i","_c","blockValue","isEqualToEmptyEditor","Text","isText","IS_PROCESSING_REMOTE_CHANGES","WeakMap","IS_PROCESSING_LOCAL_CHANGES","IS_DRAGGING","IS_DRAGGING_BLOCK_ELEMENT","IS_DRAGGING_ELEMENT_TARGET","IS_DRAGGING_BLOCK_TARGET_POSITION","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","DefaultObject","$","t0","JSON","stringify","t1","jsx","displayName","DefaultBlockObject","styled","div","selected","DefaultListItem","getLeftPositionForListLevel","listLevel","getContentForListLevelAndStyle","listStyle","getCounterIncrementForListLevel","getCounterResetForListLevel","getCounterContentForListLevel","DefaultListItemInner","Number","bullets","normalizedLevel","DraggableBlock","element","readOnly","blockRef","useSlateStatic","dragGhostRef","useRef","isDragOver","setIsDragOver","useState","t2","t3","t4","isInline","blockElement","setBlockElement","t5","t6","current","ReactEditor","toDOMNode","useEffect","t7","isMyDragOver","preventDefault","dataTransfer","dropEffect","set","elementRect","getBoundingClientRect","top","height","Y","pageY","loc","Math","abs","handleDragOver","t8","Symbol","for","handleDragLeave","t9","event_0","targetBlock","stopPropagation","delete","document","body","removeChild","dragPosition","targetPath","findPath","myPath","isBefore","Path","originalPath","originalPath_0","Transforms","moveNodes","to","onChange","handleDragEnd","t10","event_1","handleDrop","t11","event_2","target","HTMLElement","opacity","handleDrag","t12","event_3","setData","effectAllowed","dragGhost","cloneNode","customGhost","querySelector","setAttribute","position","left","boxSizing","appendChild","rect","x","clientX","y","clientY","width","setDragImage","handleDragStart","t13","isDraggingOverFirstBlock","t14","isDraggingOverLastBlock","dragPosition_0","isDraggingOverTop","isDraggingOverBottom","t15","t16","borderBottom","zIndex","dropIndicator","t17","Fragment","t18","t19","jsxs","EMPTY_ANNOTATIONS","inlineBlockStyle","display","attributes","renderBlock","renderChild","renderListItem","renderStyle","spellCheck","useSelected","inlineBlockObjectRef","focused","isCollapsed","useMemo","renderedBlock","className","depth","schemaType","SlateElement","elmPath","debugRenders","ObjectNode","editorElementRef","isListItem","blockStyleType","item","isListBlock","listType","renderProps","Object","defineProperty","enumerable","warn","propsOrDefaultRendered","renderedBlockFromProps","_props","PortableTextEditorContext","createContext","usePortableTextEditor","useContext","DefaultAnnotation","alert","handleClick","color","compileType","rawType","Schema","validateValue","keyGenerator","resolution","valid","validChildTypes","validBlockTypes","patches","unset","description","action","i18n","some","index","isPlainObject","String","values","includes","currentBlockTypeName","expectedTypeName","typeName","newSpan","autoResolve","setIfMissing","insert","allUsedMarks","uniq","flatten","unusedMarkDefs","def","markDefKey","m","toString","orphanedMarks","mark","dec","spanChildren","orphaned","cMrk","cIndex","newChild","childType","withRemoteChanges","fn","prev","isChangingRemotely","isChangingLocally","PATCHING","withoutPatching","isPatching","isHighSurrogate","char","charCode","charCodeAt","isLowSurrogate","IS_UDOING","IS_REDOING","withUndoing","isUndoing","setIsUndoing","withRedoing","isRedoing","setIsRedoing","debugVerbose","SAVING","REMOTE_PATCHES","UNDO_STEP_LIMIT","isSaving","state","getRemotePatches","createWithUndoRedo","editorActor","blockSchemaType","previousSnapshot","remotePatches","subscriptions","sub","snapshot","reset","forEach","patch","origin","history","undos","redos","splice","time","Date","unsubscribe","apply","op","getSnapshot","operations","step","lastOp","overwrite","shouldOverwrite","save","merge","shouldMerge","newStep","createSelectOperation","timestamp","shift","shouldClear","undo","otherPatches","transformedOperations","transformOperation","reversedOperations","Operation","inverse","reverse","withoutNormalizing","withoutSaving","normalize","err","deselect","pop","redo","transformedOperation","insertBlockIndex","items","adjustBlockPath","unsetBlockIndex","operationTargetBlock","findOperationTargetBlock","parsePatch","diffPatch","adjustOffsetBy","changedOffset","utf8Start1","diffs","diff","diffType","DIFF_INSERT","DIFF_DELETE","DIFF_EQUAL","dType","currentFocus","properties","currentAnchor","newProperties","blockIndex","CURRENT_VALUE","useSyncValue","portableTextEditor","slateEditor","previousValue","updateValueFunctionRef","updateFromCurrentValue","useCallback","currentValue","updateValueDebounced","debounce","trailing","leading","updateFunction","isProcessingLocalChanges","isProcessingRemoteChanges","isChanged","isValid","hadSelection","childrenLength","removeNodes","insertNodes","pteCreateTextBlock","select","slateValueFromProps","i","currentBlock","currentBlockIndex","oldBlock","validationValue","validation","console","send","_updateBlock","_replaceBlock","error","currentSelection","selectionFocusOnBlock","setNodes","isTextBlock","oldBlockChildrenLength","currentBlockChild","currentBlockChildIndex","oldBlockChild","isChildChanged","isTextChanged","isSpanNode","insertText","voids","FLUSH_PATCHES_THROTTLED_MS","process","env","NODE_ENV","Synchronizer","useSelector","_temp","_temp2","getValue","pendingPatches","syncValue","onFlushPendingPatches","onFlushPendingPatchesThrottled","throttle","isNormalizing","isInitialValueFromProps","s_0","s","EditorActorContext","PortableTextEditorSelectionContext","usePortableTextEditorSelection","PortableTextEditorSelectionProvider","setSelection","subscription","startTransition","defaultKeyGenerator","randomKey","getByteHexTable","table","whatwgRNG","rnds8","Uint8Array","getRandomValues","reduce","str","createOperationToPatches","textBlockName","insertTextPatch","beforeValue","textChild","isTextSpan","prevBlock","prevChild","prevText","diffMatchPatch","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","isUndefined","keys","keyName","val","indexOf","insertNodePatch","targetKey","splitNodePatch","splitBlock","targetValue","splitSpan","targetSpans","removeNodePatch","spanToRemove","mergeNodePatch","updatedBlock","newBlock","updatedSpan","removedSpan","moveNodePatch","targetChild","childToInsert","createWithEventListeners","maxBlocks","behaviorEvent","addMark","removeMark","deleteBackward","unit","deleteForward","insertBreak","insertSoftBreak","createWithMaxBlocks","rows","createWithObjectKeys","normalizeNode","isEditor","entry","Node","createApplyPatch","changed","insertPatch","unsetPatch","setPatch","findBlockAndChildFromPath","newValue","diffMatchPatchApplyPatches","allowExceedingIndices","cleanupEfficiency","makeDiff","debugState","targetBlockPath","targetChildPath","blocksToInsert","targetBlockIndex","normalizedIdx","childrenToInsert","targetChildIndex","childInsertPath","newText","nextRest","prevChildren","prevRest","c","newVal","applyAll","previousSelection","_child","stateName","findBlockFromPath","isMatch","createWithPatches","patchFunctions","previousChildren","applyPatch","bufferedPatches","handleBufferedRemotePatches","handlePatches","p","editorWasEmpty","editorIsEmpty","createWithPlaceholderBlock","nextPath","next","insertNode","createWithPortableTextBlockStyle","nodeEntry","SlateText","pteHasBlockStyle","pteToggleBlockStyle","blockStyle","MAX_LIST_LEVEL","createWithPortableTextLists","pteToggleListItem","listItemStyle","pteHasListStyle","pteUnsetListItem","pteSetListItem","newNode","pteEndList","selectedBlocks","pteIncrementBlockLevels","min","max","isPortableTextBlock","getPreviousSpan","spanPath","previousSpan","getNextSpan","nextSpan","isAfter","createWithPortableTextMarkModel","nextNode","mergeNodes","parent","orphanedAnnotations","markDefKeys","Set","newMarkDefs","markDef","has","add","previousSelectionIsCollapsed","newSelectionIsCollapsed","mode","newFocusSpan","movedToNextSpan","movedToPreviousSpan","_block","previousSpanAnnotations","nextSpanAnnotations","annotationsEnding","atTheEndOfAnnotation","annotationsStarting","atTheStartOfAnnotation","nextSpanDecorators","collapsedSelection","marksWithoutAnnotations","spanHasAnnotations","spanIsEmpty","atTheBeginningOfSpan","atTheEndOfSpan","spanAnnotations","previousSpanHasAnnotations","previousSpanHasSameAnnotations","previousSpanHasSameAnnotation","previousSpanHasSameMarks","nextSpanSharesSomeAnnotations","isExpanded","deletingFromTheEnd","deletingAllText","nextSpanHasSameAnnotation","marksWithoutAnnotationMarks","oldDefs","addDecoratorActionImplementation","split","hanging","splitTextNodes","eMark","lonelyEmptySpan","existingMarks","existingMarksWithoutDecorator","existingMark","removeDecoratorActionImplementation","isDecoratorActive","selectedTextNodes","toggleDecoratorActionImplementation","createWithPortableTextSelections","prevSelection","emitPortableTextSelection","ptRange","existing","hasChanges","createWithSchemaTypes","isPortableTextListBlock","obj","createWithUtils","pteExpandToWord","textNode","focusOffset","charsBefore","charsAfter","isEmpty","whiteSpaceBeforeIndex","newStartOffset","whiteSpaceAfterIndex","newEndOffset","isNaN","withPlugins","e","operationToPatches","withObjectKeys","withSchemaTypes","withPatches","withMaxBlocks","withPortableTextLists","withUndoRedo","withPortableTextMarkModel","withPortableTextBlockStyle","withPlaceholderBlock","withUtils","withPortableTextSelections","slateEditors","createSlateEditor","existingSlateEditor","id","unsubscriptions","instance","withReact","createEditor","initialValue","insertBlock","focusBlockPath","lastBlock","insertBlockObjectActionImplementation","createEditableAPI","blur","toggleMark","toggleList","toggleBlockStyle","isMarkActive","slateSelection","descendant","insertChild","focusChildPath","focusNode","move","distance","hasBlockStyle","hasListStyle","findByPath","slatePath","ptBlock","ptChild","findDOMNode","activeAnnotations","spans","isAnnotationActive","annotationType","addAnnotation","addAnnotationActionImplementation","removeAnnotation","getSelection","isCollapsedSelection","isExpandedSelection","getFragment","isSelectionsOverlapping","selectionA","selectionB","rangeA","rangeB","selectionMarkDefs","accMarkDefs","markKey","originalSelection","markDefPath","markDefPaths","annotationKey","unshift","existingSameTypeAnnotations","removeAnnotationActionImplementation","potentialAnnotations","selectedChild","selectedChildPath","annotationToRemove","previousSpansWithSameAnnotation","SlatePath","nextSpansWithSameAnnotation","blocks","marksWithoutAnnotation","toggleAnnotationActionImplementation","insertBreakActionImplementation","focusDecorators","focusAnnotations","start","end","edges","atTheStartOfBlock","nextBlockPath","lastFocusBlockChild","atTheEndOfBlock","splitNodes","nextNodePath","newMarkDefKeys","Map","prevNodeSpans","prevNodeSpan","newMarks","insertSoftBreakActionImplementation","insertSpanActionImplementation","behaviorActionImplementations","set block","unset block","unsetNodes","delete backward","delete forward","delete block","delete text","insert text","insert text block","effect","paste","insertData","newSelection","reselect","performAction","performDefaultAction","editorMachine","setup","events","emitted","input","assign","behaviors","assertEvent","emit","pendingEvents","enqueueActions","enqueue","defaultAction","eventBehaviors","raise","actionIntends","behaviorContext","behaviorOverwritten","eventBehavior","shouldRun","actionIntendSets","actionSet","actionIntend","createMachine","initial","states","pristine","idle","normalizing","mutation","dirty","createActor","editorConfigToMachineInput","editable","listener","_internal","useEditor","useActorRef","schemaDefinition","hasOwnProperty","PortableTextEditor","Component","change$","Subject","constructor","parseInt","componentDidUpdate","prevProps","editorRef","setEditable","render","legacyPatches","incomingPatches$","patches$","change","Slate","isObjectPath","_editor","isChildObjectEditPath","RoutePatchesObservableToEditorActor","subscribe","payload","RouteEventsToChanges","handleChange","useEffectEvent","bb5","isLoading","EMPTY_MARKS","Leaf","leaf","renderDecorator","renderAnnotation","spanRef","blockSelected","setFocused","setSelected","decoratorValues","annotationMarks","shouldTrackSelectionAndFocus","sel","setSelectedFromRange","winSelection","window","rangeCount","getRangeAt","intersectsNode","onBlur","onFocus","onSelection","content","returnedChildren","IS_MAC","navigator","userAgent","modifiers","alt","control","meta","aliases","break","cmd","command","ctl","ctrl","del","down","esc","ins","mod","opt","option","return","right","space","spacebar","up","win","windows","keyCodes","isHotkey","hotkey","compareHotkey","parseHotkey","parsedHotkey","altKey","ctrlKey","metaKey","shiftKey","hotkeySegments","replace","rawHotkeySegment","optional","endsWith","hotkeySegment","toKeyName","modifier","alias","code","TypeError","keyCode","toKeyCode","toLowerCase","toUpperCase","DEFAULT_HOTKEYS","custom","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","pteWithHotKeys","cat","nativeEvent","possibleMark","possibleCommand","isEnter","isTab","isShiftEnter","isShiftTab","isArrowDown","isArrowUp","isFirstBlock","hasAnnotationFocus","atStartOfNode","isStart","createWithInsertData","blockTypeName","spanTypeName","whitespaceOnPasteMode","unstable_whitespaceOnPasteMode","toPlainText","setFragmentData","data","originEvent","startVoid","void","endVoid","domRange","toDOMRange","contents","cloneContents","voidNode","r","cloneRange","domNode","setEndAfter","querySelectorAll","zw","isNewline","getAttribute","textContent","elm","removeAttribute","hasAttribute","ownerDocument","createElement","asHTML","innerHTML","fragment","asJSON","asPlainText","clearData","insertPortableTextData","pText","parsed","parse","slateValue","_regenerateKeys","errorDescription","insertTextOrHTMLData","html","insertedType","htmlToBlocks","normalizeBlock","textToHtml","escapeHtml","line","_insertFragment","insertFragmentData","insertFragment","entityMap","editorTypes","NewNodeNoDefs","allowedAnnotations","oldKey","newKey","nodeWithNewKeys","withSyncRangeDecorations","syncRangeDecorations","originalApply","PLACEHOLDER_STYLE","userSelect","pointerEvents","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onPaste","onCopy","onClick","rangeDecorations","renderPlaceholder","propsSelection","scrollSelectionIntoView","restProps","ref","editableElement","setEditableElement","hasInvalidValue","setHasInvalidValue","rangeDecorationState","setRangeDecorationsState","rangeDecorationsRef","useSlate","withInsertData","withHotKeys","renderElement","eProps","renderLeaf","lProps","rendered","placeholder","decoration","rangeDecoration","component","restoreSelectionFromProps","normalizedSelection","slateRange","o","newSlateRanges","rangeDecorationItem","SlateRange","onMoved","newRange","newRangeSelection","onReady","onInvalidValue","onValueChanged","syncedRangeDecorations","setSyncedRangeDecorations","teardown","handleCopy","handlePaste","onPasteResult","Promise","resolve","then","result","catch","finally","handleOnFocus","isDefaultPrevented","lastNodePath","last","lastBlockPath","lastNodeFocused","lastBlockIsVoid","handleOnBlur","isPropagationStopped","handleOnBeforeInput","validateSelection","root","findDocumentOrShadowRoot","activeElement","domSelection","getWindow","existingDOMRange","newDOMRange","startOffset","endOffset","removeAllRanges","addRange","mutationObserver","MutationObserver","observe","attributeOldValue","characterData","childList","subtree","disconnect","handleKeyDown","onKeyDown","scrollSelectionIntoViewToSlate","noop","decorate","intersection","SlateEditable","EditorContext","React","EditorProvider","useEditorContext","EditorEventListener"],"mappings":"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","x_google_ignoreList":[32,49]}